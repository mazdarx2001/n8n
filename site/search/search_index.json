{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome # This is the documentation for Doc\u00b2, the intelligent solution for digitizing Documents. Every business process starts, contains or ends with a document. Regardless of whether in paper form or already as a file. This is called unstructured data. Although the information is on or in the document, it cannot be automatically integrated into the work processes, as it is simply not recognized by all software. What is Doc\u00b2? # DOC\u00b2 is the latest software and solution for document capture that was developed by Fellow Consulting AG. It is a completely cloud-based solution that uses Artificial Intelligence and Machine Learning to precisely identify, classify, analyze and read your documents. No matter if paper or file. DOC\u00b2 learns independently, the level of experience increases with each document. DOC\u00b2 uses swarm intelligence for this. The Advantages of DOC\u00b2 at a glance: Recognizes the required data \u2013 even handwritten information and information in tables reliably and is self-learning, even through corrections by the user With swarm intelligence, you benefit continuously from the experiences of other customers Improves the accuracy and quality of the recognized data Enables an automated process without ongoing corrections and interventions Simple intuitive interface No IT resources / specialists required Ensures a robust and consistent work process No sensitive data is stored or shared Saves time in the digital inbox Reduces errors caused by manual processing How do you use DOC\u00b2: # Scanning and Recognition of all types of documents (Invoices, Contracts, Forms, Medical Prescriptions etc.) Reliable extraction of the data in the document and integration and further processing in the ERP, RPA or CRM system) Validation of the extracted data and verification against other systems from internal and public sources Integration into your system landscape (e.g. ERP System, Document Management, Workflow System etc) Why DOC\u00b2 is just right for you # Many companies have recognized that processing incoming invoices, for example, can be very time-consuming. They are trying to increase productivity and optimize the purchase-to-pay process by introducing products for the \u201cdigitization\u201d of invoices. In addition, DOC\u00b2 uses swarm intelligence. What does that mean? You benefit from the experiences of other customers and their \u201clearning curve\u201d without sharing sensitive data. With the cloud-based rule engine, we ensure continuous improvement of the application. You don\u2019t need any developers or data scientists, because the system learns from the input of the user and the process runs without interruptions. With the help of deep learning algorithms, not only simple header data of a document can be recorded, but also complicated structures such as tables. Of course, not only invoices are processed, but all types of documents. Regardless of whether it is waybills, membership applications, medical prescriptions and many more.","title":"Welcome"},{"location":"#welcome","text":"This is the documentation for Doc\u00b2, the intelligent solution for digitizing Documents. Every business process starts, contains or ends with a document. Regardless of whether in paper form or already as a file. This is called unstructured data. Although the information is on or in the document, it cannot be automatically integrated into the work processes, as it is simply not recognized by all software.","title":"Welcome"},{"location":"#what-is-doc2","text":"DOC\u00b2 is the latest software and solution for document capture that was developed by Fellow Consulting AG. It is a completely cloud-based solution that uses Artificial Intelligence and Machine Learning to precisely identify, classify, analyze and read your documents. No matter if paper or file. DOC\u00b2 learns independently, the level of experience increases with each document. DOC\u00b2 uses swarm intelligence for this. The Advantages of DOC\u00b2 at a glance: Recognizes the required data \u2013 even handwritten information and information in tables reliably and is self-learning, even through corrections by the user With swarm intelligence, you benefit continuously from the experiences of other customers Improves the accuracy and quality of the recognized data Enables an automated process without ongoing corrections and interventions Simple intuitive interface No IT resources / specialists required Ensures a robust and consistent work process No sensitive data is stored or shared Saves time in the digital inbox Reduces errors caused by manual processing","title":"What is Doc\u00b2?"},{"location":"#how-do-you-use-doc2","text":"Scanning and Recognition of all types of documents (Invoices, Contracts, Forms, Medical Prescriptions etc.) Reliable extraction of the data in the document and integration and further processing in the ERP, RPA or CRM system) Validation of the extracted data and verification against other systems from internal and public sources Integration into your system landscape (e.g. ERP System, Document Management, Workflow System etc)","title":"How do you use DOC\u00b2:"},{"location":"#why-doc2-is-just-right-for-you","text":"Many companies have recognized that processing incoming invoices, for example, can be very time-consuming. They are trying to increase productivity and optimize the purchase-to-pay process by introducing products for the \u201cdigitization\u201d of invoices. In addition, DOC\u00b2 uses swarm intelligence. What does that mean? You benefit from the experiences of other customers and their \u201clearning curve\u201d without sharing sensitive data. With the cloud-based rule engine, we ensure continuous improvement of the application. You don\u2019t need any developers or data scientists, because the system learns from the input of the user and the process runs without interruptions. With the help of deep learning algorithms, not only simple header data of a document can be recorded, but also complicated structures such as tables. Of course, not only invoices are processed, but all types of documents. Regardless of whether it is waybills, membership applications, medical prescriptions and many more.","title":"Why DOC\u00b2 is just right for you"},{"location":"editor-ui/","text":"Editor UI # The Editor UI is the web interface used to create workflows . It is accessed through a web browser at a designated website address. From the Editor UI, you can access all your workflows and credentials, as well as the n8n documentation and forum. The Editor UI sidebar menu contains the following sections and operations: Admin Panel # Available only for n8n.cloud, navigate to the Dashboard of your n8n.cloud instance. Here you can view your executions and workflows counts, manage and upgrade your instance, and access support. Workflows # This section includes the operations for creating and editing workflows. New : Create a new workflow Open : Open the list of saved workflows Save : Save changes to the current workflow Save As : Save the current workflow under a new name Rename : Rename the current workflow Delete : Delete the current workflow Download : Download the current workflow as a JSON file Import from URL : Import a workflow from a URL Import from File : Import a workflow from a local file Settings : View and change the settings of the current workflow Credentials # This section includes the operations for creating credentials . Credentials are private pieces of information issued by apps/services to authenticate you as a user and allow you to connect and share information between the app/service and the n8n node. New : Create new credentials Open : Open the list of saved credentials Executions # This section includes information about your workflow executions, each completed run of a workflow. You can enabling logging of your failed, successful, and/or manually selected workflows using the Workflow > Settings page. Help # This section includes resources for using n8n and interacting with the community. * Documentation : Open the n8n documentation page * Forum : Open the n8n community forum * Workflows : Open the n8n public workflows page * About n8n : View information about n8n (version, source code, license)","title":"Editor UI"},{"location":"editor-ui/#editor-ui","text":"The Editor UI is the web interface used to create workflows . It is accessed through a web browser at a designated website address. From the Editor UI, you can access all your workflows and credentials, as well as the n8n documentation and forum. The Editor UI sidebar menu contains the following sections and operations:","title":"Editor UI"},{"location":"editor-ui/#admin-panel","text":"Available only for n8n.cloud, navigate to the Dashboard of your n8n.cloud instance. Here you can view your executions and workflows counts, manage and upgrade your instance, and access support.","title":"Admin Panel"},{"location":"editor-ui/#workflows","text":"This section includes the operations for creating and editing workflows. New : Create a new workflow Open : Open the list of saved workflows Save : Save changes to the current workflow Save As : Save the current workflow under a new name Rename : Rename the current workflow Delete : Delete the current workflow Download : Download the current workflow as a JSON file Import from URL : Import a workflow from a URL Import from File : Import a workflow from a local file Settings : View and change the settings of the current workflow","title":"Workflows"},{"location":"editor-ui/#credentials","text":"This section includes the operations for creating credentials . Credentials are private pieces of information issued by apps/services to authenticate you as a user and allow you to connect and share information between the app/service and the n8n node. New : Create new credentials Open : Open the list of saved credentials","title":"Credentials"},{"location":"editor-ui/#executions","text":"This section includes information about your workflow executions, each completed run of a workflow. You can enabling logging of your failed, successful, and/or manually selected workflows using the Workflow > Settings page.","title":"Executions"},{"location":"editor-ui/#help","text":"This section includes resources for using n8n and interacting with the community. * Documentation : Open the n8n documentation page * Forum : Open the n8n community forum * Workflows : Open the n8n public workflows page * About n8n : View information about n8n (version, source code, license)","title":"Help"},{"location":"quickstart/","text":"Try it out # This page will help you get up and running with n8n, taking you from installation to building and executing your first workflow. To ensure you can follow along with the steps below, be sure to first: Download and install Docker Desktop Linux users, you'll have to install Docker Engine and Docker Compose individually Register for a Discord account n8n desktop app Install our desktop app if you want to start faster and skip a technical setup. Install n8n # Now that your have Docker installed, let's start by pulling the latest n8n image. Open your Terminal window and run: 1 docker pull n8nio/n8n Open the Docker Desktop application and select Images from the left-hand pane. The n8n image downloaded above should be visible here: Click Run and a modal window appears with some Optional Settings : Container Name : Enter a name for your n8n container. If left blank Docker will generate a random name for you. Ports Local Host : Enter 5678 . This is the port on your local machine where n8n will be available once running. Container Port : The default container port for n8n. Cannot be edited. Volumes : Host Path : Select a local directory that will be available to your n8n Docker application. Here we use a folder n8n located on the /Desktop . Container Path : Provide the path of that directory where it will be accessible from inside the Docker container. Here we use /n8n . Click Run to start your n8n container. You can now access n8n by navigating your browser to localhost:5678 . Build your first workflow # For your first workflow, let's build something to take one tedious task off you plate: cleaning up a cluttered Gmail inbox. Keep in mind You can find this complete workflow here courtesy of n8n's own Tephlon . Open the Nodes Panel by click the orange + sign, then search and find the Gmail node . Click on it to add it to your canvas: When you add the Gmail node to the canvas, its configuration modal opens automatically: The first thing you need to do is configure your credentials so that n8n can communicate with your Gmail account. You'll notice that the OAuth2 method is selected by default for Authentication , so click the Credentials dropdown and select Create New . The new credentials modal appears: Copy the OAuth Callback URL from this modal, then open a new browser tab and navigate to your Google Cloud Console dashboard. From your Google Cloud Console, perform the following: Navigate to APIs & Services > Credentials . Click + CREATE CREDENTIALS and select OAuth client ID . Select Web Application from the Application type dropdown. Click +Add URI and enter the OAuth Callback URL you copied from n8n. Click Create to save your new credentials. A corresponding Client ID and Client Secret are now available. Copy these to use in n8n. Navigate to APIs & Services > Library , search for Gmail and select Enable . Keep in mind We go through a quick credential flow for Google in this example, but you can learn all about n8n credentials for Google services here . Return to your n8n tab and in the new credentials modal enter the Client ID and Client Secret obtained from your Google Cloud Console. A Sign in with Google button appears. Click the Sign in with Google button. A modal appears asking you to select your Google account and Allow access. Click Save to complete your Gmail credentials setup. Configure your Gmail node as follows: Resource : Select Message as we will be looking through all messages to decide which we can clean up. Operation : Select Get All since we want to fetch all messages, not any particular one. Return All : Leave this enabled so that the node fetches all you messages, no matter how full your inbox is. Add Field > Format : Select IDs so that we fetch only the message ID instead of its entire contents. Add Field > Query : This is where we use Gmail Search Operators to find the messages we want to delete. Here we use -in:chats unsubscribe to identify all messages not in chats that contain the word \"unsubscribe\". Next, let's add a Split in Batches node after the Gmail node. This will break up the cleanup operation into chucks so avoid hitting any API rate limits. Let's configure it to use batches of 100 messages at a time: Now let's add another Gmail node to perform the delete operation: Resource : Select Message as we will be deleting any message passed to this node. Operation : Select Delete . Message ID : Use the gears button to enter an expression . This enables the ID of each message from the first Gmail node to be dynamically passed to this node. From the Edit Expression window, use the menu to find and select the message ID in the Output Data : Lastly, let's ensure your nodes are properly connected in the workflow. The final result should look like this: You've build your fist automation workflow and cleaned up a cluttered inbox in the process. Don't forget you can edit the query to find more messages to cleanup, and also set this workflow to run automatically using the Cron node . What's next? # Do you enjoy automating workflows? Here's what you can do next: See all n8n nodes and try out new workflows. Check out the hosting section to learn more about options for installing and running n8n. Read our blog and discover what others are doing with n8n.","title":"Try it out"},{"location":"quickstart/#try-it-out","text":"This page will help you get up and running with n8n, taking you from installation to building and executing your first workflow. To ensure you can follow along with the steps below, be sure to first: Download and install Docker Desktop Linux users, you'll have to install Docker Engine and Docker Compose individually Register for a Discord account n8n desktop app Install our desktop app if you want to start faster and skip a technical setup.","title":"Try it out"},{"location":"quickstart/#install-n8n","text":"Now that your have Docker installed, let's start by pulling the latest n8n image. Open your Terminal window and run: 1 docker pull n8nio/n8n Open the Docker Desktop application and select Images from the left-hand pane. The n8n image downloaded above should be visible here: Click Run and a modal window appears with some Optional Settings : Container Name : Enter a name for your n8n container. If left blank Docker will generate a random name for you. Ports Local Host : Enter 5678 . This is the port on your local machine where n8n will be available once running. Container Port : The default container port for n8n. Cannot be edited. Volumes : Host Path : Select a local directory that will be available to your n8n Docker application. Here we use a folder n8n located on the /Desktop . Container Path : Provide the path of that directory where it will be accessible from inside the Docker container. Here we use /n8n . Click Run to start your n8n container. You can now access n8n by navigating your browser to localhost:5678 .","title":"Install n8n"},{"location":"quickstart/#build-your-first-workflow","text":"For your first workflow, let's build something to take one tedious task off you plate: cleaning up a cluttered Gmail inbox. Keep in mind You can find this complete workflow here courtesy of n8n's own Tephlon . Open the Nodes Panel by click the orange + sign, then search and find the Gmail node . Click on it to add it to your canvas: When you add the Gmail node to the canvas, its configuration modal opens automatically: The first thing you need to do is configure your credentials so that n8n can communicate with your Gmail account. You'll notice that the OAuth2 method is selected by default for Authentication , so click the Credentials dropdown and select Create New . The new credentials modal appears: Copy the OAuth Callback URL from this modal, then open a new browser tab and navigate to your Google Cloud Console dashboard. From your Google Cloud Console, perform the following: Navigate to APIs & Services > Credentials . Click + CREATE CREDENTIALS and select OAuth client ID . Select Web Application from the Application type dropdown. Click +Add URI and enter the OAuth Callback URL you copied from n8n. Click Create to save your new credentials. A corresponding Client ID and Client Secret are now available. Copy these to use in n8n. Navigate to APIs & Services > Library , search for Gmail and select Enable . Keep in mind We go through a quick credential flow for Google in this example, but you can learn all about n8n credentials for Google services here . Return to your n8n tab and in the new credentials modal enter the Client ID and Client Secret obtained from your Google Cloud Console. A Sign in with Google button appears. Click the Sign in with Google button. A modal appears asking you to select your Google account and Allow access. Click Save to complete your Gmail credentials setup. Configure your Gmail node as follows: Resource : Select Message as we will be looking through all messages to decide which we can clean up. Operation : Select Get All since we want to fetch all messages, not any particular one. Return All : Leave this enabled so that the node fetches all you messages, no matter how full your inbox is. Add Field > Format : Select IDs so that we fetch only the message ID instead of its entire contents. Add Field > Query : This is where we use Gmail Search Operators to find the messages we want to delete. Here we use -in:chats unsubscribe to identify all messages not in chats that contain the word \"unsubscribe\". Next, let's add a Split in Batches node after the Gmail node. This will break up the cleanup operation into chucks so avoid hitting any API rate limits. Let's configure it to use batches of 100 messages at a time: Now let's add another Gmail node to perform the delete operation: Resource : Select Message as we will be deleting any message passed to this node. Operation : Select Delete . Message ID : Use the gears button to enter an expression . This enables the ID of each message from the first Gmail node to be dynamically passed to this node. From the Edit Expression window, use the menu to find and select the message ID in the Output Data : Lastly, let's ensure your nodes are properly connected in the workflow. The final result should look like this: You've build your fist automation workflow and cleaned up a cluttered inbox in the process. Don't forget you can edit the query to find more messages to cleanup, and also set this workflow to run automatically using the Cron node .","title":"Build your first workflow"},{"location":"quickstart/#whats-next","text":"Do you enjoy automating workflows? Here's what you can do next: See all n8n nodes and try out new workflows. Check out the hosting section to learn more about options for installing and running n8n. Read our blog and discover what others are doing with n8n.","title":"What's next?"},{"location":"code-examples/","text":"Overview # There are two places in n8n where you need to use code: In expressions , for example programmatically setting the value of a field based on incoming data. In the function node , when you need to add JavaScript to your workflow. This section covers: Expressions: Introduction to expressions in n8n . Built in methods and variables . Supported libraries: Luxon (for data and time) and JMESPath (for working with JSON). JavaScript: Introduction to JavaScript in n8n . Built in methods and variables . Checking incoming data . Get the number of items returned by the last node .","title":"Overview"},{"location":"code-examples/#overview","text":"There are two places in n8n where you need to use code: In expressions , for example programmatically setting the value of a field based on incoming data. In the function node , when you need to add JavaScript to your workflow. This section covers: Expressions: Introduction to expressions in n8n . Built in methods and variables . Supported libraries: Luxon (for data and time) and JMESPath (for working with JSON). JavaScript: Introduction to JavaScript in n8n . Built in methods and variables . Checking incoming data . Get the number of items returned by the last node .","title":"Overview"},{"location":"code-examples/expressions/","text":"Expressions # Expressions allow you to set node parameters dynamically based on data from: Previous nodes The workflow Your n8n environment n8n uses the riot-tmpl templating language, and extends it with custom methods and variables. You can execute JavaScript within an expression. n8n supports two libraries that make common tasks easier: Luxon , for working with data and time. JMESPath , for querying JSON. Writing expressions # To use an expression to set a parameter value: Select Parameter options for the parameter where you want to use an expression. Select Add expression . Write your expression in the expression editor. You can browse some of the available data in the Variable selector . All expressions have the format {{ your expression here }} . Example: get data from webhook body # Consider the following scenario: you have a webhook trigger that receives data through the webhook body. You want to extract some of that data for use in the workflow. Your webhook data looks similar to this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 [ { \"headers\" : { \"host\" : \"n8n.instance.address\" , ... }, \"params\" : {}, \"query\" : {}, \"body\" : { \"name\" : \"Jim\" , \"age\" : 30 , \"city\" : \"New York\" } } ] In the next node in the workflow, you want to get just the value of city . You can use the following expression: 1 {{ $json . body . city }} This expression: Accesses the incoming JSON-formatted data using n8n's custom $json variable. Finds the value of city (in this example, \"New York\"). Note that this example uses JMESPath syntax to query the JSON data. You can also write this expression as {{$json['body']['city']}} . Example: writing longer JavaScript # An expression contains one line of JavaScript. This means you can'd do things like variable assignments or multiple standalone operations. To understand the limitations of JavaScript in expressions, and start thinking about workarounds, look at the following two pieces of code. Both code examples use the Luxon date and time library to find the time between two dates in months, and encloses the code in handlebar brackets, like an expression. However, the first example isn't a valid n8n expression: 1 2 3 4 5 6 7 8 9 10 11 // This example is split over multiple lines for readability // It is still invalid when formatted as a single line {{ function example () { let end = DateTime . fromISO ( '2017-03-13' ); let start = DateTime . fromISO ( '2017-02-13' ); let diffInMonths = end . diff ( start , 'months' ); return diffInMonths . toObject (); } example (); }} While the second example is valid: 1 {{ DateTime . fromISO ( '2017-03-13' ). diff ( DateTime . fromISO ( '2017-02-13' ), 'months' ). toObject ()}}","title":"Overview"},{"location":"code-examples/expressions/#expressions","text":"Expressions allow you to set node parameters dynamically based on data from: Previous nodes The workflow Your n8n environment n8n uses the riot-tmpl templating language, and extends it with custom methods and variables. You can execute JavaScript within an expression. n8n supports two libraries that make common tasks easier: Luxon , for working with data and time. JMESPath , for querying JSON.","title":"Expressions"},{"location":"code-examples/expressions/#writing-expressions","text":"To use an expression to set a parameter value: Select Parameter options for the parameter where you want to use an expression. Select Add expression . Write your expression in the expression editor. You can browse some of the available data in the Variable selector . All expressions have the format {{ your expression here }} .","title":"Writing expressions"},{"location":"code-examples/expressions/#example-get-data-from-webhook-body","text":"Consider the following scenario: you have a webhook trigger that receives data through the webhook body. You want to extract some of that data for use in the workflow. Your webhook data looks similar to this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 [ { \"headers\" : { \"host\" : \"n8n.instance.address\" , ... }, \"params\" : {}, \"query\" : {}, \"body\" : { \"name\" : \"Jim\" , \"age\" : 30 , \"city\" : \"New York\" } } ] In the next node in the workflow, you want to get just the value of city . You can use the following expression: 1 {{ $json . body . city }} This expression: Accesses the incoming JSON-formatted data using n8n's custom $json variable. Finds the value of city (in this example, \"New York\"). Note that this example uses JMESPath syntax to query the JSON data. You can also write this expression as {{$json['body']['city']}} .","title":"Example: get data from webhook body"},{"location":"code-examples/expressions/#example-writing-longer-javascript","text":"An expression contains one line of JavaScript. This means you can'd do things like variable assignments or multiple standalone operations. To understand the limitations of JavaScript in expressions, and start thinking about workarounds, look at the following two pieces of code. Both code examples use the Luxon date and time library to find the time between two dates in months, and encloses the code in handlebar brackets, like an expression. However, the first example isn't a valid n8n expression: 1 2 3 4 5 6 7 8 9 10 11 // This example is split over multiple lines for readability // It is still invalid when formatted as a single line {{ function example () { let end = DateTime . fromISO ( '2017-03-13' ); let start = DateTime . fromISO ( '2017-02-13' ); let diffInMonths = end . diff ( start , 'months' ); return diffInMonths . toObject (); } example (); }} While the second example is valid: 1 {{ DateTime . fromISO ( '2017-03-13' ). diff ( DateTime . fromISO ( '2017-02-13' ), 'months' ). toObject ()}}","title":"Example: writing longer JavaScript"},{"location":"code-examples/expressions/jmespath/","text":"Query JSON with JMESPath # JMESPath is a query language for JSON, allowing you to extract and transform elements from a JSON document. For full details of how to use JMESPath, refer to the JMESPath documentation . The $jmespath() method # n8n provides a custom method, $jmespath() , for use in expressions. It allows you to perform a search on a JSON object using the JMESPath query language. The basic syntax is: 1 $jmespath ( object , searchString ) To help understand what the method does, here is the equivalent JavaScript. Note that you must use the custom method, not the JavaScript approach, because expressions must be single-line: 1 2 var jmespath = require ( 'jmespath' ); jmespath . search ( object , searchString ); object is a JSON object, such as the output of a previous node. searchString is an expression written in the JMESPath query language. The JMESPath Specification provides a list of supported expressions, while their Tutorial and Examples provide interactive examples. Search parameter order The examples in the JMESPath Specification follow the pattern search(searchString, object) . The JMESPath JavaScript library , which n8n uses, supports search(object, searchString) instead. This means that when using examples from the JMESPath documentation, you may need to change the order of the search function parameters. Common tasks # This section provides examples for some common operations. Many more examples, and detailed guidance, are available in JMESPath's own documentation . A shorter way to write basic operations # JMESPath provides a shorter and more readable way to write basic JSON queries. Consider the following scenario: you have a webhook trigger that receives data through the webhook body. You want to extract some of that data for use in the workflow. Your webhook data looks similar to this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 [ { \"headers\" : { \"host\" : \"n8n.instance.address\" , ... }, \"params\" : {}, \"query\" : {}, \"body\" : { \"name\" : \"Jim\" , \"age\" : 30 , \"city\" : \"New York\" , \"dogs\" : [ \"Fido\" , \"Spot\" ] } } ] Extract the city: 1 2 3 4 // With JMESPath {{ $json . body . city }} // Without JMESPath {{ $json [ 'body' ][ 'city' ]}} Get the first dog in dogs[] : 1 2 3 4 // With JMESPath {{ $json . body . dogs [ 0 ]}} // Without JMESPath {{ $json [ 'body' ][ 'dogs' ][ 0 ]}} Apply a JMESPath expression to a collection of elements with projections # From the JMESPath projections documentation : Projections are one of the key features of JMESPath. It allows you to apply an expression to a collection of elements. There are five kinds of projections: List Projections Slice Projections Object Projections Flatten Projections Filter Projections The following example shows basic usage of list, slice, and object projections. Refer to the JMESPath projections documentation for detailed explanations of each projection type, and more examples. Given this JSON from a webhook node: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 [ { \"headers\" : { \"host\" : \"n8n.instance.address\" , ... }, \"params\" : {}, \"query\" : {}, \"body\" : { \"people\" : [ { \"first\" : \"James\" , \"last\" : \"Green\" }, { \"first\" : \"Jacob\" , \"last\" : \"Jones\" }, { \"first\" : \"Jayden\" , \"last\" : \"Smith\" } ], \"dogs\" : { \"Fido\" : { \"color\" : \"brown\" , \"age\" : 7 }, \"Spot\" : { \"color\" : \"black and white\" , \"age\" : 5 } } } } ] Retrieve a list of all the people's first names: 1 2 {{ $jmespath ( $json . body . people , \"[*].first\" )}} // Returns [\"James\", \"Jacob\", \"Jayden\"] Get a slice of the first names: 1 2 {{ $jmespath ( $json . body . people , \"[:2].first\" )}} // Returns [\"James\", \"Jacob\"] Get a list of the dogs' ages using object projections : 1 2 {{ $jmespath ( $json . body . dogs , \"*.age\" )}} // Returns [7,5] Select multiple elements and create a new list or object # Multiselect allows you to select elements from a JSON object and combine them into a new list or object. Given this JSON from a webhook node: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 [ { \"headers\" : { \"host\" : \"n8n.instance.address\" , ... }, \"params\" : {}, \"query\" : {}, \"body\" : { \"people\" : [ { \"first\" : \"James\" , \"last\" : \"Green\" }, { \"first\" : \"Jacob\" , \"last\" : \"Jones\" }, { \"first\" : \"Jayden\" , \"last\" : \"Smith\" } ], \"dogs\" : { \"Fido\" : { \"color\" : \"brown\" , \"age\" : 7 }, \"Spot\" : { \"color\" : \"black and white\" , \"age\" : 5 } } } } ] Use multiselect list to get the first and last names and create new lists containing both names: 1 2 {{ $jmespath ( $json . body . people , \"[].[first, last]\" )}} // Returns [[\"James\",\"Green\"],[\"Jacob\",\"Jones\"],[\"Jayden\",\"Smith\"]]","title":"JSON with JMESPath"},{"location":"code-examples/expressions/jmespath/#query-json-with-jmespath","text":"JMESPath is a query language for JSON, allowing you to extract and transform elements from a JSON document. For full details of how to use JMESPath, refer to the JMESPath documentation .","title":"Query JSON with JMESPath"},{"location":"code-examples/expressions/jmespath/#the-jmespath-method","text":"n8n provides a custom method, $jmespath() , for use in expressions. It allows you to perform a search on a JSON object using the JMESPath query language. The basic syntax is: 1 $jmespath ( object , searchString ) To help understand what the method does, here is the equivalent JavaScript. Note that you must use the custom method, not the JavaScript approach, because expressions must be single-line: 1 2 var jmespath = require ( 'jmespath' ); jmespath . search ( object , searchString ); object is a JSON object, such as the output of a previous node. searchString is an expression written in the JMESPath query language. The JMESPath Specification provides a list of supported expressions, while their Tutorial and Examples provide interactive examples. Search parameter order The examples in the JMESPath Specification follow the pattern search(searchString, object) . The JMESPath JavaScript library , which n8n uses, supports search(object, searchString) instead. This means that when using examples from the JMESPath documentation, you may need to change the order of the search function parameters.","title":"The $jmespath() method"},{"location":"code-examples/expressions/jmespath/#common-tasks","text":"This section provides examples for some common operations. Many more examples, and detailed guidance, are available in JMESPath's own documentation .","title":"Common tasks"},{"location":"code-examples/expressions/jmespath/#a-shorter-way-to-write-basic-operations","text":"JMESPath provides a shorter and more readable way to write basic JSON queries. Consider the following scenario: you have a webhook trigger that receives data through the webhook body. You want to extract some of that data for use in the workflow. Your webhook data looks similar to this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 [ { \"headers\" : { \"host\" : \"n8n.instance.address\" , ... }, \"params\" : {}, \"query\" : {}, \"body\" : { \"name\" : \"Jim\" , \"age\" : 30 , \"city\" : \"New York\" , \"dogs\" : [ \"Fido\" , \"Spot\" ] } } ] Extract the city: 1 2 3 4 // With JMESPath {{ $json . body . city }} // Without JMESPath {{ $json [ 'body' ][ 'city' ]}} Get the first dog in dogs[] : 1 2 3 4 // With JMESPath {{ $json . body . dogs [ 0 ]}} // Without JMESPath {{ $json [ 'body' ][ 'dogs' ][ 0 ]}}","title":"A shorter way to write basic operations"},{"location":"code-examples/expressions/jmespath/#apply-a-jmespath-expression-to-a-collection-of-elements-with-projections","text":"From the JMESPath projections documentation : Projections are one of the key features of JMESPath. It allows you to apply an expression to a collection of elements. There are five kinds of projections: List Projections Slice Projections Object Projections Flatten Projections Filter Projections The following example shows basic usage of list, slice, and object projections. Refer to the JMESPath projections documentation for detailed explanations of each projection type, and more examples. Given this JSON from a webhook node: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 [ { \"headers\" : { \"host\" : \"n8n.instance.address\" , ... }, \"params\" : {}, \"query\" : {}, \"body\" : { \"people\" : [ { \"first\" : \"James\" , \"last\" : \"Green\" }, { \"first\" : \"Jacob\" , \"last\" : \"Jones\" }, { \"first\" : \"Jayden\" , \"last\" : \"Smith\" } ], \"dogs\" : { \"Fido\" : { \"color\" : \"brown\" , \"age\" : 7 }, \"Spot\" : { \"color\" : \"black and white\" , \"age\" : 5 } } } } ] Retrieve a list of all the people's first names: 1 2 {{ $jmespath ( $json . body . people , \"[*].first\" )}} // Returns [\"James\", \"Jacob\", \"Jayden\"] Get a slice of the first names: 1 2 {{ $jmespath ( $json . body . people , \"[:2].first\" )}} // Returns [\"James\", \"Jacob\"] Get a list of the dogs' ages using object projections : 1 2 {{ $jmespath ( $json . body . dogs , \"*.age\" )}} // Returns [7,5]","title":"Apply a JMESPath expression to a collection of elements with projections"},{"location":"code-examples/expressions/jmespath/#select-multiple-elements-and-create-a-new-list-or-object","text":"Multiselect allows you to select elements from a JSON object and combine them into a new list or object. Given this JSON from a webhook node: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 [ { \"headers\" : { \"host\" : \"n8n.instance.address\" , ... }, \"params\" : {}, \"query\" : {}, \"body\" : { \"people\" : [ { \"first\" : \"James\" , \"last\" : \"Green\" }, { \"first\" : \"Jacob\" , \"last\" : \"Jones\" }, { \"first\" : \"Jayden\" , \"last\" : \"Smith\" } ], \"dogs\" : { \"Fido\" : { \"color\" : \"brown\" , \"age\" : 7 }, \"Spot\" : { \"color\" : \"black and white\" , \"age\" : 5 } } } } ] Use multiselect list to get the first and last names and create new lists containing both names: 1 2 {{ $jmespath ( $json . body . people , \"[].[first, last]\" )}} // Returns [[\"James\",\"Green\"],[\"Jacob\",\"Jones\"],[\"Jayden\",\"Smith\"]]","title":"Select multiple elements and create a new list or object"},{"location":"code-examples/expressions/luxon/","text":"Date and time with Luxon # Luxon is a JavaScript library that makes it easier to work with date and time. For full details of how to use Luxon, refer to Luxon's documentation . Variables # n8n uses Luxon to provide two custom variables: $now : a Luxon object containing the current timestamp. Equivalent to DateTime.now() . $today : a Luxon object containing the current timestamp, rounded down to the day. Equivalent to DateTime.now().set({ hour: 0, minute: 0, second: 0, millisecond: 0 }) . Note that these variables can return different time formats when cast as a string. This is the same behavior as Luxon's DateTime.now() . 1 2 3 4 5 6 7 8 9 {{ $now }} // Returns [Object: \"<ISO formatted timestamp>\"] // For example [Object: \"2022-03-09T14:00:25.058+00:00\"] {{ $now . toString ()}} // Returns the ISO formatted timestamp // For example 2022-03-09T14:02:37.065+00:00 {{ \"Today's date is \" + $now }} // Returns \"Today's date is <unix timestamp>\" // For example \"Today's date is 1646834498755\" Setting the timezone in n8n # Luxon uses the n8n timezone. This value is either: Default: America/New York A custom timezone for your n8n instance, set using the GENERIC_TIMEZONE environment variable. A custome timezone for an individual workflow, configured in workflow settings. Common tasks # This section provides examples for some common operations. Many more examples, and detailed guidance, are available in Luxon's own documentation . Get n days from today # Get a number of days before or after today. For example, you want to set a field to always show the date seven days before the current date. In the expressions editor, enter: 1 {{ $today . minus ({ days : 7 })}} On the 23rd June 2019, this returns [Object: \"2019-06-16T00:00:00.000+00:00\"] . This example uses n8n's custom variable $today for convenience. It is the equivalent of DateTime.now().set({ hour: 0, minute: 0, second: 0, millisecond: 0 }).minus({days: 7}) . For more detailed information and examples, refer to: Luxon's guide to math Their API documentation on DateTime plus and DateTime minus Create human-readable dates # In Get n days from today , the example gets the date seven days before the current date, and returns it as [Object: \"yyyy-mm-dd-T00:00:00.000+00:00\"] . To make this more readable, you can use Luxon's formatting functions. For example, you want the field containing the date to be formatted as DD/MM/YYYY. This expression gets the date seven days before today, and converts it to the DD/MM/YYYY format. So on the 23rd June 2019, it returns 23/06/2019: 1 {{ $today . minus ({ days : 7 }). toLocaleString ()}} You can alter the format. For example: 1 {{ $today . minus ({ days : 7 }). toLocaleString ({ month : 'long' , day : 'numeric' , year : 'numeric' })}} On 23rd June 2019, this returns \"16 June 2019\". Refer to Luxon's guide on toLocaleString (strings for humans) for more information. Convert date string to Luxon # You can convert date strings and other date formats to a Luxon DateTime object. You can convert from standard formats and from arbitrary strings. If you have a date in a supported standard technical format: Luxon provides functions to handle the conversion. Refer to Luxon's guide to Parsing technical formats for details. If you have a date as a string that does not use a standard format: Use Luxon's Ad-hoc parsing . To do this, use the fromFormat() function, providing the string and a set of tokens that describe the format. For example, you have n8n's founding date, 23rd June 2019, formatted as '23-06-2019'. You want to turn this into a Luxon object: 1 {{ DateTime . fromFormat ( \"23-06-2019\" , \"dd-MM-yyyy\" )}} When using ad-hoc parsing, note Luxon's warning about Limitations . If you see unexpected results, try their Debugging guide. Get the time between two dates # To get the time between two dates, use Luxon's diffs feature. This subtracts one date from another and returns a duration. For example, get the number of months between two dates: 1 {{ DateTime . fromISO ( '201-06-23' ). diff ( DateTime . fromISO ( '2019-05-23' ), 'months' ). toObject ()}} This returns [Object: {\"months\":1}] . Refer to Luxon's Diffs for more information. A longer example: how many days to Christmas? # This example brings together several Luxon features, uses JMESPath, and does some basic string manipulation. The scenario: you want a countdown to 25th December. Every day, it should tell you the number of days remaining to Christmas. You don't want to update it for next year - it needs to seamelessly work for every year. 1 {{ \"There are \" + $today . diff ( DateTime . fromISO ( $today . year + '-12-25' ), 'days' ). toObject (). days . toString (). substring ( 1 ) + \" days to Christmas!\" }} This outputs \"There are <number of days> days to Christmas!\" . For example, on 9th March, it outputs \"There are 291 days to Christmas!\". A detailed explanation of what the expression does: {{ : indicates the start of the expression. \"There are \" : a string. + : used to join two strings. $today.diff() : This is similar to the example in Get the time between two dates , but it uses n8n's custom $today variable. DateTime.fromISO($today.year + '-12-25'), 'days' : this part gets the current year using $today.year , turns it into an ISO string along with the month and date, and then takes the whole ISO string and converts it to a Luxon DateTime data structure. It also tells Luxon that you want the duration in days. toObject() turns the result of diff() into a more usable object. At this point, the expression returns [Object: {\"days\":-<number-of-days>}] . For example, on 9th March, [Object: {\"days\":-291}] . .days uses JMESPath syntax to retrieve just the number of days from the object. For more information on using JMESPath with n8n, refer to our JMESpath documentation. This gives you the number of days to Christmas, as a negative number. .toString().substring(1) turns the number into a string and removes the - . + \" days to Christmas!\" : another string, with a + to join it to the previous string. }} : indicates the end of the expression.","title":"Data and time with Luxon"},{"location":"code-examples/expressions/luxon/#date-and-time-with-luxon","text":"Luxon is a JavaScript library that makes it easier to work with date and time. For full details of how to use Luxon, refer to Luxon's documentation .","title":"Date and time with Luxon"},{"location":"code-examples/expressions/luxon/#variables","text":"n8n uses Luxon to provide two custom variables: $now : a Luxon object containing the current timestamp. Equivalent to DateTime.now() . $today : a Luxon object containing the current timestamp, rounded down to the day. Equivalent to DateTime.now().set({ hour: 0, minute: 0, second: 0, millisecond: 0 }) . Note that these variables can return different time formats when cast as a string. This is the same behavior as Luxon's DateTime.now() . 1 2 3 4 5 6 7 8 9 {{ $now }} // Returns [Object: \"<ISO formatted timestamp>\"] // For example [Object: \"2022-03-09T14:00:25.058+00:00\"] {{ $now . toString ()}} // Returns the ISO formatted timestamp // For example 2022-03-09T14:02:37.065+00:00 {{ \"Today's date is \" + $now }} // Returns \"Today's date is <unix timestamp>\" // For example \"Today's date is 1646834498755\"","title":"Variables"},{"location":"code-examples/expressions/luxon/#setting-the-timezone-in-n8n","text":"Luxon uses the n8n timezone. This value is either: Default: America/New York A custom timezone for your n8n instance, set using the GENERIC_TIMEZONE environment variable. A custome timezone for an individual workflow, configured in workflow settings.","title":"Setting the timezone in n8n"},{"location":"code-examples/expressions/luxon/#common-tasks","text":"This section provides examples for some common operations. Many more examples, and detailed guidance, are available in Luxon's own documentation .","title":"Common tasks"},{"location":"code-examples/expressions/luxon/#get-n-days-from-today","text":"Get a number of days before or after today. For example, you want to set a field to always show the date seven days before the current date. In the expressions editor, enter: 1 {{ $today . minus ({ days : 7 })}} On the 23rd June 2019, this returns [Object: \"2019-06-16T00:00:00.000+00:00\"] . This example uses n8n's custom variable $today for convenience. It is the equivalent of DateTime.now().set({ hour: 0, minute: 0, second: 0, millisecond: 0 }).minus({days: 7}) . For more detailed information and examples, refer to: Luxon's guide to math Their API documentation on DateTime plus and DateTime minus","title":"Get n days from today"},{"location":"code-examples/expressions/luxon/#create-human-readable-dates","text":"In Get n days from today , the example gets the date seven days before the current date, and returns it as [Object: \"yyyy-mm-dd-T00:00:00.000+00:00\"] . To make this more readable, you can use Luxon's formatting functions. For example, you want the field containing the date to be formatted as DD/MM/YYYY. This expression gets the date seven days before today, and converts it to the DD/MM/YYYY format. So on the 23rd June 2019, it returns 23/06/2019: 1 {{ $today . minus ({ days : 7 }). toLocaleString ()}} You can alter the format. For example: 1 {{ $today . minus ({ days : 7 }). toLocaleString ({ month : 'long' , day : 'numeric' , year : 'numeric' })}} On 23rd June 2019, this returns \"16 June 2019\". Refer to Luxon's guide on toLocaleString (strings for humans) for more information.","title":"Create human-readable dates"},{"location":"code-examples/expressions/luxon/#convert-date-string-to-luxon","text":"You can convert date strings and other date formats to a Luxon DateTime object. You can convert from standard formats and from arbitrary strings. If you have a date in a supported standard technical format: Luxon provides functions to handle the conversion. Refer to Luxon's guide to Parsing technical formats for details. If you have a date as a string that does not use a standard format: Use Luxon's Ad-hoc parsing . To do this, use the fromFormat() function, providing the string and a set of tokens that describe the format. For example, you have n8n's founding date, 23rd June 2019, formatted as '23-06-2019'. You want to turn this into a Luxon object: 1 {{ DateTime . fromFormat ( \"23-06-2019\" , \"dd-MM-yyyy\" )}} When using ad-hoc parsing, note Luxon's warning about Limitations . If you see unexpected results, try their Debugging guide.","title":"Convert date string to Luxon"},{"location":"code-examples/expressions/luxon/#get-the-time-between-two-dates","text":"To get the time between two dates, use Luxon's diffs feature. This subtracts one date from another and returns a duration. For example, get the number of months between two dates: 1 {{ DateTime . fromISO ( '201-06-23' ). diff ( DateTime . fromISO ( '2019-05-23' ), 'months' ). toObject ()}} This returns [Object: {\"months\":1}] . Refer to Luxon's Diffs for more information.","title":"Get the time between two dates"},{"location":"code-examples/expressions/luxon/#a-longer-example-how-many-days-to-christmas","text":"This example brings together several Luxon features, uses JMESPath, and does some basic string manipulation. The scenario: you want a countdown to 25th December. Every day, it should tell you the number of days remaining to Christmas. You don't want to update it for next year - it needs to seamelessly work for every year. 1 {{ \"There are \" + $today . diff ( DateTime . fromISO ( $today . year + '-12-25' ), 'days' ). toObject (). days . toString (). substring ( 1 ) + \" days to Christmas!\" }} This outputs \"There are <number of days> days to Christmas!\" . For example, on 9th March, it outputs \"There are 291 days to Christmas!\". A detailed explanation of what the expression does: {{ : indicates the start of the expression. \"There are \" : a string. + : used to join two strings. $today.diff() : This is similar to the example in Get the time between two dates , but it uses n8n's custom $today variable. DateTime.fromISO($today.year + '-12-25'), 'days' : this part gets the current year using $today.year , turns it into an ISO string along with the month and date, and then takes the whole ISO string and converts it to a Luxon DateTime data structure. It also tells Luxon that you want the duration in days. toObject() turns the result of diff() into a more usable object. At this point, the expression returns [Object: {\"days\":-<number-of-days>}] . For example, on 9th March, [Object: {\"days\":-291}] . .days uses JMESPath syntax to retrieve just the number of days from the object. For more information on using JMESPath with n8n, refer to our JMESpath documentation. This gives you the number of days to Christmas, as a negative number. .toString().substring(1) turns the number into a string and removes the - . + \" days to Christmas!\" : another string, with a + to join it to the previous string. }} : indicates the end of the expression.","title":"A longer example: how many days to Christmas?"},{"location":"code-examples/expressions/methods/","text":"Custom methods # n8n provides the following methods: $evaluateExpression : evaluates a string as an expression. $items : returns items from a given node $item : returns an item at a given index $jmespath() : perform a search on a JSON object using JMESPath. $node : data from a specified node","title":"Methods"},{"location":"code-examples/expressions/methods/#custom-methods","text":"n8n provides the following methods: $evaluateExpression : evaluates a string as an expression. $items : returns items from a given node $item : returns an item at a given index $jmespath() : perform a search on a JSON object using JMESPath. $node : data from a specified node","title":"Custom methods"},{"location":"code-examples/expressions/variables/","text":"Custom variables # n8n provides the following variables: $binary : incoming binary data from a node $data : incoming raw data from a node $env : contains environment variables $json : incoming JSON data from a node $now : a Luxon object containing the current timestamp. Equivalent to DateTime.now() . $parameters : parameters of the current node $position : the index of an item in a list of items $resumeWebhookUrl : the webhook URL to call to resume a waiting workflow. $runIndex : how many times the node has been executed. Zero-based (the first run is 0, the second is 1, and so on). $today : a Luxon object containing the current timestamp, rounded down to the day. Equivalent to DateTime.now().set({ hour: 0, minute: 0, second: 0, millisecond: 0 }) . $workflow : workflow metadata Examples # $workflow # Gives information about the current workflow. 1 2 3 4 5 6 // Boolean. Whether the workflow is active (true) or not (false) $workflow . active // Number. The workflow ID. $workflow . id // String. The workflow name. $workflow . name $resumeWebhookUrl # The webhook URL to call to resume a waiting workflow. See the Wait > On webhook call documentation to learn more.","title":"Variables"},{"location":"code-examples/expressions/variables/#custom-variables","text":"n8n provides the following variables: $binary : incoming binary data from a node $data : incoming raw data from a node $env : contains environment variables $json : incoming JSON data from a node $now : a Luxon object containing the current timestamp. Equivalent to DateTime.now() . $parameters : parameters of the current node $position : the index of an item in a list of items $resumeWebhookUrl : the webhook URL to call to resume a waiting workflow. $runIndex : how many times the node has been executed. Zero-based (the first run is 0, the second is 1, and so on). $today : a Luxon object containing the current timestamp, rounded down to the day. Equivalent to DateTime.now().set({ hour: 0, minute: 0, second: 0, millisecond: 0 }) . $workflow : workflow metadata","title":"Custom variables"},{"location":"code-examples/expressions/variables/#examples","text":"","title":"Examples"},{"location":"code-examples/expressions/variables/#workflow","text":"Gives information about the current workflow. 1 2 3 4 5 6 // Boolean. Whether the workflow is active (true) or not (false) $workflow . active // Number. The workflow ID. $workflow . id // String. The workflow name. $workflow . name","title":"$workflow"},{"location":"code-examples/expressions/variables/#resumewebhookurl","text":"The webhook URL to call to resume a waiting workflow. See the Wait > On webhook call documentation to learn more.","title":"$resumeWebhookUrl"},{"location":"code-examples/javascript-functions/","text":"JavaScript Code Snippets # In n8n, you can write custom JavaScript code snippets to add, remove, and update the data you receive from a node. You can also use code snippets to modify the data structure of the data returned by a node. Keep in mind We are using Set node for illustrating expressions here. However, you can use the code snippets as an expression in any node. To do that, click on the gears icon next to a field and click on Add Expression . For each section, we'll share code snippets that can be used in the function node as well as the expressions. You can read more about Expressions and adding code snippets to the Function node in our documentation.","title":"Overview"},{"location":"code-examples/javascript-functions/#javascript-code-snippets","text":"In n8n, you can write custom JavaScript code snippets to add, remove, and update the data you receive from a node. You can also use code snippets to modify the data structure of the data returned by a node. Keep in mind We are using Set node for illustrating expressions here. However, you can use the code snippets as an expression in any node. To do that, click on the gears icon next to a field and click on Add Expression . For each section, we'll share code snippets that can be used in the function node as well as the expressions. You can read more about Expressions and adding code snippets to the Function node in our documentation.","title":"JavaScript Code Snippets"},{"location":"code-examples/javascript-functions/check-incoming-data/","text":"Check incoming data # At times, you may want to check the incoming data. If the incoming data doesn't satisfy a condition, you may want to return a different value. For example, you want to check if a variable from the previous node is empty and return a string if it is empty. Use the following code snippet to return not found if the variable is empty. 1 {{ $json [ \"variable_name\" ] ? $json [ \"variable_name\" ] : \"not found\" }} The above expression uses the ternary operator. You can learn more about the ternary operator here .","title":"Check incoming data"},{"location":"code-examples/javascript-functions/check-incoming-data/#check-incoming-data","text":"At times, you may want to check the incoming data. If the incoming data doesn't satisfy a condition, you may want to return a different value. For example, you want to check if a variable from the previous node is empty and return a string if it is empty. Use the following code snippet to return not found if the variable is empty. 1 {{ $json [ \"variable_name\" ] ? $json [ \"variable_name\" ] : \"not found\" }} The above expression uses the ternary operator. You can learn more about the ternary operator here .","title":"Check incoming data"},{"location":"code-examples/javascript-functions/methods/","text":"Custom methods # n8n provides the following methods: $evaluateExpression : evaluates a string as an expression. $items : returns items from a given node $item : returns an item at a given index $jmespath() : perform a search on a JSON object using JMESPath. $node : data from a specified node $evaluateExpression(expression: string, itemIndex: number) # Evaluates a given string as expression. If no itemIndex is provided it uses by default in the Function-Node the data of item 0 and in the Function Item-Node the data of the current item. Example: 1 2 3 4 items [ 0 ]. json . variable1 = $evaluateExpression ( '{{1+2}}' ); items [ 0 ]. json . variable2 = $evaluateExpression ( $node [ \"Set\" ]. json [ \"myExpression\" ], 1 ); return items ; $items(nodeName?: string, outputIndex?: number, runIndex?: number) # This gives access to all the items of current or parent nodes. If no parameters are supplied, it returns all the items of the current node. If a node-name is given, it returns the items the node output on its first output (index: 0, most nodes only have one output, exceptions are IF and Switch-Node) on its last run. Example: 1 2 3 4 5 6 7 8 9 10 11 // Returns all the items of the current node and current run const allItems = $items (); // Returns all items the node \"IF\" outputs (index: 0 which is Output \"true\" of its most recent run) const allItems = $items ( \"IF\" ); // Returns all items the node \"IF\" outputs (index: 0 which is Output \"true\" of the same run as current node) const allItems = $items ( \"IF\" , 0 , $runIndex ); // Returns all items the node \"IF\" outputs (index: 1 which is Output \"false\" of run 0 which is the first run) const allItems = $items ( \"IF\" , 1 , 0 ); $item(index: number, runIndex?: number) # This method allows you to return an item at a specific index. The index is zero-based. Hence, $item(0) will return the first item, $item(1) the second one, and so on. Refer to this documentation to learn more. Example: 1 2 3 4 5 // Returns the first item returned by the Example node const firstItem = $item ( 0 ). $node [ \"Example Node\" ]; // Returns the second item returned by the Example node const secondItem = $item ( 1 ). $node [ \"Example Node\" ]; Refer to this example workflow to learn how this method can be used. $node # Returns the data of a specified node. Similar to $item , with the difference that it always returns the data of the first output and the last run of the node. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // Returns the fileName of binary property \"data\" of Node \"HTTP Request\" const fileName = $node [ \"HTTP Request\" ]. binary [ \"data\" ][ \"fileName\" ]}} // Returns the context data \"noItemsLeft\" of Node \"SplitInBatches\" const noItemsLeft = $node [ \"SplitInBatches\" ]. context [ \"noItemsLeft\" ]; // Returns the value of the JSON data property \"myNumber\" of Node \"Set\" const myNumber = $node [ \"Set\" ]. json [ 'myNumber' ]; // Returns the value of the parameter \"channel\" of Node \"Slack\" const channel = $node [ \"Slack\" ]. parameter [ \"channel\" ]; // Returns the index of the last run of Node \"HTTP Request\" const runIndex = $node [ \"HTTP Request\" ]. runIndex }}","title":"Methods"},{"location":"code-examples/javascript-functions/methods/#custom-methods","text":"n8n provides the following methods: $evaluateExpression : evaluates a string as an expression. $items : returns items from a given node $item : returns an item at a given index $jmespath() : perform a search on a JSON object using JMESPath. $node : data from a specified node","title":"Custom methods"},{"location":"code-examples/javascript-functions/methods/#evaluateexpressionexpression-string-itemindex-number","text":"Evaluates a given string as expression. If no itemIndex is provided it uses by default in the Function-Node the data of item 0 and in the Function Item-Node the data of the current item. Example: 1 2 3 4 items [ 0 ]. json . variable1 = $evaluateExpression ( '{{1+2}}' ); items [ 0 ]. json . variable2 = $evaluateExpression ( $node [ \"Set\" ]. json [ \"myExpression\" ], 1 ); return items ;","title":"$evaluateExpression(expression: string, itemIndex: number)"},{"location":"code-examples/javascript-functions/methods/#itemsnodename-string-outputindex-number-runindex-number","text":"This gives access to all the items of current or parent nodes. If no parameters are supplied, it returns all the items of the current node. If a node-name is given, it returns the items the node output on its first output (index: 0, most nodes only have one output, exceptions are IF and Switch-Node) on its last run. Example: 1 2 3 4 5 6 7 8 9 10 11 // Returns all the items of the current node and current run const allItems = $items (); // Returns all items the node \"IF\" outputs (index: 0 which is Output \"true\" of its most recent run) const allItems = $items ( \"IF\" ); // Returns all items the node \"IF\" outputs (index: 0 which is Output \"true\" of the same run as current node) const allItems = $items ( \"IF\" , 0 , $runIndex ); // Returns all items the node \"IF\" outputs (index: 1 which is Output \"false\" of run 0 which is the first run) const allItems = $items ( \"IF\" , 1 , 0 );","title":"$items(nodeName?: string, outputIndex?: number, runIndex?: number)"},{"location":"code-examples/javascript-functions/methods/#itemindex-number-runindex-number","text":"This method allows you to return an item at a specific index. The index is zero-based. Hence, $item(0) will return the first item, $item(1) the second one, and so on. Refer to this documentation to learn more. Example: 1 2 3 4 5 // Returns the first item returned by the Example node const firstItem = $item ( 0 ). $node [ \"Example Node\" ]; // Returns the second item returned by the Example node const secondItem = $item ( 1 ). $node [ \"Example Node\" ]; Refer to this example workflow to learn how this method can be used.","title":"$item(index: number, runIndex?: number)"},{"location":"code-examples/javascript-functions/methods/#node","text":"Returns the data of a specified node. Similar to $item , with the difference that it always returns the data of the first output and the last run of the node. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // Returns the fileName of binary property \"data\" of Node \"HTTP Request\" const fileName = $node [ \"HTTP Request\" ]. binary [ \"data\" ][ \"fileName\" ]}} // Returns the context data \"noItemsLeft\" of Node \"SplitInBatches\" const noItemsLeft = $node [ \"SplitInBatches\" ]. context [ \"noItemsLeft\" ]; // Returns the value of the JSON data property \"myNumber\" of Node \"Set\" const myNumber = $node [ \"Set\" ]. json [ 'myNumber' ]; // Returns the value of the parameter \"channel\" of Node \"Slack\" const channel = $node [ \"Slack\" ]. parameter [ \"channel\" ]; // Returns the index of the last run of Node \"HTTP Request\" const runIndex = $node [ \"HTTP Request\" ]. runIndex }}","title":"$node"},{"location":"code-examples/javascript-functions/number-items-last-node/","text":"Get number of items returned by the last node # Depending on your use-case, you might want to get the number of items returned by the last node. Use the following snippet in the Function node. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 if ( Object . keys ( items [ 0 ]. json ). length === 0 ) { return [ { json : { results : 0 , } } ] } return [ { json : { results : items . length , } } ]; The output will then be similar to the following. 1 2 3 4 5 [ { \"results\" : 8 } ]","title":"Get number of items returned by last node"},{"location":"code-examples/javascript-functions/number-items-last-node/#get-number-of-items-returned-by-the-last-node","text":"Depending on your use-case, you might want to get the number of items returned by the last node. Use the following snippet in the Function node. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 if ( Object . keys ( items [ 0 ]. json ). length === 0 ) { return [ { json : { results : 0 , } } ] } return [ { json : { results : items . length , } } ]; The output will then be similar to the following. 1 2 3 4 5 [ { \"results\" : 8 } ]","title":"Get number of items returned by the last node"},{"location":"code-examples/javascript-functions/variables/","text":"Custom variables # n8n provides the following variables: $binary : incoming binary data from a node $data : incoming raw data from a node $env : contains environment variables $json : incoming JSON data from a node $now : a Luxon object containing the current timestamp. Equivalent to DateTime.now() . $parameters : parameters of the current node $position : the index of an item in a list of items $resumeWebhookUrl : the webhook URL to call to resume a waiting workflow. $runIndex : how many times the node has been executed. Zero-based (the first run is 0, the second is 1, and so on). $today : a Luxon object containing the current timestamp, rounded down to the day. Equivalent to DateTime.now().set({ hour: 0, minute: 0, second: 0, millisecond: 0 }) . $workflow : workflow metadata Examples # $executionId # Contains the unique ID of the current workflow execution. 1 2 3 const executionId = $executionId ; return [{ json : { executionId }}]; $runIndex # Contains the index of the current run of the node. 1 2 // Returns all items the node \"IF\" outputs (index: 0 which is Output \"true\" of the same run as current node) const allItems = $items ( \"IF\" , 0 , $runIndex ); $workflow # Gives information about the current workflow. 1 2 3 4 5 6 // Boolean. Whether the workflow is active (true) or not (false) $workflow . active // Number. The workflow ID. $workflow . id // String. The workflow name. $workflow . name","title":"Variables"},{"location":"code-examples/javascript-functions/variables/#custom-variables","text":"n8n provides the following variables: $binary : incoming binary data from a node $data : incoming raw data from a node $env : contains environment variables $json : incoming JSON data from a node $now : a Luxon object containing the current timestamp. Equivalent to DateTime.now() . $parameters : parameters of the current node $position : the index of an item in a list of items $resumeWebhookUrl : the webhook URL to call to resume a waiting workflow. $runIndex : how many times the node has been executed. Zero-based (the first run is 0, the second is 1, and so on). $today : a Luxon object containing the current timestamp, rounded down to the day. Equivalent to DateTime.now().set({ hour: 0, minute: 0, second: 0, millisecond: 0 }) . $workflow : workflow metadata","title":"Custom variables"},{"location":"code-examples/javascript-functions/variables/#examples","text":"","title":"Examples"},{"location":"code-examples/javascript-functions/variables/#executionid","text":"Contains the unique ID of the current workflow execution. 1 2 3 const executionId = $executionId ; return [{ json : { executionId }}];","title":"$executionId"},{"location":"code-examples/javascript-functions/variables/#runindex","text":"Contains the index of the current run of the node. 1 2 // Returns all items the node \"IF\" outputs (index: 0 which is Output \"true\" of the same run as current node) const allItems = $items ( \"IF\" , 0 , $runIndex );","title":"$runIndex"},{"location":"code-examples/javascript-functions/variables/#workflow","text":"Gives information about the current workflow. 1 2 3 4 5 6 // Boolean. Whether the workflow is active (true) or not (false) $workflow . active // Number. The workflow ID. $workflow . id // String. The workflow name. $workflow . name","title":"$workflow"},{"location":"courses/","text":"Courses # If you\u2019ve found your way here, it means you\u2019re serious about your interest in automation. Maybe you're tired of manually entering data into the same spreadsheet every day, of clicking through a series of tabs and buttons for that one piece of information you need, of managing tens of different tools and systems. Whatever the reason, one thing is clear: you shouldn\u2019t spend precious time doing things that don\u2019t spark joy or contribute to your personal and professional growth. These tasks can and should be automated! And you don't need advanced technical knowledge or excellent coding skills to do this\u2013with no-code tools like n8n, automation is for everyone. Available courses # Level 1: Beginners' course","title":"Overview"},{"location":"courses/#courses","text":"If you\u2019ve found your way here, it means you\u2019re serious about your interest in automation. Maybe you're tired of manually entering data into the same spreadsheet every day, of clicking through a series of tabs and buttons for that one piece of information you need, of managing tens of different tools and systems. Whatever the reason, one thing is clear: you shouldn\u2019t spend precious time doing things that don\u2019t spark joy or contribute to your personal and professional growth. These tasks can and should be automated! And you don't need advanced technical knowledge or excellent coding skills to do this\u2013with no-code tools like n8n, automation is for everyone.","title":"Courses"},{"location":"courses/#available-courses","text":"Level 1: Beginners' course","title":"Available courses"},{"location":"courses/level-one/","text":"Introduction # Welcome to the n8n Certification Course Level I! Is this course right for me? # This course teaches you how to automate processes with no code using n8n and is meant to jumpstart your qualification as an automation expert. This course is for you if you: Want to automate things in your personal life Are looking for quick ways to automate common business processes Plan to become an n8n partner What will I learn? # By the end of this course you will know: How to set up n8n and navigate the Editor UI How data is structured in n8n How to configure different node parameters and add credentials When and how to use conditional logic in workflows How to schedule and control workflows How to import, download, and share workflows with others You will build two workflows: A two-node workflow to get articles from Hacker News A seven-node workflow to help your client get records from a data warehouse, filter them, make calculations, and notify team members about the results How will I learn? # We believe in learning by doing. You can expect some theoretical information about the basic concepts and components of n8n, followed by practice of building workflows step by step. What do I need to get started? # Sign-up here to get a Unique ID and a Webhook URL that you'll need in the course. Then all you need is: A computer with macOS, Windows, or Linux Some basic knowledge of JavaScript and APIs are nice-to-haves Eagerness to learn about the power of low-code automation How long does it take to complete the course? # Completing the course should take around two hours. You do not have to complete it in one go, feel free to take breaks and resume whenever you are ready. Do I get a certificate? # Absolutely! We believe all good works deserve recognition. To get your certificate, you need to complete the following milestones: \u2705 Sign up for the course to get your unique ID and webhook URL \u2705 Make an HTTP request \u2705 Send the workflow results as a message via Discord \u2705 Pass the quiz (theory and practice) at the end of the course Let\u2019s get started!","title":"Overview"},{"location":"courses/level-one/#introduction","text":"Welcome to the n8n Certification Course Level I!","title":"Introduction"},{"location":"courses/level-one/#is-this-course-right-for-me","text":"This course teaches you how to automate processes with no code using n8n and is meant to jumpstart your qualification as an automation expert. This course is for you if you: Want to automate things in your personal life Are looking for quick ways to automate common business processes Plan to become an n8n partner","title":"Is this course right for me?"},{"location":"courses/level-one/#what-will-i-learn","text":"By the end of this course you will know: How to set up n8n and navigate the Editor UI How data is structured in n8n How to configure different node parameters and add credentials When and how to use conditional logic in workflows How to schedule and control workflows How to import, download, and share workflows with others You will build two workflows: A two-node workflow to get articles from Hacker News A seven-node workflow to help your client get records from a data warehouse, filter them, make calculations, and notify team members about the results","title":"What will I learn?"},{"location":"courses/level-one/#how-will-i-learn","text":"We believe in learning by doing. You can expect some theoretical information about the basic concepts and components of n8n, followed by practice of building workflows step by step.","title":"How will I learn?"},{"location":"courses/level-one/#what-do-i-need-to-get-started","text":"Sign-up here to get a Unique ID and a Webhook URL that you'll need in the course. Then all you need is: A computer with macOS, Windows, or Linux Some basic knowledge of JavaScript and APIs are nice-to-haves Eagerness to learn about the power of low-code automation","title":"What do I need to get started?"},{"location":"courses/level-one/#how-long-does-it-take-to-complete-the-course","text":"Completing the course should take around two hours. You do not have to complete it in one go, feel free to take breaks and resume whenever you are ready.","title":"How long does it take to complete the course?"},{"location":"courses/level-one/#do-i-get-a-certificate","text":"Absolutely! We believe all good works deserve recognition. To get your certificate, you need to complete the following milestones: \u2705 Sign up for the course to get your unique ID and webhook URL \u2705 Make an HTTP request \u2705 Send the workflow results as a message via Discord \u2705 Pass the quiz (theory and practice) at the end of the course Let\u2019s get started!","title":"Do I get a certificate?"},{"location":"courses/level-one/chapter-1/","text":"Navigating the Editor UI # In this lesson you will learn how to navigate the Editor UI. We will walk through the canvas and show you what each icon means and where to find things you will need while building workflows in n8n. Getting started # First of all, you need to get n8n. There are different ways to set up n8n , choose the option that best suits your skills and needs. This course was developed on n8n version 0.127.0. In newer versions, the Editor UI might look different, but the core functionality of the workflows should not be impacted. Once you have n8n running, open the Editor UI in a browser window. It should look like this: Editor UI Now that you have the Editor UI open, you'll learn how to navigate it. Editor UI settings # The Editor UI represents the web interface used to create workflows . Think of it as a canvas where the artist in you will create automations. From the Editor UI you can access all your workflows and credentials, as well as the n8n documentation and forum. Left-side panel # Under the n8n logo in the upper left corner you will notice a round arrow icon. Click on it to open the left-side menu, which contains the core functionalities and settings for managing workflows. Editor UI left-side menu There are four main sections in the left menu: Admin Panel : Only for users on n8n.cloud, used to access the management Dashboard. Workflows : Contains operations for creating and editing workflows. Credentials : Contains operations for creating credentials. Executions : Contains information about your workflow executions, which are complete runs of a workflow from the first to the last node. Help : Contains resources around n8n product and community. Top bar # The top bar of the Editor UI contains four pieces of information: Editor UI top bar The text that appears in the top left is the name of the current workflow. You can edit this name anytime. Next to it, you have the option to add a tag . Tags help you organize your workflows by use case, domain, or whatever is relevant for you. In the top right there is an orange Save button that saves the current workflow. Next to it, there is a toggle button used to activate or deactivate the current workflow. Canvas # The canvas is the gray grid background in the Editor UI. On the canvas, there are five buttons and a node with different functionalities: Workflow canvas In the bottom left corner of the canvas there are three small icons used to zoom in ( + ) or out ( - ) of the canvas, and reset ( \u2190 ) the canvas to the original resolution. At the bottom center of the canvas there is an orange Execute Workflow button. When you click on it all nodes on the canvas are executed. On the top right corner of the canvas there is an orange circle with a + sign inside. This button opens the nodes panel. In the center of the canvas, there is a square with a green play icon inside. This is the Start node . You will learn more about nodes in the next section . Moving the canvas You can move the workflow canvas around in two ways: - Click Ctrl + Left Mouse Button on the canvas and move it around - Place two fingers on your touchpad and slide Don\u2019t worry about workflow execution and activation for now, we will explain these concepts later on in the course. Nodes # You can think of nodes as building blocks that serve different functions but, when put together, they make up a functioning machinery \u2013 an automated workflow. Node A node is an individual step in your workflow \u2014 one that either (a) loads, (b) processes or (c) sends data. Based on their function, nodes can be classified into two types: Regular Nodes add, remove, and edit data, as well as request and send external data. Trigger Nodes start a workflow and supply the initial data. Keep in mind Among the Regular and Trigger nodes there are some nodes that do not represent any app or service, instead they serve general functions like scheduling workflows (e.g. Cron and Interval nodes) or adding JavaScript functions (e.g. Function and Function Item nodes). We refer to these as Core Nodes . Start node # The Start node is the default starting point in any workflow. Every time you create a new workflow, a Start node will be included by default. Start node The Start node cannot be deleted or duplicated. If you have a workflow in which you don\u2019t use the Start node, you can remove the connection, deactivate it, and move it away from the workflow. If you need more than one Start node, you probably need to use other Trigger nodes or create separate workflows. You\u2019ve probably figured out already that the Start node is a Core Trigger node. Apart from it, there are over 290 other Regular and Trigger nodes for various functions, apps, and services. Finding nodes # You can find all available nodes in the nodes panel on the right side of the Editor UI. There are three ways in which you can open the nodes panel: Click the + icon in the top right corner of the canvas. Click the gray dot on the right side of an existing node on the canvas (the node to which you want to add another one) and pull the connection line to the right. Click the Tab key on your keyboard. The nodes panel looks like this: Nodes panel In the nodes panel, notice that the nodes are grouped in three tabs: All, Regular, and Trigger. In addition, nodes are also grouped by their functionality domain (like Analytics or Sales). This makes it easier to find the nodes you need. If you want to get a specific node, type in the name of the node, app, or service in the search field and select the respective tab. Adding nodes # To add a new node to the Editor UI, click on the node you want in the nodes panel. The new node will automatically be connected to the selected node on the canvas. To review, here\u2019s a walkthrough of the Editor UI touching on all the settings you\u2019ve learned so far: Editor UI walkthrough Node buttons # If you hover on a node, you\u2019ll notice that four icons appear on top: Delete the node Deactivate/Activate the node Duplicate the node Execute the node The four node buttons Moving a workflow To move a workflow around the canvas, select all nodes ( Ctrl + A ), click and hold on a node then drag it to any point you want on the canvas. Summary # In this lesson you learned how to navigate the Editor UI, what the icons mean, how to access the left-side and node panels, and how to add nodes to the canvas and interpret their execution results. In the next lesson, you will build a mini-workflow to put into practice what you've learned so far.","title":"Navigating the editor UI"},{"location":"courses/level-one/chapter-1/#navigating-the-editor-ui","text":"In this lesson you will learn how to navigate the Editor UI. We will walk through the canvas and show you what each icon means and where to find things you will need while building workflows in n8n.","title":"Navigating the Editor UI"},{"location":"courses/level-one/chapter-1/#getting-started","text":"First of all, you need to get n8n. There are different ways to set up n8n , choose the option that best suits your skills and needs. This course was developed on n8n version 0.127.0. In newer versions, the Editor UI might look different, but the core functionality of the workflows should not be impacted. Once you have n8n running, open the Editor UI in a browser window. It should look like this: Editor UI Now that you have the Editor UI open, you'll learn how to navigate it.","title":"Getting started"},{"location":"courses/level-one/chapter-1/#editor-ui-settings","text":"The Editor UI represents the web interface used to create workflows . Think of it as a canvas where the artist in you will create automations. From the Editor UI you can access all your workflows and credentials, as well as the n8n documentation and forum.","title":"Editor UI settings"},{"location":"courses/level-one/chapter-1/#left-side-panel","text":"Under the n8n logo in the upper left corner you will notice a round arrow icon. Click on it to open the left-side menu, which contains the core functionalities and settings for managing workflows. Editor UI left-side menu There are four main sections in the left menu: Admin Panel : Only for users on n8n.cloud, used to access the management Dashboard. Workflows : Contains operations for creating and editing workflows. Credentials : Contains operations for creating credentials. Executions : Contains information about your workflow executions, which are complete runs of a workflow from the first to the last node. Help : Contains resources around n8n product and community.","title":"Left-side panel"},{"location":"courses/level-one/chapter-1/#top-bar","text":"The top bar of the Editor UI contains four pieces of information: Editor UI top bar The text that appears in the top left is the name of the current workflow. You can edit this name anytime. Next to it, you have the option to add a tag . Tags help you organize your workflows by use case, domain, or whatever is relevant for you. In the top right there is an orange Save button that saves the current workflow. Next to it, there is a toggle button used to activate or deactivate the current workflow.","title":"Top bar"},{"location":"courses/level-one/chapter-1/#canvas","text":"The canvas is the gray grid background in the Editor UI. On the canvas, there are five buttons and a node with different functionalities: Workflow canvas In the bottom left corner of the canvas there are three small icons used to zoom in ( + ) or out ( - ) of the canvas, and reset ( \u2190 ) the canvas to the original resolution. At the bottom center of the canvas there is an orange Execute Workflow button. When you click on it all nodes on the canvas are executed. On the top right corner of the canvas there is an orange circle with a + sign inside. This button opens the nodes panel. In the center of the canvas, there is a square with a green play icon inside. This is the Start node . You will learn more about nodes in the next section . Moving the canvas You can move the workflow canvas around in two ways: - Click Ctrl + Left Mouse Button on the canvas and move it around - Place two fingers on your touchpad and slide Don\u2019t worry about workflow execution and activation for now, we will explain these concepts later on in the course.","title":"Canvas"},{"location":"courses/level-one/chapter-1/#nodes","text":"You can think of nodes as building blocks that serve different functions but, when put together, they make up a functioning machinery \u2013 an automated workflow. Node A node is an individual step in your workflow \u2014 one that either (a) loads, (b) processes or (c) sends data. Based on their function, nodes can be classified into two types: Regular Nodes add, remove, and edit data, as well as request and send external data. Trigger Nodes start a workflow and supply the initial data. Keep in mind Among the Regular and Trigger nodes there are some nodes that do not represent any app or service, instead they serve general functions like scheduling workflows (e.g. Cron and Interval nodes) or adding JavaScript functions (e.g. Function and Function Item nodes). We refer to these as Core Nodes .","title":"Nodes"},{"location":"courses/level-one/chapter-1/#start-node","text":"The Start node is the default starting point in any workflow. Every time you create a new workflow, a Start node will be included by default. Start node The Start node cannot be deleted or duplicated. If you have a workflow in which you don\u2019t use the Start node, you can remove the connection, deactivate it, and move it away from the workflow. If you need more than one Start node, you probably need to use other Trigger nodes or create separate workflows. You\u2019ve probably figured out already that the Start node is a Core Trigger node. Apart from it, there are over 290 other Regular and Trigger nodes for various functions, apps, and services.","title":"Start node"},{"location":"courses/level-one/chapter-1/#finding-nodes","text":"You can find all available nodes in the nodes panel on the right side of the Editor UI. There are three ways in which you can open the nodes panel: Click the + icon in the top right corner of the canvas. Click the gray dot on the right side of an existing node on the canvas (the node to which you want to add another one) and pull the connection line to the right. Click the Tab key on your keyboard. The nodes panel looks like this: Nodes panel In the nodes panel, notice that the nodes are grouped in three tabs: All, Regular, and Trigger. In addition, nodes are also grouped by their functionality domain (like Analytics or Sales). This makes it easier to find the nodes you need. If you want to get a specific node, type in the name of the node, app, or service in the search field and select the respective tab.","title":"Finding nodes"},{"location":"courses/level-one/chapter-1/#adding-nodes","text":"To add a new node to the Editor UI, click on the node you want in the nodes panel. The new node will automatically be connected to the selected node on the canvas. To review, here\u2019s a walkthrough of the Editor UI touching on all the settings you\u2019ve learned so far: Editor UI walkthrough","title":"Adding nodes"},{"location":"courses/level-one/chapter-1/#node-buttons","text":"If you hover on a node, you\u2019ll notice that four icons appear on top: Delete the node Deactivate/Activate the node Duplicate the node Execute the node The four node buttons Moving a workflow To move a workflow around the canvas, select all nodes ( Ctrl + A ), click and hold on a node then drag it to any point you want on the canvas.","title":"Node buttons"},{"location":"courses/level-one/chapter-1/#summary","text":"In this lesson you learned how to navigate the Editor UI, what the icons mean, how to access the left-side and node panels, and how to add nodes to the canvas and interpret their execution results. In the next lesson, you will build a mini-workflow to put into practice what you've learned so far.","title":"Summary"},{"location":"courses/level-one/chapter-2/","text":"Building a Mini-workflow # In this lesson you will apply what you learned in the previous lesson by building your first workflow, consisting of the Start node and a Regular node. A simple, yet useful, automation is getting articles from Hacker News so that you\u2019re up to date with the tech world. More specifically, let\u2019s say you want to get the latest 10 articles related to automation. You can build a workflow for this use case in 4 steps: 1. Add the Hacker News node 2. Configure the Hacker News node 3. Save the workflow 4. Execute the node 1. Add the Hacker News node # Open the nodes panel, search for the Hacker News node, and click on it to add it to the Editor UI. Connect the Hacker News node to the Start node . 2. Configure the Hacker News node # When you add a new node to the Editor UI, the node will be automatically activated and open a window with two tabs on the left side: Parameters and Settings . Parameters vs Settings Parameters are different for each node, depending on its functionality. Settings are the same for all nodes. Parameters # The Hacker News node has several parameters that need to be configured in order to make it work: Resource: All This resource selects all data records (articles). Operation: Get All This operation fetches all the selected articles. Limit: 10 This parameter sets a limit to how many results are returned by the Get All operation. Additional fields > Add Field > Keyword: automation Additional fields are options that you can add to certain nodes to make your request more specific or filter the results. In our case, we want to get only articles that include the keyword \u201cautomation\u201d. The configuration of the parameters for the Hacker News node should now look like this: Hacker News node parameters Settings # The Settings section includes several options for node design and executions. In this case, we\u2019ll configure only the first two settings, which set the node\u2019s appearance in the Editor UI. In the Hacker News node settings, edit: Notes: Get the 10 latest articles Node notes It is often helpful, especially for complex or shared workflows, to add a short description in the node about what it does. Display note in flow?: toggle to true This option will display the description note under the node in the Editor UI. The configuration of the settings for the Hacker News node looks like this: Hacker News node renaming Renaming a node You can rename the node with a name that\u2019s more descriptive for your use case. There are two ways to do this: - Double-click on the node to open the node window. Click on the name of the node in the top left corner of the window, rename it as you like, then click on the \u2714 symbol to save the node under the new name. Renaming a node from the window Select the node you want to rename and at the same time press the F2 key on your keyboard. Renaming a node from the keyboard 3. Save the workflow # Save the workflow under the name \u201cHacker News workflow\u201d By default, your workflow is automatically saved as \u201cMy workflow\u201d. There are two ways in which you can save a workflow: From the Canvas in Editor UI, click Ctrl + S or Cmd + S on your keyboard Click the Save button in the top right corner of the Editor UI 4. Execute the node # Click on the Execute Node button in the top right corner of the node window. You should see 10 results in Table view. Results in Table view for the Hacker News node Node executions # Node execution A node execution represents a run of that node to retrieve the specified data. If a node executed successfully a small green circle with a number inside will appear on top of the node. Successfully executed workflow If the parameters are configured correctly and everything works fine, the requested data will be displayed in the node window in Table and JSON format. You can switch between these views by selecting the one you want from the JSON|Table button at the top of the node window. Table vs JSON views The Table view is the default. It displays the requested data in a table, where the rows are the records and the columns are the available attributes of those records. Results in JSON view for the Hacker News node The node window displays more information about the node execution: In the top left corner of the results window, you\u2019ll notice another piece of information: Items : 10 . This field displays the number of items (records) that are returned by the node request. In our case, it\u2019s expected to be 10, since this is the limit we set in the node. But if you don\u2019t set a limit, it\u2019s useful to see how many records are actually returned. Next to the Items information, notice a small orange i icon. If you hover on it, you\u2019ll get two more pieces of information: Start Time (when the node execution started) and Execution Time (how long it took for the node to return the results from the moment it started executing). Start Time and Execution Time can provide insights into the performance of each individual node. In the bottom right corner right under the node window, there is a reference link to the node\u2019s documentation . Check it out if you run into trouble or are not sure how to configure the node\u2019s parameters. Error in nodes A red warning icon on the top right corner of a node means that the node has errors. This might happen if the node credentials are missing or incorrect, or the node parameters are not configured correctly. Error in nodes Summary # Congratulations, you just built your first workflow! In this lesson, you learned how to use Regular nodes, configure their parameters and settings, and save and execute your workflow. In the next lesson you will be introduced to your client, Nathan, who needs to automate his sales reporting work. You will build a more complex workflow for his use case, helping him become more productive at work.","title":"Building a mini-workflow"},{"location":"courses/level-one/chapter-2/#building-a-mini-workflow","text":"In this lesson you will apply what you learned in the previous lesson by building your first workflow, consisting of the Start node and a Regular node. A simple, yet useful, automation is getting articles from Hacker News so that you\u2019re up to date with the tech world. More specifically, let\u2019s say you want to get the latest 10 articles related to automation. You can build a workflow for this use case in 4 steps: 1. Add the Hacker News node 2. Configure the Hacker News node 3. Save the workflow 4. Execute the node","title":"Building a Mini-workflow"},{"location":"courses/level-one/chapter-2/#1-add-the-hacker-news-node","text":"Open the nodes panel, search for the Hacker News node, and click on it to add it to the Editor UI. Connect the Hacker News node to the Start node .","title":"1. Add the Hacker News node"},{"location":"courses/level-one/chapter-2/#2-configure-the-hacker-news-node","text":"When you add a new node to the Editor UI, the node will be automatically activated and open a window with two tabs on the left side: Parameters and Settings . Parameters vs Settings Parameters are different for each node, depending on its functionality. Settings are the same for all nodes.","title":"2. Configure the Hacker News node"},{"location":"courses/level-one/chapter-2/#parameters","text":"The Hacker News node has several parameters that need to be configured in order to make it work: Resource: All This resource selects all data records (articles). Operation: Get All This operation fetches all the selected articles. Limit: 10 This parameter sets a limit to how many results are returned by the Get All operation. Additional fields > Add Field > Keyword: automation Additional fields are options that you can add to certain nodes to make your request more specific or filter the results. In our case, we want to get only articles that include the keyword \u201cautomation\u201d. The configuration of the parameters for the Hacker News node should now look like this: Hacker News node parameters","title":"Parameters"},{"location":"courses/level-one/chapter-2/#settings","text":"The Settings section includes several options for node design and executions. In this case, we\u2019ll configure only the first two settings, which set the node\u2019s appearance in the Editor UI. In the Hacker News node settings, edit: Notes: Get the 10 latest articles Node notes It is often helpful, especially for complex or shared workflows, to add a short description in the node about what it does. Display note in flow?: toggle to true This option will display the description note under the node in the Editor UI. The configuration of the settings for the Hacker News node looks like this: Hacker News node renaming Renaming a node You can rename the node with a name that\u2019s more descriptive for your use case. There are two ways to do this: - Double-click on the node to open the node window. Click on the name of the node in the top left corner of the window, rename it as you like, then click on the \u2714 symbol to save the node under the new name. Renaming a node from the window Select the node you want to rename and at the same time press the F2 key on your keyboard. Renaming a node from the keyboard","title":"Settings"},{"location":"courses/level-one/chapter-2/#3-save-the-workflow","text":"Save the workflow under the name \u201cHacker News workflow\u201d By default, your workflow is automatically saved as \u201cMy workflow\u201d. There are two ways in which you can save a workflow: From the Canvas in Editor UI, click Ctrl + S or Cmd + S on your keyboard Click the Save button in the top right corner of the Editor UI","title":"3. Save the workflow"},{"location":"courses/level-one/chapter-2/#4-execute-the-node","text":"Click on the Execute Node button in the top right corner of the node window. You should see 10 results in Table view. Results in Table view for the Hacker News node","title":"4. Execute the node"},{"location":"courses/level-one/chapter-2/#node-executions","text":"Node execution A node execution represents a run of that node to retrieve the specified data. If a node executed successfully a small green circle with a number inside will appear on top of the node. Successfully executed workflow If the parameters are configured correctly and everything works fine, the requested data will be displayed in the node window in Table and JSON format. You can switch between these views by selecting the one you want from the JSON|Table button at the top of the node window. Table vs JSON views The Table view is the default. It displays the requested data in a table, where the rows are the records and the columns are the available attributes of those records. Results in JSON view for the Hacker News node The node window displays more information about the node execution: In the top left corner of the results window, you\u2019ll notice another piece of information: Items : 10 . This field displays the number of items (records) that are returned by the node request. In our case, it\u2019s expected to be 10, since this is the limit we set in the node. But if you don\u2019t set a limit, it\u2019s useful to see how many records are actually returned. Next to the Items information, notice a small orange i icon. If you hover on it, you\u2019ll get two more pieces of information: Start Time (when the node execution started) and Execution Time (how long it took for the node to return the results from the moment it started executing). Start Time and Execution Time can provide insights into the performance of each individual node. In the bottom right corner right under the node window, there is a reference link to the node\u2019s documentation . Check it out if you run into trouble or are not sure how to configure the node\u2019s parameters. Error in nodes A red warning icon on the top right corner of a node means that the node has errors. This might happen if the node credentials are missing or incorrect, or the node parameters are not configured correctly. Error in nodes","title":"Node executions"},{"location":"courses/level-one/chapter-2/#summary","text":"Congratulations, you just built your first workflow! In this lesson, you learned how to use Regular nodes, configure their parameters and settings, and save and execute your workflow. In the next lesson you will be introduced to your client, Nathan, who needs to automate his sales reporting work. You will build a more complex workflow for his use case, helping him become more productive at work.","title":"Summary"},{"location":"courses/level-one/chapter-3/","text":"Automating a (Real-world) Use Case # Meet Nathan \ud83d\ude4b. Nathan works as an Analytics Manager at ABCorp. His job is to support the ABCorp team with reporting and analytics. Being a true jack of all trades, he also handles several miscellaneous initiatives. Some of the things that Nathan does are very repetitive and mind-numbing. He wants to automate some of these tasks so that he doesn\u2019t burn out. As an Automation Expert , you are meeting with Nathan today to help him understand how he can offload some of his responsibilities to n8n. Understanding the scenario # You \ud83d\udc69\u200d\ud83d\udd27: Nice to meet you, Nathan. Glad to be doing this! What\u2019s a repetitive task that is error-prone and that you\u2019d like to get off your plate first? Nathan \ud83d\ude4b: Thanks for coming in! The most annoying one\u2019s gotta be the weekly sales reporting. I have to collect sales data from our legacy data warehouse, which manages data from the main business processes of an organization, such as sales or production. Now, each sales order can have the status Processing or Booked. I have to calculate the sum of all the Booked orders and announce them in the company Discord every Monday. Then I have to create a spreadsheet of all the Processing sales so that the Sales Managers can review them and check if they need to follow up with customers. This manual work is tough and requires high attention to detail to make sure that all the numbers are right. Inevitably, I sometimes lose my focus and mistype a number or don\u2019t get to do it on time. I\u2019ve been criticized once by my manager for miscalculating the data. You \ud83d\udc69\u200d\ud83d\udd27: Oh no! Doesn\u2019t the data warehouse have a way to export the data? Nathan \ud83d\ude4b: The data warehouse was written in-house ages ago. It doesn\u2019t have a CSV export but they recently added a couple of API endpoints that expose this data, if that helps. You \ud83d\udc69\u200d\ud83d\udd27: Perfect! That\u2019s a good start. If you have a generic API, we can add some custom code and a couple of services to make an automated workflow. This gig has n8n written all over it. Let\u2019s get started!","title":"Automating a (real-world) use case"},{"location":"courses/level-one/chapter-3/#automating-a-real-world-use-case","text":"Meet Nathan \ud83d\ude4b. Nathan works as an Analytics Manager at ABCorp. His job is to support the ABCorp team with reporting and analytics. Being a true jack of all trades, he also handles several miscellaneous initiatives. Some of the things that Nathan does are very repetitive and mind-numbing. He wants to automate some of these tasks so that he doesn\u2019t burn out. As an Automation Expert , you are meeting with Nathan today to help him understand how he can offload some of his responsibilities to n8n.","title":"Automating a (Real-world) Use Case"},{"location":"courses/level-one/chapter-3/#understanding-the-scenario","text":"You \ud83d\udc69\u200d\ud83d\udd27: Nice to meet you, Nathan. Glad to be doing this! What\u2019s a repetitive task that is error-prone and that you\u2019d like to get off your plate first? Nathan \ud83d\ude4b: Thanks for coming in! The most annoying one\u2019s gotta be the weekly sales reporting. I have to collect sales data from our legacy data warehouse, which manages data from the main business processes of an organization, such as sales or production. Now, each sales order can have the status Processing or Booked. I have to calculate the sum of all the Booked orders and announce them in the company Discord every Monday. Then I have to create a spreadsheet of all the Processing sales so that the Sales Managers can review them and check if they need to follow up with customers. This manual work is tough and requires high attention to detail to make sure that all the numbers are right. Inevitably, I sometimes lose my focus and mistype a number or don\u2019t get to do it on time. I\u2019ve been criticized once by my manager for miscalculating the data. You \ud83d\udc69\u200d\ud83d\udd27: Oh no! Doesn\u2019t the data warehouse have a way to export the data? Nathan \ud83d\ude4b: The data warehouse was written in-house ages ago. It doesn\u2019t have a CSV export but they recently added a couple of API endpoints that expose this data, if that helps. You \ud83d\udc69\u200d\ud83d\udd27: Perfect! That\u2019s a good start. If you have a generic API, we can add some custom code and a couple of services to make an automated workflow. This gig has n8n written all over it. Let\u2019s get started!","title":"Understanding the scenario"},{"location":"courses/level-one/chapter-4/","text":"Designing the Workflow # Now that we have an idea of what Nathan wants to automate, let\u2019s enumerate the steps he needs to take to achieve this: Get the relevant data (order id, order status, order value, employee name) from the data warehouse Filter the orders by their status (processing or booked) Calculate the total value of all the booked orders Notify the team members about the booked orders in the company\u2019s Discord channel Insert the details about the processing orders in Airtable for follow-up Schedule this workflow to run every Monday morning Nathan\u2019s workflow involves sending data from the company\u2019s data warehouse to two external services: Discord and Airtable. In between, the data has to be wrangled with general functions (conditional filtering, calculation, scheduling). n8n provides integrations for all these steps, so Nathan\u2019s workflow in n8n would look like this: Nathan's workflow You will build this workflow in 8 steps: Getting data from the data warehouse Inserting data into Airtable Filtering orders Setting values for processing orders Calculating booked orders Notifying the team Scheduling the workflow Activating and examining the workflow Start building!","title":"Designing the workflow"},{"location":"courses/level-one/chapter-4/#designing-the-workflow","text":"Now that we have an idea of what Nathan wants to automate, let\u2019s enumerate the steps he needs to take to achieve this: Get the relevant data (order id, order status, order value, employee name) from the data warehouse Filter the orders by their status (processing or booked) Calculate the total value of all the booked orders Notify the team members about the booked orders in the company\u2019s Discord channel Insert the details about the processing orders in Airtable for follow-up Schedule this workflow to run every Monday morning Nathan\u2019s workflow involves sending data from the company\u2019s data warehouse to two external services: Discord and Airtable. In between, the data has to be wrangled with general functions (conditional filtering, calculation, scheduling). n8n provides integrations for all these steps, so Nathan\u2019s workflow in n8n would look like this: Nathan's workflow You will build this workflow in 8 steps: Getting data from the data warehouse Inserting data into Airtable Filtering orders Setting values for processing orders Calculating booked orders Notifying the team Scheduling the workflow Activating and examining the workflow Start building!","title":"Designing the Workflow"},{"location":"courses/level-one/chapter-6/","text":"Exporting, Importing, and Sharing Workflows # In this chapter you will learn how to export and import workflows, as well as share your workflows on the n8n workflows page. Exporting and importing workflows # Workflows can be saved locally as JSON files. This is useful if you want to share your workflow with someone else or import a workflow from someone else. Sharing credentials Note that the exported JSON file of your workflow will contain your credentials as well. If you don\u2019t want to share your credentials (recommended), delete them from the JSON file. You can export and import workflows in two ways: From the Editor UI: Export: In the left panel, click on Download under the Workflow section. This will download your current workflow as a JSON file on your computer. Import: In the left pane, click on Import from URL (to import a published workflow) or Import from File (to import a workflow as a JSON file). From the command line: Export: See the full list of commands for exporting workflows or credentials. Import: See the full list of commands for importing workflows or credentials. Sharing workflows # We love to see what users build with n8n and discover inspiring workflows while also sharing our ideas with them! On the n8n workflows page you can find hundreds of workflows contributed by our team or community of users. Feel free to share your workflows too! Of course, since many users take this course and build the same workflow, there is no point in sharing Nathan\u2019s workflow on the workflows page. However, we encourage you to build other helpful and original workflows and share them with the community. To share a workflow, follow these steps: Sign in to n8n.io . Click on the + Share New Workflow button. Enter the name of your workflow in the Name field. The name should be descriptive for the purpose of the workflow and easy for other users to understand. In the Description field, add a screenshot of your workflow and write a description below it. The screenshot should capture the entire Editor UI. The description should list all the nodes used in the workflow and the function they serve. You should also mention any prerequisites for building the workflow. Tip This is an example of a well-written description that you can use as a template for your own workflows. In the Editor UI, select all the nodes in your workflow (Ctrl + A or Cmd + A) and copy them (Ctrl + C or Cmd + C). In the Workflow Code field, delete the existing code and paste your workflow in it (Ctrl + V or Cmd + V). Click on the Publish Workflow to Share button to share your workflow. Share workflow Now your workflow will be reviewed by our team and if all is well, it will appear on the n8n workflows page for everyone to see and use!","title":"Exporting, importing, and sharing workflows"},{"location":"courses/level-one/chapter-6/#exporting-importing-and-sharing-workflows","text":"In this chapter you will learn how to export and import workflows, as well as share your workflows on the n8n workflows page.","title":"Exporting, Importing, and Sharing Workflows"},{"location":"courses/level-one/chapter-6/#exporting-and-importing-workflows","text":"Workflows can be saved locally as JSON files. This is useful if you want to share your workflow with someone else or import a workflow from someone else. Sharing credentials Note that the exported JSON file of your workflow will contain your credentials as well. If you don\u2019t want to share your credentials (recommended), delete them from the JSON file. You can export and import workflows in two ways: From the Editor UI: Export: In the left panel, click on Download under the Workflow section. This will download your current workflow as a JSON file on your computer. Import: In the left pane, click on Import from URL (to import a published workflow) or Import from File (to import a workflow as a JSON file). From the command line: Export: See the full list of commands for exporting workflows or credentials. Import: See the full list of commands for importing workflows or credentials.","title":"Exporting and importing workflows"},{"location":"courses/level-one/chapter-6/#sharing-workflows","text":"We love to see what users build with n8n and discover inspiring workflows while also sharing our ideas with them! On the n8n workflows page you can find hundreds of workflows contributed by our team or community of users. Feel free to share your workflows too! Of course, since many users take this course and build the same workflow, there is no point in sharing Nathan\u2019s workflow on the workflows page. However, we encourage you to build other helpful and original workflows and share them with the community. To share a workflow, follow these steps: Sign in to n8n.io . Click on the + Share New Workflow button. Enter the name of your workflow in the Name field. The name should be descriptive for the purpose of the workflow and easy for other users to understand. In the Description field, add a screenshot of your workflow and write a description below it. The screenshot should capture the entire Editor UI. The description should list all the nodes used in the workflow and the function they serve. You should also mention any prerequisites for building the workflow. Tip This is an example of a well-written description that you can use as a template for your own workflows. In the Editor UI, select all the nodes in your workflow (Ctrl + A or Cmd + A) and copy them (Ctrl + C or Cmd + C). In the Workflow Code field, delete the existing code and paste your workflow in it (Ctrl + V or Cmd + V). Click on the Publish Workflow to Share button to share your workflow. Share workflow Now your workflow will be reviewed by our team and if all is well, it will appear on the n8n workflows page for everyone to see and use!","title":"Sharing workflows"},{"location":"courses/level-one/chapter-7/","text":"Take the Quiz and Get Your Certificate # Congratulations \u2013 you finished the n8n Course Level I! You were able to help Nathan build a business use case workflow, saving him hours of tedious work and making him more productive. You\u2019ve come a long way throughout this course and learned a lot about workflow automation. Certification quiz # You're almost there! The last step before earning your certificate - after signing-up and completing the course milestones - is passing the quiz. The quiz consists of two parts: theory and practice. Remember: You need to have at least 80% correct answers in each part. There is no time limit. You can take the quiz as many times as you want. Take the quiz! What's next? # So, where do you go from here? Here\u2019s what you can do next: Create new workflows for your work or personal use and share them with us. Don\u2019t have any ideas? Find inspiration on our blog , YouTube channel , community forum , and Discord server . Dive deeper into n8n\u2019s settings by reading the docs. Take the n8n Level II course. Subscribe to our newsletter to find out when it\u2019s released.","title":"Take the quiz and get your certificate"},{"location":"courses/level-one/chapter-7/#take-the-quiz-and-get-your-certificate","text":"Congratulations \u2013 you finished the n8n Course Level I! You were able to help Nathan build a business use case workflow, saving him hours of tedious work and making him more productive. You\u2019ve come a long way throughout this course and learned a lot about workflow automation.","title":"Take the Quiz and Get Your Certificate"},{"location":"courses/level-one/chapter-7/#certification-quiz","text":"You're almost there! The last step before earning your certificate - after signing-up and completing the course milestones - is passing the quiz. The quiz consists of two parts: theory and practice. Remember: You need to have at least 80% correct answers in each part. There is no time limit. You can take the quiz as many times as you want. Take the quiz!","title":"Certification quiz"},{"location":"courses/level-one/chapter-7/#whats-next","text":"So, where do you go from here? Here\u2019s what you can do next: Create new workflows for your work or personal use and share them with us. Don\u2019t have any ideas? Find inspiration on our blog , YouTube channel , community forum , and Discord server . Dive deeper into n8n\u2019s settings by reading the docs. Take the n8n Level II course. Subscribe to our newsletter to find out when it\u2019s released.","title":"What's next?"},{"location":"courses/level-one/chapter-5/chapter-5.1/","text":"1. Getting Data From the Data Warehouse # In this part of the workflow you will learn how to get data by making HTTP requests using the HTTP Request node. First, let\u2019s set up the scene for building Nathan\u2019s workflow. Open your Editor UI and create a new workflow with one of the two possible commands: Click Ctrl + Alt + N or Cmd + Option + N on your keyboard Open the left menu and click on New under the Workflow section Name this new workflow \u201cNathan\u2019s workflow\u201d. The first thing we need to do is get data from ABCorp\u2019s old data warehouse. In the previous chapter, we used a regular node for a specific app (Hacker News). However, not all apps or services have dedicated nodes \u2013 like the legacy data warehouse from Nathan\u2019s company. Nathan mentioned that it\u2019s not possible to directly export the data, however the data warehouse has a couple of API endpoints. That\u2019s all we need to access the data via the HTTP Request node in n8n. No node for that service? The HTTP Request node is one of the most versatile nodes, allowing you to make HTTP requests which can be used to query data from apps and services. You can use it to access data from apps or services that don\u2019t have a dedicated node in n8n. Now, in your Editor UI, add an HTTP Request node like you learned in the lesson Adding nodes . The node window will open, where you need to configure some parameters. HTTP Request node In the left panel, select: Authentication: Header Auth URL: https://internal.users.n8n.cloud/webhook/custom-erp Options > Add Option > Split Into Items: toggle to true. This option will output each element of an array as its own item. Headers > Add Header: Name: unique_id Value: your_unique_id Note: In case you don't already have your Unique ID, please sign-up here to obtain it. Since you selected Header Authentication , now you need to enter your credentials in order to be able to access the data. Credentials Credentials are unique pieces of information that identify a user or a service and enable them to access apps or services (in our case, represented as n8n nodes). A common form of credentials is a username and a password, but they can take other forms depending on the service. In the left panel, click on Create New in the box next to the parameter Credentials . This will open the Credentials window where you need to add the following information in the Connection tab: Credentials Name in the top left corner, next to the node logo. By default, the name of the credentials is Header Auth account , but you can can rename to beginner_course , for example. Credentials naming You can name your credentials however you want. It\u2019s good practice to give them descriptive names for the app/service, type, and purpose of the credential. A naming convention will make it easier for you to keep track of and identify your credentials. Name: api_key Value: j[vKYdY68H(:WFb Click on the Save button in the top right corner to save your credentials. Your Credentials Connection window should look like this: HTTP Request node credentials Now click the Save button in the bottom right corner of the window. In the HTTP Request node window, click the Execute Node button. The result of the HTTP request should look like this: HTTP Request node window This view should be familiar to you from the Hacker News mini-workflow . This is the data from ABCorp's data warehouse that Nathan needs to work with. This data set includes sales information of 30 customers with 5 features: orderID: The unique id of each order. customerID: The unique id of each customer. employeeName: The name of Nathan\u2019s colleagues who are responsible for each client. orderPrice: The total price of the customer\u2019s order. orderStatus: Whether the customer\u2019s order is booked or still in processing. What's next? # Nathan \ud83d\ude4b : This is great! You already automated an important part of my job with only one node. Now instead of manually accessing the data every time I need it, I can use the HTTP Node to automatically get the information. You \ud83d\udc69\u200d\ud83d\udd27 : Exactly! In the next step, I\u2019ll help you one step further and insert the received data into Airtable, as you need it.","title":"Getting data from the data warehouse"},{"location":"courses/level-one/chapter-5/chapter-5.1/#1-getting-data-from-the-data-warehouse","text":"In this part of the workflow you will learn how to get data by making HTTP requests using the HTTP Request node. First, let\u2019s set up the scene for building Nathan\u2019s workflow. Open your Editor UI and create a new workflow with one of the two possible commands: Click Ctrl + Alt + N or Cmd + Option + N on your keyboard Open the left menu and click on New under the Workflow section Name this new workflow \u201cNathan\u2019s workflow\u201d. The first thing we need to do is get data from ABCorp\u2019s old data warehouse. In the previous chapter, we used a regular node for a specific app (Hacker News). However, not all apps or services have dedicated nodes \u2013 like the legacy data warehouse from Nathan\u2019s company. Nathan mentioned that it\u2019s not possible to directly export the data, however the data warehouse has a couple of API endpoints. That\u2019s all we need to access the data via the HTTP Request node in n8n. No node for that service? The HTTP Request node is one of the most versatile nodes, allowing you to make HTTP requests which can be used to query data from apps and services. You can use it to access data from apps or services that don\u2019t have a dedicated node in n8n. Now, in your Editor UI, add an HTTP Request node like you learned in the lesson Adding nodes . The node window will open, where you need to configure some parameters. HTTP Request node In the left panel, select: Authentication: Header Auth URL: https://internal.users.n8n.cloud/webhook/custom-erp Options > Add Option > Split Into Items: toggle to true. This option will output each element of an array as its own item. Headers > Add Header: Name: unique_id Value: your_unique_id Note: In case you don't already have your Unique ID, please sign-up here to obtain it. Since you selected Header Authentication , now you need to enter your credentials in order to be able to access the data. Credentials Credentials are unique pieces of information that identify a user or a service and enable them to access apps or services (in our case, represented as n8n nodes). A common form of credentials is a username and a password, but they can take other forms depending on the service. In the left panel, click on Create New in the box next to the parameter Credentials . This will open the Credentials window where you need to add the following information in the Connection tab: Credentials Name in the top left corner, next to the node logo. By default, the name of the credentials is Header Auth account , but you can can rename to beginner_course , for example. Credentials naming You can name your credentials however you want. It\u2019s good practice to give them descriptive names for the app/service, type, and purpose of the credential. A naming convention will make it easier for you to keep track of and identify your credentials. Name: api_key Value: j[vKYdY68H(:WFb Click on the Save button in the top right corner to save your credentials. Your Credentials Connection window should look like this: HTTP Request node credentials Now click the Save button in the bottom right corner of the window. In the HTTP Request node window, click the Execute Node button. The result of the HTTP request should look like this: HTTP Request node window This view should be familiar to you from the Hacker News mini-workflow . This is the data from ABCorp's data warehouse that Nathan needs to work with. This data set includes sales information of 30 customers with 5 features: orderID: The unique id of each order. customerID: The unique id of each customer. employeeName: The name of Nathan\u2019s colleagues who are responsible for each client. orderPrice: The total price of the customer\u2019s order. orderStatus: Whether the customer\u2019s order is booked or still in processing.","title":"1. Getting Data From the Data Warehouse"},{"location":"courses/level-one/chapter-5/chapter-5.1/#whats-next","text":"Nathan \ud83d\ude4b : This is great! You already automated an important part of my job with only one node. Now instead of manually accessing the data every time I need it, I can use the HTTP Node to automatically get the information. You \ud83d\udc69\u200d\ud83d\udd27 : Exactly! In the next step, I\u2019ll help you one step further and insert the received data into Airtable, as you need it.","title":"What's next?"},{"location":"courses/level-one/chapter-5/chapter-5.2/","text":"2. Inserting Data into Airtable # In this step of the workflow you will learn how to insert the data received via the HTTP Request node into Airtable using the Airtable node. At this point, your workflow should look like this: Workflow with the Airtable node If we are going to insert data into Airtable, we first need to set up a table there. To do this: Create an Airtable account . In your Airtable workspace add a new base from scratch and name it, for example, beginner course . Create an Airtable base In the beginner course base you have by default a Table 1 with four fields: Name, Notes, Attachment, and Status . These fields are not relevant for us since they are not in our orders data set. This brings us to the next point: the names of the fields in Airtable have to match the names of the columns in the node result. Replace the four default table fields with the five column names from the data set, selecting Number field type for orderID, customerID, and orderPrice, and Single line text for employeeName and orderStatus. Delete the 3 blank rows created by default. Also, rename the table from Table 1 to orders to make it easier to identify. Now your table should look like this: Orders table in Airtable Now that the table is prepared let\u2019s return to the workflow in the Editor UI. Add an Airtable node connected to the HTTP Request node. Spreadsheet nodes You can replace the Airtable node with another spreadsheet app/service. For example, n8n also has nodes for Google Sheets and Spreadsheet File . In the Airtable node window, configure the following parameters: Airtable API: Name: The name of your credentials (e.g. airtable_api) API Key: Your API key . Adding credentials for Airtable is similar to the HTTP Request node you configured in the previous chapter. However, the process of obtaining an API key for Airtable (and other apps/services) is different. Operation: Append This operation will append the new data to the table. Base ID: The ID of the beginner_course base. To get the base Base ID, go to Airtable's API page and click on the base you want to use. The Base ID will be listed in the introduction. Table: orders Now execute the Airtable node and you should get the following result: Airtable node results All 30 data records will now appear in the orders table: Imported records in the orders table What's next? # Nathan \ud83d\ude4b : Wow, this automation is really useful! But this inserts all collected data from the HTTP Request node into Airtable. Remember that I actually need to insert only processing orders in the table and calculate the price of booked orders? You \ud83d\udc69\u200d\ud83d\udd27 : Sure, no problem. As a next step, I'll use a new node to filter the orders based on their status.","title":"Inserting data into airtable"},{"location":"courses/level-one/chapter-5/chapter-5.2/#2-inserting-data-into-airtable","text":"In this step of the workflow you will learn how to insert the data received via the HTTP Request node into Airtable using the Airtable node. At this point, your workflow should look like this: Workflow with the Airtable node If we are going to insert data into Airtable, we first need to set up a table there. To do this: Create an Airtable account . In your Airtable workspace add a new base from scratch and name it, for example, beginner course . Create an Airtable base In the beginner course base you have by default a Table 1 with four fields: Name, Notes, Attachment, and Status . These fields are not relevant for us since they are not in our orders data set. This brings us to the next point: the names of the fields in Airtable have to match the names of the columns in the node result. Replace the four default table fields with the five column names from the data set, selecting Number field type for orderID, customerID, and orderPrice, and Single line text for employeeName and orderStatus. Delete the 3 blank rows created by default. Also, rename the table from Table 1 to orders to make it easier to identify. Now your table should look like this: Orders table in Airtable Now that the table is prepared let\u2019s return to the workflow in the Editor UI. Add an Airtable node connected to the HTTP Request node. Spreadsheet nodes You can replace the Airtable node with another spreadsheet app/service. For example, n8n also has nodes for Google Sheets and Spreadsheet File . In the Airtable node window, configure the following parameters: Airtable API: Name: The name of your credentials (e.g. airtable_api) API Key: Your API key . Adding credentials for Airtable is similar to the HTTP Request node you configured in the previous chapter. However, the process of obtaining an API key for Airtable (and other apps/services) is different. Operation: Append This operation will append the new data to the table. Base ID: The ID of the beginner_course base. To get the base Base ID, go to Airtable's API page and click on the base you want to use. The Base ID will be listed in the introduction. Table: orders Now execute the Airtable node and you should get the following result: Airtable node results All 30 data records will now appear in the orders table: Imported records in the orders table","title":"2. Inserting Data into Airtable"},{"location":"courses/level-one/chapter-5/chapter-5.2/#whats-next","text":"Nathan \ud83d\ude4b : Wow, this automation is really useful! But this inserts all collected data from the HTTP Request node into Airtable. Remember that I actually need to insert only processing orders in the table and calculate the price of booked orders? You \ud83d\udc69\u200d\ud83d\udd27 : Sure, no problem. As a next step, I'll use a new node to filter the orders based on their status.","title":"What's next?"},{"location":"courses/level-one/chapter-5/chapter-5.3/","text":"3. Filtering Orders # In this step of the workflow you will learn how to filter data using conditional logic and how to use expressions in nodes using the IF node. To insert only processing orders into Airtable we need to filter our data by orderStatus . Basically, we want to tell the program that if the orderStatus is processing, then insert all records with this status into Airtable; else , i.e. if the orderStatus is not processing , calculate the sum of all orders with the other orderStatus (booked) . This if-then-else command is conditional logic. In n8n workflows, conditional logic can be implemented with the IF node , which splits a workflow conditionally based on comparison operations. IF vs Switch If you need to filter data on more than two conditional routes that are possible with the IF node (true and false), use the Switch node . The Switch node is similar to the IF node, but supports up to four conditional routes. Back to your workflow, remove the connection between the HTTP Request node and the Airtable node. Add an IF node connected to the HTTP Request node. In the IF node window click on Add Condition > string and configure the parameters: Value 1 : Current Node > Input Data > JSON > orderStatus \u2192 {{$json[\"orderStatus\"]}} To select this value, click on the wheel icon \u201cAdd Expression\u201d on the right side of the Value 1 field. Expressions An expression is a string of characters and symbols in a programming language that represents a value depending upon its input. In n8n workflows, you can use expressions in a node to refer to another node for input data. In our example, the IF node references the data output by the HTTP Request node. Expression Editor in the IF node Operation: equal Value 2: processing Data Type Make sure to select the correct data type (boolean, data & time, number, or string) of the referenced data in Add Condition . Now execute the IF node and have a look at the resulting data, which should look like this: IF node Next, we want to insert this data into Airtable. You already know how to do this from the previous chapter where we inserted all data into the orders table. At this stage, your workflow should look like this: Workflow with the IF node What's next? # Nathan \ud83d\ude4b : This IF node is really useful for filtering data! Now I have all the information about processing orders. I actually only need the employeeName and orderId, but I guess I can keep all the other fields just in case. You \ud83d\udc69\u200d\ud83d\udd27 : Actually, I wouldn't recommend doing that. Inserting more data requires more computational power, the data transfer is slower and takes longer, and takes up more storage resources in your table. In this particular case, 14 records with 5 features might not seem like a lot to make a significant difference, but if your business grows to thousands of records and tens of features, things add up and even one extra column can affect performance. Nathan \ud83d\ude4b : Oh, that's good to know. So, can you select only two fields from the processing orders? You \ud83d\udc69\u200d\ud83d\udd27 : Sure, I'll do that in the next step.","title":"Filtering orders"},{"location":"courses/level-one/chapter-5/chapter-5.3/#3-filtering-orders","text":"In this step of the workflow you will learn how to filter data using conditional logic and how to use expressions in nodes using the IF node. To insert only processing orders into Airtable we need to filter our data by orderStatus . Basically, we want to tell the program that if the orderStatus is processing, then insert all records with this status into Airtable; else , i.e. if the orderStatus is not processing , calculate the sum of all orders with the other orderStatus (booked) . This if-then-else command is conditional logic. In n8n workflows, conditional logic can be implemented with the IF node , which splits a workflow conditionally based on comparison operations. IF vs Switch If you need to filter data on more than two conditional routes that are possible with the IF node (true and false), use the Switch node . The Switch node is similar to the IF node, but supports up to four conditional routes. Back to your workflow, remove the connection between the HTTP Request node and the Airtable node. Add an IF node connected to the HTTP Request node. In the IF node window click on Add Condition > string and configure the parameters: Value 1 : Current Node > Input Data > JSON > orderStatus \u2192 {{$json[\"orderStatus\"]}} To select this value, click on the wheel icon \u201cAdd Expression\u201d on the right side of the Value 1 field. Expressions An expression is a string of characters and symbols in a programming language that represents a value depending upon its input. In n8n workflows, you can use expressions in a node to refer to another node for input data. In our example, the IF node references the data output by the HTTP Request node. Expression Editor in the IF node Operation: equal Value 2: processing Data Type Make sure to select the correct data type (boolean, data & time, number, or string) of the referenced data in Add Condition . Now execute the IF node and have a look at the resulting data, which should look like this: IF node Next, we want to insert this data into Airtable. You already know how to do this from the previous chapter where we inserted all data into the orders table. At this stage, your workflow should look like this: Workflow with the IF node","title":"3. Filtering Orders"},{"location":"courses/level-one/chapter-5/chapter-5.3/#whats-next","text":"Nathan \ud83d\ude4b : This IF node is really useful for filtering data! Now I have all the information about processing orders. I actually only need the employeeName and orderId, but I guess I can keep all the other fields just in case. You \ud83d\udc69\u200d\ud83d\udd27 : Actually, I wouldn't recommend doing that. Inserting more data requires more computational power, the data transfer is slower and takes longer, and takes up more storage resources in your table. In this particular case, 14 records with 5 features might not seem like a lot to make a significant difference, but if your business grows to thousands of records and tens of features, things add up and even one extra column can affect performance. Nathan \ud83d\ude4b : Oh, that's good to know. So, can you select only two fields from the processing orders? You \ud83d\udc69\u200d\ud83d\udd27 : Sure, I'll do that in the next step.","title":"What's next?"},{"location":"courses/level-one/chapter-5/chapter-5.4/","text":"4. Setting Values for Processing Orders # In this step of the workflow you will learn how to select and set data before transferring it to Airtable using the Set node. The next step in Nathan\u2019s workflow is to insert the employeeName and orderId of all processing orders into Airtable. For this, you need to use the Set node , which allows you to select and set the data you want to be transferred from one app/service to another. Set node The Set node can set completely new data as well as overwrite data that already exists. This node is crucial in workflows which expect incoming data from previous nodes, such as when inserting values into spreadsheets or databases. In your workflow, add a new Set node between the IF node and the Airtable node. In the Set node window you need to toggle Keep Only Set to true and then add two values: Add Value > Number: Name: orderId Value: {{$json[\"orderID\"]}} Current Node > Input Data > JSON > orderID Add Value > String: Name: employeeName Value: {{$json[\"employeeName\"]}} Current Node > Input Data > JSON > employeeName After setting the two values click on Execute Node and you should see the following results: Set node Next, we need to insert these values into Airtable. Go to your Airtable account and add a new table called processingOrders with two columns, orderId and employeeName , just like you learned in the lesson Inserting data into Airtable . Remember to update the Airtable node configuration to point to this new table. Once that\u2019s done, execute the Airtable node in the workflow and you should see the records inserted in the table. At this stage, it looks like this: Workflow with the Set node What's next? # Nathan \ud83d\ude4b : You've already automated half of my work! Now I still need to calculate the booked orders for my colleagues. Can that be automated as well? You \ud83d\udc69\u200d\ud83d\udd27 : Of course! In the next step, I'll use some JavaScript code in a node to calculate the booked orders.","title":"Setting values for processing orders"},{"location":"courses/level-one/chapter-5/chapter-5.4/#4-setting-values-for-processing-orders","text":"In this step of the workflow you will learn how to select and set data before transferring it to Airtable using the Set node. The next step in Nathan\u2019s workflow is to insert the employeeName and orderId of all processing orders into Airtable. For this, you need to use the Set node , which allows you to select and set the data you want to be transferred from one app/service to another. Set node The Set node can set completely new data as well as overwrite data that already exists. This node is crucial in workflows which expect incoming data from previous nodes, such as when inserting values into spreadsheets or databases. In your workflow, add a new Set node between the IF node and the Airtable node. In the Set node window you need to toggle Keep Only Set to true and then add two values: Add Value > Number: Name: orderId Value: {{$json[\"orderID\"]}} Current Node > Input Data > JSON > orderID Add Value > String: Name: employeeName Value: {{$json[\"employeeName\"]}} Current Node > Input Data > JSON > employeeName After setting the two values click on Execute Node and you should see the following results: Set node Next, we need to insert these values into Airtable. Go to your Airtable account and add a new table called processingOrders with two columns, orderId and employeeName , just like you learned in the lesson Inserting data into Airtable . Remember to update the Airtable node configuration to point to this new table. Once that\u2019s done, execute the Airtable node in the workflow and you should see the records inserted in the table. At this stage, it looks like this: Workflow with the Set node","title":"4. Setting Values for Processing Orders"},{"location":"courses/level-one/chapter-5/chapter-5.4/#whats-next","text":"Nathan \ud83d\ude4b : You've already automated half of my work! Now I still need to calculate the booked orders for my colleagues. Can that be automated as well? You \ud83d\udc69\u200d\ud83d\udd27 : Of course! In the next step, I'll use some JavaScript code in a node to calculate the booked orders.","title":"What's next?"},{"location":"courses/level-one/chapter-5/chapter-5.5/","text":"5. Calculating Booked Orders # In this step of the workflow you will learn how n8n data is structured and how to add custom JavaScript code to perform calculations using the Function node. The next step in Nathan\u2019s workflow is to calculate two values from the booked orders: The total number of booked orders The total value of all booked orders To calculate data and add more functionality to your workflows you can use the Function node , which lets you write custom JavaScript code. Function vs Function Item n8n also provides a Function Item node , which should not be confused with the Function node. The Function Item node is used to add custom snippets of JavaScript code that should be executed once for every item that it receives as the input. Learn more about the difference between the Function and Function Item nodes here . Before going into the setup of the Function node, you should first learn the data structure of n8n. This is important if you want to: create your own node write custom expressions use the Function or Function Item node get the most out of n8n In n8n, the data that is passed between nodes is an array of objects with the following structure: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 [ { // Each i te m has t o co nta i n a \"json\" proper t y. Bu t i t ca n be a n emp t y objec t like {} . // A n y ki n d o f JSON da ta is allowed. So arrays a n d t he da ta bei n g deeply neste d is f i ne . jso n : { // The ac tual da ta n 8 n opera tes o n (required) // This da ta is o nl y a n example i t could be a n y ki n d o f JSON da ta jso n KeyName : 'keyValue' , a n o t herJso n Key : { lowerLevelJso n Key : 1 } }, // Bi nar y da ta o f i te m. The mos t i te ms i n n 8 n do n o t co nta i n a n y (op t io nal ) bi nar y : { // The key - na me \"binaryKeyName\" is o nl y a n example. A n y ki n d o f key - na me is possible. bi nar yKeyName : { da ta : '....' , // Base 64 e n coded bi nar y da ta (required) mimeType : 'image/p n g' , // Op t io nal bu t should be se t i f possible (op t io nal ) f ileEx tens io n : 'p n g' , // Op t io nal bu t should be se t i f possible (op t io nal ) f ileName : 'example.p n g' , // Op t io nal bu t should be se t i f possible (op t io nal ) } } }, ... ] Now let\u2019s see how to implement this. In your workflow, add a Function node connected to the false branch of the IF node. In the Function node window paste the following code in the JavaScript Code box: 1 2 3 4 5 6 7 let totalBooked = items . length ; let bookedSum = 0 ; for ( let i = 0 ; i < items . length ; i ++ ) { bookedSum = bookedSum + items [ i ]. json . orderPrice ; } return [{ json : { totalBooked , bookedSum }}]; Notice the format in which we return the results of the calculation: return [{json:{totalBooked, bookedSum}}] Data structure error If you don\u2019t use the correct data structure, you will get an error message: Error: Always an Array of items has to be returned! Now execute the node and you should see the following results: Function node What's next? # Nathan \ud83d\ude4b : Wow, the Function node is really powerful! So if I have some basic JavaScript skills I can power up my workflows. You \ud83d\udc69\u200d\ud83d\udd27 : Exactly \u2013 you can progress from no-code to low-code! Nathan \ud83d\ude4b : Now, how do I send the calculations for the booked orders to my team's Discord channel? You \ud83d\udc69\u200d\ud83d\udd27 : There's an n8n node for that \u2013 I'll set it up in the next step.","title":"Calculating booked orders"},{"location":"courses/level-one/chapter-5/chapter-5.5/#5-calculating-booked-orders","text":"In this step of the workflow you will learn how n8n data is structured and how to add custom JavaScript code to perform calculations using the Function node. The next step in Nathan\u2019s workflow is to calculate two values from the booked orders: The total number of booked orders The total value of all booked orders To calculate data and add more functionality to your workflows you can use the Function node , which lets you write custom JavaScript code. Function vs Function Item n8n also provides a Function Item node , which should not be confused with the Function node. The Function Item node is used to add custom snippets of JavaScript code that should be executed once for every item that it receives as the input. Learn more about the difference between the Function and Function Item nodes here . Before going into the setup of the Function node, you should first learn the data structure of n8n. This is important if you want to: create your own node write custom expressions use the Function or Function Item node get the most out of n8n In n8n, the data that is passed between nodes is an array of objects with the following structure: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 [ { // Each i te m has t o co nta i n a \"json\" proper t y. Bu t i t ca n be a n emp t y objec t like {} . // A n y ki n d o f JSON da ta is allowed. So arrays a n d t he da ta bei n g deeply neste d is f i ne . jso n : { // The ac tual da ta n 8 n opera tes o n (required) // This da ta is o nl y a n example i t could be a n y ki n d o f JSON da ta jso n KeyName : 'keyValue' , a n o t herJso n Key : { lowerLevelJso n Key : 1 } }, // Bi nar y da ta o f i te m. The mos t i te ms i n n 8 n do n o t co nta i n a n y (op t io nal ) bi nar y : { // The key - na me \"binaryKeyName\" is o nl y a n example. A n y ki n d o f key - na me is possible. bi nar yKeyName : { da ta : '....' , // Base 64 e n coded bi nar y da ta (required) mimeType : 'image/p n g' , // Op t io nal bu t should be se t i f possible (op t io nal ) f ileEx tens io n : 'p n g' , // Op t io nal bu t should be se t i f possible (op t io nal ) f ileName : 'example.p n g' , // Op t io nal bu t should be se t i f possible (op t io nal ) } } }, ... ] Now let\u2019s see how to implement this. In your workflow, add a Function node connected to the false branch of the IF node. In the Function node window paste the following code in the JavaScript Code box: 1 2 3 4 5 6 7 let totalBooked = items . length ; let bookedSum = 0 ; for ( let i = 0 ; i < items . length ; i ++ ) { bookedSum = bookedSum + items [ i ]. json . orderPrice ; } return [{ json : { totalBooked , bookedSum }}]; Notice the format in which we return the results of the calculation: return [{json:{totalBooked, bookedSum}}] Data structure error If you don\u2019t use the correct data structure, you will get an error message: Error: Always an Array of items has to be returned! Now execute the node and you should see the following results: Function node","title":"5. Calculating Booked Orders"},{"location":"courses/level-one/chapter-5/chapter-5.5/#whats-next","text":"Nathan \ud83d\ude4b : Wow, the Function node is really powerful! So if I have some basic JavaScript skills I can power up my workflows. You \ud83d\udc69\u200d\ud83d\udd27 : Exactly \u2013 you can progress from no-code to low-code! Nathan \ud83d\ude4b : Now, how do I send the calculations for the booked orders to my team's Discord channel? You \ud83d\udc69\u200d\ud83d\udd27 : There's an n8n node for that \u2013 I'll set it up in the next step.","title":"What's next?"},{"location":"courses/level-one/chapter-5/chapter-5.6/","text":"6. Notifying the Team # In this step of the workflow you will learn how to send messages to a Discord channel using the Discord node. Now that you have a calculated summary of the booked orders you need to notify Nathan\u2019s team in their Discord channel. n8n has a Discord node that allows you to send messages. We'll be sending the messages to the n8n server on Discord. Communication nodes You can replace the Discord node with another communication app. For example, n8n also has nodes for Slack and Mattermost . In your workflow, add a Discord node connected to the Function node. In the Discord node window, configure the parameters: Webhook URL: Enter the URL that you received in the email from n8n when you signed up for this course. Text (Expression): This week we have {{$json[\"totalBooked\"]}} booked orders with a total value of {{$json[\"bookedSum\"]}}. My Unique ID: {{$node[\"HTTP Request\"].parameter[\"headerParametersUi\"][\"parameter\"][0][\"value\"]}} Discord node expression Now execute the Discord node and if all works well, you should get a message in Discord: Discord message What's next? # Nathan \ud83d\ude4b : Incredible, you've saved me so many hours of tedious work already! Now I can simply execute this workflow when I need it. I just need to remember to run it every Monday morning at 9 am... You \ud83d\udc69\u200d\ud83d\udd27 : Don't worry about that, you can actually schedule the workflow to run on a specific day, time, or interval. I'll set this up in the next step.","title":"Notifying the team"},{"location":"courses/level-one/chapter-5/chapter-5.6/#6-notifying-the-team","text":"In this step of the workflow you will learn how to send messages to a Discord channel using the Discord node. Now that you have a calculated summary of the booked orders you need to notify Nathan\u2019s team in their Discord channel. n8n has a Discord node that allows you to send messages. We'll be sending the messages to the n8n server on Discord. Communication nodes You can replace the Discord node with another communication app. For example, n8n also has nodes for Slack and Mattermost . In your workflow, add a Discord node connected to the Function node. In the Discord node window, configure the parameters: Webhook URL: Enter the URL that you received in the email from n8n when you signed up for this course. Text (Expression): This week we have {{$json[\"totalBooked\"]}} booked orders with a total value of {{$json[\"bookedSum\"]}}. My Unique ID: {{$node[\"HTTP Request\"].parameter[\"headerParametersUi\"][\"parameter\"][0][\"value\"]}} Discord node expression Now execute the Discord node and if all works well, you should get a message in Discord: Discord message","title":"6. Notifying the Team"},{"location":"courses/level-one/chapter-5/chapter-5.6/#whats-next","text":"Nathan \ud83d\ude4b : Incredible, you've saved me so many hours of tedious work already! Now I can simply execute this workflow when I need it. I just need to remember to run it every Monday morning at 9 am... You \ud83d\udc69\u200d\ud83d\udd27 : Don't worry about that, you can actually schedule the workflow to run on a specific day, time, or interval. I'll set this up in the next step.","title":"What's next?"},{"location":"courses/level-one/chapter-5/chapter-5.7/","text":"7. Scheduling the Workflow # In this step of the workflow you will learn how to schedule your workflow so that it runs automatically at a set time/interval using the Cron node . The workflow you\u2019ve built so far executes only when you click on Execute Workflow . But Nathan needs it to run automatically every Monday morning. You can do this with the Cron node , which allows you to schedule workflows to run periodically at fixed dates, times, or intervals. In your workflow, replace the Start node with the Cron node and configure its parameters: Mode: Every Week Hour: 9 Minute: 0 Weekday: Monday Cron node Keep in mind To ensure accurate scheduling with the Cron node, be sure the timezone is set correctly for your n8n instance (or the workflow). What's next? # You \ud83d\udc69\u200d\ud83d\udd27 : That was it for the workflow! I've added and configured all necessary nodes. Now every time you click on Execute Workflow, all nodes will be executed: getting, filtering, calculating, and transferring the sales data. Nathan \ud83d\ude4b : This is just what I needed! So now my workflow will run automatically every Monday morning? You \ud83d\udc69\u200d\ud83d\udd27 : Not so fast. To do that, you need to activate your workflow. I'll do this in the next step and show you how to interpret the execution log.","title":"Scheduling the workflow"},{"location":"courses/level-one/chapter-5/chapter-5.7/#7-scheduling-the-workflow","text":"In this step of the workflow you will learn how to schedule your workflow so that it runs automatically at a set time/interval using the Cron node . The workflow you\u2019ve built so far executes only when you click on Execute Workflow . But Nathan needs it to run automatically every Monday morning. You can do this with the Cron node , which allows you to schedule workflows to run periodically at fixed dates, times, or intervals. In your workflow, replace the Start node with the Cron node and configure its parameters: Mode: Every Week Hour: 9 Minute: 0 Weekday: Monday Cron node Keep in mind To ensure accurate scheduling with the Cron node, be sure the timezone is set correctly for your n8n instance (or the workflow).","title":"7. Scheduling the Workflow"},{"location":"courses/level-one/chapter-5/chapter-5.7/#whats-next","text":"You \ud83d\udc69\u200d\ud83d\udd27 : That was it for the workflow! I've added and configured all necessary nodes. Now every time you click on Execute Workflow, all nodes will be executed: getting, filtering, calculating, and transferring the sales data. Nathan \ud83d\ude4b : This is just what I needed! So now my workflow will run automatically every Monday morning? You \ud83d\udc69\u200d\ud83d\udd27 : Not so fast. To do that, you need to activate your workflow. I'll do this in the next step and show you how to interpret the execution log.","title":"What's next?"},{"location":"courses/level-one/chapter-5/chapter-5.8/","text":"8. Activating and Examining the Workflow # In this step of the workflow you will learn how to activate your workflow and change the default workflow settings. Activating a workflow means that it will run automatically every time a trigger node receives input or meets a condition. By default, all newly created workflows are deactivated. To activate your workflow toggle the Active button on the top right corner of the Editor UI. Nathan\u2019s workflow will now be executed automatically every Monday at 9 am. Activated workflow Workflow Executions An execution represents a completed run of a workflow, from the first to the last node. n8n logs workflow executions allowing you to see if the workflow was completed successfully or not. The execution log is useful for debugging your workflow and seeing at what stage it runs into issues. To see the execution log, click on the icon with three lines in the left panel, which will open the Workflow Executions window. Workflow Execution List The Workflow Executions window displays a table with the following information: Started At / ID: The date and time when the workflow started, followed by the ID of this workflow execution Name: The name of the workflow Status: The status of the workflow (Error, Running, or Success) Mode: How the workflow was triggered (trigger or webhook) Running Time: The duration it took the workflow to execute Workflow execution status In the Workflow Executions window you can filter the displayed executions by workflow and by status ( All , Error , Running , or Success ).\\ The information displayed here depends on what workflows and executions you set up in Workflow Settings to be saved. Workflow Settings You can customize your workflows and executions, or overwrite some of the global default settings in Workflow Settings . These settings are located in the left panel, under the Workflows section. Workflow Settings In the Workflow Settings window you can configure six settings: Error Workflow : A workflow to run in case the execution of the current workflow fails. Timezone: The timezone to use in the current workflow. If not set, the global Timezone (by default \"New York\") is used. This setting is particularly important for the Cron node, as you want to make sure that the workflow gets executed at the right time. Save Data Error Execution: If the Execution data of the workflow should be saved when it fails. Save Data Success Execution: If the Execution data of the workflow should be saved when it succeeds. Save Manual Executions: If executions started from the Editor UI should be saved. Save Execution Progress: If the execution data of each node should be saved. If Yes, you can resume the workflow from where it stopped in case of an error, though keep in mind that this might make the execution slower. What's next? # You \ud83d\udc69\u200d\ud83d\udd27 : That was it! Now you have a 7-node workflow that will run automatically every Monday morning. You don't have to worry about remembering to wrangle the data. Instead, you can start your week with more meaningful or exciting work. Nathan \ud83d\ude4b : This workflow is incredibly helpful, thank you! Now, what's next for you? You \ud83d\udc69\u200d\ud83d\udd27 : I'd like to build more workflows, share them with others, and use some workflows built by other people.","title":"Activating and examining the workflow"},{"location":"courses/level-one/chapter-5/chapter-5.8/#8-activating-and-examining-the-workflow","text":"In this step of the workflow you will learn how to activate your workflow and change the default workflow settings. Activating a workflow means that it will run automatically every time a trigger node receives input or meets a condition. By default, all newly created workflows are deactivated. To activate your workflow toggle the Active button on the top right corner of the Editor UI. Nathan\u2019s workflow will now be executed automatically every Monday at 9 am. Activated workflow Workflow Executions An execution represents a completed run of a workflow, from the first to the last node. n8n logs workflow executions allowing you to see if the workflow was completed successfully or not. The execution log is useful for debugging your workflow and seeing at what stage it runs into issues. To see the execution log, click on the icon with three lines in the left panel, which will open the Workflow Executions window. Workflow Execution List The Workflow Executions window displays a table with the following information: Started At / ID: The date and time when the workflow started, followed by the ID of this workflow execution Name: The name of the workflow Status: The status of the workflow (Error, Running, or Success) Mode: How the workflow was triggered (trigger or webhook) Running Time: The duration it took the workflow to execute Workflow execution status In the Workflow Executions window you can filter the displayed executions by workflow and by status ( All , Error , Running , or Success ).\\ The information displayed here depends on what workflows and executions you set up in Workflow Settings to be saved. Workflow Settings You can customize your workflows and executions, or overwrite some of the global default settings in Workflow Settings . These settings are located in the left panel, under the Workflows section. Workflow Settings In the Workflow Settings window you can configure six settings: Error Workflow : A workflow to run in case the execution of the current workflow fails. Timezone: The timezone to use in the current workflow. If not set, the global Timezone (by default \"New York\") is used. This setting is particularly important for the Cron node, as you want to make sure that the workflow gets executed at the right time. Save Data Error Execution: If the Execution data of the workflow should be saved when it fails. Save Data Success Execution: If the Execution data of the workflow should be saved when it succeeds. Save Manual Executions: If executions started from the Editor UI should be saved. Save Execution Progress: If the execution data of each node should be saved. If Yes, you can resume the workflow from where it stopped in case of an error, though keep in mind that this might make the execution slower.","title":"8. Activating and Examining the Workflow"},{"location":"courses/level-one/chapter-5/chapter-5.8/#whats-next","text":"You \ud83d\udc69\u200d\ud83d\udd27 : That was it! Now you have a 7-node workflow that will run automatically every Monday morning. You don't have to worry about remembering to wrangle the data. Instead, you can start your week with more meaningful or exciting work. Nathan \ud83d\ude4b : This workflow is incredibly helpful, thank you! Now, what's next for you? You \ud83d\udc69\u200d\ud83d\udd27 : I'd like to build more workflows, share them with others, and use some workflows built by other people.","title":"What's next?"},{"location":"data/","text":"Overview # Data represents units of information that are collected by and transmitted through nodes. For \"basic usage\" it is not necessarily needed to understand how the data that gets passed from one node to another is structured. However, it becomes important if you want to: Create your own node Write custom expressions Use the Function or Function Item node This section covers: Data structure Transforming data Using code","title":"Overview"},{"location":"data/#overview","text":"Data represents units of information that are collected by and transmitted through nodes. For \"basic usage\" it is not necessarily needed to understand how the data that gets passed from one node to another is structured. However, it becomes important if you want to: Create your own node Write custom expressions Use the Function or Function Item node This section covers: Data structure Transforming data Using code","title":"Overview"},{"location":"data/code/","text":"Processing data with code # Function # A function is a block of code designed to perform a certain task. In n8n, you can write custom JavaScript code snippets to add, remove, and update the data you receive from a node. The Function and Function Item nodes are the most powerful in n8n. Both nodes work very similarly, they give you access to the incoming data and you can manipulate it. With these nodes you can implement any function you want using JavaScript code. The code of the Function node gets executed only once. The node receives the full items (JSON and binary data) as an array and expects an array of items as a return value. The items returned can be totally different from the incoming ones. So it is not only possible to remove and edit existing items, but also to add or return totally new ones. The code of the Function Item node gets executed once for every item. The node receives one item (just the JSON data) at a time as input. As a return value, it expects the JSON data of one single item. That makes it possible to add, remove, and edit JSON properties of items, but it is not possible to add new or remove existing items. Accessing and changing binary data is only possible via the methods getBinaryData and setBinaryData . Both the Function node and Function Item node support promises. So instead of returning the item or items directly, it is also possible to return a promise which resolves accordingly. Here is a comparative overview of the Function and Function Item nodes: Data to access Function FunctionItem JSON data items[ index ].json item Binary data items[ index ].binary getBinaryData()","title":"Using code"},{"location":"data/code/#processing-data-with-code","text":"","title":"Processing data with code"},{"location":"data/code/#function","text":"A function is a block of code designed to perform a certain task. In n8n, you can write custom JavaScript code snippets to add, remove, and update the data you receive from a node. The Function and Function Item nodes are the most powerful in n8n. Both nodes work very similarly, they give you access to the incoming data and you can manipulate it. With these nodes you can implement any function you want using JavaScript code. The code of the Function node gets executed only once. The node receives the full items (JSON and binary data) as an array and expects an array of items as a return value. The items returned can be totally different from the incoming ones. So it is not only possible to remove and edit existing items, but also to add or return totally new ones. The code of the Function Item node gets executed once for every item. The node receives one item (just the JSON data) at a time as input. As a return value, it expects the JSON data of one single item. That makes it possible to add, remove, and edit JSON properties of items, but it is not possible to add new or remove existing items. Accessing and changing binary data is only possible via the methods getBinaryData and setBinaryData . Both the Function node and Function Item node support promises. So instead of returning the item or items directly, it is also possible to return a promise which resolves accordingly. Here is a comparative overview of the Function and Function Item nodes: Data to access Function FunctionItem JSON data items[ index ].json item Binary data items[ index ].binary getBinaryData()","title":"Function"},{"location":"data/data-structure/","text":"Data structure # In n8n, all data passed between nodes is an array of objects. It has the following structure: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 [ { // For mos t da ta : // Wrap each i te m i n a n o t her objec t , wi t h t he key 'jso n ' \"json\" : { // Example da ta \"jsonKeyName\" : \"keyValue\" , \"anotherJsonKey\" : { \"lowerLevelJsonKey\" : 1 } }, // For bi nar y da ta : // Wrap each i te m i n a n o t her objec t , wi t h t he key 'bi nar y' \"binary\" : { // Example da ta \"binaryKeyName\" : { \"data\" : \"....\" , // Base 64 e n coded bi nar y da ta (required) \"mimeType\" : \"image/png\" , // Bes t prac t ice t o se t i f possible (op t io nal ) \"fileExtension\" : \"png\" , // Bes t prac t ice t o se t i f possible (op t io nal ) \"fileName\" : \"example.png\" , // Bes t prac t ice t o se t i f possible (op t io nal ) } } }, ] Skipping the 'json' key and array syntax From 0.166.0 onwards, n8n automatically adds the json key if it is missing. It also automatically wraps your items in an array ( [] ) if needed. Data flow # Nodes do not only process one \"item\", they process multiple ones. For example, if the Trello node is set to Create-Card and it has an expression set for Name to be set depending on name property, it will create a card for each item, always choosing the name-property-value of the current one. This data would, for example, create two cards. One named test1 the other one named test2 : 1 2 3 4 5 6 7 8 [ { na me : \"test1\" }, { na me : \"test2\" } ]","title":"Data structure"},{"location":"data/data-structure/#data-structure","text":"In n8n, all data passed between nodes is an array of objects. It has the following structure: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 [ { // For mos t da ta : // Wrap each i te m i n a n o t her objec t , wi t h t he key 'jso n ' \"json\" : { // Example da ta \"jsonKeyName\" : \"keyValue\" , \"anotherJsonKey\" : { \"lowerLevelJsonKey\" : 1 } }, // For bi nar y da ta : // Wrap each i te m i n a n o t her objec t , wi t h t he key 'bi nar y' \"binary\" : { // Example da ta \"binaryKeyName\" : { \"data\" : \"....\" , // Base 64 e n coded bi nar y da ta (required) \"mimeType\" : \"image/png\" , // Bes t prac t ice t o se t i f possible (op t io nal ) \"fileExtension\" : \"png\" , // Bes t prac t ice t o se t i f possible (op t io nal ) \"fileName\" : \"example.png\" , // Bes t prac t ice t o se t i f possible (op t io nal ) } } }, ] Skipping the 'json' key and array syntax From 0.166.0 onwards, n8n automatically adds the json key if it is missing. It also automatically wraps your items in an array ( [] ) if needed.","title":"Data structure"},{"location":"data/data-structure/#data-flow","text":"Nodes do not only process one \"item\", they process multiple ones. For example, if the Trello node is set to Create-Card and it has an expression set for Name to be set depending on name property, it will create a card for each item, always choosing the name-property-value of the current one. This data would, for example, create two cards. One named test1 the other one named test2 : 1 2 3 4 5 6 7 8 [ { na me : \"test1\" }, { na me : \"test2\" } ]","title":"Data flow"},{"location":"data/transforming-data/","text":"Transforming data # n8n uses a predefined data structure that allows all nodes to process incoming data correctly. Your incoming data may have a different data structure, in which case you will need to transform it to allow each item to be processed individually. For example, the image below shows the output of an HTTP Request node that returns data incompatible with n8n\u2019s data structure. The node returns the data and displays that only one item was returned. To transform this kind of structure into the n8n data structure you will have to use the Item Lists node. Note If you\u2019re using the HTTP Request node, you should use the Split Into items option to transform the data. You don\u2019t have to use a Function node in that case.","title":"Transforming data"},{"location":"data/transforming-data/#transforming-data","text":"n8n uses a predefined data structure that allows all nodes to process incoming data correctly. Your incoming data may have a different data structure, in which case you will need to transform it to allow each item to be processed individually. For example, the image below shows the output of an HTTP Request node that returns data incompatible with n8n\u2019s data structure. The node returns the data and displays that only one item was returned. To transform this kind of structure into the n8n data structure you will have to use the Item Lists node. Note If you\u2019re using the HTTP Request node, you should use the Split Into items option to transform the data. You don\u2019t have to use a Function node in that case.","title":"Transforming data"},{"location":"flow-logic/","text":"Overview # n8n allows you to represent complex logic in your workflows. Merging Looping Error handling","title":"Overview"},{"location":"flow-logic/#overview","text":"n8n allows you to represent complex logic in your workflows. Merging Looping Error handling","title":"Overview"},{"location":"flow-logic/error-handling/","text":"Error workflow # For each workflow, an optional Error Workflow can be set in the Workflow Settings. It gets executed if the original execution fails. That makes it possible to, for instance, inform the user via Email or Slack if something goes wrong. The same Error Workflow can be set on multiple workflows. The only difference between a regular workflow and an Error Workflow is that it contains an Error Trigger node, so it is important to make sure that this node gets created before setting a workflow as Error Workflow. The Error Trigger node will trigger in case the execution fails and receives information about it. The data looks like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 [ { \"execution\" : { \"id\" : \"231\" , \"url\" : \"https://n8n.example.com/execution/231\" , \"retryOf\" : \"34\" , \"error\" : { \"message\" : \"Example Error Message\" , \"stack\" : \"Stacktrace\" }, \"lastNodeExecuted\" : \"Node With Error\" , \"mode\" : \"manual\" }, \"workflow\" : { \"id\" : \"1\" , \"name\" : \"Example Workflow\" } } ] All information is always present except: execution.id : Only present when the execution gets saved in the database execution.url : Only present when the execution gets saved in the database execution.retryOf : Only present when the execution is a retry of a previously failed execution","title":"Error handling"},{"location":"flow-logic/error-handling/#error-workflow","text":"For each workflow, an optional Error Workflow can be set in the Workflow Settings. It gets executed if the original execution fails. That makes it possible to, for instance, inform the user via Email or Slack if something goes wrong. The same Error Workflow can be set on multiple workflows. The only difference between a regular workflow and an Error Workflow is that it contains an Error Trigger node, so it is important to make sure that this node gets created before setting a workflow as Error Workflow. The Error Trigger node will trigger in case the execution fails and receives information about it. The data looks like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 [ { \"execution\" : { \"id\" : \"231\" , \"url\" : \"https://n8n.example.com/execution/231\" , \"retryOf\" : \"34\" , \"error\" : { \"message\" : \"Example Error Message\" , \"stack\" : \"Stacktrace\" }, \"lastNodeExecuted\" : \"Node With Error\" , \"mode\" : \"manual\" }, \"workflow\" : { \"id\" : \"1\" , \"name\" : \"Example Workflow\" } } ] All information is always present except: execution.id : Only present when the execution gets saved in the database execution.url : Only present when the execution gets saved in the database execution.retryOf : Only present when the execution is a retry of a previously failed execution","title":"Error workflow"},{"location":"flow-logic/looping/","text":"Looping in n8n # Looping enables you to repeatedly perform the same actions, stopping only after a set number of repetitions (e.g. fetch the 10 most recent items) or when a specific condition is met (e.g. no new items exist). Looping is useful when you want to process multiple similar items, for example sending a message to every contact in your address book. In n8n this repetitive processing is handled automatically, meaning you do not need to specifically build loops into your workflows. There are some special cases where this isn\u2019t true. Using loops in n8n # n8n nodes take any number of items as input, process these items, and output the results. You can think of each item as a single data point (or a single row in the output table of a node). The following image shows the output from the Customer Datastore node, where each row is an individual item. Nodes usually run once for each item . For example, if you want to send the name and notes of the customers as a message on Slack , connect the Slack node to the Customer Datastore node, configure the parameters, and execute the node. You will receive 5 messages \u2014 one for each item. This is how you can process multiple items without having to explicitly connect nodes in a loop. Keep in mind Your data must be in the proper structure for n8n to process it as described here. See Transforming Data to learn more. Executing nodes once # For situations where you do not want a node to process all received items, for example sending a Slack message only to the first customer, you can do so by toggling the Execute Once parameter in the Settings tab of that node. This setting is helpful when the incoming data contains multiple items and you want to only process the first one. Using the Customer Datastore and Slack example from above, it would look like the following: You can see a message was sent only for the first customer - Jay Gatsby. Executions indicator # When you execute a node a green number gets displayed on its icon. This number represents the number of times the node has executed, it doesn't represent the number of items returned by the node. Each execution may return multiple items. If a node receives input from multiple nodes, it will execute separately for each set of input data. For example, if the above node has two input nodes, it will execute twice, once for each input as pictured below. Note : The only exception to this is the Merge node. In the above image, notice that the Customer Datastore node gets executed twice, once for each input. To view the output for each input node, select the execution from the Data of Execution dropdown list: When you have a loop in a workflow, the node gets executed multiple times. The number on the node will represent the total number of executions: Creating loops # As discussed above, n8n typically handles the iteration for all incoming items. However, there are certain scenarios where you will have to create a loop to iterate through all items. You can learn more about these here . To create a loop in an n8n workflow, connect the output of one node to the input of a previous node. Make sure you add an IF node to check when to stop the loop. You now have a loop that iterates over each item. Here is an example workflow that implements a loop with an IF node: You should use the Split In Batches node when you want to batch the data in groups and process these batches. This approach is useful for avoiding API rate limits when processing large incoming data or when you only want to process a specific group of returned items. Note : The Split In Batches node stops executing after all the incoming items get divided into batches and passed on to the next node in the workflow so it is not necessary to add an IF node to stop the loop. Node exceptions # There are a limited number of nodes and operations where you need to design a loop into your workflow: Airtable node: List : This operation executes only once, not for each incoming item. Coda node: Get All : For the Table and View resources, this operation executes only once. CrateDB node will execute and iterate over all incoming items only for Postgres related functions (e.g. pgInsert , pgUpdate , pqQuery ). Execute Workflow node executes only once by default. Function node processes all the items based on the entered code snippet, but it gets executed only once. If you need to execute the Function node multiple times you have to create a loop using the Split In Batches node. Google Cloud Firestore node: Get All : For the Collection and Document resources, this operation executes only once. Google Drive node: List : This operation executes only once, not for each incoming item. Google Sheets node: Read : This operation executes only once for the Sheet resource. Update : This operation updates multiple rows if they are in the same range. It does not iterate through additional ranges. HTTP Request node: You must handle pagination yourself. If your API call returns paginated results you must create a loop to fetch one page at a time. Microsoft SQL node does not natively handle looping, so if you want the node to process all incoming items you must create a loop. Postgres node will execute and iterate over all incoming items only for Postgres related functions (for example, pgInsert , pgUpdate , pqQuery ). QuestDB node will execute and iterate over all incoming items only for Postgres related functions (e.g. pgInsert , pgUpdate , pqQuery ). Read Binary Files node will fetch the files from the specified path only once. This node doesn\u2019t execute multiple times based on the incoming data. However, if the path is referenced from the incoming data, the node will fetch the files for all the valid paths. Redis node: Info : This operation executes only once, regardless of the number of items in the incoming data. RSS nodes executes only once regardless of the number of items in the incoming data. Spreadsheet node processes all the incoming data and creates a single file with all the incoming data. If you want to create individual files for each incoming item, you have to create a loop. TimescaleDB node will execute and iterate over all incoming items only for Postgres related functions (e.g. pgInsert , pgUpdate , pqQuery ).","title":"Looping"},{"location":"flow-logic/looping/#looping-in-n8n","text":"Looping enables you to repeatedly perform the same actions, stopping only after a set number of repetitions (e.g. fetch the 10 most recent items) or when a specific condition is met (e.g. no new items exist). Looping is useful when you want to process multiple similar items, for example sending a message to every contact in your address book. In n8n this repetitive processing is handled automatically, meaning you do not need to specifically build loops into your workflows. There are some special cases where this isn\u2019t true.","title":"Looping in n8n"},{"location":"flow-logic/looping/#using-loops-in-n8n","text":"n8n nodes take any number of items as input, process these items, and output the results. You can think of each item as a single data point (or a single row in the output table of a node). The following image shows the output from the Customer Datastore node, where each row is an individual item. Nodes usually run once for each item . For example, if you want to send the name and notes of the customers as a message on Slack , connect the Slack node to the Customer Datastore node, configure the parameters, and execute the node. You will receive 5 messages \u2014 one for each item. This is how you can process multiple items without having to explicitly connect nodes in a loop. Keep in mind Your data must be in the proper structure for n8n to process it as described here. See Transforming Data to learn more.","title":"Using loops in n8n"},{"location":"flow-logic/looping/#executing-nodes-once","text":"For situations where you do not want a node to process all received items, for example sending a Slack message only to the first customer, you can do so by toggling the Execute Once parameter in the Settings tab of that node. This setting is helpful when the incoming data contains multiple items and you want to only process the first one. Using the Customer Datastore and Slack example from above, it would look like the following: You can see a message was sent only for the first customer - Jay Gatsby.","title":"Executing nodes once"},{"location":"flow-logic/looping/#executions-indicator","text":"When you execute a node a green number gets displayed on its icon. This number represents the number of times the node has executed, it doesn't represent the number of items returned by the node. Each execution may return multiple items. If a node receives input from multiple nodes, it will execute separately for each set of input data. For example, if the above node has two input nodes, it will execute twice, once for each input as pictured below. Note : The only exception to this is the Merge node. In the above image, notice that the Customer Datastore node gets executed twice, once for each input. To view the output for each input node, select the execution from the Data of Execution dropdown list: When you have a loop in a workflow, the node gets executed multiple times. The number on the node will represent the total number of executions:","title":"Executions indicator"},{"location":"flow-logic/looping/#creating-loops","text":"As discussed above, n8n typically handles the iteration for all incoming items. However, there are certain scenarios where you will have to create a loop to iterate through all items. You can learn more about these here . To create a loop in an n8n workflow, connect the output of one node to the input of a previous node. Make sure you add an IF node to check when to stop the loop. You now have a loop that iterates over each item. Here is an example workflow that implements a loop with an IF node: You should use the Split In Batches node when you want to batch the data in groups and process these batches. This approach is useful for avoiding API rate limits when processing large incoming data or when you only want to process a specific group of returned items. Note : The Split In Batches node stops executing after all the incoming items get divided into batches and passed on to the next node in the workflow so it is not necessary to add an IF node to stop the loop.","title":"Creating loops"},{"location":"flow-logic/looping/#node-exceptions","text":"There are a limited number of nodes and operations where you need to design a loop into your workflow: Airtable node: List : This operation executes only once, not for each incoming item. Coda node: Get All : For the Table and View resources, this operation executes only once. CrateDB node will execute and iterate over all incoming items only for Postgres related functions (e.g. pgInsert , pgUpdate , pqQuery ). Execute Workflow node executes only once by default. Function node processes all the items based on the entered code snippet, but it gets executed only once. If you need to execute the Function node multiple times you have to create a loop using the Split In Batches node. Google Cloud Firestore node: Get All : For the Collection and Document resources, this operation executes only once. Google Drive node: List : This operation executes only once, not for each incoming item. Google Sheets node: Read : This operation executes only once for the Sheet resource. Update : This operation updates multiple rows if they are in the same range. It does not iterate through additional ranges. HTTP Request node: You must handle pagination yourself. If your API call returns paginated results you must create a loop to fetch one page at a time. Microsoft SQL node does not natively handle looping, so if you want the node to process all incoming items you must create a loop. Postgres node will execute and iterate over all incoming items only for Postgres related functions (for example, pgInsert , pgUpdate , pqQuery ). QuestDB node will execute and iterate over all incoming items only for Postgres related functions (e.g. pgInsert , pgUpdate , pqQuery ). Read Binary Files node will fetch the files from the specified path only once. This node doesn\u2019t execute multiple times based on the incoming data. However, if the path is referenced from the incoming data, the node will fetch the files for all the valid paths. Redis node: Info : This operation executes only once, regardless of the number of items in the incoming data. RSS nodes executes only once regardless of the number of items in the incoming data. Spreadsheet node processes all the incoming data and creates a single file with all the incoming data. If you want to create individual files for each incoming item, you have to create a loop. TimescaleDB node will execute and iterate over all incoming items only for Postgres related functions (e.g. pgInsert , pgUpdate , pqQuery ).","title":"Node exceptions"},{"location":"flow-logic/merging/","text":"Merging items # You might want to merge items together in your workflows. For example when your data contains hundreds of items that you don't want to process individually. There are three different use cases for merging items: Merge items of a single execution : You can merge all incoming items into a single item using the Item Lists node. Please note that since you are merging different items into a single item the next node in the workflow will now process just that single item. Merge items returned by different nodes : If you want to merge items returned by different nodes, use the Merge node . Merge items of different executions : You can also merge items that get returned in different executions. Refer to this workflow to learn how:","title":"Merging"},{"location":"flow-logic/merging/#merging-items","text":"You might want to merge items together in your workflows. For example when your data contains hundreds of items that you don't want to process individually. There are three different use cases for merging items: Merge items of a single execution : You can merge all incoming items into a single item using the Item Lists node. Please note that since you are merging different items into a single item the next node in the workflow will now process just that single item. Merge items returned by different nodes : If you want to merge items returned by different nodes, use the Merge node . Merge items of different executions : You can also merge items that get returned in different executions. Refer to this workflow to learn how:","title":"Merging items"},{"location":"hosting/","text":"Hosting n8n # This section provides: Information on all the hosting options for n8n. Guidance on installation methods. Details of how to configure , secure , and scale the self-hosted version of n8n.","title":"Hosting n8n"},{"location":"hosting/#hosting-n8n","text":"This section provides: Information on all the hosting options for n8n. Guidance on installation methods. Details of how to configure , secure , and scale the self-hosted version of n8n.","title":"Hosting n8n"},{"location":"hosting/configuration/","text":"Configuration # It is possible to change some of the n8n defaults via special environment variables. For a full list of available configurations see Environment Variables . How to set # Where you set these environment variables depends on how you are running n8n, via npm or Docker. npm # For npm, set your desired environment variables in Terminal using the export command as shown below: 1 export <variable> = <value> Docker # For Docker, you can set your desired environment variables in the n8n: environment: element of your docker-compose.yaml file . For example: 1 2 3 4 5 n8n : environment : - N8N_BASIC_AUTH_ACTIVE=true - N8N_BASIC_AUTH_USER=<user> - N8N_BASIC_AUTH_PASSWORD=<password> Or using the -e flag from the command line: 1 2 3 4 5 6 7 docker run -it --rm \\ --name n8n \\ -p 5678 :5678 \\ -e N8N_BASIC_AUTH_ACTIVE = \"true\" \\ -e N8N_BASIC_AUTH_USER = \"<user>\" \\ -e N8N_BASIC_AUTH_PASSWORD = \"<password>\" \\ n8nio/n8n Configuration via file # It is also possible to configure n8n using a configuration file. Only the values that should be different from the default need to be defined in your configuration file. If needed multiple files can also be supplied. For example, you can have some generic base settings and some specific ones depending on the environment. The path to the JSON configuration file to use can be set using the environment variable N8N_CONFIG_FILES . 1 2 3 4 5 # Single file export N8N_CONFIG_FILES = /folder/my-config.json # Multiple files can be comma-separated export N8N_CONFIG_FILES = /folder/my-config.json,/folder/production.json A possible configuration file could look like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 { \"executions\" : { \"process\" : \"main\" , \"saveDataOnSuccess\" : \"none\" }, \"generic\" : { \"timezone\" : \"Europe/Berlin\" }, \"security\" : { \"basicAuth\" : { \"active\" : true , \"user\" : \"frank\" , \"password\" : \"some-secure-password\" } }, \"nodes\" : { \"exclude\" : \"[\\\"n8n-nodes-base.executeCommand\\\",\\\"n8n-nodes-base.writeBinaryFile\\\"]\" } } You can also append _FILE to some individual environment variables to provide their configuration in a separate file, enabling you to avoid passing sensitive details via environment variables. n8n will then load the data from the file with the given name, making it possible to easily load data from Docker- and Kubernetes-Secrets. The following environment variables support file input: CREDENTIALS_OVERWRITE_DATA_FILE DB_TYPE_FILE DB_MYSQLDB_DATABASE_FILE DB_MYSQLDB_HOST_FILE DB_MYSQLDB_PORT_FILE DB_MYSQLDB_USER_FILE DB_MYSQLDB_PASSWORD_FILE DB_POSTGRESDB_DATABASE_FILE DB_POSTGRESDB_HOST_FILE DB_POSTGRESDB_PASSWORD_FILE DB_POSTGRESDB_PORT_FILE DB_POSTGRESDB_SSL_CA_FILE DB_POSTGRESDB_SSL_CERT_FILE DB_POSTGRESDB_SSL_KEY_FILE DB_POSTGRESDB_SSL_REJECT_UNAUTHORIZED_FILE DB_POSTGRESDB_USER_FILE DB_POSTGRESDB_SCHEMA_FILE N8N_BASIC_AUTH_PASSWORD_FILE N8N_BASIC_AUTH_USER_FILE N8N_BASIC_AUTH_HASH_FILE N8N_JWT_AUTH_HEADER_FILE N8N_JWKS_URI_FILE N8N_JWT_AUTH_HEADER_VALUE_PREFIX_FILE N8N_JWT_ISSUER_FILE N8N_JWT_NAMESPACE_FILE N8N_JWT_ALLOWED_TENANT_FILE N8N_JWT_ALLOWED_TENANT_KEY_FILE Examples # Base URL # Keep in mind This variable only gets used when the n8n-editor-ui package gets built manually. Hence, it does not get used in combination with the default n8n docker image. By default, / gets used, meaning that it uses the root-domain. Tells the frontend how to reach the REST API of the backend. 1 export VUE_APP_URL_BASE_API = https://n8n.example.com/ Encryption key # n8n creates a random encryption key automatically on the first launch and saves it in the ~/.n8n folder. That key is used to encrypt the credentials before they get saved to the database. It is also possible to overwrite that key and set it via an environment variable. 1 export N8N_ENCRYPTION_KEY = <SOME RANDOM STRING> Execute in same process # All workflows get executed in their own separate process. This ensures that all CPU cores get used and that they do not block each other on CPU intensive tasks. Additionally, this makes sure that the crash of one execution does not take down the whole application. The disadvantage is, however, that it slows down the start-time considerably and uses much more memory. So in case the workflows are not CPU intensive and they have to start very fast, it is possible to run them all directly in the main-process with this setting. 1 export EXECUTIONS_PROCESS = main Execution timeout # A workflow times out and gets canceled after this time (in seconds). If the workflow is executed in the main process, a soft timeout is executed (takes effect after the current node finishes). If a workflow is running in its own process, a soft timeout is tried first. The process is killed after waiting for an additional fifth of the given timeout duration. By default EXECUTIONS_TIMEOUT is set to -1 . For example, if you want to set the timeout to one hour: 1 export EXECUTIONS_TIMEOUT = 3600 You can also set maximum execution time (in seconds) for each workflow individually. For example, if you want to set maximum execution time to two hours: 1 export EXECUTIONS_TIMEOUT_MAX = 7200 Custom nodes location # Every user can add custom nodes that get loaded by n8n on startup. The default location is in the subfolder .n8n/custom of the user who started n8n. Additional folders can be defined with an environment variable. 1 export N8N_CUSTOM_EXTENSIONS = \"/home/jim/n8n/custom-nodes;/data/n8n/nodes\" Use built-in and external modules in Function-Nodes # For security reasons, importing modules is restricted by default in the Function-Nodes. It is, however, possible to lift that restriction for built-in and external modules by setting the following environment variables: NODE_FUNCTION_ALLOW_BUILTIN : For builtin modules NODE_FUNCTION_ALLOW_EXTERNAL : For external modules sourced from n8n/node_modules directory. External module support is disabled when env variable is not set. 1 2 3 4 5 6 7 8 9 10 11 # Allows usage of all builtin modules export NODE_FUNCTION_ALLOW_BUILTIN = * # Allows usage of only crypto export NODE_FUNCTION_ALLOW_BUILTIN = crypto # Allows usage of only crypto and fs export NODE_FUNCTION_ALLOW_BUILTIN = crypto,fs # Allow usage of external npm modules. export NODE_FUNCTION_ALLOW_EXTERNAL = moment,lodash Timezone # The timezone is set by default to \"America/New_York\". For instance, it is used by the Cron node to know at what time the workflow should be started. To set a different default timezone, set GENERIC_TIMEZONE to the appropriate value. For example, if you want to set the timezone to Berlin (Germany): 1 export GENERIC_TIMEZONE = Europe/Berlin You can find the name of your timezone here . User folder # User-specific data like the encryption key, SQLite database file, and the ID of the tunnel (if used) gets saved by default in the subfolder .n8n of the user who started n8n. It is possible to overwrite the user-folder via an environment variable. 1 export N8N_USER_FOLDER = /home/jim/n8n Webhook URL # The webhook URL will normally be created automatically by combining N8N_PROTOCOL , N8N_HOST and N8N_PORT . However, if n8n runs behind a reverse proxy that would not work. That's because n8n runs internally on port 5678 but is exposed to the web via the reverse proxy on port 443. In that case, it is important to set the webhook URL manually so that it can be displayed correctly in the Editor UI and even more important is that the correct webhook URLs get registred with the external services. 1 export WEBHOOK_URL = https://n8n.example.com/ Prometheus # In order to collect and expose metrics, n8n uses the prom-client library. The /metrics endpoint is disabled by default, but it is possible to enable it using the N8N_METRICS environment variable. 1 export N8N_METRICS = true It is also possible to overwrite the prefix of the metric names by setting the N8N_METRICS_PREFIX environment variable. 1 export N8N_METRICS_PREFIX = n8n_ Note: At the moment, n8n does not support metrics for webhooks.","title":"Configuration"},{"location":"hosting/configuration/#configuration","text":"It is possible to change some of the n8n defaults via special environment variables. For a full list of available configurations see Environment Variables .","title":"Configuration"},{"location":"hosting/configuration/#how-to-set","text":"Where you set these environment variables depends on how you are running n8n, via npm or Docker.","title":"How to set"},{"location":"hosting/configuration/#npm","text":"For npm, set your desired environment variables in Terminal using the export command as shown below: 1 export <variable> = <value>","title":"npm"},{"location":"hosting/configuration/#docker","text":"For Docker, you can set your desired environment variables in the n8n: environment: element of your docker-compose.yaml file . For example: 1 2 3 4 5 n8n : environment : - N8N_BASIC_AUTH_ACTIVE=true - N8N_BASIC_AUTH_USER=<user> - N8N_BASIC_AUTH_PASSWORD=<password> Or using the -e flag from the command line: 1 2 3 4 5 6 7 docker run -it --rm \\ --name n8n \\ -p 5678 :5678 \\ -e N8N_BASIC_AUTH_ACTIVE = \"true\" \\ -e N8N_BASIC_AUTH_USER = \"<user>\" \\ -e N8N_BASIC_AUTH_PASSWORD = \"<password>\" \\ n8nio/n8n","title":"Docker"},{"location":"hosting/configuration/#configuration-via-file","text":"It is also possible to configure n8n using a configuration file. Only the values that should be different from the default need to be defined in your configuration file. If needed multiple files can also be supplied. For example, you can have some generic base settings and some specific ones depending on the environment. The path to the JSON configuration file to use can be set using the environment variable N8N_CONFIG_FILES . 1 2 3 4 5 # Single file export N8N_CONFIG_FILES = /folder/my-config.json # Multiple files can be comma-separated export N8N_CONFIG_FILES = /folder/my-config.json,/folder/production.json A possible configuration file could look like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 { \"executions\" : { \"process\" : \"main\" , \"saveDataOnSuccess\" : \"none\" }, \"generic\" : { \"timezone\" : \"Europe/Berlin\" }, \"security\" : { \"basicAuth\" : { \"active\" : true , \"user\" : \"frank\" , \"password\" : \"some-secure-password\" } }, \"nodes\" : { \"exclude\" : \"[\\\"n8n-nodes-base.executeCommand\\\",\\\"n8n-nodes-base.writeBinaryFile\\\"]\" } } You can also append _FILE to some individual environment variables to provide their configuration in a separate file, enabling you to avoid passing sensitive details via environment variables. n8n will then load the data from the file with the given name, making it possible to easily load data from Docker- and Kubernetes-Secrets. The following environment variables support file input: CREDENTIALS_OVERWRITE_DATA_FILE DB_TYPE_FILE DB_MYSQLDB_DATABASE_FILE DB_MYSQLDB_HOST_FILE DB_MYSQLDB_PORT_FILE DB_MYSQLDB_USER_FILE DB_MYSQLDB_PASSWORD_FILE DB_POSTGRESDB_DATABASE_FILE DB_POSTGRESDB_HOST_FILE DB_POSTGRESDB_PASSWORD_FILE DB_POSTGRESDB_PORT_FILE DB_POSTGRESDB_SSL_CA_FILE DB_POSTGRESDB_SSL_CERT_FILE DB_POSTGRESDB_SSL_KEY_FILE DB_POSTGRESDB_SSL_REJECT_UNAUTHORIZED_FILE DB_POSTGRESDB_USER_FILE DB_POSTGRESDB_SCHEMA_FILE N8N_BASIC_AUTH_PASSWORD_FILE N8N_BASIC_AUTH_USER_FILE N8N_BASIC_AUTH_HASH_FILE N8N_JWT_AUTH_HEADER_FILE N8N_JWKS_URI_FILE N8N_JWT_AUTH_HEADER_VALUE_PREFIX_FILE N8N_JWT_ISSUER_FILE N8N_JWT_NAMESPACE_FILE N8N_JWT_ALLOWED_TENANT_FILE N8N_JWT_ALLOWED_TENANT_KEY_FILE","title":"Configuration via file"},{"location":"hosting/configuration/#examples","text":"","title":"Examples"},{"location":"hosting/configuration/#base-url","text":"Keep in mind This variable only gets used when the n8n-editor-ui package gets built manually. Hence, it does not get used in combination with the default n8n docker image. By default, / gets used, meaning that it uses the root-domain. Tells the frontend how to reach the REST API of the backend. 1 export VUE_APP_URL_BASE_API = https://n8n.example.com/","title":"Base URL"},{"location":"hosting/configuration/#encryption-key","text":"n8n creates a random encryption key automatically on the first launch and saves it in the ~/.n8n folder. That key is used to encrypt the credentials before they get saved to the database. It is also possible to overwrite that key and set it via an environment variable. 1 export N8N_ENCRYPTION_KEY = <SOME RANDOM STRING>","title":"Encryption key"},{"location":"hosting/configuration/#execute-in-same-process","text":"All workflows get executed in their own separate process. This ensures that all CPU cores get used and that they do not block each other on CPU intensive tasks. Additionally, this makes sure that the crash of one execution does not take down the whole application. The disadvantage is, however, that it slows down the start-time considerably and uses much more memory. So in case the workflows are not CPU intensive and they have to start very fast, it is possible to run them all directly in the main-process with this setting. 1 export EXECUTIONS_PROCESS = main","title":"Execute in same process"},{"location":"hosting/configuration/#execution-timeout","text":"A workflow times out and gets canceled after this time (in seconds). If the workflow is executed in the main process, a soft timeout is executed (takes effect after the current node finishes). If a workflow is running in its own process, a soft timeout is tried first. The process is killed after waiting for an additional fifth of the given timeout duration. By default EXECUTIONS_TIMEOUT is set to -1 . For example, if you want to set the timeout to one hour: 1 export EXECUTIONS_TIMEOUT = 3600 You can also set maximum execution time (in seconds) for each workflow individually. For example, if you want to set maximum execution time to two hours: 1 export EXECUTIONS_TIMEOUT_MAX = 7200","title":"Execution timeout"},{"location":"hosting/configuration/#custom-nodes-location","text":"Every user can add custom nodes that get loaded by n8n on startup. The default location is in the subfolder .n8n/custom of the user who started n8n. Additional folders can be defined with an environment variable. 1 export N8N_CUSTOM_EXTENSIONS = \"/home/jim/n8n/custom-nodes;/data/n8n/nodes\"","title":"Custom nodes location"},{"location":"hosting/configuration/#use-built-in-and-external-modules-in-function-nodes","text":"For security reasons, importing modules is restricted by default in the Function-Nodes. It is, however, possible to lift that restriction for built-in and external modules by setting the following environment variables: NODE_FUNCTION_ALLOW_BUILTIN : For builtin modules NODE_FUNCTION_ALLOW_EXTERNAL : For external modules sourced from n8n/node_modules directory. External module support is disabled when env variable is not set. 1 2 3 4 5 6 7 8 9 10 11 # Allows usage of all builtin modules export NODE_FUNCTION_ALLOW_BUILTIN = * # Allows usage of only crypto export NODE_FUNCTION_ALLOW_BUILTIN = crypto # Allows usage of only crypto and fs export NODE_FUNCTION_ALLOW_BUILTIN = crypto,fs # Allow usage of external npm modules. export NODE_FUNCTION_ALLOW_EXTERNAL = moment,lodash","title":"Use built-in and external modules in Function-Nodes"},{"location":"hosting/configuration/#timezone","text":"The timezone is set by default to \"America/New_York\". For instance, it is used by the Cron node to know at what time the workflow should be started. To set a different default timezone, set GENERIC_TIMEZONE to the appropriate value. For example, if you want to set the timezone to Berlin (Germany): 1 export GENERIC_TIMEZONE = Europe/Berlin You can find the name of your timezone here .","title":"Timezone"},{"location":"hosting/configuration/#user-folder","text":"User-specific data like the encryption key, SQLite database file, and the ID of the tunnel (if used) gets saved by default in the subfolder .n8n of the user who started n8n. It is possible to overwrite the user-folder via an environment variable. 1 export N8N_USER_FOLDER = /home/jim/n8n","title":"User folder"},{"location":"hosting/configuration/#webhook-url","text":"The webhook URL will normally be created automatically by combining N8N_PROTOCOL , N8N_HOST and N8N_PORT . However, if n8n runs behind a reverse proxy that would not work. That's because n8n runs internally on port 5678 but is exposed to the web via the reverse proxy on port 443. In that case, it is important to set the webhook URL manually so that it can be displayed correctly in the Editor UI and even more important is that the correct webhook URLs get registred with the external services. 1 export WEBHOOK_URL = https://n8n.example.com/","title":"Webhook URL"},{"location":"hosting/configuration/#prometheus","text":"In order to collect and expose metrics, n8n uses the prom-client library. The /metrics endpoint is disabled by default, but it is possible to enable it using the N8N_METRICS environment variable. 1 export N8N_METRICS = true It is also possible to overwrite the prefix of the metric names by setting the N8N_METRICS_PREFIX environment variable. 1 export N8N_METRICS_PREFIX = n8n_ Note: At the moment, n8n does not support metrics for webhooks.","title":"Prometheus"},{"location":"hosting/environment-variables/","text":"Environment Variables # Keep in mind You can provide a configuration file for n8n, and also append _FILE to certain variables to provide their configuration separately, indicated by \"/ _FILE \" below. Credentials # Enabling overwrites for credentials allows you to set default values for credentials which get automatically prefilled. The user cannot see or change these credentials. The format is { CREDENTIAL_NAME: { PARAMTER: VALUE }} . Variable Type Description CREDENTIALS_OVERWRITE_DATA / _FILE * Overwrites for credentials. CREDENTIALS_OVERWRITE_ENDPOINT string The API endpoint to fetch credentials. CREDENTIALS_DEFAULT_NAME string The default name for credentials. Default value is My credentials . Database # Variable Type Description DB_TYPE / _FILE enum string : sqlite , mariadb , mysqldb , postgresdb The type of database to use. Default value is sqlite . DB_TABLE_PREFIX * Prefix to be used for table names. MySQL # Variable Type Description DB_MYSQLDB_DATABASE / _FILE string The name of the MySQL database. Default value is n8n . DB_MYSQLDB_HOST / _FILE string The MySQL host. Default value is localhost . DB_MYSQLDB_PORT / _FILE number The MySQL port. Default value is 3306 . DB_MYSQLDB_USER / _FILE string The MySQL user. Default value is root . DB_MYSQLDB_PASSWORD / _FILE string The MySQL password. Postgres # Variable Type Description DB_POSTGRESDB_DATABASE / _FILE string The name of the PostgresDB database. Default value is n8n . DB_POSTGRESDB_HOST / _FILE string The PostgresDB host. Default value is localhost . DB_POSTGRESDB_PORT / _FILE number The PostgresDB port. Default value is 5432 . DB_POSTGRESDB_USER / _FILE string The PostgresDB user. Default value is root . DB_POSTGRESDB_PASSWORD / _FILE string The PostgresDB password. DB_POSTGRESDB_SCHEMA / _FILE string The PostgresDB schema. Default value is public . DB_POSTGRESDB_SSL_CA / _FILE string The PostgresDB SSL certificate authority. DB_POSTGRESDB_SSL_CERT / _FILE string The PostgresDB SSL certificate. DB_POSTGRESDB_SSL_KEY / _FILE string The PostgresDB SSL key. DB_POSTGRESDB_SSL_REJECT_UNAUTHORIZED / _FILE boolean If unauthorized SSL connections should be rejected. Default value is true . SQLite # Variable Type Description DB_SQLITE_VACUUM_ON_STARTUP boolean Runs VACUUM operation on startup to rebuild the database. Reduces file size and optimizes indexes. This is a long running blocking operation and will increase start-up time. Default value is false . Deployment # Variable Type Description N8N_EDITOR_BASE_URL string Public URL where users can access the editor. Also used for emails sent from N8N. N8N_CONFIG_FILES string Use to provide the path to any JSON [configuration file(/hosting/configuration/#configuration-via-file). N8N_DISABLE_UI boolean Whether the UI should be disabled. N8N_TEMPLATES_ENABLED boolean Whether workflow templates are enabled (true) or disabled (false) N8N_TEMPLATES_HOST string Defaults to https://api.n8n.io. Change this if creating your own workflow template library. N8N_ENCRYPTION_KEY string Provide a custom key used to encrypt credentials in the n8n database. By default a random key is generated on first launch. N8N_USER_FOLDER string Provide the path where n8n will store user-specific data, such as database file and encryption key. By default, .n8n is used. N8N_PATH string The path n8n is deployed to. Default is / . N8N_HOST string Host name where n8n can be reached. Default is localhost . N8N_PORT number The HTTP port where n8n can be reached. Default is 5678 . N8N_LISTEN_ADDRESS string The IP address n8n should listen on. Default is 0.0.0.0 . N8N_PROTOCOL enum string : http , https The protocol used to reach n8n. Default is http . N8N_SSL_KEY string The SSL Key for HTTPS protocol. N8N_SSL_CERT string The SSL certificate for HTTPS protocol. N8N_PERSONALIZATION_ENABLED boolean Whether to ask users personalisation questions and then customise n8n accordingly. Default is true . N8N_VERSION_NOTIFICATIONS_ENABLED boolean When enabled, notifications of new versions and security updates are provided. Default value is true . N8N_VERSION_NOTIFICATIONS_ENDPOINT string The endpoint where version information is retrieved. By default https://api.n8n.io/versions/ is used. N8N_VERSION_NOTIFICATIONS_INFO_URL string The URL displayed in the New Versions panel for additional information. By default https://docs.n8n.io/getting-started/installation/updating.html is used. N8N_DIAGNOSTICS_ENABLED boolean Whether to share selected, anonymous telemetry with n8n N8N_DIAGNOSTICS_CONFIG_FRONTEND string Telemetry config for the frontend. Default is 1zPn9bgWPzlQc0p8Gj1uiK6DOTn;https://telemetry.n8n.io . N8N_DIAGNOSTICS_CONFIG_BACKEND string Telemetry config for the frontend. Default is 1zPn7YoGC3ZXE9zLeTKLuQCB4F6;https://telemetry.n8n.io/v1/batch . N8N_AVAILABLE_BINARY_DATA_MODES string A comma separated list of available binary data modes. Default is filesystem . N8N_BINARY_DATA_STORAGE_PATH string The path where binary data is stored. Defaults to binaryData under the N8N_USER_FOLDER . N8N_BINARY_DATA_TTL number Time to live (in minutes) for binary data of unsaved executions. Default is 60 . N8N_DEFAULT_BINARY_DATA_MODE string The default binary data mode. Default value is default and keeps binary data in memory. Set to filesystem in order to use the filesystem. N8N_PERSISTED_BINARY_DATA_TTL number Time to live (in minutes) for persisted data. Default is 1440 . VUE_APP_URL_BASE_API string Used when building the n8n-editor-ui package manually to indicate how the frontend can reach the backend API. User management and SMTP # Variable Type Description N8N_USER_MANAGEMENT_DISABLED Boolean Defaults to user management enabled (false). Set to true to disable the user management feature. Note that n8n ignores this environment variable if you have already set up an owner account. N8N_EMAIL_MODE string smtp N8N_SMTP_HOST string your_SMTP_server_name N8N_SMTP_PORT number your_SMTP_server_port Default is 465 . N8N_SMTP_USER string your_SMTP_username N8N_SMTP_PASS string your_SMTP_password N8N_SMTP_SENDER string You can select the sender name from the sender addresses. Example: `N8N contact@n8n.com ' N8N_SMTP_SSL boolean Whether to use SSL for SMTP (true) or not (false). Defaults to true . N8N_UM_EMAIL_TEMPLATES_INVITE string Full path to your HTML email template. This overrides the default template for invite emails. N8N_UM_EMAIL_TEMPLATES_PWRESET string Full path to your HTML email template. This overrides the default template for password reset emails. Endpoints # Variable Type Description N8N_PAYLOAD_SIZE_MAX number The maximum payload size in MB. Default value is 16 . N8N_METRICS boolean Whether to enable the metrics endpoint. Default value is false . N8N_METRICS_PREFIX string Optional prefix to be used for metrics names. Default value is n8n_ . N8N_ENDPOINT_REST string The path used for REST endpoint. Default value is rest . N8N_ENDPOINT_WEBHOOK string The path used for webhook endpoint. Default value is webhook . N8N_ENDPOINT_WEBHOOK_TEST string The path used for test-webhook endpoint. Default value is webhook-test . N8N_ENDPOINT_WEBHOOK_WAIT string The path used for waiting-webhook endpoint. Default value is webhook-waiting . WEBHOOK_URL string Used to manually provide the Webhook URL when running n8n behind a reverse proxy. See here for more details. N8N_DISABLE_PRODUCTION_MAIN_PROCESS boolean Disable production webhooks from main process. This helps ensures no HTTP traffic load to main process when using webhook-specific processes. Default value is false . N8N_SKIP_WEBHOOK_DEREGISTRATION_SHUTDOWN boolean Deregister webhooks on external services only when workflows are deactivated. Default value is false . External hooks # Variable Type Description EXTERNAL_HOOK_FILES string Files containing external hooks. Multiple files can be provided separated by colon (\" : \"). Executions # Variable Type Description EXECUTIONS_PROCESS enum string : main , own Whether processes are executed in their own process or the main process. By default it is set to own . See here for more details. EXECUTIONS_MODE enum string : regular , queue Whether processes should run directly or via queue. By default it is set to regular . See here for more details. EXECUTIONS_TIMEOUT number The max run time (in seconds) before stopping a workflow execution. Set to -1 to disable. Default value is -1 . EXECUTIONS_TIMEOUT_MAX number The max execution time (in seconds) that can be set for a workflow individually. Default value is 3600 . EXECUTIONS_DATA_SAVE_ON_ERROR enum string : all , none Whether execution data is saved on error. Default value is all . EXECUTIONS_DATA_SAVE_ON_SUCCESS enum string : all , none Whether execution data is saved on success. Default value is all . EXECUTIONS_DATA_SAVE_ON_PROGRESS boolean Whether to save progress for each node executed. Default value is false . EXECUTIONS_DATA_SAVE_MANUAL_EXECUTIONS boolean Whether to save data of executions when started manually. Default value is false . EXECUTIONS_DATA_PRUNE boolean Whether to delete data of past executions on a rolling basis. Default value is false . EXECUTIONS_DATA_MAX_AGE number The execution age (in hours) before it is deleted. Default value is 336 . EXECUTIONS_DATA_PRUNE_TIMEOUT number The timeout (in seconds) after execution data has been pruned. Default value is 3600 . Logs # Variable Type Description N8N_LOG_LEVEL enum string : info , warn , error , verbose , debug Log output level. Default is info . N8N_LOG_OUTPUT enum string : console , file Where to output logs. Multiple values can be provided separated by a comma. Default is console . N8N_LOG_FILE_COUNT_MAX number Max number of log files to keep. Default is 100 . N8N_LOG_FILE_SIZE_MAX number Max size of each log file in MB. Default is 16 . N8N_LOG_FILE_LOCATION string Log file location. Only used if log output is set to file . DB_LOGGING_ENABLED boolean Whether to enable database-specific logging. Default is false . DB_LOGGING_OPTIONS string Database log output level. Possible values: query , error , schema , warn , info , log . To enable all logging, specify all . DB_LOGGING_MAX_EXECUTION_TIME number Max execution time (in milliseconds) before a warning is logged. Default is 1000 . Set to 0 to disable long running query warning. Nodes # Variable Type Description NODES_INCLUDE string Specify which nodes to load. NODES_EXCLUDE string Specify which nodes not to load. NODE_FUNCTION_ALLOW_BUILTIN string Specify which built-in modules may be imported in Function nodes. Use * to allow all. By default importing modules is disabled. NODE_FUNCTION_ALLOW_EXTERNAL string Specify which external modules (from n8n/node_modules ) may be imported in Function nodes. By default importing modules is disabled. NODES_ERROR_TRIGGER_TYPE string Specify which Node Type to use as Error Trigger. Default value is n8n-nodes-base.errorTrigger . N8N_CUSTOM_EXTENSIONS string Specify the path to additional directories containing your custom nodes. Queues # Variable Type Description QUEUE_BULL_PREFIX string Prefix to be used for all queue keys. QUEUE_BULL_REDIS_DB number The Redis database used. Default value is 0 . QUEUE_BULL_REDIS_HOST string The Redis host. Default value is localhost . QUEUE_BULL_REDIS_PORT number The Redis port used. Default value is 6379 . QUEUE_BULL_REDIS_PASSWORD string The Redis password. QUEUE_BULL_REDIS_TIMEOUT_THRESHOLD number The Redis timeout threshold (in seconds). Default value is 10000 . QUEUE_RECOVERY_INTERVAL number Internal (in seconds) for active polling to the queue to recover from Redis crashes. 0 is disabled. May increase Redis traffic significantly. Default value is 60 . Security # Variable Type Description N8N_AUTH_EXCLUDE_ENDPOINTS string Additional endpoints to exclude auth checks. Multiple endpoints can be provided separated by a colon (\" : \"). The endpoints should not start with a forward slash (\" / \"). N8N_BASIC_AUTH_ACTIVE boolean Whether basic auth should be activated for editor and REST-API access. Default value is false . N8N_BASIC_AUTH_USER / _FILE string The name of the n8n user for basic authentication. N8N_BASIC_AUTH_PASSWORD / _FILE string The password of the n8n user for basic authentication. N8N_BASIC_AUTH_HASH / _FILE boolean Whether the basic authentication password is hashed. Default value is false . N8N_JWT_AUTH_ACTIVE boolean Whether JWT authentication should be activated for editor and REST-API access. Default value is false . N8N_JWT_AUTH_HEADER / _FILE string The request header containing a signed JWT. N8N_JWT_AUTH_HEADER_VALUE_PREFIX / _FILE string Optional. The request header value prefix to strip. N8N_JWKS_URI / _FILE string The URI to fetch JWK Set for JWT authentication. N8N_JWT_ISSUER / _FILE string Optional. The expected JWT issuer. N8N_JWT_NAMESPACE / _FILE string Optional. The expected JWT namespace. N8N_JWT_ALLOWED_TENANT / _FILE string Optional. The allowed JWT tenant. N8N_JWT_ALLOWED_TENANT_KEY / _FILE string Optional. The JWT tenant key name to inspect within the JWT namespace. Timezone # Variable Type Description GENERIC_TIMEZONE * The timezone to use. Important for schedule nodes (i.e. Cron). Default value is America/New_York . Workflows # Variable Type Description WORKFLOWS_DEFAULT_NAME string The default name used for new workflows. Default value is My workflow .","title":"Environment Variables"},{"location":"hosting/environment-variables/#environment-variables","text":"Keep in mind You can provide a configuration file for n8n, and also append _FILE to certain variables to provide their configuration separately, indicated by \"/ _FILE \" below.","title":"Environment Variables"},{"location":"hosting/environment-variables/#credentials","text":"Enabling overwrites for credentials allows you to set default values for credentials which get automatically prefilled. The user cannot see or change these credentials. The format is { CREDENTIAL_NAME: { PARAMTER: VALUE }} . Variable Type Description CREDENTIALS_OVERWRITE_DATA / _FILE * Overwrites for credentials. CREDENTIALS_OVERWRITE_ENDPOINT string The API endpoint to fetch credentials. CREDENTIALS_DEFAULT_NAME string The default name for credentials. Default value is My credentials .","title":"Credentials"},{"location":"hosting/environment-variables/#database","text":"Variable Type Description DB_TYPE / _FILE enum string : sqlite , mariadb , mysqldb , postgresdb The type of database to use. Default value is sqlite . DB_TABLE_PREFIX * Prefix to be used for table names.","title":"Database"},{"location":"hosting/environment-variables/#mysql","text":"Variable Type Description DB_MYSQLDB_DATABASE / _FILE string The name of the MySQL database. Default value is n8n . DB_MYSQLDB_HOST / _FILE string The MySQL host. Default value is localhost . DB_MYSQLDB_PORT / _FILE number The MySQL port. Default value is 3306 . DB_MYSQLDB_USER / _FILE string The MySQL user. Default value is root . DB_MYSQLDB_PASSWORD / _FILE string The MySQL password.","title":"MySQL"},{"location":"hosting/environment-variables/#postgres","text":"Variable Type Description DB_POSTGRESDB_DATABASE / _FILE string The name of the PostgresDB database. Default value is n8n . DB_POSTGRESDB_HOST / _FILE string The PostgresDB host. Default value is localhost . DB_POSTGRESDB_PORT / _FILE number The PostgresDB port. Default value is 5432 . DB_POSTGRESDB_USER / _FILE string The PostgresDB user. Default value is root . DB_POSTGRESDB_PASSWORD / _FILE string The PostgresDB password. DB_POSTGRESDB_SCHEMA / _FILE string The PostgresDB schema. Default value is public . DB_POSTGRESDB_SSL_CA / _FILE string The PostgresDB SSL certificate authority. DB_POSTGRESDB_SSL_CERT / _FILE string The PostgresDB SSL certificate. DB_POSTGRESDB_SSL_KEY / _FILE string The PostgresDB SSL key. DB_POSTGRESDB_SSL_REJECT_UNAUTHORIZED / _FILE boolean If unauthorized SSL connections should be rejected. Default value is true .","title":"Postgres"},{"location":"hosting/environment-variables/#sqlite","text":"Variable Type Description DB_SQLITE_VACUUM_ON_STARTUP boolean Runs VACUUM operation on startup to rebuild the database. Reduces file size and optimizes indexes. This is a long running blocking operation and will increase start-up time. Default value is false .","title":"SQLite"},{"location":"hosting/environment-variables/#deployment","text":"Variable Type Description N8N_EDITOR_BASE_URL string Public URL where users can access the editor. Also used for emails sent from N8N. N8N_CONFIG_FILES string Use to provide the path to any JSON [configuration file(/hosting/configuration/#configuration-via-file). N8N_DISABLE_UI boolean Whether the UI should be disabled. N8N_TEMPLATES_ENABLED boolean Whether workflow templates are enabled (true) or disabled (false) N8N_TEMPLATES_HOST string Defaults to https://api.n8n.io. Change this if creating your own workflow template library. N8N_ENCRYPTION_KEY string Provide a custom key used to encrypt credentials in the n8n database. By default a random key is generated on first launch. N8N_USER_FOLDER string Provide the path where n8n will store user-specific data, such as database file and encryption key. By default, .n8n is used. N8N_PATH string The path n8n is deployed to. Default is / . N8N_HOST string Host name where n8n can be reached. Default is localhost . N8N_PORT number The HTTP port where n8n can be reached. Default is 5678 . N8N_LISTEN_ADDRESS string The IP address n8n should listen on. Default is 0.0.0.0 . N8N_PROTOCOL enum string : http , https The protocol used to reach n8n. Default is http . N8N_SSL_KEY string The SSL Key for HTTPS protocol. N8N_SSL_CERT string The SSL certificate for HTTPS protocol. N8N_PERSONALIZATION_ENABLED boolean Whether to ask users personalisation questions and then customise n8n accordingly. Default is true . N8N_VERSION_NOTIFICATIONS_ENABLED boolean When enabled, notifications of new versions and security updates are provided. Default value is true . N8N_VERSION_NOTIFICATIONS_ENDPOINT string The endpoint where version information is retrieved. By default https://api.n8n.io/versions/ is used. N8N_VERSION_NOTIFICATIONS_INFO_URL string The URL displayed in the New Versions panel for additional information. By default https://docs.n8n.io/getting-started/installation/updating.html is used. N8N_DIAGNOSTICS_ENABLED boolean Whether to share selected, anonymous telemetry with n8n N8N_DIAGNOSTICS_CONFIG_FRONTEND string Telemetry config for the frontend. Default is 1zPn9bgWPzlQc0p8Gj1uiK6DOTn;https://telemetry.n8n.io . N8N_DIAGNOSTICS_CONFIG_BACKEND string Telemetry config for the frontend. Default is 1zPn7YoGC3ZXE9zLeTKLuQCB4F6;https://telemetry.n8n.io/v1/batch . N8N_AVAILABLE_BINARY_DATA_MODES string A comma separated list of available binary data modes. Default is filesystem . N8N_BINARY_DATA_STORAGE_PATH string The path where binary data is stored. Defaults to binaryData under the N8N_USER_FOLDER . N8N_BINARY_DATA_TTL number Time to live (in minutes) for binary data of unsaved executions. Default is 60 . N8N_DEFAULT_BINARY_DATA_MODE string The default binary data mode. Default value is default and keeps binary data in memory. Set to filesystem in order to use the filesystem. N8N_PERSISTED_BINARY_DATA_TTL number Time to live (in minutes) for persisted data. Default is 1440 . VUE_APP_URL_BASE_API string Used when building the n8n-editor-ui package manually to indicate how the frontend can reach the backend API.","title":"Deployment"},{"location":"hosting/environment-variables/#user-management-and-smtp","text":"Variable Type Description N8N_USER_MANAGEMENT_DISABLED Boolean Defaults to user management enabled (false). Set to true to disable the user management feature. Note that n8n ignores this environment variable if you have already set up an owner account. N8N_EMAIL_MODE string smtp N8N_SMTP_HOST string your_SMTP_server_name N8N_SMTP_PORT number your_SMTP_server_port Default is 465 . N8N_SMTP_USER string your_SMTP_username N8N_SMTP_PASS string your_SMTP_password N8N_SMTP_SENDER string You can select the sender name from the sender addresses. Example: `N8N contact@n8n.com ' N8N_SMTP_SSL boolean Whether to use SSL for SMTP (true) or not (false). Defaults to true . N8N_UM_EMAIL_TEMPLATES_INVITE string Full path to your HTML email template. This overrides the default template for invite emails. N8N_UM_EMAIL_TEMPLATES_PWRESET string Full path to your HTML email template. This overrides the default template for password reset emails.","title":"User management and SMTP"},{"location":"hosting/environment-variables/#endpoints","text":"Variable Type Description N8N_PAYLOAD_SIZE_MAX number The maximum payload size in MB. Default value is 16 . N8N_METRICS boolean Whether to enable the metrics endpoint. Default value is false . N8N_METRICS_PREFIX string Optional prefix to be used for metrics names. Default value is n8n_ . N8N_ENDPOINT_REST string The path used for REST endpoint. Default value is rest . N8N_ENDPOINT_WEBHOOK string The path used for webhook endpoint. Default value is webhook . N8N_ENDPOINT_WEBHOOK_TEST string The path used for test-webhook endpoint. Default value is webhook-test . N8N_ENDPOINT_WEBHOOK_WAIT string The path used for waiting-webhook endpoint. Default value is webhook-waiting . WEBHOOK_URL string Used to manually provide the Webhook URL when running n8n behind a reverse proxy. See here for more details. N8N_DISABLE_PRODUCTION_MAIN_PROCESS boolean Disable production webhooks from main process. This helps ensures no HTTP traffic load to main process when using webhook-specific processes. Default value is false . N8N_SKIP_WEBHOOK_DEREGISTRATION_SHUTDOWN boolean Deregister webhooks on external services only when workflows are deactivated. Default value is false .","title":"Endpoints"},{"location":"hosting/environment-variables/#external-hooks","text":"Variable Type Description EXTERNAL_HOOK_FILES string Files containing external hooks. Multiple files can be provided separated by colon (\" : \").","title":"External hooks"},{"location":"hosting/environment-variables/#executions","text":"Variable Type Description EXECUTIONS_PROCESS enum string : main , own Whether processes are executed in their own process or the main process. By default it is set to own . See here for more details. EXECUTIONS_MODE enum string : regular , queue Whether processes should run directly or via queue. By default it is set to regular . See here for more details. EXECUTIONS_TIMEOUT number The max run time (in seconds) before stopping a workflow execution. Set to -1 to disable. Default value is -1 . EXECUTIONS_TIMEOUT_MAX number The max execution time (in seconds) that can be set for a workflow individually. Default value is 3600 . EXECUTIONS_DATA_SAVE_ON_ERROR enum string : all , none Whether execution data is saved on error. Default value is all . EXECUTIONS_DATA_SAVE_ON_SUCCESS enum string : all , none Whether execution data is saved on success. Default value is all . EXECUTIONS_DATA_SAVE_ON_PROGRESS boolean Whether to save progress for each node executed. Default value is false . EXECUTIONS_DATA_SAVE_MANUAL_EXECUTIONS boolean Whether to save data of executions when started manually. Default value is false . EXECUTIONS_DATA_PRUNE boolean Whether to delete data of past executions on a rolling basis. Default value is false . EXECUTIONS_DATA_MAX_AGE number The execution age (in hours) before it is deleted. Default value is 336 . EXECUTIONS_DATA_PRUNE_TIMEOUT number The timeout (in seconds) after execution data has been pruned. Default value is 3600 .","title":"Executions"},{"location":"hosting/environment-variables/#logs","text":"Variable Type Description N8N_LOG_LEVEL enum string : info , warn , error , verbose , debug Log output level. Default is info . N8N_LOG_OUTPUT enum string : console , file Where to output logs. Multiple values can be provided separated by a comma. Default is console . N8N_LOG_FILE_COUNT_MAX number Max number of log files to keep. Default is 100 . N8N_LOG_FILE_SIZE_MAX number Max size of each log file in MB. Default is 16 . N8N_LOG_FILE_LOCATION string Log file location. Only used if log output is set to file . DB_LOGGING_ENABLED boolean Whether to enable database-specific logging. Default is false . DB_LOGGING_OPTIONS string Database log output level. Possible values: query , error , schema , warn , info , log . To enable all logging, specify all . DB_LOGGING_MAX_EXECUTION_TIME number Max execution time (in milliseconds) before a warning is logged. Default is 1000 . Set to 0 to disable long running query warning.","title":"Logs"},{"location":"hosting/environment-variables/#nodes","text":"Variable Type Description NODES_INCLUDE string Specify which nodes to load. NODES_EXCLUDE string Specify which nodes not to load. NODE_FUNCTION_ALLOW_BUILTIN string Specify which built-in modules may be imported in Function nodes. Use * to allow all. By default importing modules is disabled. NODE_FUNCTION_ALLOW_EXTERNAL string Specify which external modules (from n8n/node_modules ) may be imported in Function nodes. By default importing modules is disabled. NODES_ERROR_TRIGGER_TYPE string Specify which Node Type to use as Error Trigger. Default value is n8n-nodes-base.errorTrigger . N8N_CUSTOM_EXTENSIONS string Specify the path to additional directories containing your custom nodes.","title":"Nodes"},{"location":"hosting/environment-variables/#queues","text":"Variable Type Description QUEUE_BULL_PREFIX string Prefix to be used for all queue keys. QUEUE_BULL_REDIS_DB number The Redis database used. Default value is 0 . QUEUE_BULL_REDIS_HOST string The Redis host. Default value is localhost . QUEUE_BULL_REDIS_PORT number The Redis port used. Default value is 6379 . QUEUE_BULL_REDIS_PASSWORD string The Redis password. QUEUE_BULL_REDIS_TIMEOUT_THRESHOLD number The Redis timeout threshold (in seconds). Default value is 10000 . QUEUE_RECOVERY_INTERVAL number Internal (in seconds) for active polling to the queue to recover from Redis crashes. 0 is disabled. May increase Redis traffic significantly. Default value is 60 .","title":"Queues"},{"location":"hosting/environment-variables/#security","text":"Variable Type Description N8N_AUTH_EXCLUDE_ENDPOINTS string Additional endpoints to exclude auth checks. Multiple endpoints can be provided separated by a colon (\" : \"). The endpoints should not start with a forward slash (\" / \"). N8N_BASIC_AUTH_ACTIVE boolean Whether basic auth should be activated for editor and REST-API access. Default value is false . N8N_BASIC_AUTH_USER / _FILE string The name of the n8n user for basic authentication. N8N_BASIC_AUTH_PASSWORD / _FILE string The password of the n8n user for basic authentication. N8N_BASIC_AUTH_HASH / _FILE boolean Whether the basic authentication password is hashed. Default value is false . N8N_JWT_AUTH_ACTIVE boolean Whether JWT authentication should be activated for editor and REST-API access. Default value is false . N8N_JWT_AUTH_HEADER / _FILE string The request header containing a signed JWT. N8N_JWT_AUTH_HEADER_VALUE_PREFIX / _FILE string Optional. The request header value prefix to strip. N8N_JWKS_URI / _FILE string The URI to fetch JWK Set for JWT authentication. N8N_JWT_ISSUER / _FILE string Optional. The expected JWT issuer. N8N_JWT_NAMESPACE / _FILE string Optional. The expected JWT namespace. N8N_JWT_ALLOWED_TENANT / _FILE string Optional. The allowed JWT tenant. N8N_JWT_ALLOWED_TENANT_KEY / _FILE string Optional. The JWT tenant key name to inspect within the JWT namespace.","title":"Security"},{"location":"hosting/environment-variables/#timezone","text":"Variable Type Description GENERIC_TIMEZONE * The timezone to use. Important for schedule nodes (i.e. Cron). Default value is America/New_York .","title":"Timezone"},{"location":"hosting/environment-variables/#workflows","text":"Variable Type Description WORKFLOWS_DEFAULT_NAME string The default name used for new workflows. Default value is My workflow .","title":"Workflows"},{"location":"hosting/logging/","text":"Logging in n8n # Logging is an important feature for debugging. n8n uses the winston logging library. Setup # To set up logging in n8n, you need to set the following environment variables (you can also set the values in the configuration file ) Setting in the configuration file Using environment variables Description n8n.log.level N8N_LOG_LEVEL The log output level. The available options are (from lowest to highest level) are error, warn, info, verbose, and debug. The default value is info . You can learn more about these options here . n8n.log.output N8N_LOG_OUTPUT Where to output logs. The available options are console and file . Multiple values can be used separated by a comma ( , ). console is used by default. n8n.log.file.location N8N_LOG_FILE_LOCATION The log file location, used only if log output is set to file. By default, <n8nFolderPath>/logs/n8n.log is used. n8n.log.file.maxsize N8N_LOG_FILE_MAXSIZE The maximum size (in MB) for each log file. By default, n8n uses 16 MB. n8n.log.file.maxcount N8N_LOG_FILE_MAXCOUNT The maximum number of log files to keep. The default value is 100. This value should be set when using workers. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # Set the logging level to 'debug' export N8N_LOG_LEVEL = debug # Set log output to both console and a log file export N8N_LOG_OUTPUT = console,file # Set a save location for the log file export N8N_LOG_FILE_LOCATION = /home/jim/n8n/logs/n8n.log # Set a 50 MB maximum size for each log file export N8N_LOG_FILE_MAXSIZE = 50 # Set 60 as the maximum number of log files to be kept export N8N_LOG_FILE_MAXCOUNT = 60 Log Levels # n8n uses standard log levels to report: error : the most strict level. Outputs only errors and nothing else warning : outputs errors and warning messages info : contains useful information about progress verbose : make n8n output additional information about progress that allows you to further understand what is happening debug : the most verbose output. n8n outputs a lot of information to help you debug issues. Development # During development, adding log messages is a good practice. It assists in debugging errors. To configure logging for development, follow the guide below. Implementation details # n8n uses the LoggerProxy class, located in the workflow package. Calling the LoggerProxy.init() by passing in an instance of Logger , initializes the class before the usage. The initialization process happens only once. The start.ts file already does this process for you. If you are creating a new command from scratch, you need to initialize the LoggerProxy class. Once the Logger implementation gets created in the cli package, it can be obtained by calling the getInstance convenience method from the exported module. Check the start.ts file to learn more about how this process works. Adding logs # Once the LoggerProxy class gets initialized in the project, you can import it to any other file and add logs. Convenience methods are provided for all logging levels, so new logs can be added whenever needed using the format Logger.<logLevel>('<message>', ...meta) , where meta represents any additional properties desired beyond message . In the example above, we use the standard log levels described above . The message argument is a string, and meta is a data object. 1 2 3 4 5 6 7 8 9 10 11 12 13 // You have to import the LoggerProxy. We rename it to Logger to make it easier import { LoggerProxy as Logger } from 'n8n-workflow' ; // Info-level logging of a trigger function, with workflow name and workflow ID as additional metadata properties Logger . info ( `Polling trigger initiated for workflow \" ${ workflow . name } \"` , { workflowName : workflow . name , workflowId : workflow . id }); // Verbose-level logging of hook function execution, with execution ID, workflow ID, and session ID as metadata properties Logger . verbose ( `Executing hook (workflowExecuteBefore, hookFunctionsPush)` , { executionId : this . executionId , workflowId : this . workflowData . id , sessionId : this . sessionId }); When creating new loggers, some useful standards to keep in mind are: Craft log messages to be as easily human-readable as possible. For example, always wrap names in quotes. Duplicating information in the log message and metadata, like workflow name in the above example, can be useful as messages are easier to search and metadata enables easier filtering. Include multiple IDs (e.g. executionId, workflowId, and sessionId) throughout all logs. Use node types instead of node names (or both) as this is more consistent, and so easier to search. Front-end logs # As of now, front-end logs are not available. Using Logger or LoggerProxy would yield errors in the editor-ui package. This functionality will get implemented in the future versions.","title":"Logging in n8n"},{"location":"hosting/logging/#logging-in-n8n","text":"Logging is an important feature for debugging. n8n uses the winston logging library.","title":"Logging in n8n"},{"location":"hosting/logging/#setup","text":"To set up logging in n8n, you need to set the following environment variables (you can also set the values in the configuration file ) Setting in the configuration file Using environment variables Description n8n.log.level N8N_LOG_LEVEL The log output level. The available options are (from lowest to highest level) are error, warn, info, verbose, and debug. The default value is info . You can learn more about these options here . n8n.log.output N8N_LOG_OUTPUT Where to output logs. The available options are console and file . Multiple values can be used separated by a comma ( , ). console is used by default. n8n.log.file.location N8N_LOG_FILE_LOCATION The log file location, used only if log output is set to file. By default, <n8nFolderPath>/logs/n8n.log is used. n8n.log.file.maxsize N8N_LOG_FILE_MAXSIZE The maximum size (in MB) for each log file. By default, n8n uses 16 MB. n8n.log.file.maxcount N8N_LOG_FILE_MAXCOUNT The maximum number of log files to keep. The default value is 100. This value should be set when using workers. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # Set the logging level to 'debug' export N8N_LOG_LEVEL = debug # Set log output to both console and a log file export N8N_LOG_OUTPUT = console,file # Set a save location for the log file export N8N_LOG_FILE_LOCATION = /home/jim/n8n/logs/n8n.log # Set a 50 MB maximum size for each log file export N8N_LOG_FILE_MAXSIZE = 50 # Set 60 as the maximum number of log files to be kept export N8N_LOG_FILE_MAXCOUNT = 60","title":"Setup"},{"location":"hosting/logging/#log-levels","text":"n8n uses standard log levels to report: error : the most strict level. Outputs only errors and nothing else warning : outputs errors and warning messages info : contains useful information about progress verbose : make n8n output additional information about progress that allows you to further understand what is happening debug : the most verbose output. n8n outputs a lot of information to help you debug issues.","title":"Log Levels"},{"location":"hosting/logging/#development","text":"During development, adding log messages is a good practice. It assists in debugging errors. To configure logging for development, follow the guide below.","title":"Development"},{"location":"hosting/logging/#implementation-details","text":"n8n uses the LoggerProxy class, located in the workflow package. Calling the LoggerProxy.init() by passing in an instance of Logger , initializes the class before the usage. The initialization process happens only once. The start.ts file already does this process for you. If you are creating a new command from scratch, you need to initialize the LoggerProxy class. Once the Logger implementation gets created in the cli package, it can be obtained by calling the getInstance convenience method from the exported module. Check the start.ts file to learn more about how this process works.","title":"Implementation details"},{"location":"hosting/logging/#adding-logs","text":"Once the LoggerProxy class gets initialized in the project, you can import it to any other file and add logs. Convenience methods are provided for all logging levels, so new logs can be added whenever needed using the format Logger.<logLevel>('<message>', ...meta) , where meta represents any additional properties desired beyond message . In the example above, we use the standard log levels described above . The message argument is a string, and meta is a data object. 1 2 3 4 5 6 7 8 9 10 11 12 13 // You have to import the LoggerProxy. We rename it to Logger to make it easier import { LoggerProxy as Logger } from 'n8n-workflow' ; // Info-level logging of a trigger function, with workflow name and workflow ID as additional metadata properties Logger . info ( `Polling trigger initiated for workflow \" ${ workflow . name } \"` , { workflowName : workflow . name , workflowId : workflow . id }); // Verbose-level logging of hook function execution, with execution ID, workflow ID, and session ID as metadata properties Logger . verbose ( `Executing hook (workflowExecuteBefore, hookFunctionsPush)` , { executionId : this . executionId , workflowId : this . workflowData . id , sessionId : this . sessionId }); When creating new loggers, some useful standards to keep in mind are: Craft log messages to be as easily human-readable as possible. For example, always wrap names in quotes. Duplicating information in the log message and metadata, like workflow name in the above example, can be useful as messages are easier to search and metadata enables easier filtering. Include multiple IDs (e.g. executionId, workflowId, and sessionId) throughout all logs. Use node types instead of node names (or both) as this is more consistent, and so easier to search.","title":"Adding logs"},{"location":"hosting/logging/#front-end-logs","text":"As of now, front-end logs are not available. Using Logger or LoggerProxy would yield errors in the editor-ui package. This functionality will get implemented in the future versions.","title":"Front-end logs"},{"location":"hosting/options/","text":"Installation # There are a few different ways to set up n8n depending on how you intend to use it: Desktop app - The fastest way to try n8n on your computer Self-host - Recommended method for production or customized usecases npm Docker n8n.cloud - Hosted solution, no need to install anything","title":"Installation"},{"location":"hosting/options/#installation","text":"There are a few different ways to set up n8n depending on how you intend to use it: Desktop app - The fastest way to try n8n on your computer Self-host - Recommended method for production or customized usecases npm Docker n8n.cloud - Hosted solution, no need to install anything","title":"Installation"},{"location":"hosting/security/","text":"Security # By default, n8n can be accessed by everybody. This is okay if you only have it running locally but if you deploy it on a server which is accessible from the web, you have to make sure that n8n is protected. Basic auth # Right now we have very basic protection in place using basic-auth. It can be activated by setting the following environment variables: 1 2 3 export N8N_BASIC_AUTH_ACTIVE = true export N8N_BASIC_AUTH_USER = <USER> export N8N_BASIC_AUTH_PASSWORD = <PASSWORD> JWT # There is also limited support for JWT based authentication. If enabled, n8n will verify the token with the provided JSON Web Key Set URI. It can be configured through the following environment variables: 1 2 3 export N8N_JWT_AUTH_ACTIVE = true export N8N_JWT_AUTH_HEADER = <HEADER> export N8N_JWKS_URI = <URI> Keep in mind that there is currently no built-in way of passing down the Token in the request, so to use JWT you have to have the token in the request manually.","title":"Security"},{"location":"hosting/security/#security","text":"By default, n8n can be accessed by everybody. This is okay if you only have it running locally but if you deploy it on a server which is accessible from the web, you have to make sure that n8n is protected.","title":"Security"},{"location":"hosting/security/#basic-auth","text":"Right now we have very basic protection in place using basic-auth. It can be activated by setting the following environment variables: 1 2 3 export N8N_BASIC_AUTH_ACTIVE = true export N8N_BASIC_AUTH_USER = <USER> export N8N_BASIC_AUTH_PASSWORD = <PASSWORD>","title":"Basic auth"},{"location":"hosting/security/#jwt","text":"There is also limited support for JWT based authentication. If enabled, n8n will verify the token with the provided JSON Web Key Set URI. It can be configured through the following environment variables: 1 2 3 export N8N_JWT_AUTH_ACTIVE = true export N8N_JWT_AUTH_HEADER = <HEADER> export N8N_JWKS_URI = <URI> Keep in mind that there is currently no built-in way of passing down the Token in the request, so to use JWT you have to have the token in the request manually.","title":"JWT"},{"location":"hosting/user-management/","text":"User management # User management in n8n allows you to invite people to work in your n8n instance. It includes: Login and password management Adding and removing users Two account types: owner and member User management is available for self-hosted n8n. It isn't currently available for Cloud or Desktop. Privacy The user management feature doesn't send personal information, such as email or username, to n8n. Account types # There are two account types, owner and member. The account type affects the user permissions and access. Owner: this is the account that set up user management. There is one owner account for each n8n instance. You can't transfer ownership. The owner can: Add and remove users See all workflows Delete tags Members: these are normal n8n users. Members can: See all workflow tags, create new tags, and assign tags to their workflows. Members can't delete tags. Change their own password. See their own workflows. Create a member-level account for the owner We recommend that owners create a member-level account for themselves. Owners can see all workflows, but there is no way to see who created a particular workflow, so there is a risk of overriding other people's work if you build and edit workflows as an owner. Setup # There are three stages to set up user management in n8n: Configure your n8n instance to use your SMTP server. Start n8n and follow the setup steps in the app. Invite users. Step one: SMTP # You need an SMTP server for user management to send invites and password resets. Get the following information from your SMTP provider: Server name SMTP username SMTP password SMTP sender name To set up SMTP with n8n, configure the SMTP environment variables for your n8n instance. For information on how to set environment variables, refer to Configuration Variable Type Description Required? N8N_EMAIL_MODE string smtp Required N8N_SMTP_HOST string your_SMTP_server_name Required N8N_SMTP_PORT number your_SMTP_server_port Default is 465 . Optional N8N_SMTP_USER string your_SMTP_username Required N8N_SMTP_PASS string your_SMTP_password Required N8N_SMTP_SENDER string You can select the sender name from the sender addresses. Example: \"N8N contact@n8n.com \" Required N8N_SMTP_SSL boolean Whether to use SSL for SMTP (true) or not (false). Defaults to true . Optional N8N_UM_EMAIL_TEMPLATES_INVITE string Full path to your HTML email template. This overrides the default template for invite emails. Optional N8N_UM_EMAIL_TEMPLATES_PWRESET string Full path to your HTML email template. This overrides the default template for password reset emails. Optional If your n8n instance is already running, you need to restart it to enable the new SMTP settings. More configuration options There are more configuration options available as environment variables. Refer to Environment variables for a list. These include options to disable tags, workflow templates, and the personalization survey, if you don't want your users to see them. New to SMTP? If you're not familiar with SMTP, this blog post by SendGrid offers a short introduction, while Wikipedia's Simple Mail Transfer Protocol article provides more detailed technical background. Step two: in-app setup # When you set up user management for the first time, you create an owner account. Open n8n. The app displays a signup screen. Enter your details. Your password must be at least eight characters, including at least one number and one capital letter. Click Next . n8n logs you in with your new owner account. Step three: invite users # You can now invite other people to your n8n instance. Sign in with your owner account. Click your user icon > Settings . n8n opens your Personal settings page. Click Users to go to the Users page. Click Invite . Enter the new user's email address. Click Invite user . n8n sends an email with a link for the new user to join. Manage users # The Users page shows all users, including ones with pending invitations. You can: Delete a user: Click the menu icon by the user you want to delete. Confirm you want to delete them. If they are an active user, choose whether to copy their workflow data and credentials to a new user, or permanently delete their workflows and credentials. Resend an invitation to a pending user: click the menu icon by the user, then click Resend invite . Skipping or disabling user management # You don't have to use n8n's user management feature. You can: Leave it enabled, but choose to skip the setup step. You can use n8n as normal. If you want to set up user management later, go to Settings > Users . Disable the feature completely using the N8N_USER_MANAGEMENT_DISABLED environment variable. Setting this environment variable to true completely hides the feature in your n8n instance. You can't use this setting if you have already set up an owner account. Best practices # This sections contains advice on best practices relating to user management in n8n. We recommend that owners create a member-level account for themselves. Owners can see all workflows, but there is no way to see who created a particular workflow, so there is a risk of overriding other people's work if you build and edit workflows as an owner. Users must be careful not to edit the same workflow simultaneously. It is possible to do it, but the users will overwrite each other's changes. To move workflows between accounts, export the workflow as JSON, then import it to the new account. Note that this action loses the workflow history. Webhook paths must be unique across the entire instance. This means each webhook path must be unique for all workflows and all users. By default, n8n generates a long random value for the webhook path, but users can edit this to their own custom path. If two users set the same path value: The path works for the first workflow that is run or activated. Other workflows will error if they try to run with the same path. If you run n8n behind a reverse proxy, set the following environment variables so that emails are generated with the correct URL: N8N_HOST N8N_PORT N8N_PROTOCOL N8N_EDITOR_BASE_URL More information on these variables is available in Environment variables . You can't use n8n's user management with basic auth. If your n8n instance currently uses basic auth to authenticate the user, you must remove this before setting up user management.","title":"User management"},{"location":"hosting/user-management/#user-management","text":"User management in n8n allows you to invite people to work in your n8n instance. It includes: Login and password management Adding and removing users Two account types: owner and member User management is available for self-hosted n8n. It isn't currently available for Cloud or Desktop. Privacy The user management feature doesn't send personal information, such as email or username, to n8n.","title":"User management"},{"location":"hosting/user-management/#account-types","text":"There are two account types, owner and member. The account type affects the user permissions and access. Owner: this is the account that set up user management. There is one owner account for each n8n instance. You can't transfer ownership. The owner can: Add and remove users See all workflows Delete tags Members: these are normal n8n users. Members can: See all workflow tags, create new tags, and assign tags to their workflows. Members can't delete tags. Change their own password. See their own workflows. Create a member-level account for the owner We recommend that owners create a member-level account for themselves. Owners can see all workflows, but there is no way to see who created a particular workflow, so there is a risk of overriding other people's work if you build and edit workflows as an owner.","title":"Account types"},{"location":"hosting/user-management/#setup","text":"There are three stages to set up user management in n8n: Configure your n8n instance to use your SMTP server. Start n8n and follow the setup steps in the app. Invite users.","title":"Setup"},{"location":"hosting/user-management/#step-one-smtp","text":"You need an SMTP server for user management to send invites and password resets. Get the following information from your SMTP provider: Server name SMTP username SMTP password SMTP sender name To set up SMTP with n8n, configure the SMTP environment variables for your n8n instance. For information on how to set environment variables, refer to Configuration Variable Type Description Required? N8N_EMAIL_MODE string smtp Required N8N_SMTP_HOST string your_SMTP_server_name Required N8N_SMTP_PORT number your_SMTP_server_port Default is 465 . Optional N8N_SMTP_USER string your_SMTP_username Required N8N_SMTP_PASS string your_SMTP_password Required N8N_SMTP_SENDER string You can select the sender name from the sender addresses. Example: \"N8N contact@n8n.com \" Required N8N_SMTP_SSL boolean Whether to use SSL for SMTP (true) or not (false). Defaults to true . Optional N8N_UM_EMAIL_TEMPLATES_INVITE string Full path to your HTML email template. This overrides the default template for invite emails. Optional N8N_UM_EMAIL_TEMPLATES_PWRESET string Full path to your HTML email template. This overrides the default template for password reset emails. Optional If your n8n instance is already running, you need to restart it to enable the new SMTP settings. More configuration options There are more configuration options available as environment variables. Refer to Environment variables for a list. These include options to disable tags, workflow templates, and the personalization survey, if you don't want your users to see them. New to SMTP? If you're not familiar with SMTP, this blog post by SendGrid offers a short introduction, while Wikipedia's Simple Mail Transfer Protocol article provides more detailed technical background.","title":"Step one: SMTP"},{"location":"hosting/user-management/#step-two-in-app-setup","text":"When you set up user management for the first time, you create an owner account. Open n8n. The app displays a signup screen. Enter your details. Your password must be at least eight characters, including at least one number and one capital letter. Click Next . n8n logs you in with your new owner account.","title":"Step two: in-app setup"},{"location":"hosting/user-management/#step-three-invite-users","text":"You can now invite other people to your n8n instance. Sign in with your owner account. Click your user icon > Settings . n8n opens your Personal settings page. Click Users to go to the Users page. Click Invite . Enter the new user's email address. Click Invite user . n8n sends an email with a link for the new user to join.","title":"Step three: invite users"},{"location":"hosting/user-management/#manage-users","text":"The Users page shows all users, including ones with pending invitations. You can: Delete a user: Click the menu icon by the user you want to delete. Confirm you want to delete them. If they are an active user, choose whether to copy their workflow data and credentials to a new user, or permanently delete their workflows and credentials. Resend an invitation to a pending user: click the menu icon by the user, then click Resend invite .","title":"Manage users"},{"location":"hosting/user-management/#skipping-or-disabling-user-management","text":"You don't have to use n8n's user management feature. You can: Leave it enabled, but choose to skip the setup step. You can use n8n as normal. If you want to set up user management later, go to Settings > Users . Disable the feature completely using the N8N_USER_MANAGEMENT_DISABLED environment variable. Setting this environment variable to true completely hides the feature in your n8n instance. You can't use this setting if you have already set up an owner account.","title":"Skipping or disabling user management"},{"location":"hosting/user-management/#best-practices","text":"This sections contains advice on best practices relating to user management in n8n. We recommend that owners create a member-level account for themselves. Owners can see all workflows, but there is no way to see who created a particular workflow, so there is a risk of overriding other people's work if you build and edit workflows as an owner. Users must be careful not to edit the same workflow simultaneously. It is possible to do it, but the users will overwrite each other's changes. To move workflows between accounts, export the workflow as JSON, then import it to the new account. Note that this action loses the workflow history. Webhook paths must be unique across the entire instance. This means each webhook path must be unique for all workflows and all users. By default, n8n generates a long random value for the webhook path, but users can edit this to their own custom path. If two users set the same path value: The path works for the first workflow that is run or activated. Other workflows will error if they try to run with the same path. If you run n8n behind a reverse proxy, set the following environment variables so that emails are generated with the correct URL: N8N_HOST N8N_PORT N8N_PROTOCOL N8N_EDITOR_BASE_URL More information on these variables is available in Environment variables . You can't use n8n's user management with basic auth. If your n8n instance currently uses basic auth to authenticate the user, you must remove this before setting up user management.","title":"Best practices"},{"location":"hosting/databases/","text":"Overview # This section describes: n8n's database structure Supported databases and settings For guidance on managing database size, refer to Scaling | Execution data .","title":"Overview"},{"location":"hosting/databases/#overview","text":"This section describes: n8n's database structure Supported databases and settings For guidance on managing database size, refer to Scaling | Execution data .","title":"Overview"},{"location":"hosting/databases/structure/","text":"n8n databases structure # By default, n8n uses SQLite as the database. If you are using another database it will be similar, but the data-types will be different depending on the database. The credentials , workflows , executions , and webhook are decoupled and stored in different tables. To inspect the n8n database, you can use DBeaver , which is an open-source universal database tool. Credentials entity # Based on the node you use in a workflow, you may have to use credentials to connect the node with the respective service. These credentials get stored in the credentials_entity table with the following fields. Column Name Data Type Description id INTEGER Auto-incremented and unique for each row name VARCHAR Stores the name of the credentials given by the user data Text Stores the encrypted data type VARCHAR Refers to the credential type used by the node nodeAccess TEXT Stores the information of the nodes that have access to these credentials createdAt DATETIME Stores the date and time when a credential gets created updatedAt DATETIME Stores the date and time when a credential gets updated Below is an example of how n8n stores the credentials in the credentials_entity table in the SQLite database. The example below shows the data stored in the table for the Pipedrive Trial credentials. The name field contains the credentials name, and the data field stores the credentials by encrypting them. The Pipedrive node has two authentication methods - OAuth and Access Token. The type field indicates the method the credentials belong to. The nodeAccess field stores information about the nodes that have access to these credentials. In the example below, both the Pipedrive node and the Pipedrive Trigger node have access to the Pipedrive Trial credentials. Execution entity # Depending on the settings, the executions are stored in the execution_entity table with the following fields. Column Name Data Type Description id INTEGER Auto-incremented and unique for each row data Text Stores the execution data finished BOOLEAN Indicates if the execution was finished successfully or not ( 1 = finished successfully) mode VARCHAR Refers to the type of node that triggered the workflow (for example, webhook, trigger, error) retryOf VARCHAR Indicates if the execution was a retry of a previous execution retrySuccessId VARCHAR Stores the ID of a retry execution if it was a success startedAt DATETIME Stores the date and time when execution gets started stoppedAt DATETIME Stores the date and time when execution gets stopped workflowData TEXT Stores the workflow data with the static data (if any) workflowId VARCHAR Stores the ID of the workflow that got executed Below is an example of how n8n stores the execution information in the execution_entity table in the SQLite database. The example below shows the execution data stored in the table for the Receive updates of the position of the ISS every minute workflow. The data field contains the data returned by the nodes after the execution of the workflow. The finished field contains the value 1 , indicating that the execution got completed successfully. The example workflow uses a Trigger node to start the workflow. This information gets stored in the mode field. The workflowData field stores information about the workflow and static data. The workflowId field refers to the workflow that got executed. Migrations # Migration is a file with SQL queries to update a database schema. For example, if a new column gets added to a database, n8n creates a migration. On startup, n8n checks for new migrations. The logs of the migrations that ran get stored in the migrations table. n8n uses this table to check for the migrations that got executed earlier. The migrations table has the following fields. Column Name Data Type Description id INTEGER Auto-incremented and unique for each row timestamp BIGINT Stores the timestamp when the migration ran name VARCHAR Stores the name of the migration that ran Below is an example of how n8n logs the migrations that ran in the migrations table. The timestamp when the migration got executed is stored in the timestamp field. The name field stores the name of the migration that got executed. Webhook entity # You may have to use a Trigger node (for example, Webhook node, Pipedrive Trigger node, ClickUp Trigger node, etc.) to trigger your workflow. The information of active webhooks used by these trigger nodes gets stored in the webhook_entity table with the following fields. Column Name Data Type Description workflowId INTEGER Stores the ID of the workflow webhookPath VARCHAR Stores the webhook path method VARCHAR Stores the information about the HTTP Method node VARCHAR Stores the name of the trigger node Below is an example of how n8n stores information about webhook in the webhook_entity table in the SQLite database. The example below shows the data stored in the table for an example workflow that uses the Webhook node. The workflowId field contains the id of the workflow that contains the Webhook node. The webhookPath field stores the path used by the Webhook node. Generally, the webhook path gets generated by n8n. If you enter a custom path, the webhookPath field will store that instead. Based on your use-case, you can configure the HTTP request method in the Webhook node. The information about the HTTP request method you use with the Webhook node gets stored in the method field. The node field stores the name of the node. Workflow entity # The saved workflows get stored in the workflow_entity table with the following fields. Column Name Data Type Description id INTEGER Auto-incremented and unique for each row name VARCHAR Stores the name of the workflow given by the user active BOOLEAN Stores the information about the active state of the workflow (1 = active) nodes TEXT Stores the information about nodes and their configurations in a workflow connections TEXT Stores the connection information between nodes in a workflow createdAt DATETIME Stores the date and time when a workflow gets created updatedAt DATETIME Stores the date and time when a workflow gets updated settings TEXT Stores the information about additional settings of a workflow. For example, timezone, error workflow etc. staticData TEXT Stores the static data of the workflow Below is an example of how n8n stores the workflow data in the workflow_entity table in the SQLite database. The example below shows the data stored in the table for the workflow Example Workflow . The name field contains the workflow name. The active field has the value 0 , indicating that the workflow is not active. If the workflow was set to active, the active field would contain the value 1 . The information about the nodes used in the workflow with their configurations gets stored in the nodes field. The connections field stores information about the connection between the nodes. We can notice that the Start node is connected to the Set node. The settings field stores information about the additional setting of the workflow. In the example, we can notice that the timezone was changed and set to Asia/Calcutta, and an error workflow was also configured for this workflow. This example workflow doesn't store static data. If a workflow stores data, the staticData field would contain that information.","title":"n8n databases structure"},{"location":"hosting/databases/structure/#n8n-databases-structure","text":"By default, n8n uses SQLite as the database. If you are using another database it will be similar, but the data-types will be different depending on the database. The credentials , workflows , executions , and webhook are decoupled and stored in different tables. To inspect the n8n database, you can use DBeaver , which is an open-source universal database tool.","title":"n8n databases structure"},{"location":"hosting/databases/structure/#credentials-entity","text":"Based on the node you use in a workflow, you may have to use credentials to connect the node with the respective service. These credentials get stored in the credentials_entity table with the following fields. Column Name Data Type Description id INTEGER Auto-incremented and unique for each row name VARCHAR Stores the name of the credentials given by the user data Text Stores the encrypted data type VARCHAR Refers to the credential type used by the node nodeAccess TEXT Stores the information of the nodes that have access to these credentials createdAt DATETIME Stores the date and time when a credential gets created updatedAt DATETIME Stores the date and time when a credential gets updated Below is an example of how n8n stores the credentials in the credentials_entity table in the SQLite database. The example below shows the data stored in the table for the Pipedrive Trial credentials. The name field contains the credentials name, and the data field stores the credentials by encrypting them. The Pipedrive node has two authentication methods - OAuth and Access Token. The type field indicates the method the credentials belong to. The nodeAccess field stores information about the nodes that have access to these credentials. In the example below, both the Pipedrive node and the Pipedrive Trigger node have access to the Pipedrive Trial credentials.","title":"Credentials entity"},{"location":"hosting/databases/structure/#execution-entity","text":"Depending on the settings, the executions are stored in the execution_entity table with the following fields. Column Name Data Type Description id INTEGER Auto-incremented and unique for each row data Text Stores the execution data finished BOOLEAN Indicates if the execution was finished successfully or not ( 1 = finished successfully) mode VARCHAR Refers to the type of node that triggered the workflow (for example, webhook, trigger, error) retryOf VARCHAR Indicates if the execution was a retry of a previous execution retrySuccessId VARCHAR Stores the ID of a retry execution if it was a success startedAt DATETIME Stores the date and time when execution gets started stoppedAt DATETIME Stores the date and time when execution gets stopped workflowData TEXT Stores the workflow data with the static data (if any) workflowId VARCHAR Stores the ID of the workflow that got executed Below is an example of how n8n stores the execution information in the execution_entity table in the SQLite database. The example below shows the execution data stored in the table for the Receive updates of the position of the ISS every minute workflow. The data field contains the data returned by the nodes after the execution of the workflow. The finished field contains the value 1 , indicating that the execution got completed successfully. The example workflow uses a Trigger node to start the workflow. This information gets stored in the mode field. The workflowData field stores information about the workflow and static data. The workflowId field refers to the workflow that got executed.","title":"Execution entity"},{"location":"hosting/databases/structure/#migrations","text":"Migration is a file with SQL queries to update a database schema. For example, if a new column gets added to a database, n8n creates a migration. On startup, n8n checks for new migrations. The logs of the migrations that ran get stored in the migrations table. n8n uses this table to check for the migrations that got executed earlier. The migrations table has the following fields. Column Name Data Type Description id INTEGER Auto-incremented and unique for each row timestamp BIGINT Stores the timestamp when the migration ran name VARCHAR Stores the name of the migration that ran Below is an example of how n8n logs the migrations that ran in the migrations table. The timestamp when the migration got executed is stored in the timestamp field. The name field stores the name of the migration that got executed.","title":"Migrations"},{"location":"hosting/databases/structure/#webhook-entity","text":"You may have to use a Trigger node (for example, Webhook node, Pipedrive Trigger node, ClickUp Trigger node, etc.) to trigger your workflow. The information of active webhooks used by these trigger nodes gets stored in the webhook_entity table with the following fields. Column Name Data Type Description workflowId INTEGER Stores the ID of the workflow webhookPath VARCHAR Stores the webhook path method VARCHAR Stores the information about the HTTP Method node VARCHAR Stores the name of the trigger node Below is an example of how n8n stores information about webhook in the webhook_entity table in the SQLite database. The example below shows the data stored in the table for an example workflow that uses the Webhook node. The workflowId field contains the id of the workflow that contains the Webhook node. The webhookPath field stores the path used by the Webhook node. Generally, the webhook path gets generated by n8n. If you enter a custom path, the webhookPath field will store that instead. Based on your use-case, you can configure the HTTP request method in the Webhook node. The information about the HTTP request method you use with the Webhook node gets stored in the method field. The node field stores the name of the node.","title":"Webhook entity"},{"location":"hosting/databases/structure/#workflow-entity","text":"The saved workflows get stored in the workflow_entity table with the following fields. Column Name Data Type Description id INTEGER Auto-incremented and unique for each row name VARCHAR Stores the name of the workflow given by the user active BOOLEAN Stores the information about the active state of the workflow (1 = active) nodes TEXT Stores the information about nodes and their configurations in a workflow connections TEXT Stores the connection information between nodes in a workflow createdAt DATETIME Stores the date and time when a workflow gets created updatedAt DATETIME Stores the date and time when a workflow gets updated settings TEXT Stores the information about additional settings of a workflow. For example, timezone, error workflow etc. staticData TEXT Stores the static data of the workflow Below is an example of how n8n stores the workflow data in the workflow_entity table in the SQLite database. The example below shows the data stored in the table for the workflow Example Workflow . The name field contains the workflow name. The active field has the value 0 , indicating that the workflow is not active. If the workflow was set to active, the active field would contain the value 1 . The information about the nodes used in the workflow with their configurations gets stored in the nodes field. The connections field stores information about the connection between the nodes. We can notice that the Start node is connected to the Set node. The settings field stores information about the additional setting of the workflow. In the example, we can notice that the timezone was changed and set to Asia/Calcutta, and an error workflow was also configured for this workflow. This example workflow doesn't store static data. If a workflow stores data, the staticData field would contain that information.","title":"Workflow entity"},{"location":"hosting/databases/supported-databases-settings/","text":"Supported databases and settings # Databases # By default, n8n uses SQLite to save credentials, past executions, and workflows. However, n8n also supports PostgresDB. Shared settings # The following environment variables get used by all databases: DB_TABLE_PREFIX (default: '') - Prefix for table names PostgresDB # To use PostgresDB as the database, you can provide the following environment variables: DB_TYPE=postgresdb DB_POSTGRESDB_DATABASE (default: 'n8n') DB_POSTGRESDB_HOST (default: 'localhost') DB_POSTGRESDB_PORT (default: 5432) DB_POSTGRESDB_USER (default: 'root') DB_POSTGRESDB_PASSWORD (default: empty) DB_POSTGRESDB_SCHEMA (default: 'public') DB_POSTGRESDB_SSL_CA (default: undefined): Path to the server's CA certificate used to validate the connection (opportunistic encryption is not supported) DB_POSTGRESDB_SSL_CERT (default: undefined): Path to the client's TLS certificate DB_POSTGRESDB_SSL_KEY (default: undefined): Path to the client's private key corresponding to the certificate DB_POSTGRESDB_SSL_REJECT_UNAUTHORIZED (default: true): If TLS connections that fail validation should be rejected 1 2 3 4 5 6 7 8 9 10 11 12 13 export DB_TYPE = postgresdb export DB_POSTGRESDB_DATABASE = n8n export DB_POSTGRESDB_HOST = postgresdb export DB_POSTGRESDB_PORT = 5432 export DB_POSTGRESDB_USER = n8n export DB_POSTGRESDB_PASSWORD = n8n export DB_POSTGRESDB_SCHEMA = n8n # optional: export DB_POSTGRESDB_SSL_CA = $( pwd ) /ca.crt export DB_POSTGRESDB_SSL_REJECT_UNAUTHORIZED = false n8n start TLS # You can choose between these configurations: Not declaring (default): Connect with SSL=off Declaring only the CA and unauthorized flag: Connect with SSL=on and verify the server's signature Declaring _{CERT,KEY} and the above: Use the certificate and key for client TLS authentication MySQL / MariaDB # The compatibility with MySQL/MariaDB has been tested. Even then, it is advisable to observe the operation of the application with this database as this option has been recently added. If you spot any problems, feel free to submit a bug report or a pull request. To use MySQL or MariaDB, provide the following environment variables: DB_TYPE=mysqldb or DB_TYPE=mariadb DB_MYSQLDB_DATABASE (default: 'n8n') DB_MYSQLDB_HOST (default: 'localhost') DB_MYSQLDB_PORT (default: 3306) DB_MYSQLDB_USER (default: 'root') DB_MYSQLDB_PASSWORD (default: empty) 1 2 3 4 5 6 7 8 export DB_TYPE = mysqldb export DB_MYSQLDB_DATABASE = n8n export DB_MYSQLDB_HOST = mysqldb export DB_MYSQLDB_PORT = 3306 export DB_MYSQLDB_USER = n8n export DB_MYSQLDB_PASSWORD = n8n n8n start SQLite # This is the default database that gets used if nothing is defined. The database file is located at: ~/.n8n/database.sqlite Other databases # Currently, only the databases mentioned above are supported. n8n internally uses TypeORM , so adding support for the following databases should not be too much work: CockroachDB Microsoft SQL Oracle If you cannot use any of the currently supported databases for some reason and you can code, we'd appreciate your support in the form of a pull request. If not, you can request support here .","title":"Supported databases and settings"},{"location":"hosting/databases/supported-databases-settings/#supported-databases-and-settings","text":"","title":"Supported databases and settings"},{"location":"hosting/databases/supported-databases-settings/#databases","text":"By default, n8n uses SQLite to save credentials, past executions, and workflows. However, n8n also supports PostgresDB.","title":"Databases"},{"location":"hosting/databases/supported-databases-settings/#shared-settings","text":"The following environment variables get used by all databases: DB_TABLE_PREFIX (default: '') - Prefix for table names","title":"Shared settings"},{"location":"hosting/databases/supported-databases-settings/#postgresdb","text":"To use PostgresDB as the database, you can provide the following environment variables: DB_TYPE=postgresdb DB_POSTGRESDB_DATABASE (default: 'n8n') DB_POSTGRESDB_HOST (default: 'localhost') DB_POSTGRESDB_PORT (default: 5432) DB_POSTGRESDB_USER (default: 'root') DB_POSTGRESDB_PASSWORD (default: empty) DB_POSTGRESDB_SCHEMA (default: 'public') DB_POSTGRESDB_SSL_CA (default: undefined): Path to the server's CA certificate used to validate the connection (opportunistic encryption is not supported) DB_POSTGRESDB_SSL_CERT (default: undefined): Path to the client's TLS certificate DB_POSTGRESDB_SSL_KEY (default: undefined): Path to the client's private key corresponding to the certificate DB_POSTGRESDB_SSL_REJECT_UNAUTHORIZED (default: true): If TLS connections that fail validation should be rejected 1 2 3 4 5 6 7 8 9 10 11 12 13 export DB_TYPE = postgresdb export DB_POSTGRESDB_DATABASE = n8n export DB_POSTGRESDB_HOST = postgresdb export DB_POSTGRESDB_PORT = 5432 export DB_POSTGRESDB_USER = n8n export DB_POSTGRESDB_PASSWORD = n8n export DB_POSTGRESDB_SCHEMA = n8n # optional: export DB_POSTGRESDB_SSL_CA = $( pwd ) /ca.crt export DB_POSTGRESDB_SSL_REJECT_UNAUTHORIZED = false n8n start","title":"PostgresDB"},{"location":"hosting/databases/supported-databases-settings/#tls","text":"You can choose between these configurations: Not declaring (default): Connect with SSL=off Declaring only the CA and unauthorized flag: Connect with SSL=on and verify the server's signature Declaring _{CERT,KEY} and the above: Use the certificate and key for client TLS authentication","title":"TLS"},{"location":"hosting/databases/supported-databases-settings/#mysql-mariadb","text":"The compatibility with MySQL/MariaDB has been tested. Even then, it is advisable to observe the operation of the application with this database as this option has been recently added. If you spot any problems, feel free to submit a bug report or a pull request. To use MySQL or MariaDB, provide the following environment variables: DB_TYPE=mysqldb or DB_TYPE=mariadb DB_MYSQLDB_DATABASE (default: 'n8n') DB_MYSQLDB_HOST (default: 'localhost') DB_MYSQLDB_PORT (default: 3306) DB_MYSQLDB_USER (default: 'root') DB_MYSQLDB_PASSWORD (default: empty) 1 2 3 4 5 6 7 8 export DB_TYPE = mysqldb export DB_MYSQLDB_DATABASE = n8n export DB_MYSQLDB_HOST = mysqldb export DB_MYSQLDB_PORT = 3306 export DB_MYSQLDB_USER = n8n export DB_MYSQLDB_PASSWORD = n8n n8n start","title":"MySQL / MariaDB"},{"location":"hosting/databases/supported-databases-settings/#sqlite","text":"This is the default database that gets used if nothing is defined. The database file is located at: ~/.n8n/database.sqlite","title":"SQLite"},{"location":"hosting/databases/supported-databases-settings/#other-databases","text":"Currently, only the databases mentioned above are supported. n8n internally uses TypeORM , so adding support for the following databases should not be too much work: CockroachDB Microsoft SQL Oracle If you cannot use any of the currently supported databases for some reason and you can code, we'd appreciate your support in the form of a pull request. If not, you can request support here .","title":"Other databases"},{"location":"hosting/installation/","text":"Overview # Installation guides for n8n: Desktop app npm Docker Cloud","title":"Overview"},{"location":"hosting/installation/#overview","text":"Installation guides for n8n: Desktop app npm Docker Cloud","title":"Overview"},{"location":"hosting/installation/cloud/","text":"n8n.cloud # n8n.cloud is our hosted solution. In addition to all the features of n8n, it provides added benefits such as: No technical set up or maintenance for your n8n instance 24/7 uptime monitoring Managed OAuth for authentication Easy upgrades to the newest n8n versions Sign up for n8n.cloud Cloud IP addresses Currently it is 20.79.72.105 , however this is subject to change. The NAT addresses are 20.79.227.226 and 20.79.72.36 , but this is also subject to change. Recommended practice is to whitelist 20.79.72.0/24 , but if more strict measures are needed, at minimum 20.79.72.105 , 20.79.72.36 , and 20.79.227.226 must be whitelisted. Russia and Belarus n8n Cloud is not available in Russia and Belarus. Refer to our blog post Update on n8n cloud accounts in Russia and Belarus for more information.","title":"n8n.cloud"},{"location":"hosting/installation/cloud/#n8ncloud","text":"n8n.cloud is our hosted solution. In addition to all the features of n8n, it provides added benefits such as: No technical set up or maintenance for your n8n instance 24/7 uptime monitoring Managed OAuth for authentication Easy upgrades to the newest n8n versions Sign up for n8n.cloud Cloud IP addresses Currently it is 20.79.72.105 , however this is subject to change. The NAT addresses are 20.79.227.226 and 20.79.72.36 , but this is also subject to change. Recommended practice is to whitelist 20.79.72.0/24 , but if more strict measures are needed, at minimum 20.79.72.105 , 20.79.72.36 , and 20.79.227.226 must be whitelisted. Russia and Belarus n8n Cloud is not available in Russia and Belarus. Refer to our blog post Update on n8n cloud accounts in Russia and Belarus for more information.","title":"n8n.cloud"},{"location":"hosting/installation/desktop-app/","text":"Desktop app # The n8n desktop app is the fastest way to try n8n on Windows or Mac computers (support for Linux is coming soon). Download the app from the link below: Download for Windows Download for macOS Keep in mind If you have already installed n8n locally via npm , the desktop app will connect to the existing sqlite database. Tunnel credentials The n8n desktop creates a tunnel in order to receive webhooks from external services such as Google. This tunnel is protected using a randomly generated combination of username and password. If you are asked for a login to your personal tunnel URL, you can find the generated credentials in the n8n-desktop.env file in the .n8n folder of your home directory.","title":"Desktop app"},{"location":"hosting/installation/desktop-app/#desktop-app","text":"The n8n desktop app is the fastest way to try n8n on Windows or Mac computers (support for Linux is coming soon). Download the app from the link below: Download for Windows Download for macOS Keep in mind If you have already installed n8n locally via npm , the desktop app will connect to the existing sqlite database. Tunnel credentials The n8n desktop creates a tunnel in order to receive webhooks from external services such as Google. This tunnel is protected using a randomly generated combination of username and password. If you are asked for a login to your personal tunnel URL, you can find the generated credentials in the n8n-desktop.env file in the .n8n folder of your home directory.","title":"Desktop app"},{"location":"hosting/installation/docker/","text":"Docker Installation # Docker is a quick and simple way to download and start automating with n8n. By using Docker you are able to: Install to a pristine environment Easily install and run your preferred database with n8n Enjoy a quick and simplified installation experience regardless of your OS Prerequisites # Before proceeding ensure that you have installed Docker Desktop . Linux Users Docker Desktop is only available for Mac and Windows. You must install Docker Engine and Docker Compose individually for your distribution. Starting n8n # From your terminal, run: 1 2 3 4 5 docker run -it --rm \\ --name n8n \\ -p 5678 :5678 \\ -v ~/.n8n:/home/node/.n8n \\ n8nio/n8n This command will download all required n8n images and start your container, exposed on port 5678 . So that all your data is not lost when you stop the container, it also mounts a local directory, .n8n , to persist your data locally. You can then access n8n by opening: http://localhost:5678 Using alternate databases # By default n8n uses SQLite to save credentials, past executions and workflows. n8n also supports PostgresDB, MySQL and MariaDB, configurable via environment variables as detailed below. It is important to still persist data in the /root/.n8n folder as it contains n8n user data and even more importantly the encryption key for credentials. It is also the name of the webhook when the n8n tunnel is used. If no directory is found, n8n creates automatically one on startup. In this case, existing credentials saved with a different encryption key can not be used anymore. Keep in mind Persisting the /root/.n8n directory even when using alternate databases is the recommended best practice, but not explicitly required. The encryption key can be provided via the N8N_ENCRYPTION_KEY environment variable . PostgresDB # To use n8n with Postgres, provide the corresponding configuration : 1 2 3 4 5 6 7 8 9 10 11 12 13 docker run -it --rm \\ --name n8n \\ -p 5678 :5678 \\ -e DB_TYPE = postgresdb \\ -e DB_POSTGRESDB_DATABASE = <POSTGRES_DATABASE> \\ -e DB_POSTGRESDB_HOST = <POSTGRES_HOST> \\ -e DB_POSTGRESDB_PORT = <POSTGRES_PORT> \\ -e DB_POSTGRESDB_USER = <POSTGRES_USER> \\ -e DB_POSTGRESDB_SCHEMA = <POSTGRES_SCHEMA> \\ -e DB_POSTGRESDB_PASSWORD = <POSTGRES_PASSWORD> \\ -v ~/.n8n:/home/node/.n8n \\ n8nio/n8n \\ n8n start A complete docker-compose file for Postgres can be found here . MySQL # To use n8n with MySQL, provide the corresponding configuration : 1 2 3 4 5 6 7 8 9 10 11 12 docker run -it --rm \\ --name n8n \\ -p 5678 :5678 \\ -e DB_TYPE = mysqldb \\ -e DB_MYSQLDB_DATABASE = <MYSQLDB_DATABASE> \\ -e DB_MYSQLDB_HOST = <MYSQLDB_HOST> \\ -e DB_MYSQLDB_PORT = <MYSQLDB_PORT> \\ -e DB_MYSQLDB_USER = <MYSQLDB_USER> \\ -e DB_MYSQLDB_PASSWORD = <MYSQLDB_PASSWORD> \\ -v ~/.n8n:/home/node/.n8n \\ n8nio/n8n \\ n8n start Setting timezone # To define the timezone n8n should use, the environment variable GENERIC_TIMEZONE can be set. This gets used by schedule based nodes such as the Cron node. The timezone of the system can also be set separately. This controls what some scripts and commands return like $ date . The system timezone can be set via the environment variable TZ . Example using the same timezone for both: 1 2 3 4 5 6 docker run -it --rm \\ --name n8n \\ -p 5678 :5678 \\ -e GENERIC_TIMEZONE = \"Europe/Berlin\" \\ -e TZ = \"Europe/Berlin\" \\ n8nio/n8n Further reading # More information about Docker setup can be found in the README file of the Docker Image . n8n with tunnel # Danger This is only meant for local development and testing. Do not use it in production. To be able to use webhooks for trigger nodes of external services like GitHub, n8n has to be reachable from the web. To make that easy, n8n has a special tunnel service which redirects requests from our servers to your local n8n instance. Start n8n with --tunnel by running: 1 2 3 4 5 6 docker run -it --rm \\ --name n8n \\ -p 5678 :5678 \\ -v ~/.n8n:/home/node/.n8n \\ n8nio/n8n \\ n8n start --tunnel","title":"Docker Installation"},{"location":"hosting/installation/docker/#docker-installation","text":"Docker is a quick and simple way to download and start automating with n8n. By using Docker you are able to: Install to a pristine environment Easily install and run your preferred database with n8n Enjoy a quick and simplified installation experience regardless of your OS","title":"Docker Installation"},{"location":"hosting/installation/docker/#prerequisites","text":"Before proceeding ensure that you have installed Docker Desktop . Linux Users Docker Desktop is only available for Mac and Windows. You must install Docker Engine and Docker Compose individually for your distribution.","title":"Prerequisites"},{"location":"hosting/installation/docker/#starting-n8n","text":"From your terminal, run: 1 2 3 4 5 docker run -it --rm \\ --name n8n \\ -p 5678 :5678 \\ -v ~/.n8n:/home/node/.n8n \\ n8nio/n8n This command will download all required n8n images and start your container, exposed on port 5678 . So that all your data is not lost when you stop the container, it also mounts a local directory, .n8n , to persist your data locally. You can then access n8n by opening: http://localhost:5678","title":"Starting n8n"},{"location":"hosting/installation/docker/#using-alternate-databases","text":"By default n8n uses SQLite to save credentials, past executions and workflows. n8n also supports PostgresDB, MySQL and MariaDB, configurable via environment variables as detailed below. It is important to still persist data in the /root/.n8n folder as it contains n8n user data and even more importantly the encryption key for credentials. It is also the name of the webhook when the n8n tunnel is used. If no directory is found, n8n creates automatically one on startup. In this case, existing credentials saved with a different encryption key can not be used anymore. Keep in mind Persisting the /root/.n8n directory even when using alternate databases is the recommended best practice, but not explicitly required. The encryption key can be provided via the N8N_ENCRYPTION_KEY environment variable .","title":"Using alternate databases"},{"location":"hosting/installation/docker/#postgresdb","text":"To use n8n with Postgres, provide the corresponding configuration : 1 2 3 4 5 6 7 8 9 10 11 12 13 docker run -it --rm \\ --name n8n \\ -p 5678 :5678 \\ -e DB_TYPE = postgresdb \\ -e DB_POSTGRESDB_DATABASE = <POSTGRES_DATABASE> \\ -e DB_POSTGRESDB_HOST = <POSTGRES_HOST> \\ -e DB_POSTGRESDB_PORT = <POSTGRES_PORT> \\ -e DB_POSTGRESDB_USER = <POSTGRES_USER> \\ -e DB_POSTGRESDB_SCHEMA = <POSTGRES_SCHEMA> \\ -e DB_POSTGRESDB_PASSWORD = <POSTGRES_PASSWORD> \\ -v ~/.n8n:/home/node/.n8n \\ n8nio/n8n \\ n8n start A complete docker-compose file for Postgres can be found here .","title":"PostgresDB"},{"location":"hosting/installation/docker/#mysql","text":"To use n8n with MySQL, provide the corresponding configuration : 1 2 3 4 5 6 7 8 9 10 11 12 docker run -it --rm \\ --name n8n \\ -p 5678 :5678 \\ -e DB_TYPE = mysqldb \\ -e DB_MYSQLDB_DATABASE = <MYSQLDB_DATABASE> \\ -e DB_MYSQLDB_HOST = <MYSQLDB_HOST> \\ -e DB_MYSQLDB_PORT = <MYSQLDB_PORT> \\ -e DB_MYSQLDB_USER = <MYSQLDB_USER> \\ -e DB_MYSQLDB_PASSWORD = <MYSQLDB_PASSWORD> \\ -v ~/.n8n:/home/node/.n8n \\ n8nio/n8n \\ n8n start","title":"MySQL"},{"location":"hosting/installation/docker/#setting-timezone","text":"To define the timezone n8n should use, the environment variable GENERIC_TIMEZONE can be set. This gets used by schedule based nodes such as the Cron node. The timezone of the system can also be set separately. This controls what some scripts and commands return like $ date . The system timezone can be set via the environment variable TZ . Example using the same timezone for both: 1 2 3 4 5 6 docker run -it --rm \\ --name n8n \\ -p 5678 :5678 \\ -e GENERIC_TIMEZONE = \"Europe/Berlin\" \\ -e TZ = \"Europe/Berlin\" \\ n8nio/n8n","title":"Setting timezone"},{"location":"hosting/installation/docker/#further-reading","text":"More information about Docker setup can be found in the README file of the Docker Image .","title":"Further reading"},{"location":"hosting/installation/docker/#n8n-with-tunnel","text":"Danger This is only meant for local development and testing. Do not use it in production. To be able to use webhooks for trigger nodes of external services like GitHub, n8n has to be reachable from the web. To make that easy, n8n has a special tunnel service which redirects requests from our servers to your local n8n instance. Start n8n with --tunnel by running: 1 2 3 4 5 6 docker run -it --rm \\ --name n8n \\ -p 5678 :5678 \\ -v ~/.n8n:/home/node/.n8n \\ n8nio/n8n \\ n8n start --tunnel","title":"n8n with tunnel"},{"location":"hosting/installation/npm/","text":"npm # You can try n8n without installing it using npx. From the terminal, run: 1 npx n8n This command will download everything that is needed to start n8n. You can then access n8n and start building workflows by opening http://localhost:5678 . If you want to install n8n globally, use npm: 1 npm install n8n -g After the installation, start n8n by running: 1 2 3 n8n # or n8n start Keep in mind Windows users remember to change into the .n8n directory of your Home folder ( ~/.n8n ) before running n8n start . n8n with tunnel # Danger This is only meant for local development and testing. Do not use it in production. To be able to use webhooks for trigger nodes of external services like GitHub, n8n has to be reachable from the web. To make that easy, n8n has a special tunnel service which redirects requests from our servers to your local n8n instance. Start n8n with --tunnel by running: 1 n8n start --tunnel Windows troubleshooting # If you are experiencing issues running n8n with the typical flow of: 1 npx n8n Requirements # Please ensure that you have the following requirements fulfilled: Install latest version of NodeJS Install Python 2.7 (It is okay to have multiple versions installed on the machine) Windows SDK C++ Desktop Development Tools Windows Build Tools Install build tools # If you haven't satisfied the above, follow this procedure through your PowerShell (run with administrative privileges). This command installs the build tools, windows SDK and the C++ development tools in one package. 1 npm install - -global - -production windows-build-tools Configure npm to use Python version 2.7 # 1 npm config set python python2 . 7 Configure npm to use correct msvs version # 1 npm config set msvs_version 2017 - -global mmmagic npm package when using MSbuild tools with Visual Studio # While installing this package, node-gyp is run and it might fail to install it with an error appearing in the ballpark of: 1 gyp ERR! stack Error: spawn C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\**Enterprise**\\MSBuild\\Current\\Bin\\MSBuild.exe ENOENT It is seeking the MSBuild.exe in a directory that does not exist. If you are using Visual Studio Community or vice versa, you can change the path of MSBuild with command: 1 npm config set msbuild_path \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\**Community**\\MSBuild\\Current\\Bin\\MSBuild.exe\" Attempt to install package again after running the command above.","title":"npm"},{"location":"hosting/installation/npm/#npm","text":"You can try n8n without installing it using npx. From the terminal, run: 1 npx n8n This command will download everything that is needed to start n8n. You can then access n8n and start building workflows by opening http://localhost:5678 . If you want to install n8n globally, use npm: 1 npm install n8n -g After the installation, start n8n by running: 1 2 3 n8n # or n8n start Keep in mind Windows users remember to change into the .n8n directory of your Home folder ( ~/.n8n ) before running n8n start .","title":"npm"},{"location":"hosting/installation/npm/#n8n-with-tunnel","text":"Danger This is only meant for local development and testing. Do not use it in production. To be able to use webhooks for trigger nodes of external services like GitHub, n8n has to be reachable from the web. To make that easy, n8n has a special tunnel service which redirects requests from our servers to your local n8n instance. Start n8n with --tunnel by running: 1 n8n start --tunnel","title":"n8n with tunnel"},{"location":"hosting/installation/npm/#windows-troubleshooting","text":"If you are experiencing issues running n8n with the typical flow of: 1 npx n8n","title":"Windows troubleshooting"},{"location":"hosting/installation/npm/#requirements","text":"Please ensure that you have the following requirements fulfilled: Install latest version of NodeJS Install Python 2.7 (It is okay to have multiple versions installed on the machine) Windows SDK C++ Desktop Development Tools Windows Build Tools","title":"Requirements"},{"location":"hosting/installation/npm/#install-build-tools","text":"If you haven't satisfied the above, follow this procedure through your PowerShell (run with administrative privileges). This command installs the build tools, windows SDK and the C++ development tools in one package. 1 npm install - -global - -production windows-build-tools","title":"Install build tools"},{"location":"hosting/installation/npm/#configure-npm-to-use-python-version-27","text":"1 npm config set python python2 . 7","title":"Configure npm to use Python version 2.7"},{"location":"hosting/installation/npm/#configure-npm-to-use-correct-msvs-version","text":"1 npm config set msvs_version 2017 - -global","title":"Configure npm to use correct msvs version"},{"location":"hosting/installation/npm/#mmmagic-npm-package-when-using-msbuild-tools-with-visual-studio","text":"While installing this package, node-gyp is run and it might fail to install it with an error appearing in the ballpark of: 1 gyp ERR! stack Error: spawn C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\**Enterprise**\\MSBuild\\Current\\Bin\\MSBuild.exe ENOENT It is seeking the MSBuild.exe in a directory that does not exist. If you are using Visual Studio Community or vice versa, you can change the path of MSBuild with command: 1 npm config set msbuild_path \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\**Community**\\MSBuild\\Current\\Bin\\MSBuild.exe\" Attempt to install package again after running the command above.","title":"mmmagic npm package when using MSbuild tools with Visual Studio"},{"location":"hosting/scaling/","text":"Scaling n8n # n8n can be run in different modes depending on your needs. The queue mode provides the best scalability, and its configuration is detailed in Queue mode .","title":"Scaling n8n"},{"location":"hosting/scaling/#scaling-n8n","text":"n8n can be run in different modes depending on your needs. The queue mode provides the best scalability, and its configuration is detailed in Queue mode .","title":"Scaling n8n"},{"location":"hosting/scaling/execution-data/","text":"Execution data # Depending on your executions settings and volume, your n8n database can quickly swell in size and eventually run out of storage. To avoid this and ensure continued proper functionality, it is recommended to ensure you are only saving the desired data and to enable pruning of old executions data. This is done by configuring the corresponding environment variables . Saving data # You can select which executions data is saved, for example only those executions that result in an Error , so that only those records you want to keep are saved in the database. 1 2 3 4 5 6 7 8 9 10 11 // Save executions ending in errors export EXECUTIONS_DATA_SAVE_ON_ERROR = all // Save successful executions export EXECUTIONS_DATA_SAVE_ON_SUCCESS = all // Don 't save node progress for each execution export EXECUTIONS_DATA_SAVE_ON_PROGRESS=false // Don' t save manually launched executions export EXECUTIONS_DATA_SAVE_MANUAL_EXECUTIONS = false 1 2 3 4 5 6 7 8 docker run -it --rm \\ --name n8n \\ -p 5678 :5678 \\ -e EXECUTIONS_DATA_SAVE_ON_ERROR = all \\ -e EXECUTIONS_DATA_SAVE_ON_SUCCESS = none \\ -e EXECUTIONS_DATA_SAVE_ON_PROGRESS = true \\ -e EXECUTIONS_DATA_SAVE_MANUAL_EXECUTIONS = false \\ n8nio/n8n 1 2 3 4 5 6 n8n : environment : - EXECUTIONS_DATA_SAVE_ON_ERROR=all - EXECUTIONS_DATA_SAVE_ON_SUCCESS=none - EXECUTIONS_DATA_SAVE_ON_PROGRESS=true - EXECUTIONS_DATA_SAVE_MANUAL_EXECUTIONS=false Keep in mind These settings can also be configured on an individual workflow basis via the workflow settings . Enable data pruning # You can enable data pruning to automatically delete execution data older than a desired time period. If no EXECUTIONS_DATA_MAX_AGE is set, then 336 hours (14 days) is used by default. 1 2 3 4 5 // Activate automatic data pruning export EXECUTIONS_DATA_PRUNE = true // Number of hours after execution data will be deleted export EXECUTIONS_DATA_MAX_AGE = 168 1 2 3 4 5 6 docker run -it --rm \\ --name n8n \\ -p 5678 :5678 \\ -e EXECUTIONS_DATA_PRUNE = true \\ -e EXECUTIONS_DATA_MAX_AGE = 168 \\ n8nio/n8n 1 2 3 4 n8n : environment : - EXECUTIONS_DATA_PRUNE=true - EXECUTIONS_DATA_MAX_AGE=168 Keep in mind If you are running n8n using the default SQLite database, the disk-space of any pruned data is not automatically freed up but rather reused for future executions data. To free up this space configure the DB_SQLITE_VACUUM_ON_STARTUP environment variable or manually run the VACUUM operation.","title":"Execution data"},{"location":"hosting/scaling/execution-data/#execution-data","text":"Depending on your executions settings and volume, your n8n database can quickly swell in size and eventually run out of storage. To avoid this and ensure continued proper functionality, it is recommended to ensure you are only saving the desired data and to enable pruning of old executions data. This is done by configuring the corresponding environment variables .","title":"Execution data"},{"location":"hosting/scaling/execution-data/#saving-data","text":"You can select which executions data is saved, for example only those executions that result in an Error , so that only those records you want to keep are saved in the database. 1 2 3 4 5 6 7 8 9 10 11 // Save executions ending in errors export EXECUTIONS_DATA_SAVE_ON_ERROR = all // Save successful executions export EXECUTIONS_DATA_SAVE_ON_SUCCESS = all // Don 't save node progress for each execution export EXECUTIONS_DATA_SAVE_ON_PROGRESS=false // Don' t save manually launched executions export EXECUTIONS_DATA_SAVE_MANUAL_EXECUTIONS = false 1 2 3 4 5 6 7 8 docker run -it --rm \\ --name n8n \\ -p 5678 :5678 \\ -e EXECUTIONS_DATA_SAVE_ON_ERROR = all \\ -e EXECUTIONS_DATA_SAVE_ON_SUCCESS = none \\ -e EXECUTIONS_DATA_SAVE_ON_PROGRESS = true \\ -e EXECUTIONS_DATA_SAVE_MANUAL_EXECUTIONS = false \\ n8nio/n8n 1 2 3 4 5 6 n8n : environment : - EXECUTIONS_DATA_SAVE_ON_ERROR=all - EXECUTIONS_DATA_SAVE_ON_SUCCESS=none - EXECUTIONS_DATA_SAVE_ON_PROGRESS=true - EXECUTIONS_DATA_SAVE_MANUAL_EXECUTIONS=false Keep in mind These settings can also be configured on an individual workflow basis via the workflow settings .","title":"Saving data"},{"location":"hosting/scaling/execution-data/#enable-data-pruning","text":"You can enable data pruning to automatically delete execution data older than a desired time period. If no EXECUTIONS_DATA_MAX_AGE is set, then 336 hours (14 days) is used by default. 1 2 3 4 5 // Activate automatic data pruning export EXECUTIONS_DATA_PRUNE = true // Number of hours after execution data will be deleted export EXECUTIONS_DATA_MAX_AGE = 168 1 2 3 4 5 6 docker run -it --rm \\ --name n8n \\ -p 5678 :5678 \\ -e EXECUTIONS_DATA_PRUNE = true \\ -e EXECUTIONS_DATA_MAX_AGE = 168 \\ n8nio/n8n 1 2 3 4 n8n : environment : - EXECUTIONS_DATA_PRUNE=true - EXECUTIONS_DATA_MAX_AGE=168 Keep in mind If you are running n8n using the default SQLite database, the disk-space of any pruned data is not automatically freed up but rather reused for future executions data. To free up this space configure the DB_SQLITE_VACUUM_ON_STARTUP environment variable or manually run the VACUUM operation.","title":"Enable data pruning"},{"location":"hosting/scaling/execution-modes-processes/","text":"Execution modes and processes # There are several different modes in which you can configure n8n to operate when executing workflows. These settings become more important as you increase the number, and complexity, of your automation workflows. Ensuring you set n8n to run in the most beneficial mode is also crucial when you begin to scale n8n to handle very large workloads. The mode in which you n8n instance will operate is set via the following two environment variables : Variable Options Description EXECUTIONS_PROCESS own (default), main Determines whether each execution runs in its own process, or all run in the main process. EXECUTIONS_MODE regular (default), queue Determines whether executions are processed by a single instance or are distributed across worker instances. Executions process # There are two options available when selecting how execution processes are handled in n8n: own and main . Own # This is the default setting in n8n. In own mode, each execution runs in its own, newly instantiated process (i.e. 1 execution = 1 running process). Running in this mode has the following benefits and disadvantages to consider: Pros Cons Stability : one crashed execution does not impact others. Latency, approximately 1sec as each process spins up. Efficiency : all CPUs are utilized. Resources (CPU/RAM) needed for the additional processes. This mode is recommended for running CPU intensive tasks to ensure processes do not block each other. As own also reloads nodes on each execution, it is also the best mode for developing custom nodes. Main # When using main mode, all executions will run in the main n8n process. This mode has the following benefits and disadvantages to consider: Pros Cons Minimal latency Cannot take advantage of multiple CPUs. Single process can result in a bottleneck. Resource efficiency : only one CPU required. Reduced stability, one crashed executions causes all others to fail. Executions mode # There are two options available when setting the executions mode: regular and queue . Regular # This is the default setting for n8n. When running n8n in the regular mode, everything is processed on a single instance. Executions are handled according to the EXECUTIONS_PROCESS setting and available resources. Queue # Queue mode is designed for handling very high workloads. In this mode you run multiple instances of n8n: one \u2018main\u2019 instance coordinates, and other \u2018worker\u2019 instances actually process the executions. You can also add dedicated instances to handle incoming webhooks. Queue mode requires more setup than regular mode, but provides great scalability and stability with minimal latency. To learn more see the Scaling n8n documentation.","title":"Execution modes and processes"},{"location":"hosting/scaling/execution-modes-processes/#execution-modes-and-processes","text":"There are several different modes in which you can configure n8n to operate when executing workflows. These settings become more important as you increase the number, and complexity, of your automation workflows. Ensuring you set n8n to run in the most beneficial mode is also crucial when you begin to scale n8n to handle very large workloads. The mode in which you n8n instance will operate is set via the following two environment variables : Variable Options Description EXECUTIONS_PROCESS own (default), main Determines whether each execution runs in its own process, or all run in the main process. EXECUTIONS_MODE regular (default), queue Determines whether executions are processed by a single instance or are distributed across worker instances.","title":"Execution modes and processes"},{"location":"hosting/scaling/execution-modes-processes/#executions-process","text":"There are two options available when selecting how execution processes are handled in n8n: own and main .","title":"Executions process"},{"location":"hosting/scaling/execution-modes-processes/#own","text":"This is the default setting in n8n. In own mode, each execution runs in its own, newly instantiated process (i.e. 1 execution = 1 running process). Running in this mode has the following benefits and disadvantages to consider: Pros Cons Stability : one crashed execution does not impact others. Latency, approximately 1sec as each process spins up. Efficiency : all CPUs are utilized. Resources (CPU/RAM) needed for the additional processes. This mode is recommended for running CPU intensive tasks to ensure processes do not block each other. As own also reloads nodes on each execution, it is also the best mode for developing custom nodes.","title":"Own"},{"location":"hosting/scaling/execution-modes-processes/#main","text":"When using main mode, all executions will run in the main n8n process. This mode has the following benefits and disadvantages to consider: Pros Cons Minimal latency Cannot take advantage of multiple CPUs. Single process can result in a bottleneck. Resource efficiency : only one CPU required. Reduced stability, one crashed executions causes all others to fail.","title":"Main"},{"location":"hosting/scaling/execution-modes-processes/#executions-mode","text":"There are two options available when setting the executions mode: regular and queue .","title":"Executions mode"},{"location":"hosting/scaling/execution-modes-processes/#regular","text":"This is the default setting for n8n. When running n8n in the regular mode, everything is processed on a single instance. Executions are handled according to the EXECUTIONS_PROCESS setting and available resources.","title":"Regular"},{"location":"hosting/scaling/execution-modes-processes/#queue","text":"Queue mode is designed for handling very high workloads. In this mode you run multiple instances of n8n: one \u2018main\u2019 instance coordinates, and other \u2018worker\u2019 instances actually process the executions. You can also add dedicated instances to handle incoming webhooks. Queue mode requires more setup than regular mode, but provides great scalability and stability with minimal latency. To learn more see the Scaling n8n documentation.","title":"Queue"},{"location":"hosting/scaling/queue-mode/","text":"n8n can be run in different modes depending on your needs. The queue mode provides the best scalability, and its configuration is detailed here. How it works # When running in queue mode you have multiple n8n instances set up (as many as desired or necessary to handle your workload), with one main instance receiving workflow information (e.g. triggers) and the worker instances performing the executions. The workflow information from the n8n main instance is passed to a message broker, Redis , which maintains the queue of pending executions and allows them to be picked up by the next available worker. Each worker is its own Node.js instance, running in main mode, but able to handle multiple simultaneous workflow executions due to their high IOPS (input-output operations per second). By using worker instances and running in queue mode, you can scale n8n up (by adding workers) and down (by removing workers) as needed to handle the workload at any point in time. Configuring workers # Workers are n8n instances that do the actual work. They receive information from the main n8n process about the workflows that have to get executed, execute the workflows, and update the status after each execution is complete. Set encryption key # n8n will automatically generates an encryption key upon first startup. You can also provide your own custom key via environment variable if desired. The encryption key of the main n8n instance must be shared with all worker and webhooks processor nodes to ensure these worker nodes are able to access credentials stored in the database. Set the encryption key for each worker node in a configuration file or by setting the corresponding environment variable: 1 export N8N_ENCRYPTION_KEY = <main_instance_encryption_key> Set executions mode # Database considerations We recommend using a database like MySQL or Postgres 13+. Running n8n with execution mode set to queue with an SQLite database is not recommended. Set the environment variable EXECUTIONS_MODE to queue using the following command. 1 export EXECUTIONS_MODE = queue Alternatively, you can set executions.mode to queue in the configuration file . Start Redis # Keep in mind You can run Redis on a separate machine, just make sure that it is accessible by the n8n instance. To run Redis in a Docker container, follow the instructions below. Run the following command to start a Redis instance: 1 docker run --name some-redis -p 6379:6379 -d redis By default, Redis runs on localhost on port 6379 with no password. Based on your Redis configuration, set the following configurations for the main n8n process. These will allow n8n to interact with Redis. Via configuration file Via environment variables Description queue.bull.redis.host:localhost QUEUE_BULL_REDIS_HOST=localhost By default, Redis runs on localhost . queue.bull.redis.port:6379 QUEUE_BULL_REDIS_PORT=6379 The default port is 6379 . If Redis is running on a different port, configure the value. You can also set the following optional configurations: Via configuration file Via environment variables Description queue.bull.redis.password:PASSWORD QUEUE_BULL_REDIS_PASSWORD By default, Redis doesn\u2019t require a password. If you\u2019re using a password, configure it variable. queue.bull.redis.db:0 QUEUE_BULL_REDIS_DB The default value is 0 . If you change this value, update the configuration. queue.bull.redis.timeoutThreshold:10000ms QUEUE_BULL_REDIS_TIMEOUT_THRESHOLD Tells n8n how long it should wait if Redis is unavailable before exiting. The default value is 10000ms . queue.bull.queueRecoveryInterval:60 QUEUE_RECOVERY_INTERVAL Adds an active watchdog to n8n that checks Redis for finished executions. This is used to recover when n8n\u2019s main process loses connection temporarily to Redis and is not notified about finished jobs. The default value is 60 seconds. Now you can start your n8n instance and it will connect to your Redis instance. Start workers # You will need to start worker processes to allow n8n to execute workflows. If you want to host workers on a separate machine, install n8n on the machine and make sure that it is connected to your Redis instance and the n8n database. Start worker processes by running the following command from the root directory: 1 ./packages/cli/bin/n8n worker If you're using Docker, use the following command: 1 docker run --name n8n-queue -p 5679:5678 n8nio/n8n n8n worker You can set up multiple worker processes. Make sure that all the worker processes have access to Redis and the n8n database. Running n8n with queues # When running n8n with queues, all the production workflow executions get processed by worker processes. This means that even the webhook calls get delegated to the worker processes, which might add some overhead and extra latency. However, the manual workflow executions still use the main process. Redis is used as the message broker, and the database is used to persist data, so access to both is required. Running a distributed system with this setup over SQLite is not recommended. Migrate data If you want to migrate data from one database to another, you can use the Export and Import commands. Refer to the CLI commands for n8n documentation to learn how to use these commands. Webhook processors # Keep in mind Webhook processes rely on Redis too. Follow the configure the workers section above to setup webhook processor nodes. Webhook processors are another layer of scaling in n8n. Configuring the webhook processor is optional, and allows you to scale the incoming webhook requests. This method allows n8n to process a huge number of parallel requests. All you have to do is add more webhook processes and workers accordingly. The webhook process will listen to requests on the same port (default: 5678 ). Run these processes in containers or separate machines, and have a load balancing system to route requests accordingly. We do not recommend adding the main process to the load balancer pool. If the main process is added to the pool, it will receive requests and possibly a heavy load. This will result in degraded performance for editing, viewing, and interacting with the n8n UI. You can start the webhook processor by executing the following command from the root directory: 1 ./packages/cli/bin/n8n webhook If you're using Docker, use the following command: 1 docker run --name n8n-queue -p 5679:5678 n8nio/n8n n8n webhook Configure webhook URL # To configure your webhook URL, execute the following command on the machine running the main n8n instance: 1 export WEBHOOK_URL = https://your-webhook-url.com You can also set this value in the configuration file. Configure load balancer # When using multiple webhook processes you will need a load balancer to route requests. If you are using the same domain name for your n8n instance and the webhooks, you can set up your load balancer to route requests as follows: Redirect any request that matches /webhook/* to the webhook servers pool All other paths (the n8n internal API, the static files for the editor, etc.) should get routed to the main process Note: Manual workflow executions still occur on the main process and the default URL for these is /webhook-test/* . Make sure that these URLs route to your main process. You can change this path in the configuration file via endpoints.webhook or via the N8N_ENDPOINT_WEBHOOK environment variable. If you change these, update your load balancer accordingly. Disable webhook processing in the main process (optional) # You have webhook processors to execute the workflows. You can disable the webhook processing in the main process. This will make sure to execute all webhook executions in the webhook processors. In the configuration file set endpoints.disableProductionWebhooksOnMainProcess to true so that n8n does not process webhook requests on the main process. Alternatively, you can use the following command: 1 export N8N_DISABLE_PRODUCTION_MAIN_PROCESS = true When disabling the webhook process in the main process, run the main process and don't add it to the load balancer's webhook pool. Avoiding downtime # When it comes to startup and shutdown, n8n will stop all currently executing workflows, disconnect from sources, and deregister webhooks that might have been registered with third-party services. All this happens inside the main process. A new configuration has been added to n8n that allows it to skip deregistering of webhooks during the shutdown. Whenever n8n starts back, this configuration will check for existing webhooks. If a webhook exists, it will not be registered again. Trigger nodes that do not use HTTP requests will still suffer marginal downtime during the update process. The setting that controls this behavior is endpoint.skipWebhoooksDeregistrationOnShutdown . It defaults to false but can be changed: 1 export N8N_SKIP_WEBHOOK_DEREGISTRATION_SHUTDOWN = true Keep in mind Do not use this procedure for blue/green installations, where you have two n8n instances running simultaneously, but only one is receiving active traffic. If you run two or more main processes simultaneously, the currently active instance gets notified of activation and deactivation of workflows. This can potentially cause duplication of work or even skipping workflows entirely. Configure worker concurrency # You can define the number of jobs a worker can run in parallel by using the concurrency flag. It defaults to 10 but can be changed: 1 n8n worker --concurrency = 5","title":"Queue mode"},{"location":"hosting/scaling/queue-mode/#how-it-works","text":"When running in queue mode you have multiple n8n instances set up (as many as desired or necessary to handle your workload), with one main instance receiving workflow information (e.g. triggers) and the worker instances performing the executions. The workflow information from the n8n main instance is passed to a message broker, Redis , which maintains the queue of pending executions and allows them to be picked up by the next available worker. Each worker is its own Node.js instance, running in main mode, but able to handle multiple simultaneous workflow executions due to their high IOPS (input-output operations per second). By using worker instances and running in queue mode, you can scale n8n up (by adding workers) and down (by removing workers) as needed to handle the workload at any point in time.","title":"How it works"},{"location":"hosting/scaling/queue-mode/#configuring-workers","text":"Workers are n8n instances that do the actual work. They receive information from the main n8n process about the workflows that have to get executed, execute the workflows, and update the status after each execution is complete.","title":"Configuring workers"},{"location":"hosting/scaling/queue-mode/#set-encryption-key","text":"n8n will automatically generates an encryption key upon first startup. You can also provide your own custom key via environment variable if desired. The encryption key of the main n8n instance must be shared with all worker and webhooks processor nodes to ensure these worker nodes are able to access credentials stored in the database. Set the encryption key for each worker node in a configuration file or by setting the corresponding environment variable: 1 export N8N_ENCRYPTION_KEY = <main_instance_encryption_key>","title":"Set encryption key"},{"location":"hosting/scaling/queue-mode/#set-executions-mode","text":"Database considerations We recommend using a database like MySQL or Postgres 13+. Running n8n with execution mode set to queue with an SQLite database is not recommended. Set the environment variable EXECUTIONS_MODE to queue using the following command. 1 export EXECUTIONS_MODE = queue Alternatively, you can set executions.mode to queue in the configuration file .","title":"Set executions mode"},{"location":"hosting/scaling/queue-mode/#start-redis","text":"Keep in mind You can run Redis on a separate machine, just make sure that it is accessible by the n8n instance. To run Redis in a Docker container, follow the instructions below. Run the following command to start a Redis instance: 1 docker run --name some-redis -p 6379:6379 -d redis By default, Redis runs on localhost on port 6379 with no password. Based on your Redis configuration, set the following configurations for the main n8n process. These will allow n8n to interact with Redis. Via configuration file Via environment variables Description queue.bull.redis.host:localhost QUEUE_BULL_REDIS_HOST=localhost By default, Redis runs on localhost . queue.bull.redis.port:6379 QUEUE_BULL_REDIS_PORT=6379 The default port is 6379 . If Redis is running on a different port, configure the value. You can also set the following optional configurations: Via configuration file Via environment variables Description queue.bull.redis.password:PASSWORD QUEUE_BULL_REDIS_PASSWORD By default, Redis doesn\u2019t require a password. If you\u2019re using a password, configure it variable. queue.bull.redis.db:0 QUEUE_BULL_REDIS_DB The default value is 0 . If you change this value, update the configuration. queue.bull.redis.timeoutThreshold:10000ms QUEUE_BULL_REDIS_TIMEOUT_THRESHOLD Tells n8n how long it should wait if Redis is unavailable before exiting. The default value is 10000ms . queue.bull.queueRecoveryInterval:60 QUEUE_RECOVERY_INTERVAL Adds an active watchdog to n8n that checks Redis for finished executions. This is used to recover when n8n\u2019s main process loses connection temporarily to Redis and is not notified about finished jobs. The default value is 60 seconds. Now you can start your n8n instance and it will connect to your Redis instance.","title":"Start Redis"},{"location":"hosting/scaling/queue-mode/#start-workers","text":"You will need to start worker processes to allow n8n to execute workflows. If you want to host workers on a separate machine, install n8n on the machine and make sure that it is connected to your Redis instance and the n8n database. Start worker processes by running the following command from the root directory: 1 ./packages/cli/bin/n8n worker If you're using Docker, use the following command: 1 docker run --name n8n-queue -p 5679:5678 n8nio/n8n n8n worker You can set up multiple worker processes. Make sure that all the worker processes have access to Redis and the n8n database.","title":"Start workers"},{"location":"hosting/scaling/queue-mode/#running-n8n-with-queues","text":"When running n8n with queues, all the production workflow executions get processed by worker processes. This means that even the webhook calls get delegated to the worker processes, which might add some overhead and extra latency. However, the manual workflow executions still use the main process. Redis is used as the message broker, and the database is used to persist data, so access to both is required. Running a distributed system with this setup over SQLite is not recommended. Migrate data If you want to migrate data from one database to another, you can use the Export and Import commands. Refer to the CLI commands for n8n documentation to learn how to use these commands.","title":"Running n8n with queues"},{"location":"hosting/scaling/queue-mode/#webhook-processors","text":"Keep in mind Webhook processes rely on Redis too. Follow the configure the workers section above to setup webhook processor nodes. Webhook processors are another layer of scaling in n8n. Configuring the webhook processor is optional, and allows you to scale the incoming webhook requests. This method allows n8n to process a huge number of parallel requests. All you have to do is add more webhook processes and workers accordingly. The webhook process will listen to requests on the same port (default: 5678 ). Run these processes in containers or separate machines, and have a load balancing system to route requests accordingly. We do not recommend adding the main process to the load balancer pool. If the main process is added to the pool, it will receive requests and possibly a heavy load. This will result in degraded performance for editing, viewing, and interacting with the n8n UI. You can start the webhook processor by executing the following command from the root directory: 1 ./packages/cli/bin/n8n webhook If you're using Docker, use the following command: 1 docker run --name n8n-queue -p 5679:5678 n8nio/n8n n8n webhook","title":"Webhook processors"},{"location":"hosting/scaling/queue-mode/#configure-webhook-url","text":"To configure your webhook URL, execute the following command on the machine running the main n8n instance: 1 export WEBHOOK_URL = https://your-webhook-url.com You can also set this value in the configuration file.","title":"Configure webhook URL"},{"location":"hosting/scaling/queue-mode/#configure-load-balancer","text":"When using multiple webhook processes you will need a load balancer to route requests. If you are using the same domain name for your n8n instance and the webhooks, you can set up your load balancer to route requests as follows: Redirect any request that matches /webhook/* to the webhook servers pool All other paths (the n8n internal API, the static files for the editor, etc.) should get routed to the main process Note: Manual workflow executions still occur on the main process and the default URL for these is /webhook-test/* . Make sure that these URLs route to your main process. You can change this path in the configuration file via endpoints.webhook or via the N8N_ENDPOINT_WEBHOOK environment variable. If you change these, update your load balancer accordingly.","title":"Configure load balancer"},{"location":"hosting/scaling/queue-mode/#disable-webhook-processing-in-the-main-process-optional","text":"You have webhook processors to execute the workflows. You can disable the webhook processing in the main process. This will make sure to execute all webhook executions in the webhook processors. In the configuration file set endpoints.disableProductionWebhooksOnMainProcess to true so that n8n does not process webhook requests on the main process. Alternatively, you can use the following command: 1 export N8N_DISABLE_PRODUCTION_MAIN_PROCESS = true When disabling the webhook process in the main process, run the main process and don't add it to the load balancer's webhook pool.","title":"Disable webhook processing in the main process (optional)"},{"location":"hosting/scaling/queue-mode/#avoiding-downtime","text":"When it comes to startup and shutdown, n8n will stop all currently executing workflows, disconnect from sources, and deregister webhooks that might have been registered with third-party services. All this happens inside the main process. A new configuration has been added to n8n that allows it to skip deregistering of webhooks during the shutdown. Whenever n8n starts back, this configuration will check for existing webhooks. If a webhook exists, it will not be registered again. Trigger nodes that do not use HTTP requests will still suffer marginal downtime during the update process. The setting that controls this behavior is endpoint.skipWebhoooksDeregistrationOnShutdown . It defaults to false but can be changed: 1 export N8N_SKIP_WEBHOOK_DEREGISTRATION_SHUTDOWN = true Keep in mind Do not use this procedure for blue/green installations, where you have two n8n instances running simultaneously, but only one is receiving active traffic. If you run two or more main processes simultaneously, the currently active instance gets notified of activation and deactivation of workflows. This can potentially cause duplication of work or even skipping workflows entirely.","title":"Avoiding downtime"},{"location":"hosting/scaling/queue-mode/#configure-worker-concurrency","text":"You can define the number of jobs a worker can run in parallel by using the concurrency flag. It defaults to 10 but can be changed: 1 n8n worker --concurrency = 5","title":"Configure worker concurrency"},{"location":"hosting/server-setups/","text":"Server setups # Guides to self-hosting n8n with: Docker Compose Caddy Secure your n8n instance If you are following this guide to setup your n8n instance on a server, please make sure that you secure your n8n instance.","title":"Server setups"},{"location":"hosting/server-setups/#server-setups","text":"Guides to self-hosting n8n with: Docker Compose Caddy Secure your n8n instance If you are following this guide to setup your n8n instance on a server, please make sure that you secure your n8n instance.","title":"Server setups"},{"location":"hosting/server-setups/caddy/","text":"Hosting with Caddy Server # Caddy is a powerful, enterprise-ready, open source web server with automatic HTTPS written in Go. In your Caddyfile configuration, add: 1 2 3 4 5 n8n.example.com { reverse_proxy localhost:5678 { flush_interval 10 } } The .env should be adapted as follows: 1 2 DOMAIN_NAME = example.com SUBDOMAIN = n8n To start your server: 1 $ caddy start","title":"Hosting with Caddy Server"},{"location":"hosting/server-setups/caddy/#hosting-with-caddy-server","text":"Caddy is a powerful, enterprise-ready, open source web server with automatic HTTPS written in Go. In your Caddyfile configuration, add: 1 2 3 4 5 n8n.example.com { reverse_proxy localhost:5678 { flush_interval 10 } } The .env should be adapted as follows: 1 2 DOMAIN_NAME = example.com SUBDOMAIN = n8n To start your server: 1 $ caddy start","title":"Hosting with Caddy Server"},{"location":"hosting/server-setups/docker-compose/","text":"Docker-Compose # If you have already installed Docker and Docker-Compose, then you can start with step 4. 1. Install Docker # This can vary depending on the Linux distribution used. The below example is for Ubuntu: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 sudo apt update sudo apt install apt-transport-https ca-certificates curl software-properties-common -y curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - # Depending on Version: # Ubuntu 18.04: sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable\" # Ubuntu 20.04 sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable\" sudo apt update sudo apt upgrade -y sudo apt install docker-ce -y 2. Optional: Non-root user access # Run when logged in as the user that should also be allowed to run docker: 1 2 sudo usermod -aG docker ${ USER } su - ${ USER } 3. Install Docker-Compose # This can vary depending on the Linux distribution used. Before proceeding check the latest version of Docker Compose v1 on the repository's release page and replace the 1.29.2 below. Should you wish to use Docker Compose v2 instead you can find detailed instructions here in the Docker documentation . The example below is for Ubuntu: 1 2 sudo curl -L \"https://github.com/docker/compose/releases/download/1.29.2/docker-compose- $( uname -s ) - $( uname -m ) \" -o /usr/local/bin/docker-compose sudo chmod +x /usr/local/bin/docker-compose 4. DNS setup # Add A record to route the subdomain accordingly: 1 2 3 Type: A Name: n8n (or the desired subdomain) IP address: <IP_OF_YOUR_SERVER> 5. Create docker-compose file # Create a docker-compose.yml file. Paste the following in the file: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 version : \"3\" services : traefik : image : \"traefik\" restart : always command : - \"--api=true\" - \"--api.insecure=true\" - \"--providers.docker=true\" - \"--providers.docker.exposedbydefault=false\" - \"--entrypoints.web.address=:80\" - \"--entrypoints.web.http.redirections.entryPoint.to=websecure\" - \"--entrypoints.web.http.redirections.entrypoint.scheme=https\" - \"--entrypoints.websecure.address=:443\" - \"--certificatesresolvers.mytlschallenge.acme.tlschallenge=true\" - \"--certificatesresolvers.mytlschallenge.acme.email=${SSL_EMAIL}\" - \"--certificatesresolvers.mytlschallenge.acme.storage=/letsencrypt/acme.json\" ports : - \"80:80\" - \"443:443\" volumes : - ${DATA_FOLDER}/letsencrypt:/letsencrypt - /var/run/docker.sock:/var/run/docker.sock:ro n8n : image : n8nio/n8n restart : always ports : - \"127.0.0.1:5678:5678\" labels : - traefik.enable=true - traefik.http.routers.n8n.rule=Host(`${SUBDOMAIN}.${DOMAIN_NAME}`) - traefik.http.routers.n8n.tls=true - traefik.http.routers.n8n.entrypoints=web,websecure - traefik.http.routers.n8n.tls.certresolver=mytlschallenge - traefik.http.middlewares.n8n.headers.SSLRedirect=true - traefik.http.middlewares.n8n.headers.STSSeconds=315360000 - traefik.http.middlewares.n8n.headers.browserXSSFilter=true - traefik.http.middlewares.n8n.headers.contentTypeNosniff=true - traefik.http.middlewares.n8n.headers.forceSTSHeader=true - traefik.http.middlewares.n8n.headers.SSLHost=${DOMAIN_NAME} - traefik.http.middlewares.n8n.headers.STSIncludeSubdomains=true - traefik.http.middlewares.n8n.headers.STSPreload=true environment : - N8N_BASIC_AUTH_ACTIVE=true - N8N_BASIC_AUTH_USER - N8N_BASIC_AUTH_PASSWORD - N8N_HOST=${SUBDOMAIN}.${DOMAIN_NAME} - N8N_PORT=5678 - N8N_PROTOCOL=https - NODE_ENV=production - WEBHOOK_URL=https://${SUBDOMAIN}.${DOMAIN_NAME}/ - GENERIC_TIMEZONE=${GENERIC_TIMEZONE} volumes : - ${DATA_FOLDER}/.n8n:/home/node/.n8n If you are planning on reading/writing local files with n8n (for example, by using the Write Binary File node , you will need to configure a data directory for those files here. If you are running n8n as a root user, add this under volumes for the n8n service: 1 - /local-files:/files If you are running n8n as a non-root user, add this under volumes for the n8n service: 1 - /home/<YOUR USERNAME>/n8n-local-files:/files You will now be able to write files to the /files directory in n8n and they will appear on your server in either /local-files or /home/<YOUR USERNAME>/n8n-local-files , respectively. 6. Create .env file # Create an .env file and change it accordingly. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 # Folder where data should be saved DATA_FOLDER = /root/n8n/ # The top level domain to serve from DOMAIN_NAME = example.com # The subdomain to serve from SUBDOMAIN = n8n # DOMAIN_NAME and SUBDOMAIN combined decide where n8n will be reachable from # above example would result in: https://n8n.example.com # The user name to use for authentication - IMPORTANT ALWAYS CHANGE! N8N_BASIC_AUTH_USER = user # The password to use for authentication - IMPORTANT ALWAYS CHANGE! N8N_BASIC_AUTH_PASSWORD = password # Optional timezone to set which gets used by Cron-Node by default # If not set New York time will be used GENERIC_TIMEZONE = Europe/Berlin # The email address to use for the SSL certificate creation SSL_EMAIL = user@example.com Note: If you want to use special characters in the password, use quotes. For example, N8N_BASIC_AUTH_PASSWORD=\"p@s$w0rd\" 7. Create data folder # Create the folder which is defined as DATA_FOLDER . In the example above, it is /root/n8n/ . In that folder, the database file from SQLite as well as the encryption key will be saved. The folder can be created like this: 1 mkdir /root/n8n/ 8. Start docker-compose # n8n can now be started via: 1 sudo docker-compose up -d To stop the container: 1 sudo docker-compose stop 9. Done # n8n will now be reachable via the above defined subdomain + domain combination. The above example would result in: https://n8n.example.com n8n will only be reachable via https and not via http .","title":"Docker-Compose"},{"location":"hosting/server-setups/docker-compose/#docker-compose","text":"If you have already installed Docker and Docker-Compose, then you can start with step 4.","title":"Docker-Compose"},{"location":"hosting/server-setups/docker-compose/#1-install-docker","text":"This can vary depending on the Linux distribution used. The below example is for Ubuntu: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 sudo apt update sudo apt install apt-transport-https ca-certificates curl software-properties-common -y curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - # Depending on Version: # Ubuntu 18.04: sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable\" # Ubuntu 20.04 sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable\" sudo apt update sudo apt upgrade -y sudo apt install docker-ce -y","title":"1. Install Docker"},{"location":"hosting/server-setups/docker-compose/#2-optional-non-root-user-access","text":"Run when logged in as the user that should also be allowed to run docker: 1 2 sudo usermod -aG docker ${ USER } su - ${ USER }","title":"2. Optional: Non-root user access"},{"location":"hosting/server-setups/docker-compose/#3-install-docker-compose","text":"This can vary depending on the Linux distribution used. Before proceeding check the latest version of Docker Compose v1 on the repository's release page and replace the 1.29.2 below. Should you wish to use Docker Compose v2 instead you can find detailed instructions here in the Docker documentation . The example below is for Ubuntu: 1 2 sudo curl -L \"https://github.com/docker/compose/releases/download/1.29.2/docker-compose- $( uname -s ) - $( uname -m ) \" -o /usr/local/bin/docker-compose sudo chmod +x /usr/local/bin/docker-compose","title":"3. Install Docker-Compose"},{"location":"hosting/server-setups/docker-compose/#4-dns-setup","text":"Add A record to route the subdomain accordingly: 1 2 3 Type: A Name: n8n (or the desired subdomain) IP address: <IP_OF_YOUR_SERVER>","title":"4. DNS setup"},{"location":"hosting/server-setups/docker-compose/#5-create-docker-compose-file","text":"Create a docker-compose.yml file. Paste the following in the file: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 version : \"3\" services : traefik : image : \"traefik\" restart : always command : - \"--api=true\" - \"--api.insecure=true\" - \"--providers.docker=true\" - \"--providers.docker.exposedbydefault=false\" - \"--entrypoints.web.address=:80\" - \"--entrypoints.web.http.redirections.entryPoint.to=websecure\" - \"--entrypoints.web.http.redirections.entrypoint.scheme=https\" - \"--entrypoints.websecure.address=:443\" - \"--certificatesresolvers.mytlschallenge.acme.tlschallenge=true\" - \"--certificatesresolvers.mytlschallenge.acme.email=${SSL_EMAIL}\" - \"--certificatesresolvers.mytlschallenge.acme.storage=/letsencrypt/acme.json\" ports : - \"80:80\" - \"443:443\" volumes : - ${DATA_FOLDER}/letsencrypt:/letsencrypt - /var/run/docker.sock:/var/run/docker.sock:ro n8n : image : n8nio/n8n restart : always ports : - \"127.0.0.1:5678:5678\" labels : - traefik.enable=true - traefik.http.routers.n8n.rule=Host(`${SUBDOMAIN}.${DOMAIN_NAME}`) - traefik.http.routers.n8n.tls=true - traefik.http.routers.n8n.entrypoints=web,websecure - traefik.http.routers.n8n.tls.certresolver=mytlschallenge - traefik.http.middlewares.n8n.headers.SSLRedirect=true - traefik.http.middlewares.n8n.headers.STSSeconds=315360000 - traefik.http.middlewares.n8n.headers.browserXSSFilter=true - traefik.http.middlewares.n8n.headers.contentTypeNosniff=true - traefik.http.middlewares.n8n.headers.forceSTSHeader=true - traefik.http.middlewares.n8n.headers.SSLHost=${DOMAIN_NAME} - traefik.http.middlewares.n8n.headers.STSIncludeSubdomains=true - traefik.http.middlewares.n8n.headers.STSPreload=true environment : - N8N_BASIC_AUTH_ACTIVE=true - N8N_BASIC_AUTH_USER - N8N_BASIC_AUTH_PASSWORD - N8N_HOST=${SUBDOMAIN}.${DOMAIN_NAME} - N8N_PORT=5678 - N8N_PROTOCOL=https - NODE_ENV=production - WEBHOOK_URL=https://${SUBDOMAIN}.${DOMAIN_NAME}/ - GENERIC_TIMEZONE=${GENERIC_TIMEZONE} volumes : - ${DATA_FOLDER}/.n8n:/home/node/.n8n If you are planning on reading/writing local files with n8n (for example, by using the Write Binary File node , you will need to configure a data directory for those files here. If you are running n8n as a root user, add this under volumes for the n8n service: 1 - /local-files:/files If you are running n8n as a non-root user, add this under volumes for the n8n service: 1 - /home/<YOUR USERNAME>/n8n-local-files:/files You will now be able to write files to the /files directory in n8n and they will appear on your server in either /local-files or /home/<YOUR USERNAME>/n8n-local-files , respectively.","title":"5. Create docker-compose file"},{"location":"hosting/server-setups/docker-compose/#6-create-env-file","text":"Create an .env file and change it accordingly. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 # Folder where data should be saved DATA_FOLDER = /root/n8n/ # The top level domain to serve from DOMAIN_NAME = example.com # The subdomain to serve from SUBDOMAIN = n8n # DOMAIN_NAME and SUBDOMAIN combined decide where n8n will be reachable from # above example would result in: https://n8n.example.com # The user name to use for authentication - IMPORTANT ALWAYS CHANGE! N8N_BASIC_AUTH_USER = user # The password to use for authentication - IMPORTANT ALWAYS CHANGE! N8N_BASIC_AUTH_PASSWORD = password # Optional timezone to set which gets used by Cron-Node by default # If not set New York time will be used GENERIC_TIMEZONE = Europe/Berlin # The email address to use for the SSL certificate creation SSL_EMAIL = user@example.com Note: If you want to use special characters in the password, use quotes. For example, N8N_BASIC_AUTH_PASSWORD=\"p@s$w0rd\"","title":"6. Create .env file"},{"location":"hosting/server-setups/docker-compose/#7-create-data-folder","text":"Create the folder which is defined as DATA_FOLDER . In the example above, it is /root/n8n/ . In that folder, the database file from SQLite as well as the encryption key will be saved. The folder can be created like this: 1 mkdir /root/n8n/","title":"7. Create data folder"},{"location":"hosting/server-setups/docker-compose/#8-start-docker-compose","text":"n8n can now be started via: 1 sudo docker-compose up -d To stop the container: 1 sudo docker-compose stop","title":"8. Start docker-compose"},{"location":"hosting/server-setups/docker-compose/#9-done","text":"n8n will now be reachable via the above defined subdomain + domain combination. The above example would result in: https://n8n.example.com n8n will only be reachable via https and not via http .","title":"9. Done"},{"location":"hosting/updating/","text":"Updating n8n # In order to take advantage of the newest features and functionality added to n8n (detailed in our Release notes you must update to the latest released version .","title":"Updating n8n"},{"location":"hosting/updating/#updating-n8n","text":"In order to take advantage of the newest features and functionality added to n8n (detailed in our Release notes you must update to the latest released version .","title":"Updating n8n"},{"location":"hosting/updating/cloud/","text":"n8n.cloud # To updated your n8n.cloud instance navigate to your Dashboard: Click the Settings button or switch to the Manage tab. From Instance Settings , use the n8n version dropdown to select your desired release version: Latest Stable, Beta, or Latest Beta. Click Save Changes to restart your n8n instance and perform the update. A confirmation modal will appear and the Instance Status will reflect the update in progress.","title":"n8n.cloud"},{"location":"hosting/updating/cloud/#n8ncloud","text":"To updated your n8n.cloud instance navigate to your Dashboard: Click the Settings button or switch to the Manage tab. From Instance Settings , use the n8n version dropdown to select your desired release version: Latest Stable, Beta, or Latest Beta. Click Save Changes to restart your n8n instance and perform the update. A confirmation modal will appear and the Instance Status will reflect the update in progress.","title":"n8n.cloud"},{"location":"hosting/updating/desktop/","text":"n8n Desktop App # If you're using the n8n desktop app follow the below mentioned steps to update n8n. For Windows # Download the latest version. Run the installer. For MacOS # Move the old app to trash. Download the latest app.","title":"n8n Desktop App"},{"location":"hosting/updating/desktop/#n8n-desktop-app","text":"If you're using the n8n desktop app follow the below mentioned steps to update n8n.","title":"n8n Desktop App"},{"location":"hosting/updating/desktop/#for-windows","text":"Download the latest version. Run the installer.","title":"For Windows"},{"location":"hosting/updating/desktop/#for-macos","text":"Move the old app to trash. Download the latest app.","title":"For MacOS"},{"location":"hosting/updating/docker/","text":"Docker # From your Docker Desktop, navigate to the Images tab and select Pull from the context menu to download the latest n8n image: You can also use the command line to pull the latest, or a specific version: 1 2 3 4 5 // Pull latest version docker pull n8nio/n8n // Pull specific version docker pull n8nio/n8n:0.126.1 Stop the container and start it again. You can also use the command line: 1 2 3 4 5 6 7 8 9 10 11 // Get the container ID docker ps -a // Stop the container with ID container_id docker stop [ container_id ] // Remove the container with ID container_id docker rm [ container_id ] // Start the container docker run --name =[ container_name ] [ options ] -d n8nio/n8n Docker Compose # If you've running n8n using a docker-compose file, follow the below mentioned steps to update n8n. 1 2 3 4 5 6 7 8 // Pull latest version docker-compose pull // Stop and remove older version docker-compose down // Start the container docker-compose up -d","title":"Docker"},{"location":"hosting/updating/docker/#docker","text":"From your Docker Desktop, navigate to the Images tab and select Pull from the context menu to download the latest n8n image: You can also use the command line to pull the latest, or a specific version: 1 2 3 4 5 // Pull latest version docker pull n8nio/n8n // Pull specific version docker pull n8nio/n8n:0.126.1 Stop the container and start it again. You can also use the command line: 1 2 3 4 5 6 7 8 9 10 11 // Get the container ID docker ps -a // Stop the container with ID container_id docker stop [ container_id ] // Remove the container with ID container_id docker rm [ container_id ] // Start the container docker run --name =[ container_name ] [ options ] -d n8nio/n8n","title":"Docker"},{"location":"hosting/updating/docker/#docker-compose","text":"If you've running n8n using a docker-compose file, follow the below mentioned steps to update n8n. 1 2 3 4 5 6 7 8 // Pull latest version docker-compose pull // Stop and remove older version docker-compose down // Start the container docker-compose up -d","title":"Docker Compose"},{"location":"hosting/updating/npm/","text":"npm # To update your n8n instance to the latest released version, run: 1 npm update -g n8n To install/update to a specific version of n8n use the @ syntax to specify the desired version. For example: 1 npm install n8n@0.126.1","title":"npm"},{"location":"hosting/updating/npm/#npm","text":"To update your n8n instance to the latest released version, run: 1 npm update -g n8n To install/update to a specific version of n8n use the @ syntax to specify the desired version. For example: 1 npm install n8n@0.126.1","title":"npm"},{"location":"integrations/","text":"Integrations # In n8n, integrations are called nodes. Nodes are the building blocks of workflows in n8n. They are an entry point for retrieving data, a function to process data or an exit for sending data. The data process includes filtering, recomposing and changing data. There can be one or several nodes for your API, service or app. You can connect multiple nodes, which allows you to create simple and complex workflows with them intuitively. Node types # There are two main node types in n8n: Trigger nodes and Regular nodes. Trigger Nodes # The Trigger nodes start a workflow and supply the initial data. A workflow can contain multiple trigger nodes but with each execution, only one of them will execute. This is because the other trigger nodes would not have any input as they are the nodes from which the execution of the workflow starts. Regular Nodes # These nodes do the actual work. They can add, remove, and edit the data in the flow as well as request and send data to external APIs. They can do everything possible with Node.js in general. Credentials # External services need a way to identify and authenticate users. This data can range from an API key over an email/password combination to a very long multi-line private key and can be saved in n8n as credentials. Nodes in n8n can then request that credential information. As an additional layer of security credentials can only be accessed by node types which specifically have the right to do so. To make sure that the data is secure, it gets saved to the database encrypted. A random personal encryption key is used which gets automatically generated on the first run of n8n and then saved under ~/.n8n/config . Requesting new integrations or integration features # You can request new integrations to be added to our forum. There is a special section for that where other users can also upvote it so that we know which integrations are important and should be created next. Request a new feature here . Adding new functionality to an existing integration is normally not that complicated. So the chance is high that we can do that quite fast. Post your feature request in the forum and we'll see what we can do. Request a new feature here . Where to go next? # If you are looking to create your own node, head over to the Creating Nodes section. If you'd like to learn more about the different nodes in n8n, their functionalities and example usage, check out our node libraries: core nodes , nodes , and trigger nodes . If you'd like to learn how to add the credentials for the different nodes, head over to the Credentials section.","title":"Overview"},{"location":"integrations/#integrations","text":"In n8n, integrations are called nodes. Nodes are the building blocks of workflows in n8n. They are an entry point for retrieving data, a function to process data or an exit for sending data. The data process includes filtering, recomposing and changing data. There can be one or several nodes for your API, service or app. You can connect multiple nodes, which allows you to create simple and complex workflows with them intuitively.","title":"Integrations"},{"location":"integrations/#node-types","text":"There are two main node types in n8n: Trigger nodes and Regular nodes.","title":"Node types"},{"location":"integrations/#trigger-nodes","text":"The Trigger nodes start a workflow and supply the initial data. A workflow can contain multiple trigger nodes but with each execution, only one of them will execute. This is because the other trigger nodes would not have any input as they are the nodes from which the execution of the workflow starts.","title":"Trigger Nodes"},{"location":"integrations/#regular-nodes","text":"These nodes do the actual work. They can add, remove, and edit the data in the flow as well as request and send data to external APIs. They can do everything possible with Node.js in general.","title":"Regular Nodes"},{"location":"integrations/#credentials","text":"External services need a way to identify and authenticate users. This data can range from an API key over an email/password combination to a very long multi-line private key and can be saved in n8n as credentials. Nodes in n8n can then request that credential information. As an additional layer of security credentials can only be accessed by node types which specifically have the right to do so. To make sure that the data is secure, it gets saved to the database encrypted. A random personal encryption key is used which gets automatically generated on the first run of n8n and then saved under ~/.n8n/config .","title":"Credentials"},{"location":"integrations/#requesting-new-integrations-or-integration-features","text":"You can request new integrations to be added to our forum. There is a special section for that where other users can also upvote it so that we know which integrations are important and should be created next. Request a new feature here . Adding new functionality to an existing integration is normally not that complicated. So the chance is high that we can do that quite fast. Post your feature request in the forum and we'll see what we can do. Request a new feature here .","title":"Requesting new integrations or integration features"},{"location":"integrations/#where-to-go-next","text":"If you are looking to create your own node, head over to the Creating Nodes section. If you'd like to learn more about the different nodes in n8n, their functionalities and example usage, check out our node libraries: core nodes , nodes , and trigger nodes . If you'd like to learn how to add the credentials for the different nodes, head over to the Credentials section.","title":"Where to go next?"},{"location":"integrations/core-nodes/","text":"Overview # This section provides information about n8n's core nodes.","title":"Overview"},{"location":"integrations/core-nodes/#overview","text":"This section provides information about n8n's core nodes.","title":"Overview"},{"location":"integrations/core-nodes/n8n-nodes-base.activationTrigger/","text":"Activation Trigger # The Activation Trigger node gets triggered when an event gets fired by n8n or a workflow. Warning The Activation Trigger node has been deprecated. It has been replaced by two new nodes - the n8n Trigger and the Workflow Trigger node. For more details, check out the entry in the breaking changes page. Keep in mind If you want to use the Activation Trigger node for a workflow, add the node to the workflow. You don't have to create a separate workflow. The Activation Trigger node gets triggered for the workflow that it gets added to. The Activation Trigger node can be used to trigger a workflow to notify the state of the workflow. Node Reference # Events Activation: Run when the workflow gets activated Start: Run when n8n starts or restarts Update: Run when the workflow gets saved while it is active Example Usage # This workflow allows you to receive a message on Mattermost when a workflow is updated. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Activation Trigger - Mattermost The final workflow should look like the following image. 1. Activation Trigger node # Open the workflow where you want to add the activation workflow. Add the Activation Trigger node to the workflow. The Activation Trigger node will trigger the workflow when the workflow gets updated. Select 'Update' from the Events dropdown list. In the screenshot below, you will notice that the node triggers the workflow when the workflow gets updated. 2. Mattermost node (post: message) # This node will send a message in the workflow channel on Mattermost. First of all, you'll have to enter credentials for the Mattermost node. You can find out how to enter credentials for this node here . Select a channel from the Channel ID dropdown list. Click on the gears icon next to the Message field click on Add Expression . Enter the following message in the Expression field: The workflow {{$workflow.name}}, was updated. . $workflow.name returns the name of the workflow. Click on Execute Node to run the workflow. In the screenshot below, you will notice that the node sends a message to Mattermost.","title":"Activation Trigger"},{"location":"integrations/core-nodes/n8n-nodes-base.activationTrigger/#activation-trigger","text":"The Activation Trigger node gets triggered when an event gets fired by n8n or a workflow. Warning The Activation Trigger node has been deprecated. It has been replaced by two new nodes - the n8n Trigger and the Workflow Trigger node. For more details, check out the entry in the breaking changes page. Keep in mind If you want to use the Activation Trigger node for a workflow, add the node to the workflow. You don't have to create a separate workflow. The Activation Trigger node gets triggered for the workflow that it gets added to. The Activation Trigger node can be used to trigger a workflow to notify the state of the workflow.","title":"Activation Trigger"},{"location":"integrations/core-nodes/n8n-nodes-base.activationTrigger/#node-reference","text":"Events Activation: Run when the workflow gets activated Start: Run when n8n starts or restarts Update: Run when the workflow gets saved while it is active","title":"Node Reference"},{"location":"integrations/core-nodes/n8n-nodes-base.activationTrigger/#example-usage","text":"This workflow allows you to receive a message on Mattermost when a workflow is updated. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Activation Trigger - Mattermost The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/core-nodes/n8n-nodes-base.activationTrigger/#1-activation-trigger-node","text":"Open the workflow where you want to add the activation workflow. Add the Activation Trigger node to the workflow. The Activation Trigger node will trigger the workflow when the workflow gets updated. Select 'Update' from the Events dropdown list. In the screenshot below, you will notice that the node triggers the workflow when the workflow gets updated.","title":"1. Activation Trigger node"},{"location":"integrations/core-nodes/n8n-nodes-base.activationTrigger/#2-mattermost-node-post-message","text":"This node will send a message in the workflow channel on Mattermost. First of all, you'll have to enter credentials for the Mattermost node. You can find out how to enter credentials for this node here . Select a channel from the Channel ID dropdown list. Click on the gears icon next to the Message field click on Add Expression . Enter the following message in the Expression field: The workflow {{$workflow.name}}, was updated. . $workflow.name returns the name of the workflow. Click on Execute Node to run the workflow. In the screenshot below, you will notice that the node sends a message to Mattermost.","title":"2. Mattermost node (post: message)"},{"location":"integrations/core-nodes/n8n-nodes-base.compression/","text":"Compression # The Compression node is useful to compress and decompress files. You can either use the gzip or zip file format. Node Reference # Operations Compress Decompress Options Binary Property field: This field allows you to specify the name of the binary property Output Prefix field: This field allows you to specify a prefix for the name of the file that gets generated. This field gets displayed for the 'Decompress' operation and the 'gzip' output format for the 'Compress' operation Output Format field: This field allows you to select an output format. This field is displayed when 'Compress' gets selected from the Operation dropdown list. The following are the available formats: gzip zip File Name field: This field allows you to specify a file name. This field is displayed when 'zip' gets selected from the Output Format dropdown list. Binary Property Output field: This field allows you to specify a name for the file that gets generated. This field is displayed when 'zip' gets selected from the Output Format dropdown list. Example Usage # This workflow allows you to compress binary files to zip format and upload them to Dropbox. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - HTTP Request - Dropbox The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. HTTP Request node (GET) # This example workflow uses the HTTP Request node to fetch an image from a URL. You can also use the Read Binary File node to read a file from the path you specify. Enter the URL of the image in the URL field. For example, https://docs.n8n.io/assets/img/final-workflow.f380b957.png . Select 'File' from the Response Format dropdown list. Enter workflow_image in the Binary Property field. Click on Execute Node to run the node. In the screenshot below, you will notice that the HTTP Request node fetches the image from the URL. This image gets passed on as binary data to the next node in the workflow. 3. HTTP Request1 node (GET) # This node fetches an image from a URL. You can also use the Read Binary File node to read a file from the path you specify. Enter the URL of the image in the URL field. For example, https://n8n.io/n8n-logo.png . Select 'File' from the Response Format dropdown list. Enter logo in the Binary Property field. Click on Execute Node to run the node. In the screenshot below, you will notice that the HTTP Request node fetches the image from the URL. This image gets passed on as binary data to the next node in the workflow. 4. Compression node (compress) # This node compresses the binary file that we received from the HTTP Request nodes in a zip file. If you want to compress them in gzip format, select that option instead. Select 'Compress' from the Operation dropdown list. Enter logo,workflow_image in the Binary Property field. Select 'zip' from the Output Format dropdown list. Enter images.zip in the File Name field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node compresses the files and generates images.zip . 5. Dropbox node (upload: file) # This node will upload the compressed file to your Dropbox account. First of all, you'll have to enter credentials for the Dropbox node. You can find out how to do that here . Enter /images.zip in the File Path field. Toggle Binary Data to true . This option allows us to upload binary data from the previous node. Click on Execute Node to run the node. In the screenshot below, you will notice that the node uploads the compressed file that we generated in the previous node.","title":"Compression"},{"location":"integrations/core-nodes/n8n-nodes-base.compression/#compression","text":"The Compression node is useful to compress and decompress files. You can either use the gzip or zip file format.","title":"Compression"},{"location":"integrations/core-nodes/n8n-nodes-base.compression/#node-reference","text":"Operations Compress Decompress Options Binary Property field: This field allows you to specify the name of the binary property Output Prefix field: This field allows you to specify a prefix for the name of the file that gets generated. This field gets displayed for the 'Decompress' operation and the 'gzip' output format for the 'Compress' operation Output Format field: This field allows you to select an output format. This field is displayed when 'Compress' gets selected from the Operation dropdown list. The following are the available formats: gzip zip File Name field: This field allows you to specify a file name. This field is displayed when 'zip' gets selected from the Output Format dropdown list. Binary Property Output field: This field allows you to specify a name for the file that gets generated. This field is displayed when 'zip' gets selected from the Output Format dropdown list.","title":"Node Reference"},{"location":"integrations/core-nodes/n8n-nodes-base.compression/#example-usage","text":"This workflow allows you to compress binary files to zip format and upload them to Dropbox. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - HTTP Request - Dropbox The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/core-nodes/n8n-nodes-base.compression/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/core-nodes/n8n-nodes-base.compression/#2-http-request-node-get","text":"This example workflow uses the HTTP Request node to fetch an image from a URL. You can also use the Read Binary File node to read a file from the path you specify. Enter the URL of the image in the URL field. For example, https://docs.n8n.io/assets/img/final-workflow.f380b957.png . Select 'File' from the Response Format dropdown list. Enter workflow_image in the Binary Property field. Click on Execute Node to run the node. In the screenshot below, you will notice that the HTTP Request node fetches the image from the URL. This image gets passed on as binary data to the next node in the workflow.","title":"2. HTTP Request node (GET)"},{"location":"integrations/core-nodes/n8n-nodes-base.compression/#3-http-request1-node-get","text":"This node fetches an image from a URL. You can also use the Read Binary File node to read a file from the path you specify. Enter the URL of the image in the URL field. For example, https://n8n.io/n8n-logo.png . Select 'File' from the Response Format dropdown list. Enter logo in the Binary Property field. Click on Execute Node to run the node. In the screenshot below, you will notice that the HTTP Request node fetches the image from the URL. This image gets passed on as binary data to the next node in the workflow.","title":"3. HTTP Request1 node (GET)"},{"location":"integrations/core-nodes/n8n-nodes-base.compression/#4-compression-node-compress","text":"This node compresses the binary file that we received from the HTTP Request nodes in a zip file. If you want to compress them in gzip format, select that option instead. Select 'Compress' from the Operation dropdown list. Enter logo,workflow_image in the Binary Property field. Select 'zip' from the Output Format dropdown list. Enter images.zip in the File Name field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node compresses the files and generates images.zip .","title":"4. Compression node (compress)"},{"location":"integrations/core-nodes/n8n-nodes-base.compression/#5-dropbox-node-upload-file","text":"This node will upload the compressed file to your Dropbox account. First of all, you'll have to enter credentials for the Dropbox node. You can find out how to do that here . Enter /images.zip in the File Path field. Toggle Binary Data to true . This option allows us to upload binary data from the previous node. Click on Execute Node to run the node. In the screenshot below, you will notice that the node uploads the compressed file that we generated in the previous node.","title":"5. Dropbox node (upload: file)"},{"location":"integrations/core-nodes/n8n-nodes-base.cron/","text":"Cron # The Cron node is useful to schedule the workflows to run periodically at fixed dates, times, or intervals. This works in a similar way to the cron software utility in Unix-like systems. This core node is a Trigger node. Keep in mind If a workflow is using the Cron node as a trigger, make sure that you save and activate the workflow. Make sure that the timezone is set correctly for the n8n instance (or the workflow). Node Reference # You can configure the node by clicking on the Add Cron Time button under the Trigger Times section. There are a couple of different options available for the Mode field in the form of a dropdownlist. Mode Every Minute Every Hour Every Day Every Week Every Month Every X Custom The 'Every X' option allows you to specify the workflow to be triggered every x minutes or hours. You can specify x by entering a number in the Value field. The 'Custom' option allows you to enter a custom cron expression in the Cron Expression field. FAQs # How to generate a custom Cron expression? # To generate a Cron expression, you can use crontab guru . Paste the Cron expression that you generated using crontab guru in the Cron Expression field in n8n. Why there are six asterisks (*) in the Cron Expression? # The sixth asterisk in the Cron Expression represents seconds. Setting this is optional. The node will execute even if you don't set the value for seconds. * * * * * * second minute hour day week month If you want to trigger your workflow, for example, every day at 04:08:30, enter the following in the Cron Expression field. 1 30 8 4 * * * If you want to trigger your workflow, for example, every day at 04:08, enter the following in the Cron Expression field. 1 8 4 * * *","title":"Cron"},{"location":"integrations/core-nodes/n8n-nodes-base.cron/#cron","text":"The Cron node is useful to schedule the workflows to run periodically at fixed dates, times, or intervals. This works in a similar way to the cron software utility in Unix-like systems. This core node is a Trigger node. Keep in mind If a workflow is using the Cron node as a trigger, make sure that you save and activate the workflow. Make sure that the timezone is set correctly for the n8n instance (or the workflow).","title":"Cron"},{"location":"integrations/core-nodes/n8n-nodes-base.cron/#node-reference","text":"You can configure the node by clicking on the Add Cron Time button under the Trigger Times section. There are a couple of different options available for the Mode field in the form of a dropdownlist. Mode Every Minute Every Hour Every Day Every Week Every Month Every X Custom The 'Every X' option allows you to specify the workflow to be triggered every x minutes or hours. You can specify x by entering a number in the Value field. The 'Custom' option allows you to enter a custom cron expression in the Cron Expression field.","title":"Node Reference"},{"location":"integrations/core-nodes/n8n-nodes-base.cron/#faqs","text":"","title":"FAQs"},{"location":"integrations/core-nodes/n8n-nodes-base.cron/#how-to-generate-a-custom-cron-expression","text":"To generate a Cron expression, you can use crontab guru . Paste the Cron expression that you generated using crontab guru in the Cron Expression field in n8n.","title":"How to generate a custom Cron expression?"},{"location":"integrations/core-nodes/n8n-nodes-base.cron/#why-there-are-six-asterisks-in-the-cron-expression","text":"The sixth asterisk in the Cron Expression represents seconds. Setting this is optional. The node will execute even if you don't set the value for seconds. * * * * * * second minute hour day week month If you want to trigger your workflow, for example, every day at 04:08:30, enter the following in the Cron Expression field. 1 30 8 4 * * * If you want to trigger your workflow, for example, every day at 04:08, enter the following in the Cron Expression field. 1 8 4 * * *","title":"Why there are six asterisks (*) in the Cron Expression?"},{"location":"integrations/core-nodes/n8n-nodes-base.crypto/","text":"Crypto # The Crypto node is used to encrypt data in workflows. Node Reference # You can configure further options for each action by selecting the type of encryption and encoding to be used, in the Type and Encoding fields respectively. Action Hash a text in a specified format Hmac a text in a specified format Sign a string using a private key Type MD5 SHA256 SHA384 SHA512 Encoding BASE64 HEX Example Usage # This workflow allows you to encrypt data using the Crypto node. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Crypto The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Crypto node # Enter the data that you want to encrypt in the Value field. Click on Execute Node to run the workflow.","title":"Crypto"},{"location":"integrations/core-nodes/n8n-nodes-base.crypto/#crypto","text":"The Crypto node is used to encrypt data in workflows.","title":"Crypto"},{"location":"integrations/core-nodes/n8n-nodes-base.crypto/#node-reference","text":"You can configure further options for each action by selecting the type of encryption and encoding to be used, in the Type and Encoding fields respectively. Action Hash a text in a specified format Hmac a text in a specified format Sign a string using a private key Type MD5 SHA256 SHA384 SHA512 Encoding BASE64 HEX","title":"Node Reference"},{"location":"integrations/core-nodes/n8n-nodes-base.crypto/#example-usage","text":"This workflow allows you to encrypt data using the Crypto node. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Crypto The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/core-nodes/n8n-nodes-base.crypto/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/core-nodes/n8n-nodes-base.crypto/#2-crypto-node","text":"Enter the data that you want to encrypt in the Value field. Click on Execute Node to run the workflow.","title":"2. Crypto node"},{"location":"integrations/core-nodes/n8n-nodes-base.dateTime/","text":"Date & Time # The Date & Time node is used to manipulate date and time data and convert it to different formats. Keep in mind Make sure that the timezone is set correctly for the n8n instance (or the workflow). Node Reference # Action Convert a date to a different format You can specify the format that the date has to be converted to from the To Format dropdown list. To Format MM/DD/YYYY YYYY/MM/DD MMMM DD YYYY MM-DD-YYYY YYYY-MM-DD Unix Timestamp Unix Ms Timestamp You can also specify a custom format by setting the Custom Format toggle to 'On'. Options From Format field: Allows you to specify the format of the input values. Refer to the FAQs to learn about the possible vaules. From Timezone field: Allows you to specify the timezone of the input values, for input timezones that are different from n8n's system clock. To Timezone field: Allows you to specify the timezone that the input values have to be converted to. Example Usage # This workflow allows you to convert a date from one format to another using the Date & Time node. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Date & Time The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Date & Time node # Enter the date that you want to convert in the Value field. Click on the Add Option dropdown. Click on the From Format option, and enter the format of the input date. Select the format you want to convert it to from the To Format dropdown list. Click on Execute Node to run the workflow. FAQs # What values can I use in the From Format field? # You can use the following values in the From Format field: Input Example Description X 1616108400 Unix timestamp x 1616108400000 Unix ms timestamp DD-MM-YYYY 19-03-2021 Date, month, and year separated by - DD/MM/YYYY 19/03/2021 Date, month, and year separated by / DD.MM.YYYY 19.03.2021 Date, month, and year separated by . DD.MM.YYYY HH:mm:ss 19.03.2021 08:00:00 Date, month, year, hours, minutes, and seconds MM/DD/YYYY 03/19/2021 Month, date, and year separated by / MM-DD-YYYY 03-19-2021 Month, date, and year separated by - MM.DD.YYYY 03.19.2021 Month, date, and year separated by . MM/DD/YYYY HH:mm:ss 03/19/2021 08:00:00 Month, date, year, hours, minutes, and seconds YYYY/MM/DD 2021/03/19 Year, month, and date separated by / YYYY-MM-DD 2021-03-19 Year, month, and date separated by - YYYY.MM.DD 2021.03.19 Year, month, and date separated by . YYYY/MM/DD HH:mm:ss 2021/03/19 08:00:00 Year, month, date, hours, minutes, and seconds MMMM DD YYYY March 03 2021 Month, date, and year MMMM DD YYYY HH:mm:ss March 03 2021 08:00:00 Month, date, year, hours, minutes, and seconds DD MMMM YYYY 03 March 2021 Date, month, and year DD MMMM YYYY HH:mm:ss 03 March 2021 08:00:00 Date, month, year, hours, minutes, and seconds","title":"Date & Time"},{"location":"integrations/core-nodes/n8n-nodes-base.dateTime/#date-time","text":"The Date & Time node is used to manipulate date and time data and convert it to different formats. Keep in mind Make sure that the timezone is set correctly for the n8n instance (or the workflow).","title":"Date &amp; Time"},{"location":"integrations/core-nodes/n8n-nodes-base.dateTime/#node-reference","text":"Action Convert a date to a different format You can specify the format that the date has to be converted to from the To Format dropdown list. To Format MM/DD/YYYY YYYY/MM/DD MMMM DD YYYY MM-DD-YYYY YYYY-MM-DD Unix Timestamp Unix Ms Timestamp You can also specify a custom format by setting the Custom Format toggle to 'On'. Options From Format field: Allows you to specify the format of the input values. Refer to the FAQs to learn about the possible vaules. From Timezone field: Allows you to specify the timezone of the input values, for input timezones that are different from n8n's system clock. To Timezone field: Allows you to specify the timezone that the input values have to be converted to.","title":"Node Reference"},{"location":"integrations/core-nodes/n8n-nodes-base.dateTime/#example-usage","text":"This workflow allows you to convert a date from one format to another using the Date & Time node. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Date & Time The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/core-nodes/n8n-nodes-base.dateTime/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/core-nodes/n8n-nodes-base.dateTime/#2-date-time-node","text":"Enter the date that you want to convert in the Value field. Click on the Add Option dropdown. Click on the From Format option, and enter the format of the input date. Select the format you want to convert it to from the To Format dropdown list. Click on Execute Node to run the workflow.","title":"2. Date &amp; Time node"},{"location":"integrations/core-nodes/n8n-nodes-base.dateTime/#faqs","text":"","title":"FAQs"},{"location":"integrations/core-nodes/n8n-nodes-base.dateTime/#what-values-can-i-use-in-the-from-format-field","text":"You can use the following values in the From Format field: Input Example Description X 1616108400 Unix timestamp x 1616108400000 Unix ms timestamp DD-MM-YYYY 19-03-2021 Date, month, and year separated by - DD/MM/YYYY 19/03/2021 Date, month, and year separated by / DD.MM.YYYY 19.03.2021 Date, month, and year separated by . DD.MM.YYYY HH:mm:ss 19.03.2021 08:00:00 Date, month, year, hours, minutes, and seconds MM/DD/YYYY 03/19/2021 Month, date, and year separated by / MM-DD-YYYY 03-19-2021 Month, date, and year separated by - MM.DD.YYYY 03.19.2021 Month, date, and year separated by . MM/DD/YYYY HH:mm:ss 03/19/2021 08:00:00 Month, date, year, hours, minutes, and seconds YYYY/MM/DD 2021/03/19 Year, month, and date separated by / YYYY-MM-DD 2021-03-19 Year, month, and date separated by - YYYY.MM.DD 2021.03.19 Year, month, and date separated by . YYYY/MM/DD HH:mm:ss 2021/03/19 08:00:00 Year, month, date, hours, minutes, and seconds MMMM DD YYYY March 03 2021 Month, date, and year MMMM DD YYYY HH:mm:ss March 03 2021 08:00:00 Month, date, year, hours, minutes, and seconds DD MMMM YYYY 03 March 2021 Date, month, and year DD MMMM YYYY HH:mm:ss 03 March 2021 08:00:00 Date, month, year, hours, minutes, and seconds","title":"What values can I use in the From Format field?"},{"location":"integrations/core-nodes/n8n-nodes-base.editImage/","text":"Edit Image # The Edit Image node is used to manipulate and edit images. Keep in mind If you are not running n8n on Docker, you'll need to install GraphicsMagick . You will need to use an additional node such as the Read Binary File node or the HTTP Request node to pass the image file as a data property to the Edit Image node. Node Reference # Operations Add a blur to the image to reduce sharpness Add a border to the image Create a new image Crop the image Composite an image on top of another image Draw on an image Get information about the image Rotate the image Change the size of the image Shear image along the X or Y axis Add text to the image You can also specify a file format using the Format field in the Add Option dropdown list. Options File Name field: Allows you to specify the filename of the output file. Format field: Allows you to specify the image format of the output file: BMP GIF JPEG PNG TIFF Example Usage # This workflow allows you to add text to an image downloaded from the internet using the Edit Image node. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - HTTP Request - Edit Image The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. HTTP Request node # Enter https://docs.n8n.io/assets/img/final-workflow.f380b957.png in the URL field. Select 'File' from the Response Format dropdown list. Click on Execute Node to run the node. 3. Edit Image node # Select 'Text' from the Operation dropdown list. Enter This is n8n in the Text field. Enter 100 in the Font Size field. Enter 300 in the Position X field. Enter 500 in the Position Y field. Click on Execute Node to run the node.","title":"Edit Image"},{"location":"integrations/core-nodes/n8n-nodes-base.editImage/#edit-image","text":"The Edit Image node is used to manipulate and edit images. Keep in mind If you are not running n8n on Docker, you'll need to install GraphicsMagick . You will need to use an additional node such as the Read Binary File node or the HTTP Request node to pass the image file as a data property to the Edit Image node.","title":"Edit Image"},{"location":"integrations/core-nodes/n8n-nodes-base.editImage/#node-reference","text":"Operations Add a blur to the image to reduce sharpness Add a border to the image Create a new image Crop the image Composite an image on top of another image Draw on an image Get information about the image Rotate the image Change the size of the image Shear image along the X or Y axis Add text to the image You can also specify a file format using the Format field in the Add Option dropdown list. Options File Name field: Allows you to specify the filename of the output file. Format field: Allows you to specify the image format of the output file: BMP GIF JPEG PNG TIFF","title":"Node Reference"},{"location":"integrations/core-nodes/n8n-nodes-base.editImage/#example-usage","text":"This workflow allows you to add text to an image downloaded from the internet using the Edit Image node. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - HTTP Request - Edit Image The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/core-nodes/n8n-nodes-base.editImage/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/core-nodes/n8n-nodes-base.editImage/#2-http-request-node","text":"Enter https://docs.n8n.io/assets/img/final-workflow.f380b957.png in the URL field. Select 'File' from the Response Format dropdown list. Click on Execute Node to run the node.","title":"2. HTTP Request node"},{"location":"integrations/core-nodes/n8n-nodes-base.editImage/#3-edit-image-node","text":"Select 'Text' from the Operation dropdown list. Enter This is n8n in the Text field. Enter 100 in the Font Size field. Enter 300 in the Position X field. Enter 500 in the Position Y field. Click on Execute Node to run the node.","title":"3. Edit Image node"},{"location":"integrations/core-nodes/n8n-nodes-base.errorTrigger/","text":"Error Trigger # The Error Trigger node triggers a workflow when another workflow has an error. Once a workflow fails, this node gets details about the failed workflow and the errors. This triggers the error workflow. Keep in mind If a workflow is using the Error Trigger node, you don't have to activate the workflow. If you want to receive error messages for a workflow, make sure that you select the 'Error Workflow' in the Workflow Settings for the workflow. If a workflow is using the Error Trigger node, by default, the workflow will use itself as the Error Workflow. The Error Trigger node is designed to get triggered ONLY when the workflows execute automatically which means you will not be able to test this while running the workflows manually. Example Usage # This workflow allows you to send an SMS when a workflow fails. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Twilio The final workflow should look like the following image. 1. Error Trigger node # This node will execute when an error occurs. 2. Twilio node (send: sms) # First of all, you'll have to enter credentials for the Twilio node. You can find out how to do that here . Enter the Twilio phone number in the From field. Enter the receiver's phone number in the To field. Click on the gears icon next to the Message field and click on Add Expression . Enter Your workflow with ID: {{$node[\"Error Trigger\"].json[\"workflow\"][\"id\"]}} and name: {{$node[\"Error Trigger\"].json[\"workflow\"][\"name\"]}} failed to execute. in the Expression field. The node will execute when the Error Trigger node is triggered. FAQs # How to set an error workflow for an n8n workflow? # Let's say we want to get a notification every time Workflow A fails. Create a new workflow, Workflow B . Add an Error Trigger node and set Workflow B as the error workflow for Workflow A by following these steps. - Open Workflow A . - Click on Workflows in the left menu and select 'Settings' from the dropdown list. - Select Workflow B from the Error Workflow dropdown list. - Click on the Save button. Can we send a custom error message? # The Error Trigger node sends the actual error message thrown by the workflow. You can use this information as shown in the Example Usage section as well as send a custom error message like in the Twilio node. However, you cannot send a custom error message to the Error Trigger node. How do we call the Error Workflow manually? # There is currently no functionality to call an Error Workflow manually.","title":"Error Trigger"},{"location":"integrations/core-nodes/n8n-nodes-base.errorTrigger/#error-trigger","text":"The Error Trigger node triggers a workflow when another workflow has an error. Once a workflow fails, this node gets details about the failed workflow and the errors. This triggers the error workflow. Keep in mind If a workflow is using the Error Trigger node, you don't have to activate the workflow. If you want to receive error messages for a workflow, make sure that you select the 'Error Workflow' in the Workflow Settings for the workflow. If a workflow is using the Error Trigger node, by default, the workflow will use itself as the Error Workflow. The Error Trigger node is designed to get triggered ONLY when the workflows execute automatically which means you will not be able to test this while running the workflows manually.","title":"Error Trigger"},{"location":"integrations/core-nodes/n8n-nodes-base.errorTrigger/#example-usage","text":"This workflow allows you to send an SMS when a workflow fails. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Twilio The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/core-nodes/n8n-nodes-base.errorTrigger/#1-error-trigger-node","text":"This node will execute when an error occurs.","title":"1. Error Trigger node"},{"location":"integrations/core-nodes/n8n-nodes-base.errorTrigger/#2-twilio-node-send-sms","text":"First of all, you'll have to enter credentials for the Twilio node. You can find out how to do that here . Enter the Twilio phone number in the From field. Enter the receiver's phone number in the To field. Click on the gears icon next to the Message field and click on Add Expression . Enter Your workflow with ID: {{$node[\"Error Trigger\"].json[\"workflow\"][\"id\"]}} and name: {{$node[\"Error Trigger\"].json[\"workflow\"][\"name\"]}} failed to execute. in the Expression field. The node will execute when the Error Trigger node is triggered.","title":"2. Twilio node (send: sms)"},{"location":"integrations/core-nodes/n8n-nodes-base.errorTrigger/#faqs","text":"","title":"FAQs"},{"location":"integrations/core-nodes/n8n-nodes-base.errorTrigger/#how-to-set-an-error-workflow-for-an-n8n-workflow","text":"Let's say we want to get a notification every time Workflow A fails. Create a new workflow, Workflow B . Add an Error Trigger node and set Workflow B as the error workflow for Workflow A by following these steps. - Open Workflow A . - Click on Workflows in the left menu and select 'Settings' from the dropdown list. - Select Workflow B from the Error Workflow dropdown list. - Click on the Save button.","title":"How to set an error workflow for an n8n workflow?"},{"location":"integrations/core-nodes/n8n-nodes-base.errorTrigger/#can-we-send-a-custom-error-message","text":"The Error Trigger node sends the actual error message thrown by the workflow. You can use this information as shown in the Example Usage section as well as send a custom error message like in the Twilio node. However, you cannot send a custom error message to the Error Trigger node.","title":"Can we send a custom error message?"},{"location":"integrations/core-nodes/n8n-nodes-base.errorTrigger/#how-do-we-call-the-error-workflow-manually","text":"There is currently no functionality to call an Error Workflow manually.","title":"How do we call the Error Workflow manually?"},{"location":"integrations/core-nodes/n8n-nodes-base.executeCommand/","text":"Execute Command # The Execute Command node is used to run shell commands on the host machine that runs n8n. Keep in mind If you are running n8n in Docker, your command will run on the n8n container and not the Docker host. This node will execute the command in the default shell of the host machine. For example, this will be PowerShell on Windows and zsh on macOS. Node Reference # The Execute Command node has two properties: 1. Execute Once toggle: This is a boolean field that is used to specify whether you want the node to execute only once, or once for every item it receives an input. 2. Command field: This is a text field that is used to specify the command that will be executed on the host machine. Example Usage # This workflow allows you to execute a command that returns the percentage of the hard disk that is full using the Execute Command node. The workflow is triggered twice a day, and if the memory usage exceeds 80%, it will send an SMS using the Twilio node. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Cron - Execute Command - IF - Twilio - No Operation, do nothing The final workflow should look like the following image. 1. Cron node # The Cron node will trigger the workflow twice a day, at 9 AM and 4 PM. Click on Add Cron Time . Select 'Every Day' from the Mode dropdown list. Enter 9 in the Hour field. Click on Add Cron Time . Select 'Every Day' from the Mode dropdown list. Enter 16 in the Hour field. Click on Execute Node to run the node. 2. Execute Command node # The Execute Command node will execute the command and return the percentage of hard disk space used on the host machine. Enter df -k / | tail -1 | awk '{print $5}' in the Command field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node executes the command and returns the percentage of the hard disk that is full. 3. IF node # This node will compare the percentage of the hard disk space used we got from the Execute Command node. If the usage of the memory exceeds 80%, it will return true otherwise false. Click on Add Condition and select 'Number' from the dropdown list. Click on the gears icon next to the Value 1 field and click on Add Expression . Enter {{parseInt($node[\"Execute Command\"].json[\"stdout\"])}} in the Expression field. The output from the Execute Command node is a string. The parseInt() method converts the string into an integer. Select 'Larger' from the Operation dropdown list. Set Value 2 to 80. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns an output when the percentage of hard disk space used exceeds 80%. 4. Twilio node (send: sms) # This node sends an SMS to the specified phone number when the usage of hard disk space exceeds 80%. Create a Twilio node connected to the 'true' output of the IF node. You'll have to enter credentials for the Twilio node. You can find out how to do that here . Enter the Twilio phone number in the From field. Enter the receiver's phone number in the To field. Click on the gears icon next to the Message field and click on Add Expression . Enter Your hard disk space is filling up fast! Your hard disk is {{$node[\"Execute Command\"].json[\"stdout\"]}} full. in the Expression field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node sends an SMS with the percentage of the hard disk space used that we got from the Execute Command node. 5. NoOp node # Adding this node here is optional, as the absence of this node won't make a difference to the functioning of the workflow. Create a NoOp node connected to the 'false' output of the IF node. Click on Execute Node to run the node. FAQs # How to run multiple commands in the Execute Command node? # You can combine multiple commands using && . For example, you can combine the change directory (cd) command with the list (ls) command using && . 1 cd bin && ls To run multiple commands, you can also write the commands on separate lines. For example, you can write the list (ls) command on a new line after the change directory (cd) command. 1 2 cd bin ls How to run the curl command in the Execute Command node? # You can also use the HTTP Request node to make a cURL request. If you want to run the curl command in the Execute Command node, you will have to build a Docker image based on the existing n8n image. The default n8n Docker image uses Alpine Linux. You will have to install the curl package. 1. Create a file named Dockerfile. 2. Add the below code snippet to the Dockerfile. 1 2 FROM n8nio/n8n RUN apk --update add curl 3. In the same folder, execute the command below command to build the Docker image. 1 docker build -t n8n-curl 4. Replace the Docker image you used before. For example, replace n8nio/n8n with n8n-curl . 5. Run the newly created Docker image, and you will now be able to execute ssh via the Execute Command-Node.","title":"Execute Command"},{"location":"integrations/core-nodes/n8n-nodes-base.executeCommand/#execute-command","text":"The Execute Command node is used to run shell commands on the host machine that runs n8n. Keep in mind If you are running n8n in Docker, your command will run on the n8n container and not the Docker host. This node will execute the command in the default shell of the host machine. For example, this will be PowerShell on Windows and zsh on macOS.","title":"Execute Command"},{"location":"integrations/core-nodes/n8n-nodes-base.executeCommand/#node-reference","text":"The Execute Command node has two properties: 1. Execute Once toggle: This is a boolean field that is used to specify whether you want the node to execute only once, or once for every item it receives an input. 2. Command field: This is a text field that is used to specify the command that will be executed on the host machine.","title":"Node Reference"},{"location":"integrations/core-nodes/n8n-nodes-base.executeCommand/#example-usage","text":"This workflow allows you to execute a command that returns the percentage of the hard disk that is full using the Execute Command node. The workflow is triggered twice a day, and if the memory usage exceeds 80%, it will send an SMS using the Twilio node. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Cron - Execute Command - IF - Twilio - No Operation, do nothing The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/core-nodes/n8n-nodes-base.executeCommand/#1-cron-node","text":"The Cron node will trigger the workflow twice a day, at 9 AM and 4 PM. Click on Add Cron Time . Select 'Every Day' from the Mode dropdown list. Enter 9 in the Hour field. Click on Add Cron Time . Select 'Every Day' from the Mode dropdown list. Enter 16 in the Hour field. Click on Execute Node to run the node.","title":"1. Cron node"},{"location":"integrations/core-nodes/n8n-nodes-base.executeCommand/#2-execute-command-node","text":"The Execute Command node will execute the command and return the percentage of hard disk space used on the host machine. Enter df -k / | tail -1 | awk '{print $5}' in the Command field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node executes the command and returns the percentage of the hard disk that is full.","title":"2. Execute Command node"},{"location":"integrations/core-nodes/n8n-nodes-base.executeCommand/#3-if-node","text":"This node will compare the percentage of the hard disk space used we got from the Execute Command node. If the usage of the memory exceeds 80%, it will return true otherwise false. Click on Add Condition and select 'Number' from the dropdown list. Click on the gears icon next to the Value 1 field and click on Add Expression . Enter {{parseInt($node[\"Execute Command\"].json[\"stdout\"])}} in the Expression field. The output from the Execute Command node is a string. The parseInt() method converts the string into an integer. Select 'Larger' from the Operation dropdown list. Set Value 2 to 80. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns an output when the percentage of hard disk space used exceeds 80%.","title":"3. IF node"},{"location":"integrations/core-nodes/n8n-nodes-base.executeCommand/#4-twilio-node-send-sms","text":"This node sends an SMS to the specified phone number when the usage of hard disk space exceeds 80%. Create a Twilio node connected to the 'true' output of the IF node. You'll have to enter credentials for the Twilio node. You can find out how to do that here . Enter the Twilio phone number in the From field. Enter the receiver's phone number in the To field. Click on the gears icon next to the Message field and click on Add Expression . Enter Your hard disk space is filling up fast! Your hard disk is {{$node[\"Execute Command\"].json[\"stdout\"]}} full. in the Expression field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node sends an SMS with the percentage of the hard disk space used that we got from the Execute Command node.","title":"4. Twilio node (send: sms)"},{"location":"integrations/core-nodes/n8n-nodes-base.executeCommand/#5-noop-node","text":"Adding this node here is optional, as the absence of this node won't make a difference to the functioning of the workflow. Create a NoOp node connected to the 'false' output of the IF node. Click on Execute Node to run the node.","title":"5. NoOp node"},{"location":"integrations/core-nodes/n8n-nodes-base.executeCommand/#faqs","text":"","title":"FAQs"},{"location":"integrations/core-nodes/n8n-nodes-base.executeCommand/#how-to-run-multiple-commands-in-the-execute-command-node","text":"You can combine multiple commands using && . For example, you can combine the change directory (cd) command with the list (ls) command using && . 1 cd bin && ls To run multiple commands, you can also write the commands on separate lines. For example, you can write the list (ls) command on a new line after the change directory (cd) command. 1 2 cd bin ls","title":"How to run multiple commands in the Execute Command node?"},{"location":"integrations/core-nodes/n8n-nodes-base.executeCommand/#how-to-run-the-curl-command-in-the-execute-command-node","text":"You can also use the HTTP Request node to make a cURL request. If you want to run the curl command in the Execute Command node, you will have to build a Docker image based on the existing n8n image. The default n8n Docker image uses Alpine Linux. You will have to install the curl package. 1. Create a file named Dockerfile. 2. Add the below code snippet to the Dockerfile. 1 2 FROM n8nio/n8n RUN apk --update add curl 3. In the same folder, execute the command below command to build the Docker image. 1 docker build -t n8n-curl 4. Replace the Docker image you used before. For example, replace n8nio/n8n with n8n-curl . 5. Run the newly created Docker image, and you will now be able to execute ssh via the Execute Command-Node.","title":"How to run the curl command in the Execute Command node?"},{"location":"integrations/core-nodes/n8n-nodes-base.executeWorkflow/","text":"Execute Workflow # The Execute Workflow node is used to run a different workflow on the host machine that runs n8n. Node Reference # The Execute Workflow node has two properties: Source : This field is used to specify from where to get the workflow's information. Database Local File Parameter URL Workflow : This field contains information about the workflow, such as the workflow ID, URL, or a file. Example Usage # This workflow allows you to execute another workflow on the host machine using the Execute Workflow node. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Execute Workflow The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Execute Workflow node # Enter the ID of the workflow that you want to execute in the Workflow ID field. You can find instructions on how to obtain the ID of a workflow in the FAQs below. Click on Execute Node to run the workflow. FAQs # How do I find the workflow ID? # Open the workflow for which you want to get the workflow ID. Copy the number after workflow/ in your URL and paste that in the Workflow ID field. How does data get passed from one workflow to another? # Let's say, that there's a Execute Workflow node in Workflow A . The Execute Workflow node calls another workflow, Workflow B . - The Execute Workflow node passes the data to the Start node of Workflow B . - The last node of Workflow B sends the data back to the Execute Workflow node in Workflow A .","title":"Execute Workflow"},{"location":"integrations/core-nodes/n8n-nodes-base.executeWorkflow/#execute-workflow","text":"The Execute Workflow node is used to run a different workflow on the host machine that runs n8n.","title":"Execute Workflow"},{"location":"integrations/core-nodes/n8n-nodes-base.executeWorkflow/#node-reference","text":"The Execute Workflow node has two properties: Source : This field is used to specify from where to get the workflow's information. Database Local File Parameter URL Workflow : This field contains information about the workflow, such as the workflow ID, URL, or a file.","title":"Node Reference"},{"location":"integrations/core-nodes/n8n-nodes-base.executeWorkflow/#example-usage","text":"This workflow allows you to execute another workflow on the host machine using the Execute Workflow node. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Execute Workflow The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/core-nodes/n8n-nodes-base.executeWorkflow/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/core-nodes/n8n-nodes-base.executeWorkflow/#2-execute-workflow-node","text":"Enter the ID of the workflow that you want to execute in the Workflow ID field. You can find instructions on how to obtain the ID of a workflow in the FAQs below. Click on Execute Node to run the workflow.","title":"2. Execute Workflow node"},{"location":"integrations/core-nodes/n8n-nodes-base.executeWorkflow/#faqs","text":"","title":"FAQs"},{"location":"integrations/core-nodes/n8n-nodes-base.executeWorkflow/#how-do-i-find-the-workflow-id","text":"Open the workflow for which you want to get the workflow ID. Copy the number after workflow/ in your URL and paste that in the Workflow ID field.","title":"How do I find the workflow ID?"},{"location":"integrations/core-nodes/n8n-nodes-base.executeWorkflow/#how-does-data-get-passed-from-one-workflow-to-another","text":"Let's say, that there's a Execute Workflow node in Workflow A . The Execute Workflow node calls another workflow, Workflow B . - The Execute Workflow node passes the data to the Start node of Workflow B . - The last node of Workflow B sends the data back to the Execute Workflow node in Workflow A .","title":"How does data get passed from one workflow to another?"},{"location":"integrations/core-nodes/n8n-nodes-base.ftp/","text":"FTP # The FTP node is useful to access and upload files to an FTP server. \ud83d\udd11 Credential You can find authentication information for this node here . Basic Operations # Delete a file Download a file List contents of a folder Rename/move content from old path to new path Upload a file Note: To attach a file for upload, you will need to use an additional node such as the Read Binary File node or the HTTP Request node to pass the file as a data property. Node Reference # Protocol: A dropdown list to choose between the FTP or SFTP protocol. Path: A field used to specify the remote path that you would like to connect to. Recursive: A toggle that can be used to include all subdirectories and files. Example Usage # This workflow allows you to upload a file to an FTP server and get a list of all files using the FTP node. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - HTTP Request - FTP The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. HTTP Request node # Enter the URL of the file you want to download in the URL field. Select File from the Response Format dropdown list. Click on Execute Node to run the node. 3. FTP node (ftp: upload) # First of all, you'll have to enter credentials for the FTP node. You can find out how to do that here . Select Upload from the Operation dropdown list. Enter the path where you would like to upload the file in the Path field. Click on Execute Node to run the node. 4. FTP1 node (ftp: list) # Select the credentials that you entered in the previous node. Select List from the Operation dropdown list. Enter the path to the folder where you uploaded the file in the previous step in the Path field. Click on Execute Node to run the node.","title":"FTP"},{"location":"integrations/core-nodes/n8n-nodes-base.ftp/#ftp","text":"The FTP node is useful to access and upload files to an FTP server. \ud83d\udd11 Credential You can find authentication information for this node here .","title":"FTP"},{"location":"integrations/core-nodes/n8n-nodes-base.ftp/#basic-operations","text":"Delete a file Download a file List contents of a folder Rename/move content from old path to new path Upload a file Note: To attach a file for upload, you will need to use an additional node such as the Read Binary File node or the HTTP Request node to pass the file as a data property.","title":"Basic Operations"},{"location":"integrations/core-nodes/n8n-nodes-base.ftp/#node-reference","text":"Protocol: A dropdown list to choose between the FTP or SFTP protocol. Path: A field used to specify the remote path that you would like to connect to. Recursive: A toggle that can be used to include all subdirectories and files.","title":"Node Reference"},{"location":"integrations/core-nodes/n8n-nodes-base.ftp/#example-usage","text":"This workflow allows you to upload a file to an FTP server and get a list of all files using the FTP node. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - HTTP Request - FTP The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/core-nodes/n8n-nodes-base.ftp/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/core-nodes/n8n-nodes-base.ftp/#2-http-request-node","text":"Enter the URL of the file you want to download in the URL field. Select File from the Response Format dropdown list. Click on Execute Node to run the node.","title":"2. HTTP Request node"},{"location":"integrations/core-nodes/n8n-nodes-base.ftp/#3-ftp-node-ftp-upload","text":"First of all, you'll have to enter credentials for the FTP node. You can find out how to do that here . Select Upload from the Operation dropdown list. Enter the path where you would like to upload the file in the Path field. Click on Execute Node to run the node.","title":"3. FTP node (ftp: upload)"},{"location":"integrations/core-nodes/n8n-nodes-base.ftp/#4-ftp1-node-ftp-list","text":"Select the credentials that you entered in the previous node. Select List from the Operation dropdown list. Enter the path to the folder where you uploaded the file in the previous step in the Path field. Click on Execute Node to run the node.","title":"4. FTP1 node (ftp: list)"},{"location":"integrations/core-nodes/n8n-nodes-base.function/","text":"Function # Using the function node, you can: Transform data from other nodes Implement custom functionality Function node and function item node Note that the Function node is different from the Function Item node. Refer to Data | Code to learn about the difference between the two. The Function node supports promises. So instead of returning the items directly, it is also possible to return a promise which resolves accordingly. The Function node supports writing to your browser console using console.log , useful for debugging and troubleshooting your workflows. Data structure # In n8n, all data passed between nodes is an array of objects. It has the following structure: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 [ { // For mos t da ta : // Wrap each i te m i n a n o t her objec t , wi t h t he key 'jso n ' \"json\" : { // Example da ta \"jsonKeyName\" : \"keyValue\" , \"anotherJsonKey\" : { \"lowerLevelJsonKey\" : 1 } }, // For bi nar y da ta : // Wrap each i te m i n a n o t her objec t , wi t h t he key 'bi nar y' \"binary\" : { // Example da ta \"binaryKeyName\" : { \"data\" : \"....\" , // Base 64 e n coded bi nar y da ta (required) \"mimeType\" : \"image/png\" , // Bes t prac t ice t o se t i f possible (op t io nal ) \"fileExtension\" : \"png\" , // Bes t prac t ice t o se t i f possible (op t io nal ) \"fileName\" : \"example.png\" , // Bes t prac t ice t o se t i f possible (op t io nal ) } } }, ... ] Skipping the 'json' key and array syntax From 0.166.0 onwards, n8n automatically adds the json key if it is missing. It also automatically wraps your items in an array ( [] ) if needed. Example usage # This workflow allows you to get today's date and day using the Function node. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Function The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Function node # Paste the following JavaScript code snippet in the Function field. 1 2 3 4 5 6 7 8 var date = new Date (). toISOString (); var day = new Date (). getDay (); const weekday = [ \"Sunday\" , \"Monday\" , \"Tuesday\" , \"Wednesday\" , \"Thursday\" , \"Friday\" , \"Saturday\" ]; items [ 0 ]. json . date_today = date ; items [ 0 ]. json . day_today = weekday [ day ]; return items ; Click on Execute Node to run the workflow. Node reference # You can also use the methods and variables mentioned in the Expressions page in the Function node. Variable: items # It contains all the items that the node has received as an input. Information about how the data is structured can be found on this page about data structures. The data can be accessed and manipulated like this: 1 2 3 4 5 // Sets the JSON data property \"myFileName\" of the first item to the name of the // file which is set in the binary property \"image\" of the same item. items [ 0 ]. json . myFileName = items [ 0 ]. binary . image . fileName ; return items ; This example creates 10 dummy items with the ids 0 to 9: 1 2 3 4 5 6 7 8 9 10 11 const newItems = []; for ( let i = 0 ; i < 10 ; i ++ ) { newItems . push ({ json : { id : i } }); } return newItems ; Method: $item(index: number, runIndex?: number) # With $item it is possible to access the data of parent nodes. That can be the item data but also the parameters. It expects as input an index of the item the data should be returned for. This is needed because for each item the data returned can be different. This is probably straightforward for the item data itself but maybe less for data like parameters. The reason why it is also needed, is that they may contain an expression. Expressions get always executed of the context for an item. If that would not be the case, for example, the Email Send node not would be able to send multiple emails at once to different people. Instead, the same person would receive multiple emails. The index is 0 based. So $item(0) will return the first item, $item(1) the second one, and so on. By default the item of the last run of the node will be returned. So if the referenced node ran 3x (its last runIndex is 2) and the current node runs the first time (its runIndex is 0) the data of runIndex 2 of the referenced node will be returned. For more information about what data can be accessed via $node , check out the Variable: $node section . Example: 1 2 3 4 5 6 7 8 9 10 11 // Returns the value of the JSON data property \"myNumber\" of Node \"Set\" (first item) const myNumber = $item ( 0 ). $node [ \"Set\" ]. json [ \"myNumber\" ]; // Like above but data of the 6th item const myNumber = $item ( 5 ). $node [ \"Set\" ]. json [ \"myNumber\" ]; // Returns the value of the parameter \"channel\" of Node \"Slack\". // If it contains an expression the value will be resolved with the // data of the first item. const channel = $item ( 0 ). $node [ \"Slack\" ]. parameter [ \"channel\" ]; // Like above but resolved with the value of the 10th item. const channel = $item ( 9 ). $node [ \"Slack\" ]. parameter [ \"channel\" ]; Method: getWorkflowStaticData(type) # This gives access to the static workflow data. It is possible to save data directly with the workflow. This data should, however, be very small. A common use case is to for example to save a timestamp of the last item that got processed from an RSS-Feed or database. It will always return an object. Properties can then read, delete or set on that object. When the workflow execution succeeds, n8n will check automatically if the data has changed and will save it, if necessary. There are two types of static data. The \"global\" and the \"node\" one. Global static data is the same in the whole workflow. And every node in the workflow can access it. The node static data , however, is different for every node and only the node which set it can retrieve it again. Example: 1 2 3 4 5 6 7 8 9 10 11 12 13 // Get the global workflow static data const staticData = getWorkflowStaticData ( 'global' ); // Get the static data of the node const staticData = getWorkflowStaticData ( 'node' ); // Access its data const lastExecution = staticData . lastExecution ; // Update its data staticData . lastExecution = new Date (). getTime (); // Delete data delete staticData . lastExecution ; It is important to know that the static data can not be read and written when testing via the UI. The data there will always be empty and the changes will not persist. Only when a workflow is active and it gets called by a Trigger or Webhook, the static data will be saved. External libraries # You can import and use built-in and external npm modules in the Function node. To learn how to enable external moduels, refer the Configuration guide. Further reading #","title":"Function"},{"location":"integrations/core-nodes/n8n-nodes-base.function/#function","text":"Using the function node, you can: Transform data from other nodes Implement custom functionality Function node and function item node Note that the Function node is different from the Function Item node. Refer to Data | Code to learn about the difference between the two. The Function node supports promises. So instead of returning the items directly, it is also possible to return a promise which resolves accordingly. The Function node supports writing to your browser console using console.log , useful for debugging and troubleshooting your workflows.","title":"Function"},{"location":"integrations/core-nodes/n8n-nodes-base.function/#data-structure","text":"In n8n, all data passed between nodes is an array of objects. It has the following structure: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 [ { // For mos t da ta : // Wrap each i te m i n a n o t her objec t , wi t h t he key 'jso n ' \"json\" : { // Example da ta \"jsonKeyName\" : \"keyValue\" , \"anotherJsonKey\" : { \"lowerLevelJsonKey\" : 1 } }, // For bi nar y da ta : // Wrap each i te m i n a n o t her objec t , wi t h t he key 'bi nar y' \"binary\" : { // Example da ta \"binaryKeyName\" : { \"data\" : \"....\" , // Base 64 e n coded bi nar y da ta (required) \"mimeType\" : \"image/png\" , // Bes t prac t ice t o se t i f possible (op t io nal ) \"fileExtension\" : \"png\" , // Bes t prac t ice t o se t i f possible (op t io nal ) \"fileName\" : \"example.png\" , // Bes t prac t ice t o se t i f possible (op t io nal ) } } }, ... ] Skipping the 'json' key and array syntax From 0.166.0 onwards, n8n automatically adds the json key if it is missing. It also automatically wraps your items in an array ( [] ) if needed.","title":"Data structure"},{"location":"integrations/core-nodes/n8n-nodes-base.function/#example-usage","text":"This workflow allows you to get today's date and day using the Function node. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Function The final workflow should look like the following image.","title":"Example usage"},{"location":"integrations/core-nodes/n8n-nodes-base.function/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/core-nodes/n8n-nodes-base.function/#2-function-node","text":"Paste the following JavaScript code snippet in the Function field. 1 2 3 4 5 6 7 8 var date = new Date (). toISOString (); var day = new Date (). getDay (); const weekday = [ \"Sunday\" , \"Monday\" , \"Tuesday\" , \"Wednesday\" , \"Thursday\" , \"Friday\" , \"Saturday\" ]; items [ 0 ]. json . date_today = date ; items [ 0 ]. json . day_today = weekday [ day ]; return items ; Click on Execute Node to run the workflow.","title":"2. Function node"},{"location":"integrations/core-nodes/n8n-nodes-base.function/#node-reference","text":"You can also use the methods and variables mentioned in the Expressions page in the Function node.","title":"Node reference"},{"location":"integrations/core-nodes/n8n-nodes-base.function/#variable-items","text":"It contains all the items that the node has received as an input. Information about how the data is structured can be found on this page about data structures. The data can be accessed and manipulated like this: 1 2 3 4 5 // Sets the JSON data property \"myFileName\" of the first item to the name of the // file which is set in the binary property \"image\" of the same item. items [ 0 ]. json . myFileName = items [ 0 ]. binary . image . fileName ; return items ; This example creates 10 dummy items with the ids 0 to 9: 1 2 3 4 5 6 7 8 9 10 11 const newItems = []; for ( let i = 0 ; i < 10 ; i ++ ) { newItems . push ({ json : { id : i } }); } return newItems ;","title":"Variable: items"},{"location":"integrations/core-nodes/n8n-nodes-base.function/#method-itemindex-number-runindex-number","text":"With $item it is possible to access the data of parent nodes. That can be the item data but also the parameters. It expects as input an index of the item the data should be returned for. This is needed because for each item the data returned can be different. This is probably straightforward for the item data itself but maybe less for data like parameters. The reason why it is also needed, is that they may contain an expression. Expressions get always executed of the context for an item. If that would not be the case, for example, the Email Send node not would be able to send multiple emails at once to different people. Instead, the same person would receive multiple emails. The index is 0 based. So $item(0) will return the first item, $item(1) the second one, and so on. By default the item of the last run of the node will be returned. So if the referenced node ran 3x (its last runIndex is 2) and the current node runs the first time (its runIndex is 0) the data of runIndex 2 of the referenced node will be returned. For more information about what data can be accessed via $node , check out the Variable: $node section . Example: 1 2 3 4 5 6 7 8 9 10 11 // Returns the value of the JSON data property \"myNumber\" of Node \"Set\" (first item) const myNumber = $item ( 0 ). $node [ \"Set\" ]. json [ \"myNumber\" ]; // Like above but data of the 6th item const myNumber = $item ( 5 ). $node [ \"Set\" ]. json [ \"myNumber\" ]; // Returns the value of the parameter \"channel\" of Node \"Slack\". // If it contains an expression the value will be resolved with the // data of the first item. const channel = $item ( 0 ). $node [ \"Slack\" ]. parameter [ \"channel\" ]; // Like above but resolved with the value of the 10th item. const channel = $item ( 9 ). $node [ \"Slack\" ]. parameter [ \"channel\" ];","title":"Method: $item(index: number, runIndex?: number)"},{"location":"integrations/core-nodes/n8n-nodes-base.function/#method-getworkflowstaticdatatype","text":"This gives access to the static workflow data. It is possible to save data directly with the workflow. This data should, however, be very small. A common use case is to for example to save a timestamp of the last item that got processed from an RSS-Feed or database. It will always return an object. Properties can then read, delete or set on that object. When the workflow execution succeeds, n8n will check automatically if the data has changed and will save it, if necessary. There are two types of static data. The \"global\" and the \"node\" one. Global static data is the same in the whole workflow. And every node in the workflow can access it. The node static data , however, is different for every node and only the node which set it can retrieve it again. Example: 1 2 3 4 5 6 7 8 9 10 11 12 13 // Get the global workflow static data const staticData = getWorkflowStaticData ( 'global' ); // Get the static data of the node const staticData = getWorkflowStaticData ( 'node' ); // Access its data const lastExecution = staticData . lastExecution ; // Update its data staticData . lastExecution = new Date (). getTime (); // Delete data delete staticData . lastExecution ; It is important to know that the static data can not be read and written when testing via the UI. The data there will always be empty and the changes will not persist. Only when a workflow is active and it gets called by a Trigger or Webhook, the static data will be saved.","title":"Method: getWorkflowStaticData(type)"},{"location":"integrations/core-nodes/n8n-nodes-base.function/#external-libraries","text":"You can import and use built-in and external npm modules in the Function node. To learn how to enable external moduels, refer the Configuration guide.","title":"External libraries"},{"location":"integrations/core-nodes/n8n-nodes-base.function/#further-reading","text":"","title":"Further reading"},{"location":"integrations/core-nodes/n8n-nodes-base.functionItem/","text":"Function Item # The Function Item node is used to add custom snippets to JavaScript code that should be executed once for every item that it receives as the input. Keep in mind Please note that the Function Item node is different from the Function node. Check out this page to learn about the difference between the two. The Function Item node supports promises. So instead of returning the items directly, it is also possible to return a promise which resolves accordingly. It also provides the ability to write to your browser console using console.log , useful for debugging and troubleshooting your workflows. Node Reference # You can also use the methods and variables mentioned in the Expressions page in the Function Item node. Variable: item # It contains the \"json\" data of the currently processed item. The data can be accessed and manipulated like this: 1 2 3 // Uses t he da ta o f a n already exis t i n g key t o crea te a ne w addi t io nal o ne i te m. ne wI n creme nte dCou nter = i te m.exis t i n gCou nter + 1 ; re turn i te m; Method: getBinaryData() # Returns all the binary data (all keys) of the item which gets currently processed. 1 2 i te m. f ile na me = ge t Bi nar yDa ta ().a tta chme nt _ 0. f ileName; re turn i te m; Method: setBinaryData(binaryData) # Sets all the binary data (all keys) of the item which gets currently processed. Method: getWorkflowStaticData(type) # This gives access to the static workflow data. It is possible to save data directly with the workflow. This data should, however, be very small. A common use case is to for example to save a timestamp of the last item that got processed from an RSS-Feed or database. It will always return an object. Properties can then read, delete or set on that object. When the workflow execution succeeds, n8n will check automatically if the data has changed and will save it, if necessary. There are two types of static data. The \"global\" and the \"node\" one. Global static data is the same in the whole workflow. And every node in the workflow can access it. The node static data, however, is different for every node and only the node which set it can retrieve it again. Note: The static data cannot be read and written when executing via manual executions. The data will always be empty, and the changes will not persist. The static data will only be saved when a workflow is active. Example # 1 2 3 4 5 6 7 8 9 10 11 12 13 // Get the global workflow static data const staticData = getWorkflowStaticData ( 'global' ); // Get the static data of the node const staticData = getWorkflowStaticData ( 'node' ); // Access its data const lastExecution = staticData . lastExecution ; // Update its data staticData . lastExecution = new Date (). getTime (); // Delete data delete staticData . lastExecution ; External libraries # You can import and use built-in and external npm modules in the Function Item node. To learn how to enable external moduels, refer the Configuration guide.","title":"Function Item"},{"location":"integrations/core-nodes/n8n-nodes-base.functionItem/#function-item","text":"The Function Item node is used to add custom snippets to JavaScript code that should be executed once for every item that it receives as the input. Keep in mind Please note that the Function Item node is different from the Function node. Check out this page to learn about the difference between the two. The Function Item node supports promises. So instead of returning the items directly, it is also possible to return a promise which resolves accordingly. It also provides the ability to write to your browser console using console.log , useful for debugging and troubleshooting your workflows.","title":"Function Item"},{"location":"integrations/core-nodes/n8n-nodes-base.functionItem/#node-reference","text":"You can also use the methods and variables mentioned in the Expressions page in the Function Item node.","title":"Node Reference"},{"location":"integrations/core-nodes/n8n-nodes-base.functionItem/#variable-item","text":"It contains the \"json\" data of the currently processed item. The data can be accessed and manipulated like this: 1 2 3 // Uses t he da ta o f a n already exis t i n g key t o crea te a ne w addi t io nal o ne i te m. ne wI n creme nte dCou nter = i te m.exis t i n gCou nter + 1 ; re turn i te m;","title":"Variable: item"},{"location":"integrations/core-nodes/n8n-nodes-base.functionItem/#method-getbinarydata","text":"Returns all the binary data (all keys) of the item which gets currently processed. 1 2 i te m. f ile na me = ge t Bi nar yDa ta ().a tta chme nt _ 0. f ileName; re turn i te m;","title":"Method: getBinaryData()"},{"location":"integrations/core-nodes/n8n-nodes-base.functionItem/#method-setbinarydatabinarydata","text":"Sets all the binary data (all keys) of the item which gets currently processed.","title":"Method: setBinaryData(binaryData)"},{"location":"integrations/core-nodes/n8n-nodes-base.functionItem/#method-getworkflowstaticdatatype","text":"This gives access to the static workflow data. It is possible to save data directly with the workflow. This data should, however, be very small. A common use case is to for example to save a timestamp of the last item that got processed from an RSS-Feed or database. It will always return an object. Properties can then read, delete or set on that object. When the workflow execution succeeds, n8n will check automatically if the data has changed and will save it, if necessary. There are two types of static data. The \"global\" and the \"node\" one. Global static data is the same in the whole workflow. And every node in the workflow can access it. The node static data, however, is different for every node and only the node which set it can retrieve it again. Note: The static data cannot be read and written when executing via manual executions. The data will always be empty, and the changes will not persist. The static data will only be saved when a workflow is active.","title":"Method: getWorkflowStaticData(type)"},{"location":"integrations/core-nodes/n8n-nodes-base.functionItem/#example","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 // Get the global workflow static data const staticData = getWorkflowStaticData ( 'global' ); // Get the static data of the node const staticData = getWorkflowStaticData ( 'node' ); // Access its data const lastExecution = staticData . lastExecution ; // Update its data staticData . lastExecution = new Date (). getTime (); // Delete data delete staticData . lastExecution ;","title":"Example"},{"location":"integrations/core-nodes/n8n-nodes-base.functionItem/#external-libraries","text":"You can import and use built-in and external npm modules in the Function Item node. To learn how to enable external moduels, refer the Configuration guide.","title":"External libraries"},{"location":"integrations/core-nodes/n8n-nodes-base.git/","text":"Git # Git is a free and open-source distributed version control system designed to handle everything from small to large projects with speed and efficiency. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Add a file or folder to commit Add configuration property Clone a repository Commit files or folders to git Fetch from remote repository Return current configuration Return git commit history Pull from remote repository Push to remote repository Push Tags to remote repository Return status of current repository Create a new tag Set the user Example Usage # This workflow allows you to add, commit, and push changes to a git repository. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Git The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Git node (Add) # This node will add the README.md file to the staging area. If you want to add a different file, enter the path of that file instead. Select 'Add' from the Operation dropdown list. Enter the repository path in the Repository Path field. Enter the file path in the Paths to Add field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node adds the README.md file to the staging area. 3. Git1 node (Commit) # This node will commit all the changes that were added to the staging area by the previous node. Select 'Commit' from the Operation dropdown list. Click on the gears icon next to the Repository Path field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Git > Parameters > repositoryPath. You can also add the following expression: {{$node[\"Git\"].parameter[\"repositoryPath\"]}} . Enter a commit message in the Message field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new commit. 4. Git2 node (Log) # This node will return the commit logs of your repository. Click on the gears icon next to the Repository Path field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Git > Parameters > repositoryPath. You can also add the following expression: {{$node[\"Git\"].parameter[\"repositoryPath\"]}} . Toggle Return All to true . This option will return all the logs. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new commit. 5. Git3 node (Push) # This node will push the changes to a cloud repository. Select 'Push' from the Operation dropdown list. Click on the gears icon next to the Repository Path field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Git > Parameters > repositoryPath. You can also add the following expression: {{$node[\"Git\"].parameter[\"repositoryPath\"]}} . Click on Execute Node to run the node. Note: If you're not using SSH, you will have to create credentials to authenticate yourself. You also need to set an upstream branch to push the changes. This is required only once. You can set up an upstream branch by executing the command git push -u origin master from a terminal. In the screenshot below, you will notice that the node pushes the local changes to a cloud repository.","title":"Git"},{"location":"integrations/core-nodes/n8n-nodes-base.git/#git","text":"Git is a free and open-source distributed version control system designed to handle everything from small to large projects with speed and efficiency. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Git"},{"location":"integrations/core-nodes/n8n-nodes-base.git/#basic-operations","text":"Add a file or folder to commit Add configuration property Clone a repository Commit files or folders to git Fetch from remote repository Return current configuration Return git commit history Pull from remote repository Push to remote repository Push Tags to remote repository Return status of current repository Create a new tag Set the user","title":"Basic Operations"},{"location":"integrations/core-nodes/n8n-nodes-base.git/#example-usage","text":"This workflow allows you to add, commit, and push changes to a git repository. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Git The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/core-nodes/n8n-nodes-base.git/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/core-nodes/n8n-nodes-base.git/#2-git-node-add","text":"This node will add the README.md file to the staging area. If you want to add a different file, enter the path of that file instead. Select 'Add' from the Operation dropdown list. Enter the repository path in the Repository Path field. Enter the file path in the Paths to Add field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node adds the README.md file to the staging area.","title":"2. Git node (Add)"},{"location":"integrations/core-nodes/n8n-nodes-base.git/#3-git1-node-commit","text":"This node will commit all the changes that were added to the staging area by the previous node. Select 'Commit' from the Operation dropdown list. Click on the gears icon next to the Repository Path field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Git > Parameters > repositoryPath. You can also add the following expression: {{$node[\"Git\"].parameter[\"repositoryPath\"]}} . Enter a commit message in the Message field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new commit.","title":"3. Git1 node (Commit)"},{"location":"integrations/core-nodes/n8n-nodes-base.git/#4-git2-node-log","text":"This node will return the commit logs of your repository. Click on the gears icon next to the Repository Path field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Git > Parameters > repositoryPath. You can also add the following expression: {{$node[\"Git\"].parameter[\"repositoryPath\"]}} . Toggle Return All to true . This option will return all the logs. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new commit.","title":"4. Git2 node (Log)"},{"location":"integrations/core-nodes/n8n-nodes-base.git/#5-git3-node-push","text":"This node will push the changes to a cloud repository. Select 'Push' from the Operation dropdown list. Click on the gears icon next to the Repository Path field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Git > Parameters > repositoryPath. You can also add the following expression: {{$node[\"Git\"].parameter[\"repositoryPath\"]}} . Click on Execute Node to run the node. Note: If you're not using SSH, you will have to create credentials to authenticate yourself. You also need to set an upstream branch to push the changes. This is required only once. You can set up an upstream branch by executing the command git push -u origin master from a terminal. In the screenshot below, you will notice that the node pushes the local changes to a cloud repository.","title":"5. Git3 node (Push)"},{"location":"integrations/core-nodes/n8n-nodes-base.graphql/","text":"GraphQL # GraphQL is an open-source data query and manipulation language for APIs, and a runtime for fulfilling queries with existing data. Basic Operations # Query a GraphQL endpoint Example Usage # This workflow allows you to get information about the five most recent SpaceX launches from spacex.land . You can also find the workflow on the website. This example usage workflow uses the following two nodes. - Start - GraphQL The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. GraphQL node # Enter https://api.spacex.land/graphql/ in the Endpoint field. Select the 'JSON' option from the Request Format dropdown list. Enter the GraphQL query shown below in the Query field. Click on Execute Node to run the workflow. GraphQL query # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 { lau n chesPas t (limi t : 5 ) { missio n _ na me lau n ch_da te _local lau n ch_si te { si te _ na me_lo n g } li n ks { ar t icle_li n k video_li n k } rocke t { rocke t _ na me f irs t _s ta ge { cores { fl igh t core { reuse_cou nt s tatus } } } seco n d_s ta ge { payloads { payload_ t ype payload_mass_kg payload_mass_lbs } } } ships { na me home_por t image } } }","title":"GraphQL"},{"location":"integrations/core-nodes/n8n-nodes-base.graphql/#graphql","text":"GraphQL is an open-source data query and manipulation language for APIs, and a runtime for fulfilling queries with existing data.","title":"GraphQL"},{"location":"integrations/core-nodes/n8n-nodes-base.graphql/#basic-operations","text":"Query a GraphQL endpoint","title":"Basic Operations"},{"location":"integrations/core-nodes/n8n-nodes-base.graphql/#example-usage","text":"This workflow allows you to get information about the five most recent SpaceX launches from spacex.land . You can also find the workflow on the website. This example usage workflow uses the following two nodes. - Start - GraphQL The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/core-nodes/n8n-nodes-base.graphql/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/core-nodes/n8n-nodes-base.graphql/#2-graphql-node","text":"Enter https://api.spacex.land/graphql/ in the Endpoint field. Select the 'JSON' option from the Request Format dropdown list. Enter the GraphQL query shown below in the Query field. Click on Execute Node to run the workflow.","title":"2. GraphQL node"},{"location":"integrations/core-nodes/n8n-nodes-base.graphql/#graphql-query","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 { lau n chesPas t (limi t : 5 ) { missio n _ na me lau n ch_da te _local lau n ch_si te { si te _ na me_lo n g } li n ks { ar t icle_li n k video_li n k } rocke t { rocke t _ na me f irs t _s ta ge { cores { fl igh t core { reuse_cou nt s tatus } } } seco n d_s ta ge { payloads { payload_ t ype payload_mass_kg payload_mass_lbs } } } ships { na me home_por t image } } }","title":"GraphQL query"},{"location":"integrations/core-nodes/n8n-nodes-base.htmlExtract/","text":"HTML Extract # The HTML Extract node is useful to extract the HTML content of a webpage. Node Reference # Source Data: This field specifies if HTML should be read from binary or JSON data. In this dropdown list, there are two options. Binary JSON JSON Property: The name of the JSON property in which the HTML (from which to extract the data) can be found. This field is displayed when 'JSON' is selected in the Source Data field. Binary Property: The name of the binary property in which the HTML (from which to extract the data) can be found. This field is displayed when 'Binary' is selected in the Source Data field. The property can either contain a string or an array of strings. Extraction Values: Key: The key under which the extracted value should be saved. CSS Selector: The CSS selector to use. Return Value: The kind of data that should be returned. In this dropdown list there are four options. Attribute: Get an attribute value like 'class' from an element. Attribute: The name of the attribute to return the value of. HTML: Get the HTML that the element contains. Text: Get only the text content of the element. Value: Get the value of an input, select, or textarea. Return Array: Returns the values as an array so that if multiple ones are found, they also get returned separately. If not set, all values will be returned as a single string. Options: Trim Values: Removes all spaces and newlines from the beginning and end of the values. Example Usage # This workflow allows you to extract titles and URLs of all the articles from the Hackernoon homepage using the HTML Extract node. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - HTTP Request - HTML Extract The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. HTTP Request node (GET) # Enter https://hackernoon.com in the URL field. Select 'String' from the Response Format dropdown list. Click on Execute Node to run the node. 3. HTML Extract node (json: data) # Click on the Add Value button. Enter item in the Key field. Enter h2 in the CSS Selector field. Select 'HTML' from the Return Value dropdown list. Toggle Return Array to true. Click on Execute Node to run the node. 4. HTML Extract1 node (json: item) # Enter item in the JSON Property field. Click on the Add Value button. Enter title in the Key field. Enter a in the CSS Selector field. Click on the Add Value button. Enter url in the Key field. Enter a in the CSS Selector field. Select 'Attribute' from the Return Value dropdown list. Enter href in the Attribute field. Click on Execute Node to run the node.","title":"HTML Extract"},{"location":"integrations/core-nodes/n8n-nodes-base.htmlExtract/#html-extract","text":"The HTML Extract node is useful to extract the HTML content of a webpage.","title":"HTML Extract"},{"location":"integrations/core-nodes/n8n-nodes-base.htmlExtract/#node-reference","text":"Source Data: This field specifies if HTML should be read from binary or JSON data. In this dropdown list, there are two options. Binary JSON JSON Property: The name of the JSON property in which the HTML (from which to extract the data) can be found. This field is displayed when 'JSON' is selected in the Source Data field. Binary Property: The name of the binary property in which the HTML (from which to extract the data) can be found. This field is displayed when 'Binary' is selected in the Source Data field. The property can either contain a string or an array of strings. Extraction Values: Key: The key under which the extracted value should be saved. CSS Selector: The CSS selector to use. Return Value: The kind of data that should be returned. In this dropdown list there are four options. Attribute: Get an attribute value like 'class' from an element. Attribute: The name of the attribute to return the value of. HTML: Get the HTML that the element contains. Text: Get only the text content of the element. Value: Get the value of an input, select, or textarea. Return Array: Returns the values as an array so that if multiple ones are found, they also get returned separately. If not set, all values will be returned as a single string. Options: Trim Values: Removes all spaces and newlines from the beginning and end of the values.","title":"Node Reference"},{"location":"integrations/core-nodes/n8n-nodes-base.htmlExtract/#example-usage","text":"This workflow allows you to extract titles and URLs of all the articles from the Hackernoon homepage using the HTML Extract node. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - HTTP Request - HTML Extract The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/core-nodes/n8n-nodes-base.htmlExtract/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/core-nodes/n8n-nodes-base.htmlExtract/#2-http-request-node-get","text":"Enter https://hackernoon.com in the URL field. Select 'String' from the Response Format dropdown list. Click on Execute Node to run the node.","title":"2. HTTP Request node (GET)"},{"location":"integrations/core-nodes/n8n-nodes-base.htmlExtract/#3-html-extract-node-json-data","text":"Click on the Add Value button. Enter item in the Key field. Enter h2 in the CSS Selector field. Select 'HTML' from the Return Value dropdown list. Toggle Return Array to true. Click on Execute Node to run the node.","title":"3. HTML Extract node (json: data)"},{"location":"integrations/core-nodes/n8n-nodes-base.htmlExtract/#4-html-extract1-node-json-item","text":"Enter item in the JSON Property field. Click on the Add Value button. Enter title in the Key field. Enter a in the CSS Selector field. Click on the Add Value button. Enter url in the Key field. Enter a in the CSS Selector field. Select 'Attribute' from the Return Value dropdown list. Enter href in the Attribute field. Click on Execute Node to run the node.","title":"4. HTML Extract1 node (json: item)"},{"location":"integrations/core-nodes/n8n-nodes-base.httpRequest/","text":"HTTP Request # The HTTP Request node is one of the most versatile nodes in n8n. It allows you to make HTTP requests which can be used to query data from apps and services. \ud83d\udd11 Credential You can find authentication information for this node here . Node Reference # Authentication: Select the authentication method to use for the request from the following: Basic Auth Digest Auth Header Auth OAuth1 OAuth2 None Request Method: Select the method to be used for the request: DELETE GET HEAD PATCH POST PUT URL: This field is where the URL to request has to be entered. Ignore SSL Issues: This option can be used to download the response even if SSL validation is not possible. Response Format: Select the format in which the data gets returned from the URL. You can choose between File, JSON, and String. JSON/RAW Parameters: This option can be used to specify whether the body/query parameter should be set via the value-key pair UI or JSON/RAW. Options Batch Interval: The time (in milliseconds) between each batch of requests. Set to 0 to disable. Batch Size: If set, input will be split in batches to throttle requests. Use -1 to disable. 0 will be treated as 1 . Full Response: This option can be used to retrieve the full response instead of only the body from the URL. Follow Redirect: This option can be used to follow any redirections with a status code 3xx . Ignore Response Code: This option can be used to let the node execute even when the HTTP status code is not 2xx. Proxy: This field is used to specify an HTTP proxy that you may want to use. Split Into Items: This option can be used to flatten the node output as a simple array. See the FAQ section to learn more. Timeout: The maximum time (in ms) to wait for a response header from the server before aborting the request. Use Querystring: Set this option to true if you need arrays to be serialized as foo=bar&foo=baz instead of the default foo[0]=bar&foo[1]=baz . Headers: This section is used to specify any optional HTTP request headers you may want to include with your request. Query Parameters: This section is used to specify any HTTP query parameters you may want to include with your request. Example Usage # This workflow allows you to GET a sample list of users from reqres.in , add a new user using a POST request, and update the user using a PATCH request. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - HTTP Request The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. HTTP Request node (GET) # Enter https://reqres.in/api/users in the URL field. Click on Execute Node to run the workflow. 3. HTTP Request1 node (POST) # Select 'POST' from the Request Method dropdown list. Enter https://reqres.in/api/users in the URL field. Click on the Add Parameter button in the Body Parameters section. Enter name in the Name field. Enter Neo in the Value field. Click on the Add Parameter button in the Body Parameters section. Enter job in the Name field. Enter Programmer in the Value field. Click on Execute Node to run the workflow. 4. HTTP Request2 node (PATCH) # Select 'PATCH' from the Request Method dropdown list. Enter https://reqres.in/api/users/2 in the URL field. Click on the Add Parameter button in the Body Parameters section. Enter name in the Name field. Enter Neo in the Value field. Click on the Add Parameter button in the Body Parameters section. Enter job in the Name field. Enter The Chosen One in the Value field. Click on Execute Node to run the workflow. FAQs # How to fetch a binary file from a URL? # Enter the URL of the file in the URL field. For example, you can enter https://n8n.io/n8n-logo.png to fetch the n8n logo. Select 'File' from the Response Format dropdown list. (Optional) Change the binary property value in the Binary Property field. Throughout the workflow, you can refer to the binary data with the value you set in this field. Click on Execute Node to run the node. After the node gets executed, click on the Binary tab. Click on the Show Binary Data button to view the file. How to send a binary file to an API endpoint? # Depending on your use-case, you might want to send a binary file to an API endpoint. To do that, follow the steps mentioned below. Connect the HTTP Request node with a node that has previously fetched the binary file. This node can be an HTTP Request node, Read Binary File node, Google Drive node or any such node. Select 'POST' from the Request Method dropdown list ( Note: Refer to the API documentation of your API to make sure that you have selected the correct HTTP request method). Enter the URL where you want to send the binary file in the URL field. Toggle JSON/RAW Parameters to true . Toggle Send Binary Data to true . Click on Add Option and select 'Body Content Type' from the dropdown list. Select 'Form-Data Multipart' from the Body Content Type dropdown list. If you are referring to the binary property with a different value, enter that value in the Binary Property field (name displayed in the binary tab after executing the previous node). Note: To set a name for the form field, separate the field name with a colon, example sendKey:binaryProperty . If you want to send multiple files, separate them with comma, example: sendKey1:binaryProperty1,sendKey2:binaryProperty2 Click on Execute Node to run the node. Refer to this example workflow . How to get the HTTP status code after an execution? # Click on Add Option and select 'Full Response'. Toggle Full Response to true . When the node gets executed, you will receive the HTTP status code, the HTTP status message, and the header parameters. How to send XML data? # Toggle JSON/RAW Parameters to true . Click on Add Option and select 'Body Content Type'. Select 'RAW/Custom' from the Body Content Type field. Enter the XML data in the Body field. When to use the Split Into Items parameter? # Not all incoming data you receive will be properly structured to allow nodes to process each individual item. Typically you would need to use the Item List node to modify data structure. The HTTP Request node allows you to do this automatically by enabling the Split Into Items parameter.","title":"HTTP Request"},{"location":"integrations/core-nodes/n8n-nodes-base.httpRequest/#http-request","text":"The HTTP Request node is one of the most versatile nodes in n8n. It allows you to make HTTP requests which can be used to query data from apps and services. \ud83d\udd11 Credential You can find authentication information for this node here .","title":"HTTP Request"},{"location":"integrations/core-nodes/n8n-nodes-base.httpRequest/#node-reference","text":"Authentication: Select the authentication method to use for the request from the following: Basic Auth Digest Auth Header Auth OAuth1 OAuth2 None Request Method: Select the method to be used for the request: DELETE GET HEAD PATCH POST PUT URL: This field is where the URL to request has to be entered. Ignore SSL Issues: This option can be used to download the response even if SSL validation is not possible. Response Format: Select the format in which the data gets returned from the URL. You can choose between File, JSON, and String. JSON/RAW Parameters: This option can be used to specify whether the body/query parameter should be set via the value-key pair UI or JSON/RAW. Options Batch Interval: The time (in milliseconds) between each batch of requests. Set to 0 to disable. Batch Size: If set, input will be split in batches to throttle requests. Use -1 to disable. 0 will be treated as 1 . Full Response: This option can be used to retrieve the full response instead of only the body from the URL. Follow Redirect: This option can be used to follow any redirections with a status code 3xx . Ignore Response Code: This option can be used to let the node execute even when the HTTP status code is not 2xx. Proxy: This field is used to specify an HTTP proxy that you may want to use. Split Into Items: This option can be used to flatten the node output as a simple array. See the FAQ section to learn more. Timeout: The maximum time (in ms) to wait for a response header from the server before aborting the request. Use Querystring: Set this option to true if you need arrays to be serialized as foo=bar&foo=baz instead of the default foo[0]=bar&foo[1]=baz . Headers: This section is used to specify any optional HTTP request headers you may want to include with your request. Query Parameters: This section is used to specify any HTTP query parameters you may want to include with your request.","title":"Node Reference"},{"location":"integrations/core-nodes/n8n-nodes-base.httpRequest/#example-usage","text":"This workflow allows you to GET a sample list of users from reqres.in , add a new user using a POST request, and update the user using a PATCH request. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - HTTP Request The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/core-nodes/n8n-nodes-base.httpRequest/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/core-nodes/n8n-nodes-base.httpRequest/#2-http-request-node-get","text":"Enter https://reqres.in/api/users in the URL field. Click on Execute Node to run the workflow.","title":"2. HTTP Request node (GET)"},{"location":"integrations/core-nodes/n8n-nodes-base.httpRequest/#3-http-request1-node-post","text":"Select 'POST' from the Request Method dropdown list. Enter https://reqres.in/api/users in the URL field. Click on the Add Parameter button in the Body Parameters section. Enter name in the Name field. Enter Neo in the Value field. Click on the Add Parameter button in the Body Parameters section. Enter job in the Name field. Enter Programmer in the Value field. Click on Execute Node to run the workflow.","title":"3. HTTP Request1 node (POST)"},{"location":"integrations/core-nodes/n8n-nodes-base.httpRequest/#4-http-request2-node-patch","text":"Select 'PATCH' from the Request Method dropdown list. Enter https://reqres.in/api/users/2 in the URL field. Click on the Add Parameter button in the Body Parameters section. Enter name in the Name field. Enter Neo in the Value field. Click on the Add Parameter button in the Body Parameters section. Enter job in the Name field. Enter The Chosen One in the Value field. Click on Execute Node to run the workflow.","title":"4. HTTP Request2 node (PATCH)"},{"location":"integrations/core-nodes/n8n-nodes-base.httpRequest/#faqs","text":"","title":"FAQs"},{"location":"integrations/core-nodes/n8n-nodes-base.httpRequest/#how-to-fetch-a-binary-file-from-a-url","text":"Enter the URL of the file in the URL field. For example, you can enter https://n8n.io/n8n-logo.png to fetch the n8n logo. Select 'File' from the Response Format dropdown list. (Optional) Change the binary property value in the Binary Property field. Throughout the workflow, you can refer to the binary data with the value you set in this field. Click on Execute Node to run the node. After the node gets executed, click on the Binary tab. Click on the Show Binary Data button to view the file.","title":"How to fetch a binary file from a URL?"},{"location":"integrations/core-nodes/n8n-nodes-base.httpRequest/#how-to-send-a-binary-file-to-an-api-endpoint","text":"Depending on your use-case, you might want to send a binary file to an API endpoint. To do that, follow the steps mentioned below. Connect the HTTP Request node with a node that has previously fetched the binary file. This node can be an HTTP Request node, Read Binary File node, Google Drive node or any such node. Select 'POST' from the Request Method dropdown list ( Note: Refer to the API documentation of your API to make sure that you have selected the correct HTTP request method). Enter the URL where you want to send the binary file in the URL field. Toggle JSON/RAW Parameters to true . Toggle Send Binary Data to true . Click on Add Option and select 'Body Content Type' from the dropdown list. Select 'Form-Data Multipart' from the Body Content Type dropdown list. If you are referring to the binary property with a different value, enter that value in the Binary Property field (name displayed in the binary tab after executing the previous node). Note: To set a name for the form field, separate the field name with a colon, example sendKey:binaryProperty . If you want to send multiple files, separate them with comma, example: sendKey1:binaryProperty1,sendKey2:binaryProperty2 Click on Execute Node to run the node. Refer to this example workflow .","title":"How to send a binary file to an API endpoint?"},{"location":"integrations/core-nodes/n8n-nodes-base.httpRequest/#how-to-get-the-http-status-code-after-an-execution","text":"Click on Add Option and select 'Full Response'. Toggle Full Response to true . When the node gets executed, you will receive the HTTP status code, the HTTP status message, and the header parameters.","title":"How to get the HTTP status code after an execution?"},{"location":"integrations/core-nodes/n8n-nodes-base.httpRequest/#how-to-send-xml-data","text":"Toggle JSON/RAW Parameters to true . Click on Add Option and select 'Body Content Type'. Select 'RAW/Custom' from the Body Content Type field. Enter the XML data in the Body field.","title":"How to send XML data?"},{"location":"integrations/core-nodes/n8n-nodes-base.httpRequest/#when-to-use-the-split-into-items-parameter","text":"Not all incoming data you receive will be properly structured to allow nodes to process each individual item. Typically you would need to use the Item List node to modify data structure. The HTTP Request node allows you to do this automatically by enabling the Split Into Items parameter.","title":"When to use the Split Into Items parameter?"},{"location":"integrations/core-nodes/n8n-nodes-base.iCal/","text":"iCalendar # The iCalendar node allows you to create event files that can be shared as an attachment. Basic Operations # Create Event File Example Usage # This workflow allows you to create an event file and send it as an attachment via email. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Send Email The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. iCalendar node (createEventFile) # This node will create an event file. We use this file as an attachment in the next node. Enter the event title in the Event Title field. Select the event start date and time in the Start field. Select the event end date and time in the End field. Select 'Get All' from the Operation dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates the event file. 3. Send Email node # This node will send the event file as an attachment. First of all, you'll have to enter credentials for the Send Email node. You can find out how to do that here . Enter the sender's email address in the From Email field. Enter the receiver's email address in the To Email field. Enter a subject in the Subject field. Enter the email content in the Text field. Enter data in the Attachments field. If you used a different name for the Binary Property, use that name instead. We add the name of the Binary Property and not the file name in the Attachments field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node sends an email with the event file as an attachment.","title":"iCalendar"},{"location":"integrations/core-nodes/n8n-nodes-base.iCal/#icalendar","text":"The iCalendar node allows you to create event files that can be shared as an attachment.","title":"iCalendar"},{"location":"integrations/core-nodes/n8n-nodes-base.iCal/#basic-operations","text":"Create Event File","title":"Basic Operations"},{"location":"integrations/core-nodes/n8n-nodes-base.iCal/#example-usage","text":"This workflow allows you to create an event file and send it as an attachment via email. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Send Email The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/core-nodes/n8n-nodes-base.iCal/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/core-nodes/n8n-nodes-base.iCal/#2-icalendar-node-createeventfile","text":"This node will create an event file. We use this file as an attachment in the next node. Enter the event title in the Event Title field. Select the event start date and time in the Start field. Select the event end date and time in the End field. Select 'Get All' from the Operation dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates the event file.","title":"2. iCalendar node (createEventFile)"},{"location":"integrations/core-nodes/n8n-nodes-base.iCal/#3-send-email-node","text":"This node will send the event file as an attachment. First of all, you'll have to enter credentials for the Send Email node. You can find out how to do that here . Enter the sender's email address in the From Email field. Enter the receiver's email address in the To Email field. Enter a subject in the Subject field. Enter the email content in the Text field. Enter data in the Attachments field. If you used a different name for the Binary Property, use that name instead. We add the name of the Binary Property and not the file name in the Attachments field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node sends an email with the event file as an attachment.","title":"3. Send Email node"},{"location":"integrations/core-nodes/n8n-nodes-base.if/","text":"IF # The IF node is used to split a workflow conditionally based on comparison operations. Node Reference # You can add comparison conditions using the Add Condition dropdown. Conditions can be created based on the data type, the available comparison operations vary for each data type. Boolean - Equal - Not Equal Number - Smaller - Smaller Equal - Equal - Not Equal - Larger - Larger Equal - Is Empty String - Contains - Equal - Not Contains - Not Equal - Regex - Is Empty You can choose to split a workflow when any of the specified conditions are met, or only when all the specified conditions are met using the options in the Combine dropdown list. Example Usage # This workflow executes two different Set nodes based on the output given by an IF node. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Function - IF - Set The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Function node # Enter the following code in the Function field. 1 2 3 4 5 6 7 8 9 10 11 12 return [ { json: { id: 0, } }, { json: { id: 1, } } ]; Click on Execute Node to run the workflow. 3. IF node # Click on the Add Condition button and select 'Number' from the dropdown list. Click on the gears icon next to the Value 1 field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Function > Output Data > JSON > id. You can also add the following expression: {{$node[\"Function\"].json[\"id\"]}} . From the Operation dropdown list, select 'Equal'. Click on Execute Node to run the workflow. 4. Set node (for 'true' condition) # Create a Set node connected to the 'true' output of the IF node. Click on the Add Value button and select 'String' from the dropdown list. Enter name in the Name field. Enter n8n in the Value field. Click on Execute Node to run the workflow. Note: Notice that only the id with the value 0 made its way to this Set node. 5. Set1 node (for 'false' condition) # Create a Set node connected to the 'false' output of the IF node. Click on the Add Value button and select 'String' from the dropdown list. Enter name in the Name field. Enter nodemation in the Value field. Click on Execute Node to run the workflow. Note: Notice that only the id with the value 1 made its way to this Set node.","title":"IF"},{"location":"integrations/core-nodes/n8n-nodes-base.if/#if","text":"The IF node is used to split a workflow conditionally based on comparison operations.","title":"IF"},{"location":"integrations/core-nodes/n8n-nodes-base.if/#node-reference","text":"You can add comparison conditions using the Add Condition dropdown. Conditions can be created based on the data type, the available comparison operations vary for each data type. Boolean - Equal - Not Equal Number - Smaller - Smaller Equal - Equal - Not Equal - Larger - Larger Equal - Is Empty String - Contains - Equal - Not Contains - Not Equal - Regex - Is Empty You can choose to split a workflow when any of the specified conditions are met, or only when all the specified conditions are met using the options in the Combine dropdown list.","title":"Node Reference"},{"location":"integrations/core-nodes/n8n-nodes-base.if/#example-usage","text":"This workflow executes two different Set nodes based on the output given by an IF node. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Function - IF - Set The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/core-nodes/n8n-nodes-base.if/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/core-nodes/n8n-nodes-base.if/#2-function-node","text":"Enter the following code in the Function field. 1 2 3 4 5 6 7 8 9 10 11 12 return [ { json: { id: 0, } }, { json: { id: 1, } } ]; Click on Execute Node to run the workflow.","title":"2. Function node"},{"location":"integrations/core-nodes/n8n-nodes-base.if/#3-if-node","text":"Click on the Add Condition button and select 'Number' from the dropdown list. Click on the gears icon next to the Value 1 field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Function > Output Data > JSON > id. You can also add the following expression: {{$node[\"Function\"].json[\"id\"]}} . From the Operation dropdown list, select 'Equal'. Click on Execute Node to run the workflow.","title":"3. IF node"},{"location":"integrations/core-nodes/n8n-nodes-base.if/#4-set-node-for-true-condition","text":"Create a Set node connected to the 'true' output of the IF node. Click on the Add Value button and select 'String' from the dropdown list. Enter name in the Name field. Enter n8n in the Value field. Click on Execute Node to run the workflow. Note: Notice that only the id with the value 0 made its way to this Set node.","title":"4. Set node (for 'true' condition)"},{"location":"integrations/core-nodes/n8n-nodes-base.if/#5-set1-node-for-false-condition","text":"Create a Set node connected to the 'false' output of the IF node. Click on the Add Value button and select 'String' from the dropdown list. Enter name in the Name field. Enter nodemation in the Value field. Click on Execute Node to run the workflow. Note: Notice that only the id with the value 1 made its way to this Set node.","title":"5. Set1 node (for 'false' condition)"},{"location":"integrations/core-nodes/n8n-nodes-base.imapEmail/","text":"IMAP Email # The IMAP Email node is used to receive emails via an IMAP email server. This node is a trigger node. \ud83d\udd11 Credential You can find authentication information for this node here . Basic Operations # Receive an email Node Reference # Mailbox Name field: The mailbox from which you want to receive emails. Action field: Used to specify whether or not an email should be marked as read when n8n receives it. Download Attachment field: Used to specify whether or not you want to download any attachments received with the emails. Example Usage # This workflow allows you to receive an email using the IMAP Email node. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - IMAP Email The final workflow should look like the following image. 1. IMAP Email node # First of all, you'll have to enter credentials for the IMAP Email node. You can find out how to do that here . Enter the name of the mailbox from which you want to receive emails in the Mailbox Name field. Click on Execute Node to run the workflow.","title":"IMAP Email"},{"location":"integrations/core-nodes/n8n-nodes-base.imapEmail/#imap-email","text":"The IMAP Email node is used to receive emails via an IMAP email server. This node is a trigger node. \ud83d\udd11 Credential You can find authentication information for this node here .","title":"IMAP Email"},{"location":"integrations/core-nodes/n8n-nodes-base.imapEmail/#basic-operations","text":"Receive an email","title":"Basic Operations"},{"location":"integrations/core-nodes/n8n-nodes-base.imapEmail/#node-reference","text":"Mailbox Name field: The mailbox from which you want to receive emails. Action field: Used to specify whether or not an email should be marked as read when n8n receives it. Download Attachment field: Used to specify whether or not you want to download any attachments received with the emails.","title":"Node Reference"},{"location":"integrations/core-nodes/n8n-nodes-base.imapEmail/#example-usage","text":"This workflow allows you to receive an email using the IMAP Email node. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - IMAP Email The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/core-nodes/n8n-nodes-base.imapEmail/#1-imap-email-node","text":"First of all, you'll have to enter credentials for the IMAP Email node. You can find out how to do that here . Enter the name of the mailbox from which you want to receive emails in the Mailbox Name field. Click on Execute Node to run the workflow.","title":"1. IMAP Email node"},{"location":"integrations/core-nodes/n8n-nodes-base.interval/","text":"Interval # The Interval node is used to trigger the workflow to run in regular intervals of time. This node is a Trigger node. Keep in mind If a workflow is using the Interval node as a trigger, make sure that you save and activate the workflow. The Interval node has two fields: 1. Interval field: This is a numerical field where you can specify the interval after which the workflow should get triggered again. 2. Unit field: This is a dropdown list which allows you to select a unit for the value that was provided for the Interval field. This field offers the following options for its dropdown list: - Seconds - Minutes - Hours","title":"Interval"},{"location":"integrations/core-nodes/n8n-nodes-base.interval/#interval","text":"The Interval node is used to trigger the workflow to run in regular intervals of time. This node is a Trigger node. Keep in mind If a workflow is using the Interval node as a trigger, make sure that you save and activate the workflow. The Interval node has two fields: 1. Interval field: This is a numerical field where you can specify the interval after which the workflow should get triggered again. 2. Unit field: This is a dropdown list which allows you to select a unit for the value that was provided for the Interval field. This field offers the following options for its dropdown list: - Seconds - Minutes - Hours","title":"Interval"},{"location":"integrations/core-nodes/n8n-nodes-base.itemLists/","text":"Item Lists # The Item Lists node simplifies working with returned data that contain lists (arrays), enabling you to easily modify the structure for further processing without the need to use Function nodes and write custom JavaScript. Operations # The Item Lists node enables you to perform the following operations: Split Out Items : Create separate items from a list of data within an item. Aggregate Items : Merge multiple items into a single new item. Remove Duplicates : Remove extraneous items. Sort : Change the ordering of items. Limit : Remove items beyond a defined maximum number. Usually, you shouldn't use expressions for fields that expect a key value (for example, Field to Split Out ). Expressions usually return values, not keys. Split Out Items # This operation is useful if your data contains a list of items, for example a list of customers, and you want to split them so that you have an item for each customer. When using the Split Out Items operation, configure the following parameters and options: Field to Split Out : The field containing the list you want to separate out into individual items (e.g. Name in the example here). Must be plaintext and not an expression. Include : Select if any other fields from the input data should be kept with each new individual item. You can select: No Other Fields All Other Fields Selected Other Fields : When selected, a Fields to Include field is displayed. Enter a comma separated list of desired fields. Disable Dot Notation : When disabled, child fields (in the format parent.child ) cannot be referenced. Destination Field Name : Optionally set the field name under which to put the new split contents. Aggregate Items # The Aggregate Items operations is useful when you want to take many separate items, or just particular portions of them, and group them together into individual items. For example, the image below shows customer names and email addresses being grouped into individual items from a series of individual customer records that contained many other details. When using the Aggregate Items operation, configure the following parameters and options: Field To Aggregate : The name of the field in the input data to be aggregated together. Rename Field : Enable this toggle to enter a field name for the aggregated output data. When aggregating multiple fields you must provide new output field names, multiple fields cannot be left undefined . Output Field Name : Displayed only when Rename Field is enabled. The field name for the aggregated output data. Disable Dot Notation : When disabled, child fields (in the format parent.child ) cannot be referenced. Preserve Aggregated Lists : If enabled, fields to aggregate that are lists will output a list of lists (rather than being merged into a single list). Remove Duplicates # There are many situations where you can end up with duplicate data, a user creating multiple accounts, a customer submitting the same order multiple time, etc. When working with large datasets it becomes more difficult to easily spot and remove these items. The Remove Duplicates operation allows you to identify those items that are identical across all fields or only a desired subset of fields. When using the Remove Duplicates operation, configure the following parameters and options: Compare : Provide which fields of the input data should be compared to check if they are the same. The following options are available: All Fields : Compares all fields of the input data. All Fields Except : Enter which input data fields should be excluded from the comparison. Multiple values can be provided separated by commas. Selected Fields : Enter which input data fields should be included in the comparison. Multiple values can be provided separated by commas. Disable Dot Notation : When disabled, child fields (in the format parent.child ) cannot be referenced. Sort # The Sort operation allows you to organize lists of in a desired ordering, or generate a random selection if desired (i.e. assign tasks to users randomly). Keep in mind The Sort operation uses the default JavaScript operation where the elements to be sorted are converted into strings and their values compared. See here to learn more. When using the Sort operation, configure the following parameters and options: Type : Use the dropdown to select how you want to input the sorting. The following options are available: Simple : When you selected, you can use the Add Field To Sort By button to input the desired fields, and select whether Ascending or Descending* order is desired. Random : Select to create a random order in the list. Code : When selected, displays a code input field where you can enter custom JavaScript code to perform the sort operation. Limit # If you want to keep and process only a specific number of items from your incoming data, the Limit operation allows you to select the desired number of items to keep and whether they should be taken from the beginning or end of the data (e.g. take the 5 highest priority tickets, the oldest order, etc.). When using the Limit operation, configure the following parameters and options: Max Items : Enter the maximum number of items that should be kept. If the input data contains more than this value, items will be removed. Keep : When items must be removed, select if the input items at the beginning or end are kept.","title":"Item Lists"},{"location":"integrations/core-nodes/n8n-nodes-base.itemLists/#item-lists","text":"The Item Lists node simplifies working with returned data that contain lists (arrays), enabling you to easily modify the structure for further processing without the need to use Function nodes and write custom JavaScript.","title":"Item Lists"},{"location":"integrations/core-nodes/n8n-nodes-base.itemLists/#operations","text":"The Item Lists node enables you to perform the following operations: Split Out Items : Create separate items from a list of data within an item. Aggregate Items : Merge multiple items into a single new item. Remove Duplicates : Remove extraneous items. Sort : Change the ordering of items. Limit : Remove items beyond a defined maximum number. Usually, you shouldn't use expressions for fields that expect a key value (for example, Field to Split Out ). Expressions usually return values, not keys.","title":"Operations"},{"location":"integrations/core-nodes/n8n-nodes-base.itemLists/#split-out-items","text":"This operation is useful if your data contains a list of items, for example a list of customers, and you want to split them so that you have an item for each customer. When using the Split Out Items operation, configure the following parameters and options: Field to Split Out : The field containing the list you want to separate out into individual items (e.g. Name in the example here). Must be plaintext and not an expression. Include : Select if any other fields from the input data should be kept with each new individual item. You can select: No Other Fields All Other Fields Selected Other Fields : When selected, a Fields to Include field is displayed. Enter a comma separated list of desired fields. Disable Dot Notation : When disabled, child fields (in the format parent.child ) cannot be referenced. Destination Field Name : Optionally set the field name under which to put the new split contents.","title":"Split Out Items"},{"location":"integrations/core-nodes/n8n-nodes-base.itemLists/#aggregate-items","text":"The Aggregate Items operations is useful when you want to take many separate items, or just particular portions of them, and group them together into individual items. For example, the image below shows customer names and email addresses being grouped into individual items from a series of individual customer records that contained many other details. When using the Aggregate Items operation, configure the following parameters and options: Field To Aggregate : The name of the field in the input data to be aggregated together. Rename Field : Enable this toggle to enter a field name for the aggregated output data. When aggregating multiple fields you must provide new output field names, multiple fields cannot be left undefined . Output Field Name : Displayed only when Rename Field is enabled. The field name for the aggregated output data. Disable Dot Notation : When disabled, child fields (in the format parent.child ) cannot be referenced. Preserve Aggregated Lists : If enabled, fields to aggregate that are lists will output a list of lists (rather than being merged into a single list).","title":"Aggregate Items"},{"location":"integrations/core-nodes/n8n-nodes-base.itemLists/#remove-duplicates","text":"There are many situations where you can end up with duplicate data, a user creating multiple accounts, a customer submitting the same order multiple time, etc. When working with large datasets it becomes more difficult to easily spot and remove these items. The Remove Duplicates operation allows you to identify those items that are identical across all fields or only a desired subset of fields. When using the Remove Duplicates operation, configure the following parameters and options: Compare : Provide which fields of the input data should be compared to check if they are the same. The following options are available: All Fields : Compares all fields of the input data. All Fields Except : Enter which input data fields should be excluded from the comparison. Multiple values can be provided separated by commas. Selected Fields : Enter which input data fields should be included in the comparison. Multiple values can be provided separated by commas. Disable Dot Notation : When disabled, child fields (in the format parent.child ) cannot be referenced.","title":"Remove Duplicates"},{"location":"integrations/core-nodes/n8n-nodes-base.itemLists/#sort","text":"The Sort operation allows you to organize lists of in a desired ordering, or generate a random selection if desired (i.e. assign tasks to users randomly). Keep in mind The Sort operation uses the default JavaScript operation where the elements to be sorted are converted into strings and their values compared. See here to learn more. When using the Sort operation, configure the following parameters and options: Type : Use the dropdown to select how you want to input the sorting. The following options are available: Simple : When you selected, you can use the Add Field To Sort By button to input the desired fields, and select whether Ascending or Descending* order is desired. Random : Select to create a random order in the list. Code : When selected, displays a code input field where you can enter custom JavaScript code to perform the sort operation.","title":"Sort"},{"location":"integrations/core-nodes/n8n-nodes-base.itemLists/#limit","text":"If you want to keep and process only a specific number of items from your incoming data, the Limit operation allows you to select the desired number of items to keep and whether they should be taken from the beginning or end of the data (e.g. take the 5 highest priority tickets, the oldest order, etc.). When using the Limit operation, configure the following parameters and options: Max Items : Enter the maximum number of items that should be kept. If the input data contains more than this value, items will be removed. Keep : When items must be removed, select if the input items at the beginning or end are kept.","title":"Limit"},{"location":"integrations/core-nodes/n8n-nodes-base.localFileTrigger/","text":"Local File Trigger # The Local File Trigger node starts a workflow when changes on the file system are detected. These changes involve a file or folder geting added, changed or deleted. Node Reference # Trigger On: Changes to a Specifc File: Triggers when the specified file is changed Changes Involving a Specific Folder: Triggers when the a change in the selected folder occurs Additional Fields: File to Watch: The path to the file to watch. This field is shown when 'Trigger On' is set to 'Changes to a Specifc File'. Folder to Watch: The path of the folder to watch. This field is shown when 'Trigger On' is set to 'Changes Involving a Specific Folder'. Watch for: The type of change to watch for. This field is shown when 'Trigger On' is set to 'Changes Involving a Specific Folder'. Options: Include Linked Files/Folders: Also watch for changes to linked files or folders. Ignore: Files or paths to ignore. The whole path is tested, not just the filename. Supports the Anymatch syntax. Max Folder Depth: How deep into the folder structure to watch for changes.","title":"Local File Trigger"},{"location":"integrations/core-nodes/n8n-nodes-base.localFileTrigger/#local-file-trigger","text":"The Local File Trigger node starts a workflow when changes on the file system are detected. These changes involve a file or folder geting added, changed or deleted.","title":"Local File Trigger"},{"location":"integrations/core-nodes/n8n-nodes-base.localFileTrigger/#node-reference","text":"Trigger On: Changes to a Specifc File: Triggers when the specified file is changed Changes Involving a Specific Folder: Triggers when the a change in the selected folder occurs Additional Fields: File to Watch: The path to the file to watch. This field is shown when 'Trigger On' is set to 'Changes to a Specifc File'. Folder to Watch: The path of the folder to watch. This field is shown when 'Trigger On' is set to 'Changes Involving a Specific Folder'. Watch for: The type of change to watch for. This field is shown when 'Trigger On' is set to 'Changes Involving a Specific Folder'. Options: Include Linked Files/Folders: Also watch for changes to linked files or folders. Ignore: Files or paths to ignore. The whole path is tested, not just the filename. Supports the Anymatch syntax. Max Folder Depth: How deep into the folder structure to watch for changes.","title":"Node Reference"},{"location":"integrations/core-nodes/n8n-nodes-base.merge/","text":"Merge # The Merge node is useful to merge data of multiple streams, once data of both streams is available. Node Reference # Mode # Keep in mind The items passed into Input 1 of the Merge node will take precedence. For example, if 5 items are received in Input 1 and 10 items are received in Input 2, the Merge node will only process 5 items. The remaining 5 items from Input 2 will not be processed. You can specify how data of branches should be merged. The following options are available: Append: Combines data of both inputs. The output will contain items of input 1 and input 2. Keep Key Matches: Keeps data of input 1 if it finds a match with data of input 2. Merge By Index: Merges data of both the inputs. The output will contain the data of input 1 merged with the data of input 2. The merge occurs based on the index of the items. For example, the first item of input 1 will be merged with the first item of input 2. Merge By Key: Merges data of both the inputs. The output will contain the data of input 1 merged with the data of input 2. The merge occurs depending on a defined key. Multiples: Merges each value of one input with each value of the other input. The output will contain (m*n) items where (m) and (n) are lengths of the inputs. Pass-through: Passes through the data of one input. The output will contain items of the defined input. Remove Key Matches: Keeps the data of input 1 if it does not find a match with the data of input 2. Wait: Waits till the data of both the inputs is available. It will then output a single empty item. Additional Fields # Property Input 1: The name of the property which decides which items of input 1 to merge. This field is displayed when 'Keep Key Matches', 'Merge By Key', or 'Remove Key Matches' is selected in the Mode dropdown list. Property Input 2: The name of the property which decides which items of input 2 to merge. This field is displayed when 'Keep Key Matches', 'Merge By Key', or 'Remove Key Matches' is selected in the Mode dropdown list. Join: Use this to specify how many items the output should contain if inputs contain different amount of items. This field is displayed when 'Merge By Index' is selected in the Mode dropdown list. You can select from the following options. Inner Join: Merges as many items as both the inputs contains. For example, if input 1 contains 3 items and input 2 contains 3 items, the output will contain 3 items. Left Join: Merges as many items as the first input contains. For example, if input 1 contains 3 items and input 2 contains 5 items, the output will contain 3 items. Outer Join: Merges as many items as input contains with most items. For example, if input 1 contains 3 items and input 2 contains 5 items, the output will contain 5 items. Overwrite: Select when to overwrite the values from Input1 with values from Input 2. This field is displayed when 'Merge By Key' is selected from the Mode dropdown list. You can select from the following options. Always: Always overwrites everything. If Blank: Overwrites only values of 'null', 'undefined' or the empty strings. If Missing: Only adds values which do not exist yet. Output Data: Defines which input data should be used as the output of the node. This field is displayed when 'Pass-through' is selected from the Mode dropdown list. You can select from the following options. Input 1 Input 2 Example Usage # This workflow allows you to merge greetings for the users based on their associated language using the Merge node. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - Funtion - Merge The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Function node # Paste the following JavaScript code snippet in the Function field. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 return [ { json : { name : 'Stefan' , language : 'de' , } }, { json : { name : 'Jim' , language : 'en' , } }, { json : { name : 'Hans' , language : 'de' , } } ]; Click on Execute Node to run the node. 3. Function1 node # Paste the following JavaScript code snippet in the Function field. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 return [ { json : { greeting : 'Hallo' , language : 'de' , } }, { json : { greeting : 'Hello' , language : 'en' , } } ]; Click on Execute Node to run the node. 4. Merge node (mergeByKey) # Select 'Merge By Key' from the Mode dropdown list. Enter language in the Property Input 1 field. Enter language in the Property Input 2 field. Click on Execute Node to run the node.","title":"Merge"},{"location":"integrations/core-nodes/n8n-nodes-base.merge/#merge","text":"The Merge node is useful to merge data of multiple streams, once data of both streams is available.","title":"Merge"},{"location":"integrations/core-nodes/n8n-nodes-base.merge/#node-reference","text":"","title":"Node Reference"},{"location":"integrations/core-nodes/n8n-nodes-base.merge/#mode","text":"Keep in mind The items passed into Input 1 of the Merge node will take precedence. For example, if 5 items are received in Input 1 and 10 items are received in Input 2, the Merge node will only process 5 items. The remaining 5 items from Input 2 will not be processed. You can specify how data of branches should be merged. The following options are available: Append: Combines data of both inputs. The output will contain items of input 1 and input 2. Keep Key Matches: Keeps data of input 1 if it finds a match with data of input 2. Merge By Index: Merges data of both the inputs. The output will contain the data of input 1 merged with the data of input 2. The merge occurs based on the index of the items. For example, the first item of input 1 will be merged with the first item of input 2. Merge By Key: Merges data of both the inputs. The output will contain the data of input 1 merged with the data of input 2. The merge occurs depending on a defined key. Multiples: Merges each value of one input with each value of the other input. The output will contain (m*n) items where (m) and (n) are lengths of the inputs. Pass-through: Passes through the data of one input. The output will contain items of the defined input. Remove Key Matches: Keeps the data of input 1 if it does not find a match with the data of input 2. Wait: Waits till the data of both the inputs is available. It will then output a single empty item.","title":"Mode"},{"location":"integrations/core-nodes/n8n-nodes-base.merge/#additional-fields","text":"Property Input 1: The name of the property which decides which items of input 1 to merge. This field is displayed when 'Keep Key Matches', 'Merge By Key', or 'Remove Key Matches' is selected in the Mode dropdown list. Property Input 2: The name of the property which decides which items of input 2 to merge. This field is displayed when 'Keep Key Matches', 'Merge By Key', or 'Remove Key Matches' is selected in the Mode dropdown list. Join: Use this to specify how many items the output should contain if inputs contain different amount of items. This field is displayed when 'Merge By Index' is selected in the Mode dropdown list. You can select from the following options. Inner Join: Merges as many items as both the inputs contains. For example, if input 1 contains 3 items and input 2 contains 3 items, the output will contain 3 items. Left Join: Merges as many items as the first input contains. For example, if input 1 contains 3 items and input 2 contains 5 items, the output will contain 3 items. Outer Join: Merges as many items as input contains with most items. For example, if input 1 contains 3 items and input 2 contains 5 items, the output will contain 5 items. Overwrite: Select when to overwrite the values from Input1 with values from Input 2. This field is displayed when 'Merge By Key' is selected from the Mode dropdown list. You can select from the following options. Always: Always overwrites everything. If Blank: Overwrites only values of 'null', 'undefined' or the empty strings. If Missing: Only adds values which do not exist yet. Output Data: Defines which input data should be used as the output of the node. This field is displayed when 'Pass-through' is selected from the Mode dropdown list. You can select from the following options. Input 1 Input 2","title":"Additional Fields"},{"location":"integrations/core-nodes/n8n-nodes-base.merge/#example-usage","text":"This workflow allows you to merge greetings for the users based on their associated language using the Merge node. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - Funtion - Merge The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/core-nodes/n8n-nodes-base.merge/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/core-nodes/n8n-nodes-base.merge/#2-function-node","text":"Paste the following JavaScript code snippet in the Function field. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 return [ { json : { name : 'Stefan' , language : 'de' , } }, { json : { name : 'Jim' , language : 'en' , } }, { json : { name : 'Hans' , language : 'de' , } } ]; Click on Execute Node to run the node.","title":"2. Function node"},{"location":"integrations/core-nodes/n8n-nodes-base.merge/#3-function1-node","text":"Paste the following JavaScript code snippet in the Function field. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 return [ { json : { greeting : 'Hallo' , language : 'de' , } }, { json : { greeting : 'Hello' , language : 'en' , } } ]; Click on Execute Node to run the node.","title":"3. Function1 node"},{"location":"integrations/core-nodes/n8n-nodes-base.merge/#4-merge-node-mergebykey","text":"Select 'Merge By Key' from the Mode dropdown list. Enter language in the Property Input 1 field. Enter language in the Property Input 2 field. Click on Execute Node to run the node.","title":"4. Merge node (mergeByKey)"},{"location":"integrations/core-nodes/n8n-nodes-base.moveBinaryData/","text":"Move Binary Data # The Move Binary Data node is useful to move data between binary and JSON properties. Hint If you need to convert an entire CSV file to JSON, use the Spreadsheet File node. Node Reference # Mode: This field specifies from where and to the data should be moved. Binary to JSON JSON to Binary Set all Data: If set to active, all JSON data is replaced with the data retrieved from binary key. If it is not set to active, the data will be written to a single key. This field is displayed when 'Binary to JSON' is selected from the Mode dropdown list. Source Key: The name of the binary key to get data from. It is also possible to define deep keys by using dot-notation. For example, \"level1.level2.currentKey\". This field is displayed when 'Binary to JSON' is selected from the Mode dropdown list. Destination Key: The name the JSON key to copy data to. It is also possible to define deep keys by using dot-notation. For example, \"level1.level2.newKey\". This field is displayed when 'Binary to JSON' is selected from the Mode dropdown list. Convert all Data: If set to active all JSON data will be converted to binary. If it is not set to active only the data with one key will be converted. This field is displayed when 'JSON to Binary' is selected from the Mode dropdown list. Destination Key: The name of the binary key to copy data to. It is also possible to define deep keys by using dot-notation. For example, \"level1.level2.newKey\". This field is displayed when 'JSON to Binary' is selected from the Mode dropdown list. Options Keep Source: Keep the source key. By default it gets deleted. Encoding: Set the encoding of the data stream. The following are the options when 'Binary to JSON' is selected from the Mode dropdown list. JSON Parse: Run JSON parse on the data to get proper object data. This field is displayed when Set all Data is set to 'false'. Keep As Base64: Keeps the binary data as base64 string. This field is displayed when Set all Data is set to 'false'. Strip BOM: Strip the byte order mark (BOM) from the string. This field is displayed when Encoding is selected. The following are the options when 'JSON to Binary' is selected from the Mode dropdown list. Add BOM: Add the byte order mark (BOM) to the string. This field is displayed when Encoding is selected. File Name: The file name to set. Mime Type: The mime-type to set. By default the JSON mime-type will be set. Use Raw Data: Use data as is and do not stringify it. Data is Base64: Keeps the binary data as base64 string. This field is displayed when Convert all Data is set to 'false'. Example Usage # This workflow allows you to store the JSON data received from the CocktailDB API to your machine. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - HTTP Request - Write Binary Data The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. HTTP Request node (GET) # Enter https://www.thecocktaildb.com/api/json/v1/1/random.php in the URL field. Click on Execute Node to run the node. 3. Move Binary Data node (JSON to Binary) # Select 'JSON to Binary' from the Mode dropdown list. Click on Execute Node to run the node. 4. Write Binary File node # Enter the file name in the File Name field. Click on Execute Node to run the node.","title":"Move Binary Data"},{"location":"integrations/core-nodes/n8n-nodes-base.moveBinaryData/#move-binary-data","text":"The Move Binary Data node is useful to move data between binary and JSON properties. Hint If you need to convert an entire CSV file to JSON, use the Spreadsheet File node.","title":"Move Binary Data"},{"location":"integrations/core-nodes/n8n-nodes-base.moveBinaryData/#node-reference","text":"Mode: This field specifies from where and to the data should be moved. Binary to JSON JSON to Binary Set all Data: If set to active, all JSON data is replaced with the data retrieved from binary key. If it is not set to active, the data will be written to a single key. This field is displayed when 'Binary to JSON' is selected from the Mode dropdown list. Source Key: The name of the binary key to get data from. It is also possible to define deep keys by using dot-notation. For example, \"level1.level2.currentKey\". This field is displayed when 'Binary to JSON' is selected from the Mode dropdown list. Destination Key: The name the JSON key to copy data to. It is also possible to define deep keys by using dot-notation. For example, \"level1.level2.newKey\". This field is displayed when 'Binary to JSON' is selected from the Mode dropdown list. Convert all Data: If set to active all JSON data will be converted to binary. If it is not set to active only the data with one key will be converted. This field is displayed when 'JSON to Binary' is selected from the Mode dropdown list. Destination Key: The name of the binary key to copy data to. It is also possible to define deep keys by using dot-notation. For example, \"level1.level2.newKey\". This field is displayed when 'JSON to Binary' is selected from the Mode dropdown list. Options Keep Source: Keep the source key. By default it gets deleted. Encoding: Set the encoding of the data stream. The following are the options when 'Binary to JSON' is selected from the Mode dropdown list. JSON Parse: Run JSON parse on the data to get proper object data. This field is displayed when Set all Data is set to 'false'. Keep As Base64: Keeps the binary data as base64 string. This field is displayed when Set all Data is set to 'false'. Strip BOM: Strip the byte order mark (BOM) from the string. This field is displayed when Encoding is selected. The following are the options when 'JSON to Binary' is selected from the Mode dropdown list. Add BOM: Add the byte order mark (BOM) to the string. This field is displayed when Encoding is selected. File Name: The file name to set. Mime Type: The mime-type to set. By default the JSON mime-type will be set. Use Raw Data: Use data as is and do not stringify it. Data is Base64: Keeps the binary data as base64 string. This field is displayed when Convert all Data is set to 'false'.","title":"Node Reference"},{"location":"integrations/core-nodes/n8n-nodes-base.moveBinaryData/#example-usage","text":"This workflow allows you to store the JSON data received from the CocktailDB API to your machine. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - HTTP Request - Write Binary Data The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/core-nodes/n8n-nodes-base.moveBinaryData/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/core-nodes/n8n-nodes-base.moveBinaryData/#2-http-request-node-get","text":"Enter https://www.thecocktaildb.com/api/json/v1/1/random.php in the URL field. Click on Execute Node to run the node.","title":"2. HTTP Request node (GET)"},{"location":"integrations/core-nodes/n8n-nodes-base.moveBinaryData/#3-move-binary-data-node-json-to-binary","text":"Select 'JSON to Binary' from the Mode dropdown list. Click on Execute Node to run the node.","title":"3. Move Binary Data node (JSON to Binary)"},{"location":"integrations/core-nodes/n8n-nodes-base.moveBinaryData/#4-write-binary-file-node","text":"Enter the file name in the File Name field. Click on Execute Node to run the node.","title":"4. Write Binary File node"},{"location":"integrations/core-nodes/n8n-nodes-base.n8nTrigger/","text":"n8n Trigger # The n8n Trigger node gets triggered when the n8n instance is started or restarted. The n8n Trigger node can be used to notify when the n8n instance starts. Node Reference # Events Instance started: Triggers when the n8n instance is started or restarted Example Usage # This workflow allows you to receive a message on Mattermost when your n8n instance starts. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - n8n Trigger - Mattermost The final workflow should look like the following image. 1. n8n Trigger node # The n8n Trigger node will trigger the workflow whenever n8n starts. Select 'Instance started' from the Events dropdown list. In the screenshot below, you will notice that the node triggers the workflow when the n8n instance starts. 2. Mattermost node (post: message) # This node will send a message in the workflow channel on Mattermost. First of all, you'll have to enter credentials for the Mattermost node. You can find out how to enter credentials for this node here . Select a channel from the Channel ID dropdown list. Click on the gears icon next to the Message field click on Add Expression . Enter the following message in the Expression field: Your n8n instance started at {{$json[\"timestamp\"]}}. . Click on Execute Node to run the workflow. In the screenshot below, you will notice that the node sends a message to Mattermost. Activate workflow for production This example workflow uses the n8n Trigger node, which is a Trigger node. You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow.","title":"n8n Trigger"},{"location":"integrations/core-nodes/n8n-nodes-base.n8nTrigger/#n8n-trigger","text":"The n8n Trigger node gets triggered when the n8n instance is started or restarted. The n8n Trigger node can be used to notify when the n8n instance starts.","title":"n8n Trigger"},{"location":"integrations/core-nodes/n8n-nodes-base.n8nTrigger/#node-reference","text":"Events Instance started: Triggers when the n8n instance is started or restarted","title":"Node Reference"},{"location":"integrations/core-nodes/n8n-nodes-base.n8nTrigger/#example-usage","text":"This workflow allows you to receive a message on Mattermost when your n8n instance starts. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - n8n Trigger - Mattermost The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/core-nodes/n8n-nodes-base.n8nTrigger/#1-n8n-trigger-node","text":"The n8n Trigger node will trigger the workflow whenever n8n starts. Select 'Instance started' from the Events dropdown list. In the screenshot below, you will notice that the node triggers the workflow when the n8n instance starts.","title":"1. n8n Trigger node"},{"location":"integrations/core-nodes/n8n-nodes-base.n8nTrigger/#2-mattermost-node-post-message","text":"This node will send a message in the workflow channel on Mattermost. First of all, you'll have to enter credentials for the Mattermost node. You can find out how to enter credentials for this node here . Select a channel from the Channel ID dropdown list. Click on the gears icon next to the Message field click on Add Expression . Enter the following message in the Expression field: Your n8n instance started at {{$json[\"timestamp\"]}}. . Click on Execute Node to run the workflow. In the screenshot below, you will notice that the node sends a message to Mattermost. Activate workflow for production This example workflow uses the n8n Trigger node, which is a Trigger node. You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow.","title":"2. Mattermost node (post: message)"},{"location":"integrations/core-nodes/n8n-nodes-base.noOp/","text":"No Operation, do nothing # The No Operation, do nothing node is used when you don't want to perform any operations. The purpose of this node is to make the workflow easier to read and understand where the flow of data stops. This can sometimes help others with a better understanding of the workflow, visually.","title":"No Operation, do nothing"},{"location":"integrations/core-nodes/n8n-nodes-base.noOp/#no-operation-do-nothing","text":"The No Operation, do nothing node is used when you don't want to perform any operations. The purpose of this node is to make the workflow easier to read and understand where the flow of data stops. This can sometimes help others with a better understanding of the workflow, visually.","title":"No Operation, do nothing"},{"location":"integrations/core-nodes/n8n-nodes-base.readBinaryFile/","text":"Read Binary File # The Read Binary File node is used to read a file from the host machine that runs n8n. Keep in mind If you are running n8n in Docker, your command will run on the n8n container and not the Docker host. This node will look for files relative to the n8n install path. It is recommended to use absolute file paths to prevent any errors. Node Reference # File Path field: This field specifies the path to the file. Property Name field: Name of the binary property to which to write the data of the read file. Example Usage # This workflow allows you to read a file from the host machine using the Read Binary File node. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Read Binary File The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Read Binary File node # Enter the path to the file you want to read in the File Path field. Click on Execute Node to run the workflow.","title":"Read Binary File"},{"location":"integrations/core-nodes/n8n-nodes-base.readBinaryFile/#read-binary-file","text":"The Read Binary File node is used to read a file from the host machine that runs n8n. Keep in mind If you are running n8n in Docker, your command will run on the n8n container and not the Docker host. This node will look for files relative to the n8n install path. It is recommended to use absolute file paths to prevent any errors.","title":"Read Binary File"},{"location":"integrations/core-nodes/n8n-nodes-base.readBinaryFile/#node-reference","text":"File Path field: This field specifies the path to the file. Property Name field: Name of the binary property to which to write the data of the read file.","title":"Node Reference"},{"location":"integrations/core-nodes/n8n-nodes-base.readBinaryFile/#example-usage","text":"This workflow allows you to read a file from the host machine using the Read Binary File node. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Read Binary File The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/core-nodes/n8n-nodes-base.readBinaryFile/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/core-nodes/n8n-nodes-base.readBinaryFile/#2-read-binary-file-node","text":"Enter the path to the file you want to read in the File Path field. Click on Execute Node to run the workflow.","title":"2. Read Binary File node"},{"location":"integrations/core-nodes/n8n-nodes-base.readBinaryFiles/","text":"Read Binary Files # The Read Binary Files node is used to read multiple files from the host machine that runs n8n. Keep in mind If you are running n8n in Docker, your command will run on the n8n container and not the Docker host. This node will look for files relative to the n8n install path. It is recommended to use absolute file paths to prevent any errors. Node Reference # File Selector field: This is a field that is used to specify the type of files to be read. For example, *.jpg . Property Name field: Name of the binary property to which to write the data of the read files. It is also possible to select files from a certain directory, by specifying the path in the File Selector field. For example, /data/folder/*.jpg . Example Usage # This workflow allows you to read multiple files from the host machine using the Read Binary Files node. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Read Binary Files The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Read Binary Files node # Enter the type of files you want to read in the File Selector field. Click on Execute Node to run the workflow.","title":"Read Binary Files"},{"location":"integrations/core-nodes/n8n-nodes-base.readBinaryFiles/#read-binary-files","text":"The Read Binary Files node is used to read multiple files from the host machine that runs n8n. Keep in mind If you are running n8n in Docker, your command will run on the n8n container and not the Docker host. This node will look for files relative to the n8n install path. It is recommended to use absolute file paths to prevent any errors.","title":"Read Binary Files"},{"location":"integrations/core-nodes/n8n-nodes-base.readBinaryFiles/#node-reference","text":"File Selector field: This is a field that is used to specify the type of files to be read. For example, *.jpg . Property Name field: Name of the binary property to which to write the data of the read files. It is also possible to select files from a certain directory, by specifying the path in the File Selector field. For example, /data/folder/*.jpg .","title":"Node Reference"},{"location":"integrations/core-nodes/n8n-nodes-base.readBinaryFiles/#example-usage","text":"This workflow allows you to read multiple files from the host machine using the Read Binary Files node. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Read Binary Files The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/core-nodes/n8n-nodes-base.readBinaryFiles/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/core-nodes/n8n-nodes-base.readBinaryFiles/#2-read-binary-files-node","text":"Enter the type of files you want to read in the File Selector field. Click on Execute Node to run the workflow.","title":"2. Read Binary Files node"},{"location":"integrations/core-nodes/n8n-nodes-base.readPDF/","text":"Read PDF # The Read PDF node is used to read data from PDF documents and extract its content as text. Keep in mind You will need to use an additional node such as the Read Binary File node or the HTTP Request node to pass the image file as a data property to the Read PDF node. Node Reference # The Read PDF node has one property: Binary Property field: This field specifies the name of the data property used to read the PDF file in n8n. Example Usage # This workflow allows you to read a PDF file using the Read PDF node. You can also find the workflow on the website. This example usage workflow would use the following three nodes. - Start - Read Binary File - PDF Read The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Read Binary File # Enter the path to the PDF file you want to read in the File Path field. 3. Read PDF node # Enter the Property Name you used in the previous node in the Binary Property field. Click on Execute Node to run the workflow.","title":"Read PDF"},{"location":"integrations/core-nodes/n8n-nodes-base.readPDF/#read-pdf","text":"The Read PDF node is used to read data from PDF documents and extract its content as text. Keep in mind You will need to use an additional node such as the Read Binary File node or the HTTP Request node to pass the image file as a data property to the Read PDF node.","title":"Read PDF"},{"location":"integrations/core-nodes/n8n-nodes-base.readPDF/#node-reference","text":"The Read PDF node has one property: Binary Property field: This field specifies the name of the data property used to read the PDF file in n8n.","title":"Node Reference"},{"location":"integrations/core-nodes/n8n-nodes-base.readPDF/#example-usage","text":"This workflow allows you to read a PDF file using the Read PDF node. You can also find the workflow on the website. This example usage workflow would use the following three nodes. - Start - Read Binary File - PDF Read The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/core-nodes/n8n-nodes-base.readPDF/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/core-nodes/n8n-nodes-base.readPDF/#2-read-binary-file","text":"Enter the path to the PDF file you want to read in the File Path field.","title":"2. Read Binary File"},{"location":"integrations/core-nodes/n8n-nodes-base.readPDF/#3-read-pdf-node","text":"Enter the Property Name you used in the previous node in the Binary Property field. Click on Execute Node to run the workflow.","title":"3. Read PDF node"},{"location":"integrations/core-nodes/n8n-nodes-base.renameKeys/","text":"Rename Keys # The Rename Keys node is used to rename the keys of a key-value pair in n8n. Node Reference # You can rename one or multiple keys using the Rename Keys node. Click on the Add new key button to rename a key. There are two properties in the Rename Keys node. Current Key Name field: The current name of the key that you would like to rename. New Key Name field: The new name that you would like to assign to the key. Example Usage # This workflow allows you to rename a key using the Rename Keys node. You can also find the workflow on the website. This example usage workflow would use the following three nodes. - Start - Set - Rename Keys The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Set node # Click on the Add Value button and select the 'String' option from the dropdown list. Enter a name for the key in the Name field and enter a value in the Value field. 3. Rename Keys node # Click on the Add new key button. Enter the name of the key you created in the previous step in the Current Key Name field. Enter the new name that you would like to give the key in the New Key Name field. Click on Execute Node to run the workflow.","title":"Rename Keys"},{"location":"integrations/core-nodes/n8n-nodes-base.renameKeys/#rename-keys","text":"The Rename Keys node is used to rename the keys of a key-value pair in n8n.","title":"Rename Keys"},{"location":"integrations/core-nodes/n8n-nodes-base.renameKeys/#node-reference","text":"You can rename one or multiple keys using the Rename Keys node. Click on the Add new key button to rename a key. There are two properties in the Rename Keys node. Current Key Name field: The current name of the key that you would like to rename. New Key Name field: The new name that you would like to assign to the key.","title":"Node Reference"},{"location":"integrations/core-nodes/n8n-nodes-base.renameKeys/#example-usage","text":"This workflow allows you to rename a key using the Rename Keys node. You can also find the workflow on the website. This example usage workflow would use the following three nodes. - Start - Set - Rename Keys The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/core-nodes/n8n-nodes-base.renameKeys/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/core-nodes/n8n-nodes-base.renameKeys/#2-set-node","text":"Click on the Add Value button and select the 'String' option from the dropdown list. Enter a name for the key in the Name field and enter a value in the Value field.","title":"2. Set node"},{"location":"integrations/core-nodes/n8n-nodes-base.renameKeys/#3-rename-keys-node","text":"Click on the Add new key button. Enter the name of the key you created in the previous step in the Current Key Name field. Enter the new name that you would like to give the key in the New Key Name field. Click on Execute Node to run the workflow.","title":"3. Rename Keys node"},{"location":"integrations/core-nodes/n8n-nodes-base.respondToWebhook/","text":"Respond to Webhook # The Respond to Webhook node can be used in workflows with a Webhook node. It allows controlling the response to incoming webhooks. In the Webhook node, the Using 'Respond to Webhook' node option would need to be selected in the Response dropdown for the Respond to Webhook node to work. Expressions When using expressions , the Respond to Webhook node will only run for the first item in the input data Node reference # The node supports the following modes through the Respond With field: First Incoming Item : Respond with the first incoming item's JSON. Text : Respond with a text defined in the Response Body field. JSON : Respond with a JSON object defined in the Response Body field. Binary : Respond with a binary file defined in the Response Data Source field. No Data : No response payload is sent. Available options: Response Code : Set the response code to be used. Response Headers : Define response headers to be sent. Workflow behaviour # When using the Respond to Webhook node, workflows will behave as follows: When the workflow finishes without executing the Respond to Webhook node, a standard message is returned with a 200 status. If a second Respond to Webhook node is executed after the first one, it is ignored. If the workflow errors before the first Respond to Webhook node is executed, an error message is returned with a 500 status. If a Respond to Webhook node is executed but there was no webhook, the Respond to Webhook node is ignored. Example Usage # This workflow allows serves an HTML page when receiving a GET requests. You can find the complete workflow here on n8n.io . The example workflow uses the following nodes: Webhook Respond to Webhook 1. Webhook node # This node will receive incoming requests (for example, when the webhook URL is opened with a browser). Enter a human-readable value in the path field, for example my-form . Choose the Using 'Respond to Webhook' node option Response dropdown. Click on Execute Node to run the node. Open the URL shown in the Test URL field under Webhook URLs in a new browser tab. 2. Respond to Webhook node # This node will define the response to the request received in the previous step. Connect the Webhook node from the previous step to the new Respond to Webhook node. Choose the Text option in the Respond With dropdown. Enter some basic HTML into the Response Body field (for example the Bootstrap Starter template ). Click Add Option > Response Headers > Add Response Header to add a header to the response. Enter Content-Type in the Name field and text/html; charset=UTF-8 in the value field of the new header. Close the Respond to Webhook modal and click the Execute Workflow button. Open the Test URL from the Webhook node in a new browser tab. The browser should now show the page added defined in the Response Body field of the Respond to Webhook node.","title":"Respond to Webhook"},{"location":"integrations/core-nodes/n8n-nodes-base.respondToWebhook/#respond-to-webhook","text":"The Respond to Webhook node can be used in workflows with a Webhook node. It allows controlling the response to incoming webhooks. In the Webhook node, the Using 'Respond to Webhook' node option would need to be selected in the Response dropdown for the Respond to Webhook node to work. Expressions When using expressions , the Respond to Webhook node will only run for the first item in the input data","title":"Respond to Webhook"},{"location":"integrations/core-nodes/n8n-nodes-base.respondToWebhook/#node-reference","text":"The node supports the following modes through the Respond With field: First Incoming Item : Respond with the first incoming item's JSON. Text : Respond with a text defined in the Response Body field. JSON : Respond with a JSON object defined in the Response Body field. Binary : Respond with a binary file defined in the Response Data Source field. No Data : No response payload is sent. Available options: Response Code : Set the response code to be used. Response Headers : Define response headers to be sent.","title":"Node reference"},{"location":"integrations/core-nodes/n8n-nodes-base.respondToWebhook/#workflow-behaviour","text":"When using the Respond to Webhook node, workflows will behave as follows: When the workflow finishes without executing the Respond to Webhook node, a standard message is returned with a 200 status. If a second Respond to Webhook node is executed after the first one, it is ignored. If the workflow errors before the first Respond to Webhook node is executed, an error message is returned with a 500 status. If a Respond to Webhook node is executed but there was no webhook, the Respond to Webhook node is ignored.","title":"Workflow behaviour"},{"location":"integrations/core-nodes/n8n-nodes-base.respondToWebhook/#example-usage","text":"This workflow allows serves an HTML page when receiving a GET requests. You can find the complete workflow here on n8n.io . The example workflow uses the following nodes: Webhook Respond to Webhook","title":"Example Usage"},{"location":"integrations/core-nodes/n8n-nodes-base.respondToWebhook/#1-webhook-node","text":"This node will receive incoming requests (for example, when the webhook URL is opened with a browser). Enter a human-readable value in the path field, for example my-form . Choose the Using 'Respond to Webhook' node option Response dropdown. Click on Execute Node to run the node. Open the URL shown in the Test URL field under Webhook URLs in a new browser tab.","title":"1. Webhook node"},{"location":"integrations/core-nodes/n8n-nodes-base.respondToWebhook/#2-respond-to-webhook-node","text":"This node will define the response to the request received in the previous step. Connect the Webhook node from the previous step to the new Respond to Webhook node. Choose the Text option in the Respond With dropdown. Enter some basic HTML into the Response Body field (for example the Bootstrap Starter template ). Click Add Option > Response Headers > Add Response Header to add a header to the response. Enter Content-Type in the Name field and text/html; charset=UTF-8 in the value field of the new header. Close the Respond to Webhook modal and click the Execute Workflow button. Open the Test URL from the Webhook node in a new browser tab. The browser should now show the page added defined in the Response Body field of the Respond to Webhook node.","title":"2. Respond to Webhook node"},{"location":"integrations/core-nodes/n8n-nodes-base.rssFeedRead/","text":"RSS Read # The RSS Read node is used to read data from RSS feeds published on the internet. Node Reference # The RSS Read node has only one property: URL field: This field is used to specify the web address of the RSS publication. Example Usage # This workflow allows you to read an RSS Feed using the RSS Read node. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - RSS Read The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. RSS Read node # Enter the URL of the RSS feed that you want to read in the URL field. Click on Execute Node to run the workflow.","title":"RSS Read"},{"location":"integrations/core-nodes/n8n-nodes-base.rssFeedRead/#rss-read","text":"The RSS Read node is used to read data from RSS feeds published on the internet.","title":"RSS Read"},{"location":"integrations/core-nodes/n8n-nodes-base.rssFeedRead/#node-reference","text":"The RSS Read node has only one property: URL field: This field is used to specify the web address of the RSS publication.","title":"Node Reference"},{"location":"integrations/core-nodes/n8n-nodes-base.rssFeedRead/#example-usage","text":"This workflow allows you to read an RSS Feed using the RSS Read node. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - RSS Read The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/core-nodes/n8n-nodes-base.rssFeedRead/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/core-nodes/n8n-nodes-base.rssFeedRead/#2-rss-read-node","text":"Enter the URL of the RSS feed that you want to read in the URL field. Click on Execute Node to run the workflow.","title":"2. RSS Read node"},{"location":"integrations/core-nodes/n8n-nodes-base.sendEmail/","text":"Send Email # The Send Email node is used to send an email via an SMTP email server. \ud83d\udd11 Credential You can find authentication information for this node here . Keep in mind Before sending, ensure that you have already created email addresses that are approved for sending on your SMTP service. The Send Email node merely sends an email via your SMTP server and plays no part in email deliverability. To attach a file, you will need to use an additional node such as the Read Binary File node or the HTTP Request node to pass a file as a data property. Basic Operations # Send an email Node Reference # From Email: The email address you are sending from. To Email: The recipient email address. CC Email: A field that can be used to specify an email address for a carbon copy of the email. BCC Email: A field that can be used to specify an email address for a blind carbon copy of the email. Subject: The subject of your message. Text: Your message, in plaintext. HTML: Your message, in HTML. Attachments: A field that can be used to attach any attachments as data properties. Example Usage # This workflow allows you to send an email using the Send Email node. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Send Email The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Send Email node # First of all, you'll have to enter credentials for the Send Email node. You can find out how to do that here . Enter the email address you want to send from in the From Email field. Enter the recipient email address in the To Email field. Enter a subject for your message in the Subject field. Enter your message in the Text field. Click on Execute Node to run the workflow.","title":"Send Email"},{"location":"integrations/core-nodes/n8n-nodes-base.sendEmail/#send-email","text":"The Send Email node is used to send an email via an SMTP email server. \ud83d\udd11 Credential You can find authentication information for this node here . Keep in mind Before sending, ensure that you have already created email addresses that are approved for sending on your SMTP service. The Send Email node merely sends an email via your SMTP server and plays no part in email deliverability. To attach a file, you will need to use an additional node such as the Read Binary File node or the HTTP Request node to pass a file as a data property.","title":"Send Email"},{"location":"integrations/core-nodes/n8n-nodes-base.sendEmail/#basic-operations","text":"Send an email","title":"Basic Operations"},{"location":"integrations/core-nodes/n8n-nodes-base.sendEmail/#node-reference","text":"From Email: The email address you are sending from. To Email: The recipient email address. CC Email: A field that can be used to specify an email address for a carbon copy of the email. BCC Email: A field that can be used to specify an email address for a blind carbon copy of the email. Subject: The subject of your message. Text: Your message, in plaintext. HTML: Your message, in HTML. Attachments: A field that can be used to attach any attachments as data properties.","title":"Node Reference"},{"location":"integrations/core-nodes/n8n-nodes-base.sendEmail/#example-usage","text":"This workflow allows you to send an email using the Send Email node. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Send Email The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/core-nodes/n8n-nodes-base.sendEmail/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/core-nodes/n8n-nodes-base.sendEmail/#2-send-email-node","text":"First of all, you'll have to enter credentials for the Send Email node. You can find out how to do that here . Enter the email address you want to send from in the From Email field. Enter the recipient email address in the To Email field. Enter a subject for your message in the Subject field. Enter your message in the Text field. Click on Execute Node to run the workflow.","title":"2. Send Email node"},{"location":"integrations/core-nodes/n8n-nodes-base.set/","text":"Set # The Set node allows you to set workflow data. This node can set completely new data as well as overwrite data that already exists. This node is crucial in workflows which expect incoming data from previous nodes, such as when inserting values to Google Sheets or databases. Example Usage # This workflow allows you to assign values to variables using the Set node. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Set The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Set node # Click on the Add Value button and select 'Number' from the dropdown list. Enter number in the Name field. Enter the value for the above field in the Value field. Click on the Add Value button and select 'String' from the dropdown list. Enter string in the Name field. Enter the value for the above field in the Value field. Click on the Add Value button and select 'Boolean' from the dropdown list. Enter boolean in the Name field. Toggle the value for the above field in the Value field. Click on Execute Node to run the workflow. Node Reference # Keep Only Set # There's an option to toggle the Keep Only Set field. Setting this to true ensures that only the values set on this node should be kept, and the values from all the previous nodes are removed. Dot Notation # By default, the node follows the dot notation for the Name field. That means if you set the name in the Name field as number.one and the value in the Value field as 20 , the resulting JSON would look like the following: 1 { \"number\" : { \"one\" : 20 } } You can deactivate this behaviour by clicking on the Add Option button and setting the Dot Notion field to off. Now the resulting JSON would look like the following: 1 { \"number.one\" : 20 }","title":"Set"},{"location":"integrations/core-nodes/n8n-nodes-base.set/#set","text":"The Set node allows you to set workflow data. This node can set completely new data as well as overwrite data that already exists. This node is crucial in workflows which expect incoming data from previous nodes, such as when inserting values to Google Sheets or databases.","title":"Set"},{"location":"integrations/core-nodes/n8n-nodes-base.set/#example-usage","text":"This workflow allows you to assign values to variables using the Set node. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Set The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/core-nodes/n8n-nodes-base.set/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/core-nodes/n8n-nodes-base.set/#2-set-node","text":"Click on the Add Value button and select 'Number' from the dropdown list. Enter number in the Name field. Enter the value for the above field in the Value field. Click on the Add Value button and select 'String' from the dropdown list. Enter string in the Name field. Enter the value for the above field in the Value field. Click on the Add Value button and select 'Boolean' from the dropdown list. Enter boolean in the Name field. Toggle the value for the above field in the Value field. Click on Execute Node to run the workflow.","title":"2. Set node"},{"location":"integrations/core-nodes/n8n-nodes-base.set/#node-reference","text":"","title":"Node Reference"},{"location":"integrations/core-nodes/n8n-nodes-base.set/#keep-only-set","text":"There's an option to toggle the Keep Only Set field. Setting this to true ensures that only the values set on this node should be kept, and the values from all the previous nodes are removed.","title":"Keep Only Set"},{"location":"integrations/core-nodes/n8n-nodes-base.set/#dot-notation","text":"By default, the node follows the dot notation for the Name field. That means if you set the name in the Name field as number.one and the value in the Value field as 20 , the resulting JSON would look like the following: 1 { \"number\" : { \"one\" : 20 } } You can deactivate this behaviour by clicking on the Add Option button and setting the Dot Notion field to off. Now the resulting JSON would look like the following: 1 { \"number.one\" : 20 }","title":"Dot Notation"},{"location":"integrations/core-nodes/n8n-nodes-base.splitInBatches/","text":"Split In Batches # The Split In Batches node saves the original incoming data, and with each iteration, it returns a predefined amount of data. This node can be used to loop through the data. Node Reference # Batch Size: The number of items to return with each call. Options Reset: If set to true, the node will reset. Warning n8n natively processes incoming items. You may not need the Split In Batches node in your workflow. To learn more about how n8n handles multiple items, refer to the documentation on Looping in n8n . Example Usage # This workflow allows you to read RSS feed from two different sources using the Split In Batches node. The Split in Batches node is needed in the workflow since the RSS Read node only processes the first item it receives. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Function - Split In Batches - RSS Feed Read The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Function node # Paste the following JavaScript code snippet in the Function field. 1 2 3 4 5 6 7 8 9 10 11 12 return [ { json : { url : 'https://medium.com/feed/n8n-io' , } }, { json : { url : 'https://dev.to/feed/n8n' , } } ]; 2. Click on Execute Node to run the node. 3. SplitInBatches node # Set the batch size to 1 in the Batch Size field. Click on Execute Node to run the node. 4. RSS Read node # Click on the gears icon next to the URL field and click on Add Expression . Select the following in the Variable Selector section: Nodes > SplitInBatches > Output Data > JSON > url. You can also add the following expression: {{$node[\"SplitInBatches\"].json[\"url\"]}} . Click on Execute Node to run the workflow. FAQs # How to identify that no items are left to be processed by the node? # To identify if items are left to be processed by node use the following expression: {{$node[\"SplitInBatches\"].context[\"noItemsLeft\"]}} . This expression returns a boolean value. If there is data yet to be processed, the expression will return false , otherwise true . Refer to this workflow to try it out. How to get the current running index of the node? # To get the current running index of the node, use the following expression: {{$node[\"SplitInBatches\"].context[\"currentRunIndex\"];}} . Refer to this workflow to try it out.","title":"Split In Batches"},{"location":"integrations/core-nodes/n8n-nodes-base.splitInBatches/#split-in-batches","text":"The Split In Batches node saves the original incoming data, and with each iteration, it returns a predefined amount of data. This node can be used to loop through the data.","title":"Split In Batches"},{"location":"integrations/core-nodes/n8n-nodes-base.splitInBatches/#node-reference","text":"Batch Size: The number of items to return with each call. Options Reset: If set to true, the node will reset. Warning n8n natively processes incoming items. You may not need the Split In Batches node in your workflow. To learn more about how n8n handles multiple items, refer to the documentation on Looping in n8n .","title":"Node Reference"},{"location":"integrations/core-nodes/n8n-nodes-base.splitInBatches/#example-usage","text":"This workflow allows you to read RSS feed from two different sources using the Split In Batches node. The Split in Batches node is needed in the workflow since the RSS Read node only processes the first item it receives. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Function - Split In Batches - RSS Feed Read The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/core-nodes/n8n-nodes-base.splitInBatches/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/core-nodes/n8n-nodes-base.splitInBatches/#2-function-node","text":"Paste the following JavaScript code snippet in the Function field. 1 2 3 4 5 6 7 8 9 10 11 12 return [ { json : { url : 'https://medium.com/feed/n8n-io' , } }, { json : { url : 'https://dev.to/feed/n8n' , } } ]; 2. Click on Execute Node to run the node.","title":"2. Function node"},{"location":"integrations/core-nodes/n8n-nodes-base.splitInBatches/#3-splitinbatches-node","text":"Set the batch size to 1 in the Batch Size field. Click on Execute Node to run the node.","title":"3. SplitInBatches node"},{"location":"integrations/core-nodes/n8n-nodes-base.splitInBatches/#4-rss-read-node","text":"Click on the gears icon next to the URL field and click on Add Expression . Select the following in the Variable Selector section: Nodes > SplitInBatches > Output Data > JSON > url. You can also add the following expression: {{$node[\"SplitInBatches\"].json[\"url\"]}} . Click on Execute Node to run the workflow.","title":"4. RSS Read node"},{"location":"integrations/core-nodes/n8n-nodes-base.splitInBatches/#faqs","text":"","title":"FAQs"},{"location":"integrations/core-nodes/n8n-nodes-base.splitInBatches/#how-to-identify-that-no-items-are-left-to-be-processed-by-the-node","text":"To identify if items are left to be processed by node use the following expression: {{$node[\"SplitInBatches\"].context[\"noItemsLeft\"]}} . This expression returns a boolean value. If there is data yet to be processed, the expression will return false , otherwise true . Refer to this workflow to try it out.","title":"How to identify that no items are left to be processed by the node?"},{"location":"integrations/core-nodes/n8n-nodes-base.splitInBatches/#how-to-get-the-current-running-index-of-the-node","text":"To get the current running index of the node, use the following expression: {{$node[\"SplitInBatches\"].context[\"currentRunIndex\"];}} . Refer to this workflow to try it out.","title":"How to get the current running index of the node?"},{"location":"integrations/core-nodes/n8n-nodes-base.spreadsheetFile/","text":"Spreadsheet File # The Spreadsheet File node is used to access data from spreadsheet files. Keep in mind You will need to use an additional node such as the Read Binary File node or the HTTP Request node to pass the image file as a data property to the Spreadsheet File node. Basic Operations # Read from file Write to file Node Reference # When writing to a spreadsheet file, the File Format field can be used to specify the format of the file to save the data as. File Format CSV (Comma-separated values) HTML (HTML Table) ODS (OpenDocument Spreadsheet) RTF (Rich Text Format) XLS (Excel) XLSX (Excel) Binary Property field: Name of the binary property in which to save the binary data of the spreadsheet file. Options Sheet Name field: This field specifies the name of the sheet from which the data should be read or written to. Read As String field: This toggle enables you to parse all input data as strings. RAW Data field: This toggle enables you to skip the parsing of data. File Name field: This field can be used to specify a custom file name when writing a spreadsheet file to disk. Example Usage # This workflow allows you to read a spreadsheet file using the Spreadsheet File node. You can also find the workflow on the website. This example usage workflow would use the following three nodes. - Start - Read Binary File - Spreadsheet File The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Read Binary File # Enter the path to the spreadsheet file you want to read in the File Path field. 3. Spreadsheet File node # Enter the Property Name you used in the previous node in the Binary Property field. Click on Execute Node to run the workflow.","title":"Spreadsheet File"},{"location":"integrations/core-nodes/n8n-nodes-base.spreadsheetFile/#spreadsheet-file","text":"The Spreadsheet File node is used to access data from spreadsheet files. Keep in mind You will need to use an additional node such as the Read Binary File node or the HTTP Request node to pass the image file as a data property to the Spreadsheet File node.","title":"Spreadsheet File"},{"location":"integrations/core-nodes/n8n-nodes-base.spreadsheetFile/#basic-operations","text":"Read from file Write to file","title":"Basic Operations"},{"location":"integrations/core-nodes/n8n-nodes-base.spreadsheetFile/#node-reference","text":"When writing to a spreadsheet file, the File Format field can be used to specify the format of the file to save the data as. File Format CSV (Comma-separated values) HTML (HTML Table) ODS (OpenDocument Spreadsheet) RTF (Rich Text Format) XLS (Excel) XLSX (Excel) Binary Property field: Name of the binary property in which to save the binary data of the spreadsheet file. Options Sheet Name field: This field specifies the name of the sheet from which the data should be read or written to. Read As String field: This toggle enables you to parse all input data as strings. RAW Data field: This toggle enables you to skip the parsing of data. File Name field: This field can be used to specify a custom file name when writing a spreadsheet file to disk.","title":"Node Reference"},{"location":"integrations/core-nodes/n8n-nodes-base.spreadsheetFile/#example-usage","text":"This workflow allows you to read a spreadsheet file using the Spreadsheet File node. You can also find the workflow on the website. This example usage workflow would use the following three nodes. - Start - Read Binary File - Spreadsheet File The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/core-nodes/n8n-nodes-base.spreadsheetFile/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/core-nodes/n8n-nodes-base.spreadsheetFile/#2-read-binary-file","text":"Enter the path to the spreadsheet file you want to read in the File Path field.","title":"2. Read Binary File"},{"location":"integrations/core-nodes/n8n-nodes-base.spreadsheetFile/#3-spreadsheet-file-node","text":"Enter the Property Name you used in the previous node in the Binary Property field. Click on Execute Node to run the workflow.","title":"3. Spreadsheet File node"},{"location":"integrations/core-nodes/n8n-nodes-base.sseTrigger/","text":"SSE Trigger # Server-Sent Events (SSE) is a server push technology enabling a client to receive automatic updates from a server via HTTP connection. The SSE Trigger node is used to receive server-sent events and is a trigger node. Node Reference # URL : This field specifies the URL from which to receive the server-sent events. Example Usage # This workflow allows you to receive server-sent events using the SSE Trigger node. You can also find the workflow on n8n.io. This example usage workflow would use the following node. - SSE Trigger The final workflow should look like the following image. 1. SSE Trigger node # Enter the URL in the URL field. Click on Execute Node to run the node.","title":"SSE Trigger"},{"location":"integrations/core-nodes/n8n-nodes-base.sseTrigger/#sse-trigger","text":"Server-Sent Events (SSE) is a server push technology enabling a client to receive automatic updates from a server via HTTP connection. The SSE Trigger node is used to receive server-sent events and is a trigger node.","title":"SSE Trigger"},{"location":"integrations/core-nodes/n8n-nodes-base.sseTrigger/#node-reference","text":"URL : This field specifies the URL from which to receive the server-sent events.","title":"Node Reference"},{"location":"integrations/core-nodes/n8n-nodes-base.sseTrigger/#example-usage","text":"This workflow allows you to receive server-sent events using the SSE Trigger node. You can also find the workflow on n8n.io. This example usage workflow would use the following node. - SSE Trigger The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/core-nodes/n8n-nodes-base.sseTrigger/#1-sse-trigger-node","text":"Enter the URL in the URL field. Click on Execute Node to run the node.","title":"1. SSE Trigger node"},{"location":"integrations/core-nodes/n8n-nodes-base.ssh/","text":"SSH # The SSH node is useful for executing commands via the Secure Shell Protocol. \ud83d\udd11 Credential You can find authentication information for this node here . Basic Operations # Execute a command Download a file Upload a file Note: To attach a file for upload, you will need to use an additional node such as the Read Binary File node or the HTTP Request node to pass the file as a data property. Node Reference # Authentication: A dropdown list to choose between Password or Private Key authentication. Resource: A dropdown list used to specify if you are executing a command or processing a file. Operation: A dropdown list to select the action to be performed. When selecting Command as the Resource , only Execute is available. For a File Resource you can select either Upload or Download . Command: Only visible for Command resources. The command to execute on the remote machine. Working Directory: Only visible for Command resources. The directory where the command should be executed. Path: Only visible for Download operation on file resources. The path where the desired file is found. Binary Property: Only visible for file resources. The name of the binary property which contains the data for the file to be uploaded. Target Directory: Only visible for Upload operations on file resources. The directory to upload the file to. The name of the file does not need to be specified, it's taken from the binary data file name. To override this behavior, set the parameter File Name under options. Example Usage # This workflow allows you to remotely connect to your computer via SSH. This example usage workflow would use the following nodes. - Start - SSH The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. SSH node # From the SSH Credentials dropdown, select Create New or an existing credential . Select Password from the Authentication dropdown list. Select Command from the Resource dropdown list. The Execute option is automatically selected as the Operation . In the Command field enter the command to execute. Here we used ls just to see the local directory contents. In the Working Directory field you can enter where the command should be executed. Here we ran it in the root directory. Click on Execute Node to run the node.","title":"SSH"},{"location":"integrations/core-nodes/n8n-nodes-base.ssh/#ssh","text":"The SSH node is useful for executing commands via the Secure Shell Protocol. \ud83d\udd11 Credential You can find authentication information for this node here .","title":"SSH"},{"location":"integrations/core-nodes/n8n-nodes-base.ssh/#basic-operations","text":"Execute a command Download a file Upload a file Note: To attach a file for upload, you will need to use an additional node such as the Read Binary File node or the HTTP Request node to pass the file as a data property.","title":"Basic Operations"},{"location":"integrations/core-nodes/n8n-nodes-base.ssh/#node-reference","text":"Authentication: A dropdown list to choose between Password or Private Key authentication. Resource: A dropdown list used to specify if you are executing a command or processing a file. Operation: A dropdown list to select the action to be performed. When selecting Command as the Resource , only Execute is available. For a File Resource you can select either Upload or Download . Command: Only visible for Command resources. The command to execute on the remote machine. Working Directory: Only visible for Command resources. The directory where the command should be executed. Path: Only visible for Download operation on file resources. The path where the desired file is found. Binary Property: Only visible for file resources. The name of the binary property which contains the data for the file to be uploaded. Target Directory: Only visible for Upload operations on file resources. The directory to upload the file to. The name of the file does not need to be specified, it's taken from the binary data file name. To override this behavior, set the parameter File Name under options.","title":"Node Reference"},{"location":"integrations/core-nodes/n8n-nodes-base.ssh/#example-usage","text":"This workflow allows you to remotely connect to your computer via SSH. This example usage workflow would use the following nodes. - Start - SSH The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/core-nodes/n8n-nodes-base.ssh/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/core-nodes/n8n-nodes-base.ssh/#2-ssh-node","text":"From the SSH Credentials dropdown, select Create New or an existing credential . Select Password from the Authentication dropdown list. Select Command from the Resource dropdown list. The Execute option is automatically selected as the Operation . In the Command field enter the command to execute. Here we used ls just to see the local directory contents. In the Working Directory field you can enter where the command should be executed. Here we ran it in the root directory. Click on Execute Node to run the node.","title":"2. SSH node"},{"location":"integrations/core-nodes/n8n-nodes-base.start/","text":"Start # The start node is the first node in a workflow. It exists by default when you create a new workflow and looks like the following image. In case there is no Trigger node in the workflow, the workflow always starts from the Start node. The Start node cannot be deleted. Even if a workflow contains a Trigger node, there would still be a Start node. FAQs # When is it necessary to use the Start node? # When using the Execute Workflow node in workflow A to execute workflow B, the Start node will act as the trigger node in workflow B. The second node in workflow B needs to be connected to the Start node for the workflow to execute correctly.","title":"Start"},{"location":"integrations/core-nodes/n8n-nodes-base.start/#start","text":"The start node is the first node in a workflow. It exists by default when you create a new workflow and looks like the following image. In case there is no Trigger node in the workflow, the workflow always starts from the Start node. The Start node cannot be deleted. Even if a workflow contains a Trigger node, there would still be a Start node.","title":"Start"},{"location":"integrations/core-nodes/n8n-nodes-base.start/#faqs","text":"","title":"FAQs"},{"location":"integrations/core-nodes/n8n-nodes-base.start/#when-is-it-necessary-to-use-the-start-node","text":"When using the Execute Workflow node in workflow A to execute workflow B, the Start node will act as the trigger node in workflow B. The second node in workflow B needs to be connected to the Start node for the workflow to execute correctly.","title":"When is it necessary to use the Start node?"},{"location":"integrations/core-nodes/n8n-nodes-base.stopAndError/","text":"Stop And Error # The Stop And Error node is used to throw an exception in workflows, enabling an error message or object to be displayed. Basic operations # Error Message Error Object","title":"Stop And Error"},{"location":"integrations/core-nodes/n8n-nodes-base.stopAndError/#stop-and-error","text":"The Stop And Error node is used to throw an exception in workflows, enabling an error message or object to be displayed.","title":"Stop And Error"},{"location":"integrations/core-nodes/n8n-nodes-base.stopAndError/#basic-operations","text":"Error Message Error Object","title":"Basic operations"},{"location":"integrations/core-nodes/n8n-nodes-base.switch/","text":"Switch # The Switch node is used to route a workflow conditionally based on comparison operations. It is similar to the IF node, but supports up to four conditional routes. Node Reference # Mode : This dropdown is used to select whether the conditions will be defined as rules in the node, or as an expression, programmatically. You can add comparison conditions using the Add Routing Rule dropdown. Conditions can be created based on the data type. The available comparison operations vary for each data type. Boolean Equal Not Equal Number Smaller Smaller Equal Equal Not Equal Larger Larger Equal String Contains Equal Not Contains Not Equal Regex You can route a workflow when none of the specified conditions are met using Fallback Output dropdown list. Example Usage # This workflow executes four different Set nodes based on the output given by a Switch node. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Function - Switch - Set - NoOp The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Function node # Enter the following code in the Function field. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 return [ { json: { id: 0, } }, { json: { id: 1, } }, { json: { id: 2, } } ]; Click on Execute Node to run the workflow. 3. Switch node # Click on the gears icon next to the Value 1 field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Function > Output Data > JSON > id. You can also add the following expression: {{$node[\"Function\"].json[\"id\"]}} . Click on the Add Routing Rule button. From the Operation dropdown list, select 'Equal'. Enter '0' in the Value 2 and the Output fields. Click on the Add Routing Rule button. From the Operation dropdown list, select 'Equal'. Enter '1' in the Value 2 and the Output fields. Click on the Add Routing Rule button. From the Operation dropdown list, select 'Equal'. Enter '2' in the Value 2 and the Output fields. Select '3' from the Fallback Output dropdown list. Click on Execute Node to run the node. 4. Set node (for '0' route) # Create a Set node connected to the '0' output of the Switch node. Click on the Add Value button and select 'String' from the dropdown list. Enter name in the Name field. Enter n8n in the Value field. Click on Execute Node to run the node. Note: Notice that only the id with the value 0 made its way to this Set node. 5. Set1 node (for '1' route) # Create a Set node connected to the '1' output of the Switch node. Click on the Add Value button and select 'String' from the dropdown list. Enter name in the Name field. Enter nodemation in the Value field. Click on Execute Node to run the node. Note: Notice that only the id with the value 1 made its way to this Set node. 6. Set2 node (for '2' route) # Create a Set node connected to the '2' output of the Switch node. Click on the Add Value button and select 'String' from the dropdown list. Enter name in the Name field. Enter nathan in the Value field. Click on Execute Node to run the node. Note: Notice that only the id with the value 2 made its way to this Set node. 7. NoOp node (for '3' route) # Create a NoOp node connected to the '3' output of the Switch node. Click on Execute Node to run the node. Note: Notice that none of the ids made their way to this node since the values of the all the ids were either 0, 1, or 2.","title":"Switch"},{"location":"integrations/core-nodes/n8n-nodes-base.switch/#switch","text":"The Switch node is used to route a workflow conditionally based on comparison operations. It is similar to the IF node, but supports up to four conditional routes.","title":"Switch"},{"location":"integrations/core-nodes/n8n-nodes-base.switch/#node-reference","text":"Mode : This dropdown is used to select whether the conditions will be defined as rules in the node, or as an expression, programmatically. You can add comparison conditions using the Add Routing Rule dropdown. Conditions can be created based on the data type. The available comparison operations vary for each data type. Boolean Equal Not Equal Number Smaller Smaller Equal Equal Not Equal Larger Larger Equal String Contains Equal Not Contains Not Equal Regex You can route a workflow when none of the specified conditions are met using Fallback Output dropdown list.","title":"Node Reference"},{"location":"integrations/core-nodes/n8n-nodes-base.switch/#example-usage","text":"This workflow executes four different Set nodes based on the output given by a Switch node. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Function - Switch - Set - NoOp The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/core-nodes/n8n-nodes-base.switch/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/core-nodes/n8n-nodes-base.switch/#2-function-node","text":"Enter the following code in the Function field. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 return [ { json: { id: 0, } }, { json: { id: 1, } }, { json: { id: 2, } } ]; Click on Execute Node to run the workflow.","title":"2. Function node"},{"location":"integrations/core-nodes/n8n-nodes-base.switch/#3-switch-node","text":"Click on the gears icon next to the Value 1 field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Function > Output Data > JSON > id. You can also add the following expression: {{$node[\"Function\"].json[\"id\"]}} . Click on the Add Routing Rule button. From the Operation dropdown list, select 'Equal'. Enter '0' in the Value 2 and the Output fields. Click on the Add Routing Rule button. From the Operation dropdown list, select 'Equal'. Enter '1' in the Value 2 and the Output fields. Click on the Add Routing Rule button. From the Operation dropdown list, select 'Equal'. Enter '2' in the Value 2 and the Output fields. Select '3' from the Fallback Output dropdown list. Click on Execute Node to run the node.","title":"3. Switch node"},{"location":"integrations/core-nodes/n8n-nodes-base.switch/#4-set-node-for-0-route","text":"Create a Set node connected to the '0' output of the Switch node. Click on the Add Value button and select 'String' from the dropdown list. Enter name in the Name field. Enter n8n in the Value field. Click on Execute Node to run the node. Note: Notice that only the id with the value 0 made its way to this Set node.","title":"4. Set node (for '0' route)"},{"location":"integrations/core-nodes/n8n-nodes-base.switch/#5-set1-node-for-1-route","text":"Create a Set node connected to the '1' output of the Switch node. Click on the Add Value button and select 'String' from the dropdown list. Enter name in the Name field. Enter nodemation in the Value field. Click on Execute Node to run the node. Note: Notice that only the id with the value 1 made its way to this Set node.","title":"5. Set1 node (for '1' route)"},{"location":"integrations/core-nodes/n8n-nodes-base.switch/#6-set2-node-for-2-route","text":"Create a Set node connected to the '2' output of the Switch node. Click on the Add Value button and select 'String' from the dropdown list. Enter name in the Name field. Enter nathan in the Value field. Click on Execute Node to run the node. Note: Notice that only the id with the value 2 made its way to this Set node.","title":"6. Set2 node (for '2' route)"},{"location":"integrations/core-nodes/n8n-nodes-base.switch/#7-noop-node-for-3-route","text":"Create a NoOp node connected to the '3' output of the Switch node. Click on Execute Node to run the node. Note: Notice that none of the ids made their way to this node since the values of the all the ids were either 0, 1, or 2.","title":"7. NoOp node (for '3' route)"},{"location":"integrations/core-nodes/n8n-nodes-base.wait/","text":"Wait # The Wait node is used to create a pause of any desired duration in your workflows. When the workflow is paused the execution data is offloaded to the database, and when the resume condition is met it is reloaded and the execution continues. The Wait node can be set to resume on the following conditions: After time interval At specified time On webhook call Keep in mind For the time-based resume operations, note that: For wait times less than 65 seconds, execution data is not offloaded to the database to resume later but rather the process continues to run and execution resumes after the specified interval passes. The n8n server time is always used regardless of the timezone setting. Workflow timezone settings, and any changes made to them, do not affect the Wait node interval or specified time. Time interval # Use the After time interval resume operation to set a desired interval after which the execution will resume. Set the desired Amount and the corresponding Unit for the Wait operation. Decimals can be used for fractional units, for example 1.5 minutes instead of 90 seconds. To automatically resume workflow execution after 15 minutes, the Wait node configuration would look like this: Specified time # Use the At specified time resume operation to set a particular date and time in the future when the workflow execution should resume. For example, if you want the workflow execution to continue at midnight of New Year's Day 2022 the Wait node configuration would look like this: Webhook call # The resume On webhook call option enables your workflows to resume when an HTTP call is received. The webhook URL that will resume the execution when called is only generated at runtime. The Wait node provides the $resumeWebhookUrl variable so that you can reference and send (the yet to be generated URL) wherever needed, for example to a third-party service or in an email (see example below). When the workflow executes, the resume URL is generated and the webhook(s) in your workflow using the $resumeWebhookUrl reference become functional. This generated URL is unique to each execution, meaning that your workflow can contain multiple Wait nodes and as the webhook URL is called it will resume each Wait node sequentially. Reference # See the Webhook node documentation to learn more about the Authentication, Method, and Response parameters when configuring the Wait node to resume on a webhook call. In addition to the parameters shared with the Webhook mode, the Wait node has the following additional configuration options: Limit wait time : Set the maximum amount of time to wait before the execution is resumed by default (i.e. even with no webhook call received). Add Option > Webhook Suffix : Provide a suffix that you want to appended to the resume URL. This is useful for creating unique webhook URLs for each Wait node when a workflow contains multiple Wait nodes. Note : The generated $resumeWebhookUrl will not automatically include this suffix, you must manually append it to the webhook URL before exposing it. Limitations # There are a few functional limitations to keep in mind when working with the On Webhook Call operations of the Wait node: Partial executions of your workflow will change the $resumeWebhookUrl , so be sure that the node being used to send this URL to your desired third-party runs in the same execution as the Wait node. When testing your workflow via the Editor UI, you cannot see the rest of the execution following the Wait node. To inspect the execution results ensure you have enabled Save Manual Executions in you workflow settings to be able to review the execution results there. Example usage # This workflow allows you to complete a user sign-up flow by adding their details contact details in an Airtable, sending a confirmation email, and updating the Airtable record after they have confirmed their email address. For our example here, we assume there is an existing workflow/webpage where new users sign-up and this workflow begins when they hit \"Submit\" there. This example workflow uses the following nodes. - Wait - Webhook - Set - Send Email - Airtable The final workflow should look like the following image. 1. Webhook node # This node is triggered when a new user submits their details in your contact form. It is configured as displayed below: 2. Set node # This node is used to set the values submitted by the user (first name, last name, and email address) as values corresponding to what you want to enter in the Airtable. Note that expressions are used based on the input data received from the previous Webhook node: 3. Airtable node # In this node we add the new users contact details to the desired table, Newsletter in our example: 4. Send Email node # This node uses your desired email address (via SMTP) to send a confirmation email to the user: This is where the $resumeWebhookUrl is passed, meaning the workflow will wait until the user clicks the confirmation link in this email before resuming execution: 5. Wait node # The Wait node will resume execution once the new user clicks the confirmation link in their email (containing the $resumeWebhookUrl ): 6. Set node # In this node set the id of the user and new Verified boolean value to true: 7. Airtable node # Finally you update the table to reflect this newly created Verified field:","title":"Wait"},{"location":"integrations/core-nodes/n8n-nodes-base.wait/#wait","text":"The Wait node is used to create a pause of any desired duration in your workflows. When the workflow is paused the execution data is offloaded to the database, and when the resume condition is met it is reloaded and the execution continues. The Wait node can be set to resume on the following conditions: After time interval At specified time On webhook call Keep in mind For the time-based resume operations, note that: For wait times less than 65 seconds, execution data is not offloaded to the database to resume later but rather the process continues to run and execution resumes after the specified interval passes. The n8n server time is always used regardless of the timezone setting. Workflow timezone settings, and any changes made to them, do not affect the Wait node interval or specified time.","title":"Wait"},{"location":"integrations/core-nodes/n8n-nodes-base.wait/#time-interval","text":"Use the After time interval resume operation to set a desired interval after which the execution will resume. Set the desired Amount and the corresponding Unit for the Wait operation. Decimals can be used for fractional units, for example 1.5 minutes instead of 90 seconds. To automatically resume workflow execution after 15 minutes, the Wait node configuration would look like this:","title":"Time interval"},{"location":"integrations/core-nodes/n8n-nodes-base.wait/#specified-time","text":"Use the At specified time resume operation to set a particular date and time in the future when the workflow execution should resume. For example, if you want the workflow execution to continue at midnight of New Year's Day 2022 the Wait node configuration would look like this:","title":"Specified time"},{"location":"integrations/core-nodes/n8n-nodes-base.wait/#webhook-call","text":"The resume On webhook call option enables your workflows to resume when an HTTP call is received. The webhook URL that will resume the execution when called is only generated at runtime. The Wait node provides the $resumeWebhookUrl variable so that you can reference and send (the yet to be generated URL) wherever needed, for example to a third-party service or in an email (see example below). When the workflow executes, the resume URL is generated and the webhook(s) in your workflow using the $resumeWebhookUrl reference become functional. This generated URL is unique to each execution, meaning that your workflow can contain multiple Wait nodes and as the webhook URL is called it will resume each Wait node sequentially.","title":"Webhook call"},{"location":"integrations/core-nodes/n8n-nodes-base.wait/#reference","text":"See the Webhook node documentation to learn more about the Authentication, Method, and Response parameters when configuring the Wait node to resume on a webhook call. In addition to the parameters shared with the Webhook mode, the Wait node has the following additional configuration options: Limit wait time : Set the maximum amount of time to wait before the execution is resumed by default (i.e. even with no webhook call received). Add Option > Webhook Suffix : Provide a suffix that you want to appended to the resume URL. This is useful for creating unique webhook URLs for each Wait node when a workflow contains multiple Wait nodes. Note : The generated $resumeWebhookUrl will not automatically include this suffix, you must manually append it to the webhook URL before exposing it.","title":"Reference"},{"location":"integrations/core-nodes/n8n-nodes-base.wait/#limitations","text":"There are a few functional limitations to keep in mind when working with the On Webhook Call operations of the Wait node: Partial executions of your workflow will change the $resumeWebhookUrl , so be sure that the node being used to send this URL to your desired third-party runs in the same execution as the Wait node. When testing your workflow via the Editor UI, you cannot see the rest of the execution following the Wait node. To inspect the execution results ensure you have enabled Save Manual Executions in you workflow settings to be able to review the execution results there.","title":"Limitations"},{"location":"integrations/core-nodes/n8n-nodes-base.wait/#example-usage","text":"This workflow allows you to complete a user sign-up flow by adding their details contact details in an Airtable, sending a confirmation email, and updating the Airtable record after they have confirmed their email address. For our example here, we assume there is an existing workflow/webpage where new users sign-up and this workflow begins when they hit \"Submit\" there. This example workflow uses the following nodes. - Wait - Webhook - Set - Send Email - Airtable The final workflow should look like the following image.","title":"Example usage"},{"location":"integrations/core-nodes/n8n-nodes-base.wait/#1-webhook-node","text":"This node is triggered when a new user submits their details in your contact form. It is configured as displayed below:","title":"1. Webhook node"},{"location":"integrations/core-nodes/n8n-nodes-base.wait/#2-set-node","text":"This node is used to set the values submitted by the user (first name, last name, and email address) as values corresponding to what you want to enter in the Airtable. Note that expressions are used based on the input data received from the previous Webhook node:","title":"2. Set node"},{"location":"integrations/core-nodes/n8n-nodes-base.wait/#3-airtable-node","text":"In this node we add the new users contact details to the desired table, Newsletter in our example:","title":"3. Airtable node"},{"location":"integrations/core-nodes/n8n-nodes-base.wait/#4-send-email-node","text":"This node uses your desired email address (via SMTP) to send a confirmation email to the user: This is where the $resumeWebhookUrl is passed, meaning the workflow will wait until the user clicks the confirmation link in this email before resuming execution:","title":"4. Send Email node"},{"location":"integrations/core-nodes/n8n-nodes-base.wait/#5-wait-node","text":"The Wait node will resume execution once the new user clicks the confirmation link in their email (containing the $resumeWebhookUrl ):","title":"5. Wait node"},{"location":"integrations/core-nodes/n8n-nodes-base.wait/#6-set-node","text":"In this node set the id of the user and new Verified boolean value to true:","title":"6. Set node"},{"location":"integrations/core-nodes/n8n-nodes-base.wait/#7-airtable-node","text":"Finally you update the table to reflect this newly created Verified field:","title":"7. Airtable node"},{"location":"integrations/core-nodes/n8n-nodes-base.webhook/","text":"Webhook # The Webhook node is one of the most powerful nodes in n8n. It allows you to create webhooks which can be used to receive data from apps and services when an event occurs. It is a Trigger node, which means that it serves as the starting point for an n8n workflow. This allows several different services to connect to n8n and run a workflow when data is received. Keep in mind When using the Webhook node on the localhost, ensure that n8n is running with the tunnel mode: npm with tunnel or Docker with tunnel . When working with a Production webhook, please ensure that you have saved and activated the workflow. Don\u2019t forget that the data flowing through the webhook won\u2019t be visible in the Editor UI with the Production webhook. Webhook nodes can be used as triggers for workflows when we want to receive data and run a workflow based on the data. The Webhook node also supports returning the data generated at the end of a workflow. This makes it very useful to build a workflow to process data and return the results, like an API endpoint. While building or testing a workflow, we recommend that you use a test webhook URL. Using a test webhook ensures that you can view the incoming data in the Editor UI, which is useful for debugging. Make sure that you click on the Execute Node button to register the webhook before sending the data to the test webhook. The test webhook stays active for 120 seconds. \ud83c\udfa5 The following playlist will help you learn how to use the Webhook node in n8n. Node Reference # First of all, in the parameters section, we have the Webhook URLs. Clicking on that will reveal the URLs for the webhook. Here you have two options, let\u2019s understand the difference between them. Webhook URLs Production : A Production webhook is only registered when a workflow has been activated (via the switch on the top right of the page). You will never see its data in the Editor UI. To save the executions, you can either set that as a global default or you can specify that on a per-workflow basis in the workflow settings. You will then see the data from the workflow under \u2018Past Executions\u2019. Test : A Test webhook is only registered in the time between executing a workflow via the UI and until the first call gets made (when it displays \u201cwaiting for Webhook call\u201d). After the Test webhook gets called for the first time, it displays the data in the Editor UI, and then gets deactivated. Authentication: The Webhook node supports two methods of authenticating a request that it receives. Basic Auth \u2014 A method of authentication where the specified username and password must be passed along with the request. Header Auth \u2014 A method of authentication where the specified header parameter must be passed along with the request. This method can be used when you want to authenticate using an API key or an access token, for example. !!! tip Keep in mind The Credential Data required for Header Auth credentials will vary on the type used. For example, if you need to provide an Authorization: Bearer <token> header, the Credential Data Name would be Authorization and the Value would be Bearer <token> . HTTP Method: The Webhook node supports receiving two types of HTTP Requests . GET Request \u2014 GET requests are typically used to request data from a resource. This type of request is typically used to retrieve data from a service. POST Request \u2014 POST requests are typically used to send data to a resource for a create/update operation. This type of request is typically used to send data to a service. Path: By default, this field contains a randomly generated webhook URL path, to avoid conflicts with other webhook nodes. You can also manually specify a URL path if necessary. A good example would be if you were using n8n to prototype an API; and wanted consistent endpoint URLs. Response Code: Allows you to customize the HTTP response code that the Webhook node will return upon successful execution. Response When: This dropdown list allows you to select between two response modes. Webhook received: When this option is selected, the Webhook node will return the specified response code along with the message \u201cWorkflow got started.\u201d. Last node finishes: When this option is selected, the Webhook node will return the specified response code along with the data output from the last node executed in the workflow. Optional Parameters: The Webhook node also supports several optional methods that can be used during configuration. Response Headers \u2014 This option allows you to specify additional headers in the Webhook response. Raw Body \u2014 This option is used to specify when the Webhook node will receive data in a RAW format, such as JSON or XML. Binary Data \u2014 This option is available only when the Webhook node is set to receive POST requests. Setting this to \u2018true\u2019 lets the Webhook node know that it will receive binary data (such as an image/audio). You can use this option when you expect to receive a file via your Webhook node. Conditional Parameters: The Webhook node also supports several other parameters, that are used only in certain configurations. Response Data: This option is available only when set to respond when \u2018Last node finishes\u2019. It allows you to choose which data to return: All Entries \u2014 Choose this option to return all the data generated by the last node in the workflow, as an array. First Entry JSON \u2014 Choose this option to return the first data entry of the last node in the workflow, as a JSON object. First Entry Binary \u2014 Choose this option to return the binary data of the first entry of the last node in the workflow, as a binary file. Example Usage # This workflow allows you to receive the weather information of a city using the Webhook and the OpenWeatherMap nodes. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Webhook - OpenWeatherMap - Set The final workflow should look like the following image. 1. Webhook node # This node will trigger the workflow. We will make a GET request to the Test URL and pass on a query parameter city . We will use the value of this query parameter in the next node in the workflow. Click on Webhook URLs and select the 'Test' tab. Copy the displayed URL. We will make a GET request to this URL later on. Select 'Last Node' from the Response Mode . This will return the data from the last executed node. Select 'All Entries' from the Response Data . This will return all the entries of the last executed node. Save the workflow to register the webhook. Click on Execute Node to run the node. In a new browser tab, paste the URL you copied in the previous step and append it with ?city=Berlin . Your URL should look similar to the following URL: https://your-n8n.url/webhook/path?city=Berlin . We are passing a query parameter city and assigning it the value Berlin . Press Enter (or Return) to make a request to the Test Webhook URL. In the screenshot below, you will notice that the node triggers the workflow and receives a query parameter. We will use the value of the query parameter in the next node in the workflow. 2. OpenWeatherMap node (Current Weather) # This node will return data about the current weather for the city that we received in the previous node. First of all, you'll have to enter credentials for the OpenWeatherMap node. You can find out how to do that here . Click on the gears icon next to the City field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Webhook > Output Data > JSON > query > city. You can also add the following expression: {{$node[\"Webhook\"].json[\"query\"][\"city\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns data about the current weather in Berlin. 3. Set node # We will use the Set node to ensure that only the data that we set in this node gets returned to the workflow. We will set the value of temp and description in this node. Click on Add Value and select 'String' from the dropdown list. Enter temp in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > OpenWeatherMap > Output Data > JSON > main > temp. You can also add the following expression: {{$node[\"OpenWeatherMap\"].json[\"main\"][\"temp\"]}} . Click on Add Value and select 'String' from the dropdown list. Enter description in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > OpenWeatherMap > Output Data > JSON > weather > [Item: 0] > description. You can also add the following expression: {{$node[\"OpenWeatherMap\"].json[\"weather\"][0][\"description\"]}} . Toggle Keep Only Set to true . We set this option to true to ensure that only the data that we have set in this node get passed on to the next nodes in the workflow. Click on Execute Node to run the node. In the screenshot below, you will notice that the node sets the values of temp and description . Save the workflow and execute it again by clicking on the Execute Workflow button in the Editor UI. This time you will receive the temperature and description as the response in the browser. Activate workflow for production This example workflow uses the Webhook node, which is a Trigger node. You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered every time a GET request is sent to the Production webhook URL. FAQs # Where to find the Webhook URLs? # The Webhook node has two URLs - Test URL and Production URL. To get these URLs, follow the steps mentioned below. 1. Click on Webhook URLs . By default, the node displays the Production URL. 2. If you want the Test URL, click on the Test tab. 3. To copy the URL, click on the displayed URL. Here is a GIF demonstrating how to retrieve the test and production webhook URLs in n8n. How to use the HTTP Request node to trigger the Webhook node? # The HTTP Request node is used to make HTTP requests to the URL you specify. To use the HTTP Request node to trigger the Webhook node, follow the steps mentioned below. 1. Create a new workflow. 2. Add the HTTP Request node to the workflow. 3. Select the appropriate method from the Request Method dropdown list. For example, if you have selected GET as the HTTP method in your Webhook node, select GET as the request method in the HTTP Request node. 4. Copy the URL from the Webhook node, and paste it in the URL field in the HTTP Request node. 5. Execute the workflow with the Webhook node if you're using the Test URL. 6. Execute the HTTP Request node. Here is a video demonstrating how to send a request to a Webhook based workflow using the HTTP Request node: How to use route parameters? # You can add route parameters to the webhook URL path. This is useful when you are creating an API. The Path field can take the following values: /:variable /path/:variable /:variable/path /:variable1/path/:variable2 /:variable1/:variable2 How to use cURL to trigger the Webhook node? # You can use cURL to make HTTP requests that will trigger the Webhook node. To use cURL, make sure that you have installed it on your machine. You can follow this guide to install cURL on your machine. Based on your use-case, you can make an HTTP request with or without any parameters. You can also send files with the HTTP request using cURL. Note: In the following commands, replace https://your-n8n.url/webhook/path with your webhook URL. Make an HTTP request without any parameters # To make a GET request without any parameters, use the following command in your terminal. 1 curl --request GET https://your-n8n.url/webhook/path To make a POST request, use the following command. 1 curl --request POST https://your-n8n.url/webhook/path Make an HTTP request with body parameter # To make an HTTP request with a body parameter, use the following command. 1 curl --request GET https://your-n8n.url/webhook/path --data 'key=value' Make an HTTP request with header parameter # To make an HTTP request with a header parameter, use the following command. 1 curl --request GET https://your-n8n.url/webhook/path --header 'key=value' Make an HTTP request to send a file # To send a file with the HTTP request, use the following command. 1 curl --request GET https://your-n8n.url/webhook/path --from 'key=@/path/to/file' Replace /path/to/file with the path of the file you want to send. How to send a response of type string ? # To send a response of type string, follow the steps mentioned below. 1. Select 'Last Node' from the Response Mode dropdown list. 2. Select 'First Entry JSON' from the Response Data dropdown list. 3. Click on 'Add Option' and select 'Property Name' from the dropdown list. 4. Enter the name of the property that contains the response. 5. Connect a Set node to the Webhook node. 6. In the Set node, click on 'Add Value' and select 'String'. 7. Enter the name of the property in the Name field. The name should match the property name from step 4. 8. Enter the string value in the Value field. 9. Toggle Keep Only Set to true . When the Webhook gets called, it will send the string response that was set in the Set node.","title":"Webhook"},{"location":"integrations/core-nodes/n8n-nodes-base.webhook/#webhook","text":"The Webhook node is one of the most powerful nodes in n8n. It allows you to create webhooks which can be used to receive data from apps and services when an event occurs. It is a Trigger node, which means that it serves as the starting point for an n8n workflow. This allows several different services to connect to n8n and run a workflow when data is received. Keep in mind When using the Webhook node on the localhost, ensure that n8n is running with the tunnel mode: npm with tunnel or Docker with tunnel . When working with a Production webhook, please ensure that you have saved and activated the workflow. Don\u2019t forget that the data flowing through the webhook won\u2019t be visible in the Editor UI with the Production webhook. Webhook nodes can be used as triggers for workflows when we want to receive data and run a workflow based on the data. The Webhook node also supports returning the data generated at the end of a workflow. This makes it very useful to build a workflow to process data and return the results, like an API endpoint. While building or testing a workflow, we recommend that you use a test webhook URL. Using a test webhook ensures that you can view the incoming data in the Editor UI, which is useful for debugging. Make sure that you click on the Execute Node button to register the webhook before sending the data to the test webhook. The test webhook stays active for 120 seconds. \ud83c\udfa5 The following playlist will help you learn how to use the Webhook node in n8n.","title":"Webhook"},{"location":"integrations/core-nodes/n8n-nodes-base.webhook/#node-reference","text":"First of all, in the parameters section, we have the Webhook URLs. Clicking on that will reveal the URLs for the webhook. Here you have two options, let\u2019s understand the difference between them. Webhook URLs Production : A Production webhook is only registered when a workflow has been activated (via the switch on the top right of the page). You will never see its data in the Editor UI. To save the executions, you can either set that as a global default or you can specify that on a per-workflow basis in the workflow settings. You will then see the data from the workflow under \u2018Past Executions\u2019. Test : A Test webhook is only registered in the time between executing a workflow via the UI and until the first call gets made (when it displays \u201cwaiting for Webhook call\u201d). After the Test webhook gets called for the first time, it displays the data in the Editor UI, and then gets deactivated. Authentication: The Webhook node supports two methods of authenticating a request that it receives. Basic Auth \u2014 A method of authentication where the specified username and password must be passed along with the request. Header Auth \u2014 A method of authentication where the specified header parameter must be passed along with the request. This method can be used when you want to authenticate using an API key or an access token, for example. !!! tip Keep in mind The Credential Data required for Header Auth credentials will vary on the type used. For example, if you need to provide an Authorization: Bearer <token> header, the Credential Data Name would be Authorization and the Value would be Bearer <token> . HTTP Method: The Webhook node supports receiving two types of HTTP Requests . GET Request \u2014 GET requests are typically used to request data from a resource. This type of request is typically used to retrieve data from a service. POST Request \u2014 POST requests are typically used to send data to a resource for a create/update operation. This type of request is typically used to send data to a service. Path: By default, this field contains a randomly generated webhook URL path, to avoid conflicts with other webhook nodes. You can also manually specify a URL path if necessary. A good example would be if you were using n8n to prototype an API; and wanted consistent endpoint URLs. Response Code: Allows you to customize the HTTP response code that the Webhook node will return upon successful execution. Response When: This dropdown list allows you to select between two response modes. Webhook received: When this option is selected, the Webhook node will return the specified response code along with the message \u201cWorkflow got started.\u201d. Last node finishes: When this option is selected, the Webhook node will return the specified response code along with the data output from the last node executed in the workflow. Optional Parameters: The Webhook node also supports several optional methods that can be used during configuration. Response Headers \u2014 This option allows you to specify additional headers in the Webhook response. Raw Body \u2014 This option is used to specify when the Webhook node will receive data in a RAW format, such as JSON or XML. Binary Data \u2014 This option is available only when the Webhook node is set to receive POST requests. Setting this to \u2018true\u2019 lets the Webhook node know that it will receive binary data (such as an image/audio). You can use this option when you expect to receive a file via your Webhook node. Conditional Parameters: The Webhook node also supports several other parameters, that are used only in certain configurations. Response Data: This option is available only when set to respond when \u2018Last node finishes\u2019. It allows you to choose which data to return: All Entries \u2014 Choose this option to return all the data generated by the last node in the workflow, as an array. First Entry JSON \u2014 Choose this option to return the first data entry of the last node in the workflow, as a JSON object. First Entry Binary \u2014 Choose this option to return the binary data of the first entry of the last node in the workflow, as a binary file.","title":"Node Reference"},{"location":"integrations/core-nodes/n8n-nodes-base.webhook/#example-usage","text":"This workflow allows you to receive the weather information of a city using the Webhook and the OpenWeatherMap nodes. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Webhook - OpenWeatherMap - Set The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/core-nodes/n8n-nodes-base.webhook/#1-webhook-node","text":"This node will trigger the workflow. We will make a GET request to the Test URL and pass on a query parameter city . We will use the value of this query parameter in the next node in the workflow. Click on Webhook URLs and select the 'Test' tab. Copy the displayed URL. We will make a GET request to this URL later on. Select 'Last Node' from the Response Mode . This will return the data from the last executed node. Select 'All Entries' from the Response Data . This will return all the entries of the last executed node. Save the workflow to register the webhook. Click on Execute Node to run the node. In a new browser tab, paste the URL you copied in the previous step and append it with ?city=Berlin . Your URL should look similar to the following URL: https://your-n8n.url/webhook/path?city=Berlin . We are passing a query parameter city and assigning it the value Berlin . Press Enter (or Return) to make a request to the Test Webhook URL. In the screenshot below, you will notice that the node triggers the workflow and receives a query parameter. We will use the value of the query parameter in the next node in the workflow.","title":"1. Webhook node"},{"location":"integrations/core-nodes/n8n-nodes-base.webhook/#2-openweathermap-node-current-weather","text":"This node will return data about the current weather for the city that we received in the previous node. First of all, you'll have to enter credentials for the OpenWeatherMap node. You can find out how to do that here . Click on the gears icon next to the City field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Webhook > Output Data > JSON > query > city. You can also add the following expression: {{$node[\"Webhook\"].json[\"query\"][\"city\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns data about the current weather in Berlin.","title":"2. OpenWeatherMap node (Current Weather)"},{"location":"integrations/core-nodes/n8n-nodes-base.webhook/#3-set-node","text":"We will use the Set node to ensure that only the data that we set in this node gets returned to the workflow. We will set the value of temp and description in this node. Click on Add Value and select 'String' from the dropdown list. Enter temp in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > OpenWeatherMap > Output Data > JSON > main > temp. You can also add the following expression: {{$node[\"OpenWeatherMap\"].json[\"main\"][\"temp\"]}} . Click on Add Value and select 'String' from the dropdown list. Enter description in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > OpenWeatherMap > Output Data > JSON > weather > [Item: 0] > description. You can also add the following expression: {{$node[\"OpenWeatherMap\"].json[\"weather\"][0][\"description\"]}} . Toggle Keep Only Set to true . We set this option to true to ensure that only the data that we have set in this node get passed on to the next nodes in the workflow. Click on Execute Node to run the node. In the screenshot below, you will notice that the node sets the values of temp and description . Save the workflow and execute it again by clicking on the Execute Workflow button in the Editor UI. This time you will receive the temperature and description as the response in the browser. Activate workflow for production This example workflow uses the Webhook node, which is a Trigger node. You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered every time a GET request is sent to the Production webhook URL.","title":"3. Set node"},{"location":"integrations/core-nodes/n8n-nodes-base.webhook/#faqs","text":"","title":"FAQs"},{"location":"integrations/core-nodes/n8n-nodes-base.webhook/#where-to-find-the-webhook-urls","text":"The Webhook node has two URLs - Test URL and Production URL. To get these URLs, follow the steps mentioned below. 1. Click on Webhook URLs . By default, the node displays the Production URL. 2. If you want the Test URL, click on the Test tab. 3. To copy the URL, click on the displayed URL. Here is a GIF demonstrating how to retrieve the test and production webhook URLs in n8n.","title":"Where to find the Webhook URLs?"},{"location":"integrations/core-nodes/n8n-nodes-base.webhook/#how-to-use-the-http-request-node-to-trigger-the-webhook-node","text":"The HTTP Request node is used to make HTTP requests to the URL you specify. To use the HTTP Request node to trigger the Webhook node, follow the steps mentioned below. 1. Create a new workflow. 2. Add the HTTP Request node to the workflow. 3. Select the appropriate method from the Request Method dropdown list. For example, if you have selected GET as the HTTP method in your Webhook node, select GET as the request method in the HTTP Request node. 4. Copy the URL from the Webhook node, and paste it in the URL field in the HTTP Request node. 5. Execute the workflow with the Webhook node if you're using the Test URL. 6. Execute the HTTP Request node. Here is a video demonstrating how to send a request to a Webhook based workflow using the HTTP Request node:","title":"How to use the HTTP Request node to trigger the Webhook node?"},{"location":"integrations/core-nodes/n8n-nodes-base.webhook/#how-to-use-route-parameters","text":"You can add route parameters to the webhook URL path. This is useful when you are creating an API. The Path field can take the following values: /:variable /path/:variable /:variable/path /:variable1/path/:variable2 /:variable1/:variable2","title":"How to use route parameters?"},{"location":"integrations/core-nodes/n8n-nodes-base.webhook/#how-to-use-curl-to-trigger-the-webhook-node","text":"You can use cURL to make HTTP requests that will trigger the Webhook node. To use cURL, make sure that you have installed it on your machine. You can follow this guide to install cURL on your machine. Based on your use-case, you can make an HTTP request with or without any parameters. You can also send files with the HTTP request using cURL. Note: In the following commands, replace https://your-n8n.url/webhook/path with your webhook URL.","title":"How to use cURL to trigger the Webhook node?"},{"location":"integrations/core-nodes/n8n-nodes-base.webhook/#make-an-http-request-without-any-parameters","text":"To make a GET request without any parameters, use the following command in your terminal. 1 curl --request GET https://your-n8n.url/webhook/path To make a POST request, use the following command. 1 curl --request POST https://your-n8n.url/webhook/path","title":"Make an HTTP request without any parameters"},{"location":"integrations/core-nodes/n8n-nodes-base.webhook/#make-an-http-request-with-body-parameter","text":"To make an HTTP request with a body parameter, use the following command. 1 curl --request GET https://your-n8n.url/webhook/path --data 'key=value'","title":"Make an HTTP request with body parameter"},{"location":"integrations/core-nodes/n8n-nodes-base.webhook/#make-an-http-request-with-header-parameter","text":"To make an HTTP request with a header parameter, use the following command. 1 curl --request GET https://your-n8n.url/webhook/path --header 'key=value'","title":"Make an HTTP request with header parameter"},{"location":"integrations/core-nodes/n8n-nodes-base.webhook/#make-an-http-request-to-send-a-file","text":"To send a file with the HTTP request, use the following command. 1 curl --request GET https://your-n8n.url/webhook/path --from 'key=@/path/to/file' Replace /path/to/file with the path of the file you want to send.","title":"Make an HTTP request to send a file"},{"location":"integrations/core-nodes/n8n-nodes-base.webhook/#how-to-send-a-response-of-type-string","text":"To send a response of type string, follow the steps mentioned below. 1. Select 'Last Node' from the Response Mode dropdown list. 2. Select 'First Entry JSON' from the Response Data dropdown list. 3. Click on 'Add Option' and select 'Property Name' from the dropdown list. 4. Enter the name of the property that contains the response. 5. Connect a Set node to the Webhook node. 6. In the Set node, click on 'Add Value' and select 'String'. 7. Enter the name of the property in the Name field. The name should match the property name from step 4. 8. Enter the string value in the Value field. 9. Toggle Keep Only Set to true . When the Webhook gets called, it will send the string response that was set in the Set node.","title":"How to send a response of type string?"},{"location":"integrations/core-nodes/n8n-nodes-base.workflowTrigger/","text":"Workflow Trigger # The Workflow Trigger node gets triggered when a workflow is updated or activated. Keep in mind If you want to use the Workflow Trigger node for a workflow, add the node to the workflow. You don't have to create a separate workflow. The Workflow Trigger node gets triggered for the workflow that it gets added to. The Workflow Trigger node can be used to trigger a workflow to notify the state of the workflow. Node Reference # Events Active Workflow Updated: Triggers when this workflow is updated Workflow Activated: Triggers when this workflow is activated Example Usage # This workflow allows you to receive a message on Mattermost when a workflow is updated. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Workflow Trigger - Mattermost The final workflow should look like the following image. 1. Workflow Trigger node # Open the workflow where you want to add the Workflow Trigger workflow. Add the Workflow Trigger node to the workflow. The Workflow Trigger node will trigger the workflow when the workflow gets updated. Select 'Active Workflow Updated' from the Events dropdown list. In the screenshot below, you will notice that the node triggers the workflow when the workflow gets updated. 2. Mattermost node (post: message) # This node will send a message in the workflow channel on Mattermost. First of all, you'll have to enter credentials for the Mattermost node. You can find out how to enter credentials for this node here . Select a channel from the Channel ID dropdown list. Click on the gears icon next to the Message field click on Add Expression . Enter the following message in the Expression field: The workflow {{$workflow.name}}, was updated. . $workflow.name returns the name of the workflow. Click on Execute Node to run the workflow. In the screenshot below, you will notice that the node sends a message to Mattermost.","title":"Workflow Trigger"},{"location":"integrations/core-nodes/n8n-nodes-base.workflowTrigger/#workflow-trigger","text":"The Workflow Trigger node gets triggered when a workflow is updated or activated. Keep in mind If you want to use the Workflow Trigger node for a workflow, add the node to the workflow. You don't have to create a separate workflow. The Workflow Trigger node gets triggered for the workflow that it gets added to. The Workflow Trigger node can be used to trigger a workflow to notify the state of the workflow.","title":"Workflow Trigger"},{"location":"integrations/core-nodes/n8n-nodes-base.workflowTrigger/#node-reference","text":"Events Active Workflow Updated: Triggers when this workflow is updated Workflow Activated: Triggers when this workflow is activated","title":"Node Reference"},{"location":"integrations/core-nodes/n8n-nodes-base.workflowTrigger/#example-usage","text":"This workflow allows you to receive a message on Mattermost when a workflow is updated. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Workflow Trigger - Mattermost The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/core-nodes/n8n-nodes-base.workflowTrigger/#1-workflow-trigger-node","text":"Open the workflow where you want to add the Workflow Trigger workflow. Add the Workflow Trigger node to the workflow. The Workflow Trigger node will trigger the workflow when the workflow gets updated. Select 'Active Workflow Updated' from the Events dropdown list. In the screenshot below, you will notice that the node triggers the workflow when the workflow gets updated.","title":"1. Workflow Trigger node"},{"location":"integrations/core-nodes/n8n-nodes-base.workflowTrigger/#2-mattermost-node-post-message","text":"This node will send a message in the workflow channel on Mattermost. First of all, you'll have to enter credentials for the Mattermost node. You can find out how to enter credentials for this node here . Select a channel from the Channel ID dropdown list. Click on the gears icon next to the Message field click on Add Expression . Enter the following message in the Expression field: The workflow {{$workflow.name}}, was updated. . $workflow.name returns the name of the workflow. Click on Execute Node to run the workflow. In the screenshot below, you will notice that the node sends a message to Mattermost.","title":"2. Mattermost node (post: message)"},{"location":"integrations/core-nodes/n8n-nodes-base.writeBinaryFile/","text":"Write Binary File # The Write Binary File node is used to write a file to the host machine that runs n8n. Keep in mind If you are running n8n in Docker, your command will run on the n8n container and not the Docker host. This node will look for files relative to the n8n install path. It is recommended to use absolute file paths to prevent any errors. Node Reference # File Name field: This field specifies the path to which the file should be written, along with the file name. Property Name field: Name of the binary property to which to write the data of the read file. Example Usage # This workflow allows you to write a file to the host machine using the Write Binary File node. You can also find the workflow on the website. This example usage workflow would use the following three nodes. - Start - HTTP Request - Write Binary File The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. HTTP Request node # Enter https://docs.n8n.io/assets/img/n8n-logo.png in the URL field. Select the 'File' option from the Response Format dropdown list. Click on Execute Node to run the node. 3. Write Binary File node # Enter the path to which the file should be written along with the file name in the File Name field. Click on Execute Node to run the node.","title":"Write Binary File"},{"location":"integrations/core-nodes/n8n-nodes-base.writeBinaryFile/#write-binary-file","text":"The Write Binary File node is used to write a file to the host machine that runs n8n. Keep in mind If you are running n8n in Docker, your command will run on the n8n container and not the Docker host. This node will look for files relative to the n8n install path. It is recommended to use absolute file paths to prevent any errors.","title":"Write Binary File"},{"location":"integrations/core-nodes/n8n-nodes-base.writeBinaryFile/#node-reference","text":"File Name field: This field specifies the path to which the file should be written, along with the file name. Property Name field: Name of the binary property to which to write the data of the read file.","title":"Node Reference"},{"location":"integrations/core-nodes/n8n-nodes-base.writeBinaryFile/#example-usage","text":"This workflow allows you to write a file to the host machine using the Write Binary File node. You can also find the workflow on the website. This example usage workflow would use the following three nodes. - Start - HTTP Request - Write Binary File The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/core-nodes/n8n-nodes-base.writeBinaryFile/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/core-nodes/n8n-nodes-base.writeBinaryFile/#2-http-request-node","text":"Enter https://docs.n8n.io/assets/img/n8n-logo.png in the URL field. Select the 'File' option from the Response Format dropdown list. Click on Execute Node to run the node.","title":"2. HTTP Request node"},{"location":"integrations/core-nodes/n8n-nodes-base.writeBinaryFile/#3-write-binary-file-node","text":"Enter the path to which the file should be written along with the file name in the File Name field. Click on Execute Node to run the node.","title":"3. Write Binary File node"},{"location":"integrations/core-nodes/n8n-nodes-base.xml/","text":"XML # The XML node is useful to convert data from and to XML. Node Reference # Mode: The format the data should be converted from and to. JSON to XML: Converts data from JSON to XML XML to JSON: Converts data from XML to JSON Property Name: The name of the property which contains the data to convert. Options Allow Surrogate Chars: Allows using characters from the Unicode surrogate blocks. This field is displayed when 'JSON to XML' is selected from the Mode dropdown list. cdata: Wrap text nodes instead of escaping when necessary. This field is displayed when 'JSON to XML' is selected from the Mode dropdown list. Headless: Omit the XML header. This field is displayed when 'JSON to XML' is selected from the Mode dropdown list. Root Name: Root element name to be used. This field is displayed when 'JSON to XML' is selected from the Mode dropdown list. Explicit Array: Always put child nodes in an array if true; otherwise an array is created. This field is displayed when 'XML to JSON' is selected from the Mode dropdown list. Explicit Root: Set this if you want to get the root node in the resulting object. This field is displayed when 'XML to JSON' is selected from the Mode dropdown list. Ignore Attributes: Ignore all XML attributes and only create text nodes. This field is displayed when 'XML to JSON' is selected from the Mode dropdown list. Merge Attributes: Merge attributes and child elements as properties of the parent, instead of keying attributes off a child attribute object. This option is ignored if 'Ignore Attribute' is true. This field is displayed when 'XML to JSON' is selected from the Mode dropdown list. Normalize: Trim whitespaces inside the text nodes. This field is displayed when 'XML to JSON' is selected from the Mode dropdown list. Normalize Tags: Normalize all tag names to lowercase. This field is displayed when 'XML to JSON' is selected from the Mode dropdown list. Trim: Trim the whitespace at the beginning and end of text nodes. This field is displayed when 'XML to JSON' is selected from the Mode dropdown list. Attribute Key: Prefix that is used to access the attributes. Character Key: Prefix that is used to access the character content. Example Usage # This workflow allows you to convert the JSON data received from the CocktailDB API to XML. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - HTTP Request - XML The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. HTTP Request node (GET) # Enter https://www.thecocktaildb.com/api/json/v1/1/random.php in the URL field. Click on Execute Node to run the node. 3. XML node (JSON to XML) # Select 'JSON to XML' from the Mode dropdown list. Click on Execute Node to run the node.","title":"XML"},{"location":"integrations/core-nodes/n8n-nodes-base.xml/#xml","text":"The XML node is useful to convert data from and to XML.","title":"XML"},{"location":"integrations/core-nodes/n8n-nodes-base.xml/#node-reference","text":"Mode: The format the data should be converted from and to. JSON to XML: Converts data from JSON to XML XML to JSON: Converts data from XML to JSON Property Name: The name of the property which contains the data to convert. Options Allow Surrogate Chars: Allows using characters from the Unicode surrogate blocks. This field is displayed when 'JSON to XML' is selected from the Mode dropdown list. cdata: Wrap text nodes instead of escaping when necessary. This field is displayed when 'JSON to XML' is selected from the Mode dropdown list. Headless: Omit the XML header. This field is displayed when 'JSON to XML' is selected from the Mode dropdown list. Root Name: Root element name to be used. This field is displayed when 'JSON to XML' is selected from the Mode dropdown list. Explicit Array: Always put child nodes in an array if true; otherwise an array is created. This field is displayed when 'XML to JSON' is selected from the Mode dropdown list. Explicit Root: Set this if you want to get the root node in the resulting object. This field is displayed when 'XML to JSON' is selected from the Mode dropdown list. Ignore Attributes: Ignore all XML attributes and only create text nodes. This field is displayed when 'XML to JSON' is selected from the Mode dropdown list. Merge Attributes: Merge attributes and child elements as properties of the parent, instead of keying attributes off a child attribute object. This option is ignored if 'Ignore Attribute' is true. This field is displayed when 'XML to JSON' is selected from the Mode dropdown list. Normalize: Trim whitespaces inside the text nodes. This field is displayed when 'XML to JSON' is selected from the Mode dropdown list. Normalize Tags: Normalize all tag names to lowercase. This field is displayed when 'XML to JSON' is selected from the Mode dropdown list. Trim: Trim the whitespace at the beginning and end of text nodes. This field is displayed when 'XML to JSON' is selected from the Mode dropdown list. Attribute Key: Prefix that is used to access the attributes. Character Key: Prefix that is used to access the character content.","title":"Node Reference"},{"location":"integrations/core-nodes/n8n-nodes-base.xml/#example-usage","text":"This workflow allows you to convert the JSON data received from the CocktailDB API to XML. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - HTTP Request - XML The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/core-nodes/n8n-nodes-base.xml/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/core-nodes/n8n-nodes-base.xml/#2-http-request-node-get","text":"Enter https://www.thecocktaildb.com/api/json/v1/1/random.php in the URL field. Click on Execute Node to run the node.","title":"2. HTTP Request node (GET)"},{"location":"integrations/core-nodes/n8n-nodes-base.xml/#3-xml-node-json-to-xml","text":"Select 'JSON to XML' from the Mode dropdown list. Click on Execute Node to run the node.","title":"3. XML node (JSON to XML)"},{"location":"integrations/creating-nodes/","text":"Overview # Learn how to build your own custom nodes.","title":"Overview"},{"location":"integrations/creating-nodes/#overview","text":"Learn how to build your own custom nodes.","title":"Overview"},{"location":"integrations/creating-nodes/code/","text":"Creating nodes: programmatic approach #","title":"Overview"},{"location":"integrations/creating-nodes/code/#creating-nodes-programmatic-approach","text":"","title":"Creating nodes: programmatic approach"},{"location":"integrations/creating-nodes/code/create-first-node/","text":"Creating Your First Node # Today, you will learn how to create your first node for n8n. Prerequisites # You have knowledge of: JavaScript/TypeScript REST APIs Expressions in n8n Install the following tools: Git: You can find instructions on how to install Git here . Node.js and npm: You can find instructions how to install both using nvm (Node Version Manager) here . The current minimum version is 14.15 . In case you already have Node.js and npm installed, you can check the current version with the following command: bash node -v npm -v NOTE: Use node version 14.x and npm version 6.x . If using npm version 7+ , you must enable legacy peer dependencies by setting: npm config set legacy-peer-deps true . Lerna: You can install lerna globally with the following command: 1 npm install --global lerna Selecting the node # The first thing that we have to do is pick the service we want to create the node for. We will use SendGrid as an example. For the sake of brevity, we will only showcase how to add the functionality to create a contact. Since n8n's repository already has a SendGrid node, we will name this node FriendGrid to avoid conflicts. Cloning the repository # In GitHub, fork the n8n repository . Clone it by running the following command in your terminal (don't forget to replace <USERNAME> with your GitHub username): 1 git clone https://github.com/<USERNAME>/n8n.git && cd n8n n8n is built from four main packages: cli core editor-ui nodes-base All these packages are under the /packages folder in the main n8n folder. We will be working in the nodes-base folder as it contains everything related to nodes. Specifically, /packages/nodes-base/nodes , packages/nodes-base/credentials , and packages/nodes-base/package.json . The folder nodes , contains all the nodes in n8n. The folder credentials contains all the credentials that the different nodes use. Each node can define multiple credentials. For example, OAuth2 or API Key. Each credential requires different parameters that the user will have to input. The credentials data that the user provides is stored in an encrypted format in n8n's database. The file package.json contains all the npm packages that the nodes use. It also contains all the nodes and credentials that are loaded when n8n is started. Creating the node # Go to packages/nodes-base/nodes . Create a folder called FriendGrid (the folder names are PascalCase). Within the FriendGrid folder, create a file called FriendGrid.node.ts (YourNodeName.node.ts). Download and add the FriendGrid icon to the folder. Name it friendGrid.svg . The icon property has to be either a 60x60 pixels PNG or an SVG and must exist in the node\u2019s folder. An SVG is preferable. In case you have to use a PNG, make sure that it is compressed. A good tool for that is tinypng . A good place to find company icons is gilbarbara/logos . Paste the following code in the FriendGrid.node.ts file. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 import { IExecuteFunctions , } from 'n8n-core' ; import { IDataObject , INodeExecutionData , INodeType , INodeTypeDescription , } from 'n8n-workflow' ; import { OptionsWithUri , } from 'request' ; export class FriendGrid implements INodeType { description : INodeTypeDescription = { displayName : 'FriendGrid' , name : 'friendGrid' , icon : 'file:friendGrid.svg' , group : [ 'transform' ], version : 1 , description : 'Consume FriendGrid API' , defaults : { name : 'FriendGrid' , color : '#1A82e2' , }, inputs : [ 'main' ], outputs : [ 'main' ], credentials : [ ], properties : [ // Node properties which the user gets displayed and // can change on the node. ], }; async execute ( this : IExecuteFunctions ) : Promise < INodeExecutionData [][] > { return [[]]; } } Your directory structure should now look like the following. Adding the node to Editor UI # n8n uses the properties set in the property description to render the node in the Editor UI. These properties are displayName , name , color , icon , description , and subtitle . Check the following figure to see how the properties affect the looks of the node. Note: The property description conforms to INodeTypeDescription . Let's see how the node looks in the UI by following these steps: Go to /packages/nodes-base/package.json . Paste \"dist/nodes/FriendGrid/FriendGrid.node.js\", in the nodes array to register the node (in an alphabetical order). Go to the project's main folder (n8n) in the terminal and run the following commands (it can take a few minutes). The first command installs all dependencies of all the modules and links them together. The second command builds all the code. The third command starts n8n in development mode. 1 2 3 lerna bootstrap --hoist npm run build npm run dev Open your browser and go to localhost:8080 and you should be able to see the Editor UI. Open the Create Node menu, type FriendGrid , and click on it to add the node to the Editor UI. Notes - On startup, n8n will load all the nodes and credentials (more about credentials later) that are registered in /packages/nodes-base/package.json . - The property description.name uses camelCase. - The property description.color is the company branding's hexadecimal color. This is usually available on the company's website under style guide. In case the website does not include this information, there are other websites that help you get a company\u2019s branding colors. For example, brandpalettes.com . Creating the UI for the node # Double-clicking on the FriendGrid node will open the Node Editor View. It will be empty since we haven't added any UI components yet. Luckily, n8n provides predefined JSON-based UI components that we can use to ask the user for different types of data. SendGrid's docs mention that to create a contact, we need to provide the following pieces of information: email - Required first_name - Optional last_name - Optional There are more parameters that can be provided to create a contact in FriendGrid, but we will use only these three in this tutorial. Resources and operations # Now, n8n requires a couple of parameters as well: resource - Required operation - Required You can get the node to work without these two parameters, but these should be added for the sake of consistency with the other nodes. Resources and Operations help in organizing all the functionalities of a node. These ensure that all the functionalities of a node remain easily discoverable as the node grows. The resource value is always singular and its value is the name of the API resource that we want to use. Since we are working with contacts, the resource value would be contact . The operation value is always singular as well and it is the name of the operation to perform over the resource. Since we are creating contacts, the operation value would be create . You might say that you can \u201cAdd a contact\u201d and you are right, but we try to use the same operations (create, delete, get, getAll and update) across all the nodes. Adding required fields # Let\u2019s make the Node Editor View ask for these parameters: Add the following under description.properties in packages/nodes-base/nodes/FriendGrid/FriendGrid.node.ts . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 { displayName : 'Resource' , name : 'resource' , type : 'options' , options : [ { name : 'Contact' , value : 'contact' , }, ], default : 'contact' , required : true , description : 'Resource to consume' , }, { displayName : 'Operation' , name : 'operation' , type : 'options' , displayOptions : { show : { resource : [ 'contact' , ], }, }, options : [ { name : 'Create' , value : 'create' , description : 'Create a contact' , }, ], default : 'create' , description : 'The operation to perform.' , }, { displayName : 'Email' , name : 'email' , type : 'string' , required : true , displayOptions : { show : { operation : [ 'create' , ], resource : [ 'contact' , ], }, }, default : '' , description : 'Primary email for the contact' , }, Stop the current n8n process by pressing ctrl + c in the terminal in which you are running n8n. Run again, by entering the following in the terminal. 1 npm run dev Go to localhost:8080 , refresh the page, and open the node again. The node should now look like in the following image. Adding optional fields # We have given the node the possibility to ask for all the required parameters needed to create a contact. But, what about the optional parameters? We can add them below the email parameter and set required: false . However, if we had more than two optional parameters, and most APIs do, the UI would become overwhelming for the users. To avoid this, we use a UI element named collection (usually called 'Additional Fields') to group all the optional parameters together. Add the following below the email field in packages/nodes-base/nodes/FriendGrid/FriendGrid.node.ts . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 { displayName : 'Additional Fields' , name : 'additionalFields' , type : 'collection' , placeholder : 'Add Field' , default : {}, displayOptions : { show : { resource : [ 'contact' , ], operation : [ 'create' , ], }, }, options : [ { displayName : 'First Name' , name : 'firstName' , type : 'string' , default : '' , }, { displayName : 'Last Name' , name : 'lastName' , type : 'string' , default : '' , }, ], }, Stop the current n8n process by pressing ctrl + c in the terminal in which you are running n8n. Run again, by entering the following in the terminal. 1 npm run dev Go to localhost:8080 , refresh the page, and open the node again. The node should now look like in the following image. Now all our optional fields are presented in the UI and can be set individually depending on the user\u2019s use-case. Creating the UI for credentials # Most REST APIs use some sort of authentication mechanism. FriendGrid's REST API uses API Keys. The API Key informs them about who is making the request to their system and gives you access to all the functionality that the API provides. Given all the things it can do, this has to be treated as a sensitive piece of information and should be kept private. n8n gives you the ability to ask for sensitive information using credentials. In the credentials, you can use all the generally available UI elements. Additionally, the data that is stored using the credentials would be encrypted before being saved to the database. In order to do that, n8n uses an encryption key. With that in mind, let\u2019s create the UI to ask for the user\u2019s FriendGrid API Key. The process of creating and registering credentials is similar to that of creating and registering the node: Go to packages/nodes-base/credentials . Within the credentials folder, create a file named FriendGridApi.credentials.ts . Paste the following code. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import { ICredentialType , NodePropertyTypes , } from 'n8n-workflow' ; export class FriendGridApi implements ICredentialType { name = 'friendGridApi' ; displayName = 'FriendGrid API' ; documentationUrl = 'friendGrid' ; properties = [ { displayName : 'API Key' , name : 'apiKey' , type : 'string' as NodePropertyTypes , default : '' , }, ]; } Go to /packages/nodes-base/package.json . Paste \"dist/credentials/FriendGridApi.credentials.js\", in the credentials array to register the credentials (in an alphabetical order). Got to packages/nodes-base/nodes/FriendGrid/FriendGrid.node.ts . Associate the credentials with the node by adding the following to description.credentials . 1 2 3 4 { name : 'friendGridApi' , required : true , }, Stop the current n8n process by pressing ctrl + c in the terminal in which you are running n8n. Run again, by entering the following in the terminal. 1 npm run dev When you go to the Node Editor view, you should see the following. Mapping the UI fields to the API # With the UI that we added, we now have all the data that we need to make a request to the FriendGrid API and create contacts. This is where the execute method comes into play. Every time the node is executed, this method will be run. Within this method, we can have access to the input items and to the parameters that the user set in the UI, including the credentials. To map the fields to the API, perform the following steps: Go to package/nodes-base/nodes/FriendGrid.node.ts . Replace the current execute method with the following code. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 async execute ( this : IExecuteFunctions ) : Promise < INodeExecutionData [][] > { let responseData ; const resource = this . getNodeParameter ( 'resource' , 0 ) as string ; const operation = this . getNodeParameter ( 'operation' , 0 ) as string ; //Get credentials the user provided for this node const credentials = await this . getCredentials ( 'friendGridApi' ) as IDataObject ; if ( resource === 'contact' ) { if ( operation === 'create' ) { // get email input const email = this . getNodeParameter ( 'email' , 0 ) as string ; // get additional fields input const additionalFields = this . getNodeParameter ( 'additionalFields' , 0 ) as IDataObject ; const data : IDataObject = { email , }; Object . assign ( data , additionalFields ); //Make http request according to <https://sendgrid.com/docs/api-reference/> const options : OptionsWithUri = { headers : { 'Accept' : 'application/json' , 'Authorization' : `Bearer ${ credentials . apiKey } ` , }, method : 'PUT' , body : { contacts : [ data , ], }, uri : `https://api.sendgrid.com/v3/marketing/contacts` , json : true , }; responseData = await this . helpers . request ( options ); } } // Map data to n8n data return [ this . helpers . returnJsonArray ( responseData )]; } Stop the current n8n process by pressing ctrl + c in the terminal in which you are running n8n. Run again, by entering the following in the terminal. 1 npm run dev Enter the credentials (FriendGrid API Key), contact parameters, and execute the node. Instructions to find the FriendGrid API Key can be found here . If everything went well, you should see the following. Now we can successfully create contacts in FriendGrid from n8n. Processing multiples items # In real life, you'll probably have a workflow with more than one node. Our current implementation does not play well with the other nodes. If the data is coming into our FriendGrid node from another node, and that outputs, for example, two contacts, our node will process just the first contact. We want our node to process as many items as it receives. This is when the this.getInputData() function comes into play. Let's update our node so that it can process multiple items. In the Editor UI, create a new workflow. Add a Function node and connect it to the Start node. Open the function node and replace the existing code with the following. 1 2 3 4 5 6 7 8 9 10 11 12 return [ { json : { name : 'ricardo@n8n.io' } }, { json : { name : 'hello@n8n.io' } }, ] Execute the Function node. We're using the function node for testing, but you can think of it as any node that is returning \u201ctwo people\u201d (or more). These two people need to be added to FriendGrid as contacts. Add a FriendGrid node to the workflow and connect it to the Function node. Add an expression in the Email field of the FriendGrid node and reference the name property that the Function node outputs. Replace the existing execute method with the following: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 async execute ( this : IExecuteFunctions ) : Promise < INodeExecutionData [][] > { const items = this . getInputData (); let responseData ; const returnData = []; const resource = this . getNodeParameter ( 'resource' , 0 ) as string ; const operation = this . getNodeParameter ( 'operation' , 0 ) as string ; //Get credentials the user provided for this node const credentials = await this . getCredentials ( 'friendGridApi' ) as IDataObject ; for ( let i = 0 ; i < items . length ; i ++ ) { if ( resource === 'contact' ) { if ( operation === 'create' ) { // get email input const email = this . getNodeParameter ( 'email' , i ) as string ; // i = 1 returns ricardo@n8n.io // i = 2 returns hello@n8n.io // get additional fields input const additionalFields = this . getNodeParameter ( 'additionalFields' , i ) as IDataObject ; const data : IDataObject = { email , }; Object . assign ( data , additionalFields ); //Make http request according to <https://sendgrid.com/docs/api-reference/> const options : OptionsWithUri = { headers : { 'Accept' : 'application/json' , 'Authorization' : `Bearer ${ credentials . apiKey } ` , }, method : 'PUT' , body : { contacts : [ data , ], }, uri : `https://api.sendgrid.com/v3/marketing/contacts` , json : true , }; responseData = await this . helpers . request ( options ); returnData . push ( responseData ); } } } // Map data to n8n data structure return [ this . helpers . returnJsonArray ( returnData )]; } Execute the workflow. If you open the FriendGrid node, you should see the following. ![Output of the FriendGrid node]((/_images/integrations/creating-nodes/code/final-friendgrid.png) As showcased above, both the items were processed. That\u2019s how all nodes in n8n work (with a few exceptions). They will automatically iterate over all the items and process them. Let\u2019s go over the final version of the execute method. We are getting the items returned by the this.getInputData() function and iterating over all of them. Additionally, while doing so, we use the item index to get the correct parameter value using the function this.getNodeParameters() . For example, with the following input: 1 2 3 4 5 6 7 8 9 10 11 12 [ { json : { name : 'ricardo@n8n.io' } }, { json : { name : 'hello@n8n.io' } }, ] The this.getNodeParameters(ParameterName, index) function outputs the following: Index Parameter Name Output 0 email ricardo@n8n.io 1 email hello@n8n.io We used the this.helpers.request(options) method to make the HTTP Request that creates the contact in FriendGrid. The FriendGrid endpoint returns something like this: 1 2 3 { job_id : \"b82aca74-3640-4097-85ec-7801d833c2cb\" } We then used the this.helpers.returnJsonArray() method to map the API\u2019s output data to n8n's data structure. The node then ends up returning the data like the following: 1 2 3 4 5 6 7 [ { json : { job_id : \"b82aca74-3640-4097-85ec-7801d833c2cb\" } } ] Summary # In this tutorial, we implemented the \"Create a Contact\" functionality of the FriendGrid API. First of all, we made the node show up in the Editor UI and in the Create Node menu with FriendGrid's branding. Then, we added the fields necessary to create a contact in FriendGrid. We also added the credentials so that the API Key could be stored safely. Finally, we mapped all the parameters to the FriendGrid API. This is just the tip of the iceberg. We built a regular node that consumes a REST API, but a regular node can do everything that can be done with Node.js. Aside from regular nodes you can also build Trigger nodes. Next steps # Once you have created the node and want to contribute to n8n, please check the Node Review Checklist . Make sure you complete the checklist before creating a pull request.","title":"Create your first node"},{"location":"integrations/creating-nodes/code/create-first-node/#creating-your-first-node","text":"Today, you will learn how to create your first node for n8n.","title":"Creating Your First Node"},{"location":"integrations/creating-nodes/code/create-first-node/#prerequisites","text":"You have knowledge of: JavaScript/TypeScript REST APIs Expressions in n8n Install the following tools: Git: You can find instructions on how to install Git here . Node.js and npm: You can find instructions how to install both using nvm (Node Version Manager) here . The current minimum version is 14.15 . In case you already have Node.js and npm installed, you can check the current version with the following command: bash node -v npm -v NOTE: Use node version 14.x and npm version 6.x . If using npm version 7+ , you must enable legacy peer dependencies by setting: npm config set legacy-peer-deps true . Lerna: You can install lerna globally with the following command: 1 npm install --global lerna","title":"Prerequisites"},{"location":"integrations/creating-nodes/code/create-first-node/#selecting-the-node","text":"The first thing that we have to do is pick the service we want to create the node for. We will use SendGrid as an example. For the sake of brevity, we will only showcase how to add the functionality to create a contact. Since n8n's repository already has a SendGrid node, we will name this node FriendGrid to avoid conflicts.","title":"Selecting the node"},{"location":"integrations/creating-nodes/code/create-first-node/#cloning-the-repository","text":"In GitHub, fork the n8n repository . Clone it by running the following command in your terminal (don't forget to replace <USERNAME> with your GitHub username): 1 git clone https://github.com/<USERNAME>/n8n.git && cd n8n n8n is built from four main packages: cli core editor-ui nodes-base All these packages are under the /packages folder in the main n8n folder. We will be working in the nodes-base folder as it contains everything related to nodes. Specifically, /packages/nodes-base/nodes , packages/nodes-base/credentials , and packages/nodes-base/package.json . The folder nodes , contains all the nodes in n8n. The folder credentials contains all the credentials that the different nodes use. Each node can define multiple credentials. For example, OAuth2 or API Key. Each credential requires different parameters that the user will have to input. The credentials data that the user provides is stored in an encrypted format in n8n's database. The file package.json contains all the npm packages that the nodes use. It also contains all the nodes and credentials that are loaded when n8n is started.","title":"Cloning the repository"},{"location":"integrations/creating-nodes/code/create-first-node/#creating-the-node","text":"Go to packages/nodes-base/nodes . Create a folder called FriendGrid (the folder names are PascalCase). Within the FriendGrid folder, create a file called FriendGrid.node.ts (YourNodeName.node.ts). Download and add the FriendGrid icon to the folder. Name it friendGrid.svg . The icon property has to be either a 60x60 pixels PNG or an SVG and must exist in the node\u2019s folder. An SVG is preferable. In case you have to use a PNG, make sure that it is compressed. A good tool for that is tinypng . A good place to find company icons is gilbarbara/logos . Paste the following code in the FriendGrid.node.ts file. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 import { IExecuteFunctions , } from 'n8n-core' ; import { IDataObject , INodeExecutionData , INodeType , INodeTypeDescription , } from 'n8n-workflow' ; import { OptionsWithUri , } from 'request' ; export class FriendGrid implements INodeType { description : INodeTypeDescription = { displayName : 'FriendGrid' , name : 'friendGrid' , icon : 'file:friendGrid.svg' , group : [ 'transform' ], version : 1 , description : 'Consume FriendGrid API' , defaults : { name : 'FriendGrid' , color : '#1A82e2' , }, inputs : [ 'main' ], outputs : [ 'main' ], credentials : [ ], properties : [ // Node properties which the user gets displayed and // can change on the node. ], }; async execute ( this : IExecuteFunctions ) : Promise < INodeExecutionData [][] > { return [[]]; } } Your directory structure should now look like the following.","title":"Creating the node"},{"location":"integrations/creating-nodes/code/create-first-node/#adding-the-node-to-editor-ui","text":"n8n uses the properties set in the property description to render the node in the Editor UI. These properties are displayName , name , color , icon , description , and subtitle . Check the following figure to see how the properties affect the looks of the node. Note: The property description conforms to INodeTypeDescription . Let's see how the node looks in the UI by following these steps: Go to /packages/nodes-base/package.json . Paste \"dist/nodes/FriendGrid/FriendGrid.node.js\", in the nodes array to register the node (in an alphabetical order). Go to the project's main folder (n8n) in the terminal and run the following commands (it can take a few minutes). The first command installs all dependencies of all the modules and links them together. The second command builds all the code. The third command starts n8n in development mode. 1 2 3 lerna bootstrap --hoist npm run build npm run dev Open your browser and go to localhost:8080 and you should be able to see the Editor UI. Open the Create Node menu, type FriendGrid , and click on it to add the node to the Editor UI. Notes - On startup, n8n will load all the nodes and credentials (more about credentials later) that are registered in /packages/nodes-base/package.json . - The property description.name uses camelCase. - The property description.color is the company branding's hexadecimal color. This is usually available on the company's website under style guide. In case the website does not include this information, there are other websites that help you get a company\u2019s branding colors. For example, brandpalettes.com .","title":"Adding the node to Editor UI"},{"location":"integrations/creating-nodes/code/create-first-node/#creating-the-ui-for-the-node","text":"Double-clicking on the FriendGrid node will open the Node Editor View. It will be empty since we haven't added any UI components yet. Luckily, n8n provides predefined JSON-based UI components that we can use to ask the user for different types of data. SendGrid's docs mention that to create a contact, we need to provide the following pieces of information: email - Required first_name - Optional last_name - Optional There are more parameters that can be provided to create a contact in FriendGrid, but we will use only these three in this tutorial.","title":"Creating the UI for the node"},{"location":"integrations/creating-nodes/code/create-first-node/#resources-and-operations","text":"Now, n8n requires a couple of parameters as well: resource - Required operation - Required You can get the node to work without these two parameters, but these should be added for the sake of consistency with the other nodes. Resources and Operations help in organizing all the functionalities of a node. These ensure that all the functionalities of a node remain easily discoverable as the node grows. The resource value is always singular and its value is the name of the API resource that we want to use. Since we are working with contacts, the resource value would be contact . The operation value is always singular as well and it is the name of the operation to perform over the resource. Since we are creating contacts, the operation value would be create . You might say that you can \u201cAdd a contact\u201d and you are right, but we try to use the same operations (create, delete, get, getAll and update) across all the nodes.","title":"Resources and operations"},{"location":"integrations/creating-nodes/code/create-first-node/#adding-required-fields","text":"Let\u2019s make the Node Editor View ask for these parameters: Add the following under description.properties in packages/nodes-base/nodes/FriendGrid/FriendGrid.node.ts . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 { displayName : 'Resource' , name : 'resource' , type : 'options' , options : [ { name : 'Contact' , value : 'contact' , }, ], default : 'contact' , required : true , description : 'Resource to consume' , }, { displayName : 'Operation' , name : 'operation' , type : 'options' , displayOptions : { show : { resource : [ 'contact' , ], }, }, options : [ { name : 'Create' , value : 'create' , description : 'Create a contact' , }, ], default : 'create' , description : 'The operation to perform.' , }, { displayName : 'Email' , name : 'email' , type : 'string' , required : true , displayOptions : { show : { operation : [ 'create' , ], resource : [ 'contact' , ], }, }, default : '' , description : 'Primary email for the contact' , }, Stop the current n8n process by pressing ctrl + c in the terminal in which you are running n8n. Run again, by entering the following in the terminal. 1 npm run dev Go to localhost:8080 , refresh the page, and open the node again. The node should now look like in the following image.","title":"Adding required fields"},{"location":"integrations/creating-nodes/code/create-first-node/#adding-optional-fields","text":"We have given the node the possibility to ask for all the required parameters needed to create a contact. But, what about the optional parameters? We can add them below the email parameter and set required: false . However, if we had more than two optional parameters, and most APIs do, the UI would become overwhelming for the users. To avoid this, we use a UI element named collection (usually called 'Additional Fields') to group all the optional parameters together. Add the following below the email field in packages/nodes-base/nodes/FriendGrid/FriendGrid.node.ts . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 { displayName : 'Additional Fields' , name : 'additionalFields' , type : 'collection' , placeholder : 'Add Field' , default : {}, displayOptions : { show : { resource : [ 'contact' , ], operation : [ 'create' , ], }, }, options : [ { displayName : 'First Name' , name : 'firstName' , type : 'string' , default : '' , }, { displayName : 'Last Name' , name : 'lastName' , type : 'string' , default : '' , }, ], }, Stop the current n8n process by pressing ctrl + c in the terminal in which you are running n8n. Run again, by entering the following in the terminal. 1 npm run dev Go to localhost:8080 , refresh the page, and open the node again. The node should now look like in the following image. Now all our optional fields are presented in the UI and can be set individually depending on the user\u2019s use-case.","title":"Adding optional fields"},{"location":"integrations/creating-nodes/code/create-first-node/#creating-the-ui-for-credentials","text":"Most REST APIs use some sort of authentication mechanism. FriendGrid's REST API uses API Keys. The API Key informs them about who is making the request to their system and gives you access to all the functionality that the API provides. Given all the things it can do, this has to be treated as a sensitive piece of information and should be kept private. n8n gives you the ability to ask for sensitive information using credentials. In the credentials, you can use all the generally available UI elements. Additionally, the data that is stored using the credentials would be encrypted before being saved to the database. In order to do that, n8n uses an encryption key. With that in mind, let\u2019s create the UI to ask for the user\u2019s FriendGrid API Key. The process of creating and registering credentials is similar to that of creating and registering the node: Go to packages/nodes-base/credentials . Within the credentials folder, create a file named FriendGridApi.credentials.ts . Paste the following code. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import { ICredentialType , NodePropertyTypes , } from 'n8n-workflow' ; export class FriendGridApi implements ICredentialType { name = 'friendGridApi' ; displayName = 'FriendGrid API' ; documentationUrl = 'friendGrid' ; properties = [ { displayName : 'API Key' , name : 'apiKey' , type : 'string' as NodePropertyTypes , default : '' , }, ]; } Go to /packages/nodes-base/package.json . Paste \"dist/credentials/FriendGridApi.credentials.js\", in the credentials array to register the credentials (in an alphabetical order). Got to packages/nodes-base/nodes/FriendGrid/FriendGrid.node.ts . Associate the credentials with the node by adding the following to description.credentials . 1 2 3 4 { name : 'friendGridApi' , required : true , }, Stop the current n8n process by pressing ctrl + c in the terminal in which you are running n8n. Run again, by entering the following in the terminal. 1 npm run dev When you go to the Node Editor view, you should see the following.","title":"Creating the UI for credentials"},{"location":"integrations/creating-nodes/code/create-first-node/#mapping-the-ui-fields-to-the-api","text":"With the UI that we added, we now have all the data that we need to make a request to the FriendGrid API and create contacts. This is where the execute method comes into play. Every time the node is executed, this method will be run. Within this method, we can have access to the input items and to the parameters that the user set in the UI, including the credentials. To map the fields to the API, perform the following steps: Go to package/nodes-base/nodes/FriendGrid.node.ts . Replace the current execute method with the following code. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 async execute ( this : IExecuteFunctions ) : Promise < INodeExecutionData [][] > { let responseData ; const resource = this . getNodeParameter ( 'resource' , 0 ) as string ; const operation = this . getNodeParameter ( 'operation' , 0 ) as string ; //Get credentials the user provided for this node const credentials = await this . getCredentials ( 'friendGridApi' ) as IDataObject ; if ( resource === 'contact' ) { if ( operation === 'create' ) { // get email input const email = this . getNodeParameter ( 'email' , 0 ) as string ; // get additional fields input const additionalFields = this . getNodeParameter ( 'additionalFields' , 0 ) as IDataObject ; const data : IDataObject = { email , }; Object . assign ( data , additionalFields ); //Make http request according to <https://sendgrid.com/docs/api-reference/> const options : OptionsWithUri = { headers : { 'Accept' : 'application/json' , 'Authorization' : `Bearer ${ credentials . apiKey } ` , }, method : 'PUT' , body : { contacts : [ data , ], }, uri : `https://api.sendgrid.com/v3/marketing/contacts` , json : true , }; responseData = await this . helpers . request ( options ); } } // Map data to n8n data return [ this . helpers . returnJsonArray ( responseData )]; } Stop the current n8n process by pressing ctrl + c in the terminal in which you are running n8n. Run again, by entering the following in the terminal. 1 npm run dev Enter the credentials (FriendGrid API Key), contact parameters, and execute the node. Instructions to find the FriendGrid API Key can be found here . If everything went well, you should see the following. Now we can successfully create contacts in FriendGrid from n8n.","title":"Mapping the UI fields to the API"},{"location":"integrations/creating-nodes/code/create-first-node/#processing-multiples-items","text":"In real life, you'll probably have a workflow with more than one node. Our current implementation does not play well with the other nodes. If the data is coming into our FriendGrid node from another node, and that outputs, for example, two contacts, our node will process just the first contact. We want our node to process as many items as it receives. This is when the this.getInputData() function comes into play. Let's update our node so that it can process multiple items. In the Editor UI, create a new workflow. Add a Function node and connect it to the Start node. Open the function node and replace the existing code with the following. 1 2 3 4 5 6 7 8 9 10 11 12 return [ { json : { name : 'ricardo@n8n.io' } }, { json : { name : 'hello@n8n.io' } }, ] Execute the Function node. We're using the function node for testing, but you can think of it as any node that is returning \u201ctwo people\u201d (or more). These two people need to be added to FriendGrid as contacts. Add a FriendGrid node to the workflow and connect it to the Function node. Add an expression in the Email field of the FriendGrid node and reference the name property that the Function node outputs. Replace the existing execute method with the following: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 async execute ( this : IExecuteFunctions ) : Promise < INodeExecutionData [][] > { const items = this . getInputData (); let responseData ; const returnData = []; const resource = this . getNodeParameter ( 'resource' , 0 ) as string ; const operation = this . getNodeParameter ( 'operation' , 0 ) as string ; //Get credentials the user provided for this node const credentials = await this . getCredentials ( 'friendGridApi' ) as IDataObject ; for ( let i = 0 ; i < items . length ; i ++ ) { if ( resource === 'contact' ) { if ( operation === 'create' ) { // get email input const email = this . getNodeParameter ( 'email' , i ) as string ; // i = 1 returns ricardo@n8n.io // i = 2 returns hello@n8n.io // get additional fields input const additionalFields = this . getNodeParameter ( 'additionalFields' , i ) as IDataObject ; const data : IDataObject = { email , }; Object . assign ( data , additionalFields ); //Make http request according to <https://sendgrid.com/docs/api-reference/> const options : OptionsWithUri = { headers : { 'Accept' : 'application/json' , 'Authorization' : `Bearer ${ credentials . apiKey } ` , }, method : 'PUT' , body : { contacts : [ data , ], }, uri : `https://api.sendgrid.com/v3/marketing/contacts` , json : true , }; responseData = await this . helpers . request ( options ); returnData . push ( responseData ); } } } // Map data to n8n data structure return [ this . helpers . returnJsonArray ( returnData )]; } Execute the workflow. If you open the FriendGrid node, you should see the following. ![Output of the FriendGrid node]((/_images/integrations/creating-nodes/code/final-friendgrid.png) As showcased above, both the items were processed. That\u2019s how all nodes in n8n work (with a few exceptions). They will automatically iterate over all the items and process them. Let\u2019s go over the final version of the execute method. We are getting the items returned by the this.getInputData() function and iterating over all of them. Additionally, while doing so, we use the item index to get the correct parameter value using the function this.getNodeParameters() . For example, with the following input: 1 2 3 4 5 6 7 8 9 10 11 12 [ { json : { name : 'ricardo@n8n.io' } }, { json : { name : 'hello@n8n.io' } }, ] The this.getNodeParameters(ParameterName, index) function outputs the following: Index Parameter Name Output 0 email ricardo@n8n.io 1 email hello@n8n.io We used the this.helpers.request(options) method to make the HTTP Request that creates the contact in FriendGrid. The FriendGrid endpoint returns something like this: 1 2 3 { job_id : \"b82aca74-3640-4097-85ec-7801d833c2cb\" } We then used the this.helpers.returnJsonArray() method to map the API\u2019s output data to n8n's data structure. The node then ends up returning the data like the following: 1 2 3 4 5 6 7 [ { json : { job_id : \"b82aca74-3640-4097-85ec-7801d833c2cb\" } } ]","title":"Processing multiples items"},{"location":"integrations/creating-nodes/code/create-first-node/#summary","text":"In this tutorial, we implemented the \"Create a Contact\" functionality of the FriendGrid API. First of all, we made the node show up in the Editor UI and in the Create Node menu with FriendGrid's branding. Then, we added the fields necessary to create a contact in FriendGrid. We also added the credentials so that the API Key could be stored safely. Finally, we mapped all the parameters to the FriendGrid API. This is just the tip of the iceberg. We built a regular node that consumes a REST API, but a regular node can do everything that can be done with Node.js. Aside from regular nodes you can also build Trigger nodes.","title":"Summary"},{"location":"integrations/creating-nodes/code/create-first-node/#next-steps","text":"Once you have created the node and want to contribute to n8n, please check the Node Review Checklist . Make sure you complete the checklist before creating a pull request.","title":"Next steps"},{"location":"integrations/creating-nodes/code/create-n8n-nodes-module/","text":"Creating n8n-nodes-module # In this guide, you\u2019ll learn to create a custom n8n-nodes-module that can be installed separately alongside your n8n instance. The n8n-nodes-module is an npm package that contains the node. Your custom node will get loaded automatically when n8n starts. Consider creating n8n-nodes-module if any of the following conditions satisfy your needs: - The nodes are only for yourself, your organization, or a small group of people. - The nodes require external dependencies that are not already available in n8n. NOTE: n8n-nodes-module can only be installed in self-hosted n8n instances. This functionality is currently not available on n8n.cloud or the desktop app. There are plans to introduce this functionality in the future. Prerequisites # You may already be familiar with creating nodes in n8n. If you are unfamiliar with how to create n8n nodes, you can learn about it following the instructions mentioned in the Creating Your First Node tutorial. Install the following tools: Git: You can find instructions on how to install Git here . Node.js and npm: You can find instructions how to install both using nvm (Node Version Manager) here . The current minimum version is 14.15 . In case you already have Node.js and npm installed, you can check the current version with the following command: 1 2 node -v npm -v NOTE: Use node version 14.x and npm version 6.x . If using npm version 7+ , you must enable legacy peer dependencies by setting: npm config set legacy-peer-deps true . Lerna: You can install lerna globally with the following command: 1 npm i Install n8n: Create a new folder and install n8n using the command: 1 npm install n8n Create custom n8n-nodes-module # You can create multiple n8n-nodes-modules. Each individual n8n-nodes-module should get created in a separate folder since they are different npm packages. A single n8n-nodes-module can contain multiple nodes. If you\u2019re creating multiple nodes in the same module, as a best practice create each node in a separate folder. In this tutorial, you will create an n8n-nodes-module for the OpenWeatherMap API. You will name it n8n-nodes-weather . To quickly get started, clone the example starter using the following command: 1 git clone https://github.com/n8n-io/n8n-nodes-starter.git n8n-nodes-weather. After the repo gets cloned, open the package.json file, and update the value of the name by replacing n8n-nodes-starter with n8n-nodes-weather . NOTE: The name of the module has to start with n8n-nodes- . Open the cloned repository in your code editor, and create a new folder called Weather , inside the nodes folder. Create Weather.node.ts file inside the Weather folder and paste the following codeimport { IExecuteFunctions , } from 'n8n-core' ; import { IDataObject , INodeExecutionData , INodeType , INodeTypeDescription , NodeApiError , NodeOperationError , } from 'n8n-workflow' ; import { OptionsWithUri } from 'request' ; export class Weather implements INodeType { description : INodeTypeDescription = { displayName : 'Weather' , name : 'Weather' , icon : 'fa:sun' , group : [ 'input' ], version : 1 , description : 'Gets current and future weather information' , defaults : { name : 'Weather' , color : '#554455' , }, inputs : [ 'main' ], outputs : [ 'main' ], credentials : [ { name : 'weatherApi' , required : true , }, ], properties : [ { displayName : 'Operation' , name : 'operation' , type : 'options' , options : [ { name : 'Current Weather' , value : 'currentWeather' , description : 'Returns the current weather data' , }, { name : '5 day Forecast' , value : '5DayForecast' , description : 'Returns the weather data for the next 5 days' , }, ], default : 'currentWeather' , description : 'The operation to perform.' , }, { displayName : 'Format' , name : 'format' , type : 'options' , options : [ { name : 'Imperial' , value : 'imperial' , description : 'Fahrenheit | miles/hour' , }, { name : 'Metric' , value : 'metric' , description : 'Celsius | meter/sec' , }, { name : 'Scientific' , value : 'standard' , description : 'Kelvin | meter/sec' , }, ], default : 'metric' , description : 'The format in which format the data should be returned.' , }, // ---------------------------------- // Location Information // ---------------------------------- { displayName : 'Location Selection' , name : 'locationSelection' , type : 'options' , options : [ { name : 'City Name' , value : 'cityName' , }, { name : 'City ID' , value : 'cityId' , }, { name : 'Coordinates' , value : 'coordinates' , }, { name : 'Zip Code' , value : 'zipCode' , }, ], default : 'cityName' , description : 'How to define the location for which to return the weather.' , }, { displayName : 'City' , name : 'cityName' , type : 'string' , default : '' , placeholder : 'berlin,de' , required : true , displayOptions : { show : { locationSelection : [ 'cityName' , ], }, }, description : 'The name of the city to return the weather of.' , }, { displayName : 'City ID' , name : 'cityId' , type : 'number' , default : 160001123 , required : true , displayOptions : { show : { locationSelection : [ 'cityId' , ], }, }, description : 'The id of city to return the weather of. List can be downloaded here: http://bulk.openweathermap.org/sample/' , }, { displayName : 'Latitude' , name : 'latitude' , type : 'string' , default : '' , placeholder : '13.39' , required : true , displayOptions : { show : { locationSelection : [ 'coordinates' , ], }, }, description : 'The latitude of the location to return the weather of.' , }, { displayName : 'Longitude' , name : 'longitude' , type : 'string' , default : '' , placeholder : '52.52' , required : true , displayOptions : { show : { locationSelection : [ 'coordinates' , ], }, }, description : 'The longitude of the location to return the weather of.' , }, { displayName : 'Zip Code' , name : 'zipCode' , type : 'string' , default : '' , placeholder : '10115,de' , required : true , displayOptions : { show : { locationSelection : [ 'zipCode' , ], }, }, description : 'The id of city to return the weather of. List can be downloaded here: http://bulk.openweathermap.org/sample/' , }, { displayName : 'Language' , name : 'language' , type : 'string' , default : '' , placeholder : 'en' , required : false , description : 'The two letter language code to get your output in (eg. en, de, ...).' , }, ], }; async execute ( this : IExecuteFunctions ) : Promise < INodeExecutionData [][] > { const items = this . getInputData (); const returnData : IDataObject [] = []; const credentials = await this . getCredentials ( 'openWeatherMapApi' ); if ( credentials === undefined ) { throw new NodeOperationError ( this . getNode (), 'No credentials got returned!' ); } const operation = this . getNodeParameter ( 'operation' , 0 ) as string ; let endpoint = '' ; let locationSelection ; let language ; let qs : IDataObject ; for ( let i = 0 ; i < items . length ; i ++ ) { try { // Set base data qs = { APPID : credentials.accessToken , units : this.getNodeParameter ( 'format' , i ) as string , }; // Get the location locationSelection = this . getNodeParameter ( 'locationSelection' , i ) as string ; if ( locationSelection === 'cityName' ) { qs . q = this . getNodeParameter ( 'cityName' , i ) as string ; } else if ( locationSelection === 'cityId' ) { qs . id = this . getNodeParameter ( 'cityId' , i ) as number ; } else if ( locationSelection === 'coordinates' ) { qs . lat = this . getNodeParameter ( 'latitude' , i ) as string ; qs . lon = this . getNodeParameter ( 'longitude' , i ) as string ; } else if ( locationSelection === 'zipCode' ) { qs . zip = this . getNodeParameter ( 'zipCode' , i ) as string ; } else { throw new NodeOperationError ( this . getNode (), `The locationSelection \" ${ locationSelection } \" is not known!` ); } // Get the language language = this . getNodeParameter ( 'language' , i ) as string ; if ( language ) { qs . lang = language ; } if ( operation === 'currentWeather' ) { // ---------------------------------- // currentWeather // ---------------------------------- endpoint = 'weather' ; } else if ( operation === '5DayForecast' ) { // ---------------------------------- // 5DayForecast // ---------------------------------- endpoint = 'forecast' ; } else { throw new NodeOperationError ( this . getNode (), `The operation \" ${ operation } \" is not known!` ); } const options : OptionsWithUri = { method : 'GET' , qs , uri : `https://api.openweathermap.org/data/2.5/ ${ endpoint } ` , json : true , }; let responseData ; try { responseData = await this . helpers . request ( options ); } catch ( error ) { throw new NodeApiError ( this . getNode (), error ); } returnData . push ( responseData as IDataObject ); } catch ( error ) { if ( this . continueOnFail ()) { returnData . push ({ json : { error : error.message }}); continue ; } throw error ; } } return [ this . helpers . returnJsonArray ( returnData )]; } } The OpenWeatherMap API requires credentials to return results successfully. Create WeatherApi.credentials.ts file in the Credentials folder and paste the following code: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import { ICredentialType , INodeProperties , } from 'n8n-workflow' ; export class WeatherApi implements ICredentialType { name = 'weatherApi' ; displayName = 'Weather API' ; properties : INodeProperties [] = [ { displayName : 'Access Token' , name : 'accessToken' , type : 'string' , default : '' , }, ]; } Add the newly created node and the credential to the package.json file. Add \"dist/nodes/Weather/Weather.node.js\" to the nodes array in the n8n object ( n8n.nodes ). Similarly, add \"dist/credentials/WeatherApi.credentials.js\" to the credentials array in the n8n object ( n8n.credentials ). Develop and test the module # Once you\u2019ve created the n8n-nodes-module, you need to build the code and publish the package locally to test it. Run the following commands: 1 2 3 4 5 6 7 8 # Install dependencies npm install # Build the code npm run build # \"Publish\" the package locally npm link NOTE: If you get permission errors, run the command as a root user with sudo , for example sudo npm link . In the terminal, open the folder where you installed n8n. Run the following command to install the locally published module. 1 2 # \"Install\" the above locally published module npm link n8n-nodes-weather Start n8n with the below command 1 ./node_modules/n8n/bin/n8n start You will now be able to test and use your newly created n8n-nodes-module. Publish the n8n-nodes-module # As mentioned, the n8n-nodes-module is an npm package. To make it available to others, you can publish it to the npm registry. Refer to the Publishing unscoped public packages guide to learn about publishing packages. Following the steps mentioned above, you can create multiple nodes within a single n8n-nodes-module. You can also create nodes that require dependencies that are not present in n8n. When creating an n8n-nodes-module make sure that you follow the following guidelines: The name of the module should start with n8n-nodes- . The package.json file has to contain a key n8n with the paths to nodes and credentials. The module has to be installed alongside n8n. Use the n8n-nodes-module in production # Once you test and publish your n8n-nodes-module you would want to use it in your production environment. If you\u2019re running n8n via Docker, you will have to create a Docker image with the node module installed in n8n. Follow the steps below to create your Docker image: Create a Dockerfile and paste the code from this Dockerfile . Add the following command in your Dockerfile before the font installation command. 1 RUN cd /usr/local/lib/node_modules/n8n && npm install n8n-nodes-weather Your Dockerfile should be as follow: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 FROM node:14.15-alpine # ARG N8N_VERSION RUN if [ -z \" $N8N_VERSION \" ] ; then echo \"The N8N_VERSION argument is missing!\" ; exit 1 ; fi # Update everything and install needed dependencies RUN apk add --update graphicsmagick tzdata git tini su-exec # # Set a custom user to not have n8n run as root USER root # Install n8n and the also temporary all the packages # it needs to build it correctly. RUN apk --update add --virtual build-dependencies python build-base ca-certificates && \\ npm_config_user = root npm install -g full-icu n8n && ls -a && \\ apk del build-dependencies \\ && rm -rf /root /tmp/* /var/cache/apk/* && mkdir /root ; # Install n8n-nodes-weather module RUN cd /usr/local/lib/node_modules/n8n && npm install n8n-nodes-weather # Install fonts RUN apk --no-cache add --virtual fonts msttcorefonts-installer fontconfig && \\ update-ms-fonts && \\ fc-cache -f && \\ apk del fonts && \\ find /usr/share/fonts/truetype/msttcorefonts/ -type l -exec unlink {} \\; \\ && rm -rf /root /tmp/* /var/cache/apk/* && mkdir /root ENV NODE_ICU_DATA /usr/local/lib/node_modules/full-icu WORKDIR /data COPY docker-entrypoint.sh /docker-entrypoint.sh RUN chmod +x /docker-entrypoint.sh ENTRYPOINT [ \"tini\" , \"--\" , \"/docker-entrypoint.sh\" ] EXPOSE 5678/tcp NOTE: Replace n8n-nodes-weather with the name of your n8n-nodes-module Build your Docker image using the docker build . command. You will now be able to use your n8n-nodes-module in Docker. If you\u2019re running either by installing it globally or via PM2, make sure that you install your n8n-nodes-module inside n8n. n8n will find the module and load it automatically.","title":"Create an n8n-nodes-module"},{"location":"integrations/creating-nodes/code/create-n8n-nodes-module/#creating-n8n-nodes-module","text":"In this guide, you\u2019ll learn to create a custom n8n-nodes-module that can be installed separately alongside your n8n instance. The n8n-nodes-module is an npm package that contains the node. Your custom node will get loaded automatically when n8n starts. Consider creating n8n-nodes-module if any of the following conditions satisfy your needs: - The nodes are only for yourself, your organization, or a small group of people. - The nodes require external dependencies that are not already available in n8n. NOTE: n8n-nodes-module can only be installed in self-hosted n8n instances. This functionality is currently not available on n8n.cloud or the desktop app. There are plans to introduce this functionality in the future.","title":"Creating n8n-nodes-module"},{"location":"integrations/creating-nodes/code/create-n8n-nodes-module/#prerequisites","text":"You may already be familiar with creating nodes in n8n. If you are unfamiliar with how to create n8n nodes, you can learn about it following the instructions mentioned in the Creating Your First Node tutorial. Install the following tools: Git: You can find instructions on how to install Git here . Node.js and npm: You can find instructions how to install both using nvm (Node Version Manager) here . The current minimum version is 14.15 . In case you already have Node.js and npm installed, you can check the current version with the following command: 1 2 node -v npm -v NOTE: Use node version 14.x and npm version 6.x . If using npm version 7+ , you must enable legacy peer dependencies by setting: npm config set legacy-peer-deps true . Lerna: You can install lerna globally with the following command: 1 npm i Install n8n: Create a new folder and install n8n using the command: 1 npm install n8n","title":"Prerequisites"},{"location":"integrations/creating-nodes/code/create-n8n-nodes-module/#create-custom-n8n-nodes-module","text":"You can create multiple n8n-nodes-modules. Each individual n8n-nodes-module should get created in a separate folder since they are different npm packages. A single n8n-nodes-module can contain multiple nodes. If you\u2019re creating multiple nodes in the same module, as a best practice create each node in a separate folder. In this tutorial, you will create an n8n-nodes-module for the OpenWeatherMap API. You will name it n8n-nodes-weather . To quickly get started, clone the example starter using the following command: 1 git clone https://github.com/n8n-io/n8n-nodes-starter.git n8n-nodes-weather. After the repo gets cloned, open the package.json file, and update the value of the name by replacing n8n-nodes-starter with n8n-nodes-weather . NOTE: The name of the module has to start with n8n-nodes- . Open the cloned repository in your code editor, and create a new folder called Weather , inside the nodes folder. Create Weather.node.ts file inside the Weather folder and paste the following codeimport { IExecuteFunctions , } from 'n8n-core' ; import { IDataObject , INodeExecutionData , INodeType , INodeTypeDescription , NodeApiError , NodeOperationError , } from 'n8n-workflow' ; import { OptionsWithUri } from 'request' ; export class Weather implements INodeType { description : INodeTypeDescription = { displayName : 'Weather' , name : 'Weather' , icon : 'fa:sun' , group : [ 'input' ], version : 1 , description : 'Gets current and future weather information' , defaults : { name : 'Weather' , color : '#554455' , }, inputs : [ 'main' ], outputs : [ 'main' ], credentials : [ { name : 'weatherApi' , required : true , }, ], properties : [ { displayName : 'Operation' , name : 'operation' , type : 'options' , options : [ { name : 'Current Weather' , value : 'currentWeather' , description : 'Returns the current weather data' , }, { name : '5 day Forecast' , value : '5DayForecast' , description : 'Returns the weather data for the next 5 days' , }, ], default : 'currentWeather' , description : 'The operation to perform.' , }, { displayName : 'Format' , name : 'format' , type : 'options' , options : [ { name : 'Imperial' , value : 'imperial' , description : 'Fahrenheit | miles/hour' , }, { name : 'Metric' , value : 'metric' , description : 'Celsius | meter/sec' , }, { name : 'Scientific' , value : 'standard' , description : 'Kelvin | meter/sec' , }, ], default : 'metric' , description : 'The format in which format the data should be returned.' , }, // ---------------------------------- // Location Information // ---------------------------------- { displayName : 'Location Selection' , name : 'locationSelection' , type : 'options' , options : [ { name : 'City Name' , value : 'cityName' , }, { name : 'City ID' , value : 'cityId' , }, { name : 'Coordinates' , value : 'coordinates' , }, { name : 'Zip Code' , value : 'zipCode' , }, ], default : 'cityName' , description : 'How to define the location for which to return the weather.' , }, { displayName : 'City' , name : 'cityName' , type : 'string' , default : '' , placeholder : 'berlin,de' , required : true , displayOptions : { show : { locationSelection : [ 'cityName' , ], }, }, description : 'The name of the city to return the weather of.' , }, { displayName : 'City ID' , name : 'cityId' , type : 'number' , default : 160001123 , required : true , displayOptions : { show : { locationSelection : [ 'cityId' , ], }, }, description : 'The id of city to return the weather of. List can be downloaded here: http://bulk.openweathermap.org/sample/' , }, { displayName : 'Latitude' , name : 'latitude' , type : 'string' , default : '' , placeholder : '13.39' , required : true , displayOptions : { show : { locationSelection : [ 'coordinates' , ], }, }, description : 'The latitude of the location to return the weather of.' , }, { displayName : 'Longitude' , name : 'longitude' , type : 'string' , default : '' , placeholder : '52.52' , required : true , displayOptions : { show : { locationSelection : [ 'coordinates' , ], }, }, description : 'The longitude of the location to return the weather of.' , }, { displayName : 'Zip Code' , name : 'zipCode' , type : 'string' , default : '' , placeholder : '10115,de' , required : true , displayOptions : { show : { locationSelection : [ 'zipCode' , ], }, }, description : 'The id of city to return the weather of. List can be downloaded here: http://bulk.openweathermap.org/sample/' , }, { displayName : 'Language' , name : 'language' , type : 'string' , default : '' , placeholder : 'en' , required : false , description : 'The two letter language code to get your output in (eg. en, de, ...).' , }, ], }; async execute ( this : IExecuteFunctions ) : Promise < INodeExecutionData [][] > { const items = this . getInputData (); const returnData : IDataObject [] = []; const credentials = await this . getCredentials ( 'openWeatherMapApi' ); if ( credentials === undefined ) { throw new NodeOperationError ( this . getNode (), 'No credentials got returned!' ); } const operation = this . getNodeParameter ( 'operation' , 0 ) as string ; let endpoint = '' ; let locationSelection ; let language ; let qs : IDataObject ; for ( let i = 0 ; i < items . length ; i ++ ) { try { // Set base data qs = { APPID : credentials.accessToken , units : this.getNodeParameter ( 'format' , i ) as string , }; // Get the location locationSelection = this . getNodeParameter ( 'locationSelection' , i ) as string ; if ( locationSelection === 'cityName' ) { qs . q = this . getNodeParameter ( 'cityName' , i ) as string ; } else if ( locationSelection === 'cityId' ) { qs . id = this . getNodeParameter ( 'cityId' , i ) as number ; } else if ( locationSelection === 'coordinates' ) { qs . lat = this . getNodeParameter ( 'latitude' , i ) as string ; qs . lon = this . getNodeParameter ( 'longitude' , i ) as string ; } else if ( locationSelection === 'zipCode' ) { qs . zip = this . getNodeParameter ( 'zipCode' , i ) as string ; } else { throw new NodeOperationError ( this . getNode (), `The locationSelection \" ${ locationSelection } \" is not known!` ); } // Get the language language = this . getNodeParameter ( 'language' , i ) as string ; if ( language ) { qs . lang = language ; } if ( operation === 'currentWeather' ) { // ---------------------------------- // currentWeather // ---------------------------------- endpoint = 'weather' ; } else if ( operation === '5DayForecast' ) { // ---------------------------------- // 5DayForecast // ---------------------------------- endpoint = 'forecast' ; } else { throw new NodeOperationError ( this . getNode (), `The operation \" ${ operation } \" is not known!` ); } const options : OptionsWithUri = { method : 'GET' , qs , uri : `https://api.openweathermap.org/data/2.5/ ${ endpoint } ` , json : true , }; let responseData ; try { responseData = await this . helpers . request ( options ); } catch ( error ) { throw new NodeApiError ( this . getNode (), error ); } returnData . push ( responseData as IDataObject ); } catch ( error ) { if ( this . continueOnFail ()) { returnData . push ({ json : { error : error.message }}); continue ; } throw error ; } } return [ this . helpers . returnJsonArray ( returnData )]; } } The OpenWeatherMap API requires credentials to return results successfully. Create WeatherApi.credentials.ts file in the Credentials folder and paste the following code: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import { ICredentialType , INodeProperties , } from 'n8n-workflow' ; export class WeatherApi implements ICredentialType { name = 'weatherApi' ; displayName = 'Weather API' ; properties : INodeProperties [] = [ { displayName : 'Access Token' , name : 'accessToken' , type : 'string' , default : '' , }, ]; } Add the newly created node and the credential to the package.json file. Add \"dist/nodes/Weather/Weather.node.js\" to the nodes array in the n8n object ( n8n.nodes ). Similarly, add \"dist/credentials/WeatherApi.credentials.js\" to the credentials array in the n8n object ( n8n.credentials ).","title":"Create custom n8n-nodes-module"},{"location":"integrations/creating-nodes/code/create-n8n-nodes-module/#develop-and-test-the-module","text":"Once you\u2019ve created the n8n-nodes-module, you need to build the code and publish the package locally to test it. Run the following commands: 1 2 3 4 5 6 7 8 # Install dependencies npm install # Build the code npm run build # \"Publish\" the package locally npm link NOTE: If you get permission errors, run the command as a root user with sudo , for example sudo npm link . In the terminal, open the folder where you installed n8n. Run the following command to install the locally published module. 1 2 # \"Install\" the above locally published module npm link n8n-nodes-weather Start n8n with the below command 1 ./node_modules/n8n/bin/n8n start You will now be able to test and use your newly created n8n-nodes-module.","title":"Develop and test the module"},{"location":"integrations/creating-nodes/code/create-n8n-nodes-module/#publish-the-n8n-nodes-module","text":"As mentioned, the n8n-nodes-module is an npm package. To make it available to others, you can publish it to the npm registry. Refer to the Publishing unscoped public packages guide to learn about publishing packages. Following the steps mentioned above, you can create multiple nodes within a single n8n-nodes-module. You can also create nodes that require dependencies that are not present in n8n. When creating an n8n-nodes-module make sure that you follow the following guidelines: The name of the module should start with n8n-nodes- . The package.json file has to contain a key n8n with the paths to nodes and credentials. The module has to be installed alongside n8n.","title":"Publish the n8n-nodes-module"},{"location":"integrations/creating-nodes/code/create-n8n-nodes-module/#use-the-n8n-nodes-module-in-production","text":"Once you test and publish your n8n-nodes-module you would want to use it in your production environment. If you\u2019re running n8n via Docker, you will have to create a Docker image with the node module installed in n8n. Follow the steps below to create your Docker image: Create a Dockerfile and paste the code from this Dockerfile . Add the following command in your Dockerfile before the font installation command. 1 RUN cd /usr/local/lib/node_modules/n8n && npm install n8n-nodes-weather Your Dockerfile should be as follow: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 FROM node:14.15-alpine # ARG N8N_VERSION RUN if [ -z \" $N8N_VERSION \" ] ; then echo \"The N8N_VERSION argument is missing!\" ; exit 1 ; fi # Update everything and install needed dependencies RUN apk add --update graphicsmagick tzdata git tini su-exec # # Set a custom user to not have n8n run as root USER root # Install n8n and the also temporary all the packages # it needs to build it correctly. RUN apk --update add --virtual build-dependencies python build-base ca-certificates && \\ npm_config_user = root npm install -g full-icu n8n && ls -a && \\ apk del build-dependencies \\ && rm -rf /root /tmp/* /var/cache/apk/* && mkdir /root ; # Install n8n-nodes-weather module RUN cd /usr/local/lib/node_modules/n8n && npm install n8n-nodes-weather # Install fonts RUN apk --no-cache add --virtual fonts msttcorefonts-installer fontconfig && \\ update-ms-fonts && \\ fc-cache -f && \\ apk del fonts && \\ find /usr/share/fonts/truetype/msttcorefonts/ -type l -exec unlink {} \\; \\ && rm -rf /root /tmp/* /var/cache/apk/* && mkdir /root ENV NODE_ICU_DATA /usr/local/lib/node_modules/full-icu WORKDIR /data COPY docker-entrypoint.sh /docker-entrypoint.sh RUN chmod +x /docker-entrypoint.sh ENTRYPOINT [ \"tini\" , \"--\" , \"/docker-entrypoint.sh\" ] EXPOSE 5678/tcp NOTE: Replace n8n-nodes-weather with the name of your n8n-nodes-module Build your Docker image using the docker build . command. You will now be able to use your n8n-nodes-module in Docker. If you\u2019re running either by installing it globally or via PM2, make sure that you install your n8n-nodes-module inside n8n. n8n will find the module and load it automatically.","title":"Use the n8n-nodes-module in production"},{"location":"integrations/creating-nodes/code/create-trigger-node/","text":"Creating Your First Trigger Node # Today, you will learn how to create your first trigger node for n8n. Prerequisites # You have knowledge of: JavaScript/TypeScript REST APIs Webhooks Expressions in n8n Install the following tools: Git: You can find instructions on how to install Git here . Node.js and npm: You can find instructions on how to install both using nvm (Node Version Manager) here . The current minimum version is 14.15 . In case you already have Node.js and npm installed, you can check the current version with the following command: 1 2 node -v npm -v NOTE: Use node version 14.x and npm version 6.x Lerna: Install lerna globally with the following command: 1 npm install --global lerna Selecting the node # The first thing that we have to do is pick the service we want to create the node for. We will use Autopilot as an example. Since n8n's repository already has a Autopilot Trigger node, we will name this node Autofriend Trigger to avoid conflicts. Cloning the repository # In GitHub, fork the n8n repository . Clone it by running the following command in your terminal (don't forget to replace <USERNAME> with your GitHub username): 1 git clone https://github.com/<USERNAME>/n8n.git && cd n8n n8n is built from four main packages: cli core editor-ui nodes-base All these packages are under the /packages folder in the main n8n folder. We will be working in the nodes-base folder as it contains everything related to nodes. Specifically, /packages/nodes-base/nodes , packages/nodes-base/credentials , and packages/nodes-base/package.json . The folder nodes , contains all the nodes in n8n. The folder credentials contains all the credentials that the different nodes use. Each node can define multiple credentials. For example, OAuth2 or API Key. Each credential requires different parameters that the user will have to input. The credentials data that the user provides is stored in an encrypted format in n8n's database. The file package.json contains all the npm packages that the nodes use. It also contains all the nodes and credentials that are loaded when n8n is started. Creating the node # Go to packages/nodes-base/nodes . Create a folder called Autofriend (the folder names are PascalCase). Within the Autofriend folder, create a file called AutofriendTrigger.node.ts (YourNodeNameTrigger.node.ts). Download and add the Autofriend icon to the folder. Name it autopilot.svg . The icon property has to be either a 60x60 pixels PNG or an SVG and must exist in the node\u2019s folder. An SVG is preferable. In case you have to use a PNG, make sure that it is compressed. A good tool for that is tinypng . A good place to find company icons is gilbarbara/logos . Paste the following code in the AutofriendTrigger.node.ts file. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 import { IHookFunctions , IWebhookFunctions , } from 'n8n-core' ; import { IDataObject , INodeType , INodeTypeDescription , IWebhookResponseData , } from 'n8n-workflow' ; /* import { autofriendApiRequest, } from './GenericFunctions'; import { snakeCase, } from 'change-case'; */ export class AutofriendTrigger implements INodeType { description : INodeTypeDescription = { displayName : 'Autofriend Trigger' , name : 'autofriendTrigger' , icon : 'file:autofriend.svg' , group : [ 'trigger' ], version : 1 , subtitle : '={{$parameter[\"event\"]}}' , description : 'Handle Autofriend events via webhooks' , defaults : { name : 'Autofriend Trigger' , color : '#6ad7b9' , }, inputs : [], outputs : [ 'main' ], credentials : [], webhooks : [ { name : 'default' , httpMethod : 'POST' , responseMode : 'onReceived' , path : 'webhook' , }, ], properties : [], }; async webhook ( this : IWebhookFunctions ) : Promise < IWebhookResponseData > { return { workflowData : [], }; } } Your directory structure should now look like the following. Adding the node to Editor UI # n8n uses the properties set in the property description to render the node in the Editor UI. These properties are displayName , name , color , icon , description , and subtitle . Check the following figure to see how the properties affect the looks of the node. Note: The property description conforms to INodeTypeDescription . Let's see how the node looks in the UI by following these steps: Go to /packages/nodes-base/package.json . Paste \"dist/nodes/Autofriend/AutofriendTrigger.node.js\", in the nodes array to register the node (in an alphabetical order). Go to the project's main folder (n8n) in the terminal and run the following commands (it can take a few minutes). The first command installs all dependencies of all the modules and links them together. The second command builds all the code. The third command starts n8n in development mode. 1 2 3 lerna bootstrap --hoist npm run build npm run dev Open your browser and go to localhost:8080 and you should be able to see the Editor UI. Open the Create Node menu, select the Trigger tab, type Autofriend , and click on it to add the node to the Editor UI. Notes On startup, n8n will load all the nodes and credentials (more about credentials later) that are registered in /packages/nodes-base/package.json . The property description.name uses camelCase. The property description.color is the company's branding color in hexadecimal. In case the website does not include this information, there are other websites that help you get a company\u2019s branding colors. For example, brandpalettes.com . Creating the UI for the node # Double-clicking on the Autofriend Trigger node will open the Node Editor View. It will be empty since we haven't added any UI components yet. Luckily, n8n provides predefined JSON-based UI components that we can use to ask the user for different types of data. Autopilots's docs mention that to create a hook, we need to provide the following pieces of information: event - Required target_url - Required In the event parameter, we provide the name of the event for which we want to be notified. For example, contact_added . As the name implies, by providing contact_added as the event, we will be notified every time a contact is added to Autofriend. In the target_url parameter, we provide the URL where Autofriend will notify us when the event defined in the event parameter takes place. We don't need to ask the user for this parameter as n8n provides us with a method to obtain it. Adding the fields # Let\u2019s make the Node Editor View ask for these parameters: 1. Add the following under description.properties in packages/nodes-base/nodes/Autofriend/AutofriendTrigger.node.ts. . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 { displayName : 'Event' , name : 'event' , type : 'options' , required : true , default : '' , options : [ { name : 'Contact Added' , value : 'contactAdded' , }, { name : 'Contact Added To List' , value : 'contactAddedToList' , }, { name : 'Contact Entered Segment' , value : 'contactEnteredSegment' , }, { name : 'Contact Left Segment' , value : 'contactLeftSegment' , }, { name : 'Contact Removed From List' , value : 'contactRemovedFromList' , }, { name : 'Contact Unsubscribed' , value : 'contactUnsubscribed' , }, { name : 'Contact Updated' , value : 'contactUpdated' , }, ], }, Stop the current n8n process by pressing ctrl + c in the terminal in which you are running n8n. Run again, by entering the following in the terminal. 1 npm run dev Go to localhost:8080 , refresh the page, and open the node again. The node should now look like in the following image. Creating the UI for credentials # Most REST APIs use some sort of authentication mechanism. Autofriend's REST API uses API Keys. The API Key informs them about who is making the request to their system and gives you access to all the functionality that the API provides. Given all the things it can do, this has to be treated as a sensitive piece of information and should be kept private. n8n gives you the ability to ask for sensitive information using credentials. In the credentials, you can use all the generally available UI elements. Additionally, the data that is stored using the credentials would be encrypted before being saved to the database. In order to do that, n8n uses an encryption key. With that in mind, let\u2019s create the UI to ask for the user\u2019s Autofriend API Key. The process of creating and registering credentials is similar to that of creating and registering the node: Go to packages/nodes-base/credentials . Within the credentials folder, create a file named AutofriendApi.credentials.ts . Paste the following code. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import { ICredentialType , NodePropertyTypes , } from 'n8n-workflow' ; export class AutofriendApi implements ICredentialType { name = 'autofriendApi' ; displayName = 'Autofriend API' ; properties = [ { displayName : 'API Key' , name : 'apiKey' , type : 'string' as NodePropertyTypes , default : '' , }, ]; } Go to /packages/nodes-base/package.json . Paste \"dist/credentials/AutofriendApi.credentials.js\", in the credentials array to register the credentials (in an alphabetical order). Got to packages/nodes-base/nodes/Autofriend/AutofriendTrigger.node.ts . Associate the credentials with the node by adding the following to description.credentials . 1 2 3 4 5 6 credentials : [ { name : 'autofriendApi' , required : true , }, ], Stop the current n8n process by pressing ctrl + c in the terminal in which you are running n8n. Run again, by entering the following in the terminal. 1 npm run dev When you go to the Node Editor view, you should see the following. Understanding the life cycle for the webhook method # When a Trigger node is executed either in test or production mode, the following happens: n8n persists all the webhooks defined in description.webhooks # The persisted data will be used later to verify if the incoming requests to the n8n\u2019s webhook endpoint are valid. The property webhooks implements the interface IWebhookDescription . The interface has four properties. name: The property name where n8n will look for the life cycle methods. httpMethod: The HTTP method. responseMode: When the trigger will respond. When developing a trigger node, this property must be set to onReceived . path: The path added to the base URL. For example, for a Trigger node with the following webhooks property, n8n will create the following webhooks URLs. 1 2 3 4 5 6 7 8 webhooks : [ { name : 'default' , httpMethod : 'POST' , responseMethod : 'onReceived' , path : 'webhook' , }, ] Test: POST {{WEBHOOK_TUNNEL_URL || localhost}}/webhook-test/{{uuid}}/{{path}} Production: POST {{WEBHOOK_TUNNEL_URL || localhost}}/webhook/{{uuid}}/{{path}} These URLs can be found in the node under the Webhook URLs label. These webhook URLs will be used as the notification URL (also known as the callback URL or target URL) when creating the webhook in the external system. Note: In test mode, the webhooks are persisted in memory. In production mode, they are persisted in the database. n8n executes the life cycle methods # The life cycle methods allow us to create, delete, and check if the webhook exists in the external system. Methods checkExist : This is the first method that gets called. It checks if the webhook with the current path is already registered in the external system or not. If the webhook is already registered, n8n persists the webhook ID. If the webhook is not registered with the external system, the create method gets executed. create : This method gets called if the checkExist method returns false (if the webhook with the current path does not exist in the external system). This method registers the webhook in the external system and stores the webhook ID in n8n. delete : This method gets called when the trigger is either stopped manually or when the workflow is deactivated. It uses the ID previously persisted by either the create or the checkExist method to delete the webhook from the external system. Wait for new events to trigger the workflow # Every time the external system notifies us about a change, by making an HTTP Request to the URL we previously registered in the create method, the execute method is called. Within this method, we have access to the request object and everything it contains. For example, body, headers, querystring, etc. The data the method returns is the data we want the rest of the workflow to have access to. Let\u2019s see how this would look for our current use-case: Go to packages/nodes-base/nodes/Autofriend , create a file named GenericFunctions.ts , and paste the following code. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 import { OptionsWithUri , } from 'request' ; import { IExecuteFunctions , ILoadOptionsFunctions , } from 'n8n-core' ; import { IDataObject , IHookFunctions , IWebhookFunctions , } from 'n8n-workflow' ; export async function autofriendApiRequest ( this : IExecuteFunctions | IWebhookFunctions | IHookFunctions | ILoadOptionsFunctions , method : string , resource : string , body : any = {}, query : IDataObject = {}, uri? : string , option : IDataObject = {}) : Promise < any > { // tslint:disable-line:no-any const credentials = await this . getCredentials ( 'autofriendApi' ) as IDataObject ; const apiKey = credentials . apiKey ; const endpoint = 'https://api2.autopilothq.com/v1' ; const options : OptionsWithUri = { headers : { 'Content-Type' : 'application/json' , autopilotapikey : apiKey , }, method , body , qs : query , uri : uri || ` ${ endpoint }${ resource } ` , json : true , }; if ( ! Object . keys ( body ). length ) { delete options . body ; } if ( ! Object . keys ( query ). length ) { delete options . qs ; } try { return await this . helpers . request ! ( options ); } catch ( error ) { if ( error . response ) { const errorMessage = error . response . body . message || error . response . body . description || error . message ; throw new Error ( `Autopilot error response [ ${ error . statusCode } ]: ${ errorMessage } ` ); } throw error ; } } Go to packages/nodes-base/nodes/AutofriendTrigger.node.ts and add the following code after the property description. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 // @ts-ignore webhookMethods = { default : { async checkExists ( this : IHookFunctions ) : Promise < boolean > { const webhookData = this . getWorkflowStaticData ( 'node' ); const webhookUrl = this . getNodeWebhookUrl ( 'default' ); const event = this . getNodeParameter ( 'event' ) as string ; const { hooks : webhooks } = await autofriendApiRequest . call ( this , 'GET' , '/hooks' ); for ( const webhook of webhooks ) { if ( webhook . target_url === webhookUrl && webhook . event === snakeCase ( event )) { webhookData . webhookId = webhook . hook_id ; return true ; } } return false ; }, async create ( this : IHookFunctions ) : Promise < boolean > { const webhookUrl = this . getNodeWebhookUrl ( 'default' ); const webhookData = this . getWorkflowStaticData ( 'node' ); const event = this . getNodeParameter ( 'event' ) as string ; const body : IDataObject = { event : snakeCase ( event ), target_url : webhookUrl , }; const webhook = await autofriendApiRequest . call ( this , 'POST' , '/hook' , body ); webhookData . webhookId = webhook . hook_id ; return true ; }, async delete ( this : IHookFunctions ) : Promise < boolean > { const webhookData = this . getWorkflowStaticData ( 'node' ); try { await autofriendApiRequest . call ( this , 'DELETE' , `/hook/ ${ webhookData . webhookId } ` ); } catch ( error ) { return false ; } delete webhookData . webhookId ; return true ; }, }, }; } 3. Replace the webhook function with the following. 1 2 3 4 5 6 7 async webhook ( this : IWebhookFunctions ) : Promise < IWebhookResponseData > { const req = this . getRequestObject (); return { workflowData : [ this . helpers . returnJsonArray ( req . body ), ], }; 4. In the same file, uncomment the code snippet on the top to import autoFriendApiRequest and snakeCase . 5. Stop the current n8n process by pressing ctrl + c in the terminal where you are running n8n. 6. Run the project using a tunnel by entering ./packages/cli/bin/n8n start --tunnel in the terminal. Access the n8n Editor UI at localhost:5678 . 7. Enter the API key in the credentials. Instructions to find the API Key can be found here . 8. Go to the workflow editor, save your workflow, and execute the node. Log into Autopilot and update a contact. Keep in mind that this should be done within two minutes after you executed the node. After that time frame, the webhook will be unregistered automatically and you will not be able to receive the event. If it takes you longer than that, please execute the node and update the contact again. The trigger node is now receiving events. Sometimes it might take a bit longer for the payload to arrive. You probably noticed that this time we did not run the project using npm run dev , but instead using ./packages/cli/bin/n8n start --tunnel . Since our server is running locally, we need a tool that lets us proxy all requests to our local machine so that n8n receives and handles the events from the external service (Autopilot). This gets achieved using a tunnel. The details on how a tunnel works are out of the scope of this tutorial. If you want to know about it, you can check this link . Keep in mind that the tunnel is meant for development purposes only and should not be used in production. Summary # In this tutorial, we implemented one functionality of the Autofriend webhook API. We made the node show up in the Editor UI and in the Create Node menu with Autofriend's branding. Then, we added the fields necessary to create a webhook in the external service. We also added the credentials so that the API Key could be stored safely. Finally, we mapped all the parameters to the Autofriend API. Next steps # Once you have created the node and want to contribute to n8n, please check the Node Review Checklist . Make sure you complete the checklist before creating a pull request.","title":"Create a trigger node"},{"location":"integrations/creating-nodes/code/create-trigger-node/#creating-your-first-trigger-node","text":"Today, you will learn how to create your first trigger node for n8n.","title":"Creating Your First Trigger Node"},{"location":"integrations/creating-nodes/code/create-trigger-node/#prerequisites","text":"You have knowledge of: JavaScript/TypeScript REST APIs Webhooks Expressions in n8n Install the following tools: Git: You can find instructions on how to install Git here . Node.js and npm: You can find instructions on how to install both using nvm (Node Version Manager) here . The current minimum version is 14.15 . In case you already have Node.js and npm installed, you can check the current version with the following command: 1 2 node -v npm -v NOTE: Use node version 14.x and npm version 6.x Lerna: Install lerna globally with the following command: 1 npm install --global lerna","title":"Prerequisites"},{"location":"integrations/creating-nodes/code/create-trigger-node/#selecting-the-node","text":"The first thing that we have to do is pick the service we want to create the node for. We will use Autopilot as an example. Since n8n's repository already has a Autopilot Trigger node, we will name this node Autofriend Trigger to avoid conflicts.","title":"Selecting the node"},{"location":"integrations/creating-nodes/code/create-trigger-node/#cloning-the-repository","text":"In GitHub, fork the n8n repository . Clone it by running the following command in your terminal (don't forget to replace <USERNAME> with your GitHub username): 1 git clone https://github.com/<USERNAME>/n8n.git && cd n8n n8n is built from four main packages: cli core editor-ui nodes-base All these packages are under the /packages folder in the main n8n folder. We will be working in the nodes-base folder as it contains everything related to nodes. Specifically, /packages/nodes-base/nodes , packages/nodes-base/credentials , and packages/nodes-base/package.json . The folder nodes , contains all the nodes in n8n. The folder credentials contains all the credentials that the different nodes use. Each node can define multiple credentials. For example, OAuth2 or API Key. Each credential requires different parameters that the user will have to input. The credentials data that the user provides is stored in an encrypted format in n8n's database. The file package.json contains all the npm packages that the nodes use. It also contains all the nodes and credentials that are loaded when n8n is started.","title":"Cloning the repository"},{"location":"integrations/creating-nodes/code/create-trigger-node/#creating-the-node","text":"Go to packages/nodes-base/nodes . Create a folder called Autofriend (the folder names are PascalCase). Within the Autofriend folder, create a file called AutofriendTrigger.node.ts (YourNodeNameTrigger.node.ts). Download and add the Autofriend icon to the folder. Name it autopilot.svg . The icon property has to be either a 60x60 pixels PNG or an SVG and must exist in the node\u2019s folder. An SVG is preferable. In case you have to use a PNG, make sure that it is compressed. A good tool for that is tinypng . A good place to find company icons is gilbarbara/logos . Paste the following code in the AutofriendTrigger.node.ts file. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 import { IHookFunctions , IWebhookFunctions , } from 'n8n-core' ; import { IDataObject , INodeType , INodeTypeDescription , IWebhookResponseData , } from 'n8n-workflow' ; /* import { autofriendApiRequest, } from './GenericFunctions'; import { snakeCase, } from 'change-case'; */ export class AutofriendTrigger implements INodeType { description : INodeTypeDescription = { displayName : 'Autofriend Trigger' , name : 'autofriendTrigger' , icon : 'file:autofriend.svg' , group : [ 'trigger' ], version : 1 , subtitle : '={{$parameter[\"event\"]}}' , description : 'Handle Autofriend events via webhooks' , defaults : { name : 'Autofriend Trigger' , color : '#6ad7b9' , }, inputs : [], outputs : [ 'main' ], credentials : [], webhooks : [ { name : 'default' , httpMethod : 'POST' , responseMode : 'onReceived' , path : 'webhook' , }, ], properties : [], }; async webhook ( this : IWebhookFunctions ) : Promise < IWebhookResponseData > { return { workflowData : [], }; } } Your directory structure should now look like the following.","title":"Creating the node"},{"location":"integrations/creating-nodes/code/create-trigger-node/#adding-the-node-to-editor-ui","text":"n8n uses the properties set in the property description to render the node in the Editor UI. These properties are displayName , name , color , icon , description , and subtitle . Check the following figure to see how the properties affect the looks of the node. Note: The property description conforms to INodeTypeDescription . Let's see how the node looks in the UI by following these steps: Go to /packages/nodes-base/package.json . Paste \"dist/nodes/Autofriend/AutofriendTrigger.node.js\", in the nodes array to register the node (in an alphabetical order). Go to the project's main folder (n8n) in the terminal and run the following commands (it can take a few minutes). The first command installs all dependencies of all the modules and links them together. The second command builds all the code. The third command starts n8n in development mode. 1 2 3 lerna bootstrap --hoist npm run build npm run dev Open your browser and go to localhost:8080 and you should be able to see the Editor UI. Open the Create Node menu, select the Trigger tab, type Autofriend , and click on it to add the node to the Editor UI. Notes On startup, n8n will load all the nodes and credentials (more about credentials later) that are registered in /packages/nodes-base/package.json . The property description.name uses camelCase. The property description.color is the company's branding color in hexadecimal. In case the website does not include this information, there are other websites that help you get a company\u2019s branding colors. For example, brandpalettes.com .","title":"Adding the node to Editor UI"},{"location":"integrations/creating-nodes/code/create-trigger-node/#creating-the-ui-for-the-node","text":"Double-clicking on the Autofriend Trigger node will open the Node Editor View. It will be empty since we haven't added any UI components yet. Luckily, n8n provides predefined JSON-based UI components that we can use to ask the user for different types of data. Autopilots's docs mention that to create a hook, we need to provide the following pieces of information: event - Required target_url - Required In the event parameter, we provide the name of the event for which we want to be notified. For example, contact_added . As the name implies, by providing contact_added as the event, we will be notified every time a contact is added to Autofriend. In the target_url parameter, we provide the URL where Autofriend will notify us when the event defined in the event parameter takes place. We don't need to ask the user for this parameter as n8n provides us with a method to obtain it.","title":"Creating the UI for the node"},{"location":"integrations/creating-nodes/code/create-trigger-node/#adding-the-fields","text":"Let\u2019s make the Node Editor View ask for these parameters: 1. Add the following under description.properties in packages/nodes-base/nodes/Autofriend/AutofriendTrigger.node.ts. . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 { displayName : 'Event' , name : 'event' , type : 'options' , required : true , default : '' , options : [ { name : 'Contact Added' , value : 'contactAdded' , }, { name : 'Contact Added To List' , value : 'contactAddedToList' , }, { name : 'Contact Entered Segment' , value : 'contactEnteredSegment' , }, { name : 'Contact Left Segment' , value : 'contactLeftSegment' , }, { name : 'Contact Removed From List' , value : 'contactRemovedFromList' , }, { name : 'Contact Unsubscribed' , value : 'contactUnsubscribed' , }, { name : 'Contact Updated' , value : 'contactUpdated' , }, ], }, Stop the current n8n process by pressing ctrl + c in the terminal in which you are running n8n. Run again, by entering the following in the terminal. 1 npm run dev Go to localhost:8080 , refresh the page, and open the node again. The node should now look like in the following image.","title":"Adding the fields"},{"location":"integrations/creating-nodes/code/create-trigger-node/#creating-the-ui-for-credentials","text":"Most REST APIs use some sort of authentication mechanism. Autofriend's REST API uses API Keys. The API Key informs them about who is making the request to their system and gives you access to all the functionality that the API provides. Given all the things it can do, this has to be treated as a sensitive piece of information and should be kept private. n8n gives you the ability to ask for sensitive information using credentials. In the credentials, you can use all the generally available UI elements. Additionally, the data that is stored using the credentials would be encrypted before being saved to the database. In order to do that, n8n uses an encryption key. With that in mind, let\u2019s create the UI to ask for the user\u2019s Autofriend API Key. The process of creating and registering credentials is similar to that of creating and registering the node: Go to packages/nodes-base/credentials . Within the credentials folder, create a file named AutofriendApi.credentials.ts . Paste the following code. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import { ICredentialType , NodePropertyTypes , } from 'n8n-workflow' ; export class AutofriendApi implements ICredentialType { name = 'autofriendApi' ; displayName = 'Autofriend API' ; properties = [ { displayName : 'API Key' , name : 'apiKey' , type : 'string' as NodePropertyTypes , default : '' , }, ]; } Go to /packages/nodes-base/package.json . Paste \"dist/credentials/AutofriendApi.credentials.js\", in the credentials array to register the credentials (in an alphabetical order). Got to packages/nodes-base/nodes/Autofriend/AutofriendTrigger.node.ts . Associate the credentials with the node by adding the following to description.credentials . 1 2 3 4 5 6 credentials : [ { name : 'autofriendApi' , required : true , }, ], Stop the current n8n process by pressing ctrl + c in the terminal in which you are running n8n. Run again, by entering the following in the terminal. 1 npm run dev When you go to the Node Editor view, you should see the following.","title":"Creating the UI for credentials"},{"location":"integrations/creating-nodes/code/create-trigger-node/#understanding-the-life-cycle-for-the-webhook-method","text":"When a Trigger node is executed either in test or production mode, the following happens:","title":"Understanding the life cycle for the webhook method"},{"location":"integrations/creating-nodes/code/create-trigger-node/#n8n-persists-all-the-webhooks-defined-in-descriptionwebhooks","text":"The persisted data will be used later to verify if the incoming requests to the n8n\u2019s webhook endpoint are valid. The property webhooks implements the interface IWebhookDescription . The interface has four properties. name: The property name where n8n will look for the life cycle methods. httpMethod: The HTTP method. responseMode: When the trigger will respond. When developing a trigger node, this property must be set to onReceived . path: The path added to the base URL. For example, for a Trigger node with the following webhooks property, n8n will create the following webhooks URLs. 1 2 3 4 5 6 7 8 webhooks : [ { name : 'default' , httpMethod : 'POST' , responseMethod : 'onReceived' , path : 'webhook' , }, ] Test: POST {{WEBHOOK_TUNNEL_URL || localhost}}/webhook-test/{{uuid}}/{{path}} Production: POST {{WEBHOOK_TUNNEL_URL || localhost}}/webhook/{{uuid}}/{{path}} These URLs can be found in the node under the Webhook URLs label. These webhook URLs will be used as the notification URL (also known as the callback URL or target URL) when creating the webhook in the external system. Note: In test mode, the webhooks are persisted in memory. In production mode, they are persisted in the database.","title":"n8n persists all the webhooks defined in description.webhooks"},{"location":"integrations/creating-nodes/code/create-trigger-node/#n8n-executes-the-life-cycle-methods","text":"The life cycle methods allow us to create, delete, and check if the webhook exists in the external system. Methods checkExist : This is the first method that gets called. It checks if the webhook with the current path is already registered in the external system or not. If the webhook is already registered, n8n persists the webhook ID. If the webhook is not registered with the external system, the create method gets executed. create : This method gets called if the checkExist method returns false (if the webhook with the current path does not exist in the external system). This method registers the webhook in the external system and stores the webhook ID in n8n. delete : This method gets called when the trigger is either stopped manually or when the workflow is deactivated. It uses the ID previously persisted by either the create or the checkExist method to delete the webhook from the external system.","title":"n8n executes the life cycle methods"},{"location":"integrations/creating-nodes/code/create-trigger-node/#wait-for-new-events-to-trigger-the-workflow","text":"Every time the external system notifies us about a change, by making an HTTP Request to the URL we previously registered in the create method, the execute method is called. Within this method, we have access to the request object and everything it contains. For example, body, headers, querystring, etc. The data the method returns is the data we want the rest of the workflow to have access to. Let\u2019s see how this would look for our current use-case: Go to packages/nodes-base/nodes/Autofriend , create a file named GenericFunctions.ts , and paste the following code. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 import { OptionsWithUri , } from 'request' ; import { IExecuteFunctions , ILoadOptionsFunctions , } from 'n8n-core' ; import { IDataObject , IHookFunctions , IWebhookFunctions , } from 'n8n-workflow' ; export async function autofriendApiRequest ( this : IExecuteFunctions | IWebhookFunctions | IHookFunctions | ILoadOptionsFunctions , method : string , resource : string , body : any = {}, query : IDataObject = {}, uri? : string , option : IDataObject = {}) : Promise < any > { // tslint:disable-line:no-any const credentials = await this . getCredentials ( 'autofriendApi' ) as IDataObject ; const apiKey = credentials . apiKey ; const endpoint = 'https://api2.autopilothq.com/v1' ; const options : OptionsWithUri = { headers : { 'Content-Type' : 'application/json' , autopilotapikey : apiKey , }, method , body , qs : query , uri : uri || ` ${ endpoint }${ resource } ` , json : true , }; if ( ! Object . keys ( body ). length ) { delete options . body ; } if ( ! Object . keys ( query ). length ) { delete options . qs ; } try { return await this . helpers . request ! ( options ); } catch ( error ) { if ( error . response ) { const errorMessage = error . response . body . message || error . response . body . description || error . message ; throw new Error ( `Autopilot error response [ ${ error . statusCode } ]: ${ errorMessage } ` ); } throw error ; } } Go to packages/nodes-base/nodes/AutofriendTrigger.node.ts and add the following code after the property description. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 // @ts-ignore webhookMethods = { default : { async checkExists ( this : IHookFunctions ) : Promise < boolean > { const webhookData = this . getWorkflowStaticData ( 'node' ); const webhookUrl = this . getNodeWebhookUrl ( 'default' ); const event = this . getNodeParameter ( 'event' ) as string ; const { hooks : webhooks } = await autofriendApiRequest . call ( this , 'GET' , '/hooks' ); for ( const webhook of webhooks ) { if ( webhook . target_url === webhookUrl && webhook . event === snakeCase ( event )) { webhookData . webhookId = webhook . hook_id ; return true ; } } return false ; }, async create ( this : IHookFunctions ) : Promise < boolean > { const webhookUrl = this . getNodeWebhookUrl ( 'default' ); const webhookData = this . getWorkflowStaticData ( 'node' ); const event = this . getNodeParameter ( 'event' ) as string ; const body : IDataObject = { event : snakeCase ( event ), target_url : webhookUrl , }; const webhook = await autofriendApiRequest . call ( this , 'POST' , '/hook' , body ); webhookData . webhookId = webhook . hook_id ; return true ; }, async delete ( this : IHookFunctions ) : Promise < boolean > { const webhookData = this . getWorkflowStaticData ( 'node' ); try { await autofriendApiRequest . call ( this , 'DELETE' , `/hook/ ${ webhookData . webhookId } ` ); } catch ( error ) { return false ; } delete webhookData . webhookId ; return true ; }, }, }; } 3. Replace the webhook function with the following. 1 2 3 4 5 6 7 async webhook ( this : IWebhookFunctions ) : Promise < IWebhookResponseData > { const req = this . getRequestObject (); return { workflowData : [ this . helpers . returnJsonArray ( req . body ), ], }; 4. In the same file, uncomment the code snippet on the top to import autoFriendApiRequest and snakeCase . 5. Stop the current n8n process by pressing ctrl + c in the terminal where you are running n8n. 6. Run the project using a tunnel by entering ./packages/cli/bin/n8n start --tunnel in the terminal. Access the n8n Editor UI at localhost:5678 . 7. Enter the API key in the credentials. Instructions to find the API Key can be found here . 8. Go to the workflow editor, save your workflow, and execute the node. Log into Autopilot and update a contact. Keep in mind that this should be done within two minutes after you executed the node. After that time frame, the webhook will be unregistered automatically and you will not be able to receive the event. If it takes you longer than that, please execute the node and update the contact again. The trigger node is now receiving events. Sometimes it might take a bit longer for the payload to arrive. You probably noticed that this time we did not run the project using npm run dev , but instead using ./packages/cli/bin/n8n start --tunnel . Since our server is running locally, we need a tool that lets us proxy all requests to our local machine so that n8n receives and handles the events from the external service (Autopilot). This gets achieved using a tunnel. The details on how a tunnel works are out of the scope of this tutorial. If you want to know about it, you can check this link . Keep in mind that the tunnel is meant for development purposes only and should not be used in production.","title":"Wait for new events to trigger the workflow"},{"location":"integrations/creating-nodes/code/create-trigger-node/#summary","text":"In this tutorial, we implemented one functionality of the Autofriend webhook API. We made the node show up in the Editor UI and in the Create Node menu with Autofriend's branding. Then, we added the fields necessary to create a webhook in the external service. We also added the credentials so that the API Key could be stored safely. Finally, we mapped all the parameters to the Autofriend API.","title":"Summary"},{"location":"integrations/creating-nodes/code/create-trigger-node/#next-steps","text":"Once you have created the node and want to contribute to n8n, please check the Node Review Checklist . Make sure you complete the checklist before creating a pull request.","title":"Next steps"},{"location":"integrations/creating-nodes/code/http-helpers/","text":"Making HTTP Requests # While creating nodes it is very commonn to call external APIs or make HTTP requests to other services. This plays a major role during node development, maintenance, and improvements. We provide a very flexible helper for making HTTP requests that abstracts away most of the complexity with a simple to use interface. How to use # In the node code, inside the execute function you can easily call: 1 const response = await this . helpers . httpRequest ( options ); Where options is an object in this format: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 { url : string ; headers? : object ; method ?: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'HEAD' ; body? : FormData | Array | string | number | object | Buffer | URLSearchParams ; qs? : object ; arrayFormat ?: 'indices' | 'brackets' | 'repeat' | 'comma' ; auth ?: { username : string , password : string , }; disableFollowRedirect? : boolean ; encoding ?: 'arraybuffer' | 'blob' | 'document' | 'json' | 'text' | 'stream' ; skipSslCertificateValidation? : boolean ; returnFullResponse? : boolean ; proxy ?: { host : string ; port : string | number ; auth ?: { username : string ; password : string ; }, protocol? : string ; }; timeout? : number ; json? : boolean ; } Where url is the only mandatory field. The default method is GET . Some notes about the possible fields: body : You can use a regular Javascript Object for JSON payload, a Buffer for file uploads, an instance of FormData for multipart/form-data and URLSearchParams for application/x-www-form-urlencoded . headers : A simple key-value pair. If body is an instance of FormData then content-type: multipart/form-data is injected automatically. If body is an instance of URLSearchParams , then content-type: application/x-www-form-urlencoded is added. To override this behavior, you can set any content-type header you wish and it won't be overridden. arrayFormat : If your query string contains an array of data, let's say const qs = {IDs: [15,17]} , the values set to arrayFormat define how it will be sent. indices (default): { a: ['b', 'c'] } will be formatted as a[0]=b&a[1]=c brackets : { a: ['b', 'c'] } will be formatted as a[]=b&a[]=c repeat : { a: ['b', 'c'] } will be formatted as a=b&a=c comma : { a: ['b', 'c'] } will be formatted as a=b,c auth : Used for Basic auth. Provide username and password . disableFollowRedirect : By default, we'll follow redirects. You can set this to false to prevent this from happening skipSslCertificateValidation : Used for calling HTTPS services without proper certificate returnFullResponse : Instead of returning only the body, returns an object with more data in the following format: {body: body, headers: object, statusCode: 200, statusMessage: 'OK'} encoding : We usually detect the content type correctly but you can specify arrayBuffer to receive a Buffer you can read from and interact with. Deprecation of the previous helper # The previous helper implementation using this.helpers.request(options) used and exposed the request-promise library which was deprecated. In an effort to keep maximum compatibility, we made a transparent conversion to another library called axios . If you are having issues, please report them in our Community Forums or on Github . Also, you can temporarily enable n8n to use the deprecated library by setting the environment variable N8N_USE_DEPRECATED_REQUEST_LIB=true . Please note: This behavior is permanent and we will be removing the request-promise library entirely in the future so please report any errors you have so we can fix them. Migration guide to the new helper # As mentioned above, the previous helper is deprecated and will be replaced in the future. The new helper is much more robust, library agnostic, and easier to use. New nodes should all use the new helper, and if you have built custom nodes we strongly suggest you migrate to the new helper. Here are the main considerations when migrating: Only url is accepted. Previously uri was also accepted encoding: null now must be encoding: arrayBuffer rejectUnauthorized: false is now skipSslCertificateValidation: true Use body according to content-type headers to clarify what is being sent resolveWithFullResponse is now returnFullResponse and has similar behavior Example # For an example, please check the Mattermost node .","title":"HTTP request helpers"},{"location":"integrations/creating-nodes/code/http-helpers/#making-http-requests","text":"While creating nodes it is very commonn to call external APIs or make HTTP requests to other services. This plays a major role during node development, maintenance, and improvements. We provide a very flexible helper for making HTTP requests that abstracts away most of the complexity with a simple to use interface.","title":"Making HTTP Requests"},{"location":"integrations/creating-nodes/code/http-helpers/#how-to-use","text":"In the node code, inside the execute function you can easily call: 1 const response = await this . helpers . httpRequest ( options ); Where options is an object in this format: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 { url : string ; headers? : object ; method ?: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'HEAD' ; body? : FormData | Array | string | number | object | Buffer | URLSearchParams ; qs? : object ; arrayFormat ?: 'indices' | 'brackets' | 'repeat' | 'comma' ; auth ?: { username : string , password : string , }; disableFollowRedirect? : boolean ; encoding ?: 'arraybuffer' | 'blob' | 'document' | 'json' | 'text' | 'stream' ; skipSslCertificateValidation? : boolean ; returnFullResponse? : boolean ; proxy ?: { host : string ; port : string | number ; auth ?: { username : string ; password : string ; }, protocol? : string ; }; timeout? : number ; json? : boolean ; } Where url is the only mandatory field. The default method is GET . Some notes about the possible fields: body : You can use a regular Javascript Object for JSON payload, a Buffer for file uploads, an instance of FormData for multipart/form-data and URLSearchParams for application/x-www-form-urlencoded . headers : A simple key-value pair. If body is an instance of FormData then content-type: multipart/form-data is injected automatically. If body is an instance of URLSearchParams , then content-type: application/x-www-form-urlencoded is added. To override this behavior, you can set any content-type header you wish and it won't be overridden. arrayFormat : If your query string contains an array of data, let's say const qs = {IDs: [15,17]} , the values set to arrayFormat define how it will be sent. indices (default): { a: ['b', 'c'] } will be formatted as a[0]=b&a[1]=c brackets : { a: ['b', 'c'] } will be formatted as a[]=b&a[]=c repeat : { a: ['b', 'c'] } will be formatted as a=b&a=c comma : { a: ['b', 'c'] } will be formatted as a=b,c auth : Used for Basic auth. Provide username and password . disableFollowRedirect : By default, we'll follow redirects. You can set this to false to prevent this from happening skipSslCertificateValidation : Used for calling HTTPS services without proper certificate returnFullResponse : Instead of returning only the body, returns an object with more data in the following format: {body: body, headers: object, statusCode: 200, statusMessage: 'OK'} encoding : We usually detect the content type correctly but you can specify arrayBuffer to receive a Buffer you can read from and interact with.","title":"How to use"},{"location":"integrations/creating-nodes/code/http-helpers/#deprecation-of-the-previous-helper","text":"The previous helper implementation using this.helpers.request(options) used and exposed the request-promise library which was deprecated. In an effort to keep maximum compatibility, we made a transparent conversion to another library called axios . If you are having issues, please report them in our Community Forums or on Github . Also, you can temporarily enable n8n to use the deprecated library by setting the environment variable N8N_USE_DEPRECATED_REQUEST_LIB=true . Please note: This behavior is permanent and we will be removing the request-promise library entirely in the future so please report any errors you have so we can fix them.","title":"Deprecation of the previous helper"},{"location":"integrations/creating-nodes/code/http-helpers/#migration-guide-to-the-new-helper","text":"As mentioned above, the previous helper is deprecated and will be replaced in the future. The new helper is much more robust, library agnostic, and easier to use. New nodes should all use the new helper, and if you have built custom nodes we strongly suggest you migrate to the new helper. Here are the main considerations when migrating: Only url is accepted. Previously uri was also accepted encoding: null now must be encoding: arrayBuffer rejectUnauthorized: false is now skipSslCertificateValidation: true Use body according to content-type headers to clarify what is being sent resolveWithFullResponse is now returnFullResponse and has similar behavior","title":"Migration guide to the new helper"},{"location":"integrations/creating-nodes/code/http-helpers/#example","text":"For an example, please check the Mattermost node .","title":"Example"},{"location":"integrations/creating-nodes/code/node-developer-cli/","text":"Using the Node Dev CLI # Using the Node Dev CLI makes sense if you do not want to ever share the node that you create. For example, for internal systems or something very specific to your internal tooling. Also, the CLI only works if there are no additional dependencies required by the node as it does not support installing additional node modules. If that is not the case, it is best to do follow the creating your first node tutorial or create your own custom node-package. Create the first basic node # Install the n8n-node-dev CLI: npm install -g n8n-node-dev Create and go into the newly created folder in which you want to keep the code of the node Use CLI to create boilerplate node code: n8n-node-dev new Answer the questions (the \u201cExecute\u201d node type is the regular node type that you probably want to create). It will then create the node in the current folder. Program\u2026 Add the functionality to the node Build the node and copy to correct location: n8n-node-dev build That command will build the JavaScript version of the node from the TypeScript code and copy it to the user folder where custom nodes get read from ~/.n8n/custom/ Restart n8n and refresh the window so that the new node gets displayed Create own custom n8n-nodes-module # If you want to create multiple custom nodes which are either: Only for yourself/your company Are only useful for a small number of people Require many or large dependencies Note To learn how to develop and test n8n-nodes-module, refer to the Create n8n-nodes-module documentation. It is best to create your own n8n-nodes-module which can be installed separately. That is an npm package that contains the nodes and is set up in a way that n8n can automatically find and load them on startup. When creating such a module the following rules have to be followed that n8n can automatically find the nodes in the module: The name of the module has to start with n8n-nodes- The package.json file has to contain a key n8n with the paths to nodes and credentials The module has to be installed alongside n8n An example starter module which contains one node and credentials and implements the above can be found here: https://github.com/n8n-io/n8n-nodes-starter Setup to use n8n-nodes-module # To use a custom n8n-nodes-module , it needs to be installed alongside n8n. For example like this: 1 2 3 4 5 6 7 8 9 10 11 12 # Create folder for n8n installation mkdir my-n8n cd my-n8n # Install n8n npm install n8n # Install custom nodes module npm install n8n-nodes-my-custom-nodes # Start n8n n8n Development/Testing of custom n8n-nodes-module # This works in the same way as for any other npm module. Execute in the folder which contains the code of the custom n8n-nodes-module which should be loaded with n8n: 1 2 3 4 5 # Build the code npm run build # \"Publish\" the package locally npm link Then in the folder in which n8n is installed: 1 2 3 4 5 # \"Install\" the above locally published module npm link n8n-nodes-my-custom-nodes # Start n8n n8n","title":"Use the node developer CLI"},{"location":"integrations/creating-nodes/code/node-developer-cli/#using-the-node-dev-cli","text":"Using the Node Dev CLI makes sense if you do not want to ever share the node that you create. For example, for internal systems or something very specific to your internal tooling. Also, the CLI only works if there are no additional dependencies required by the node as it does not support installing additional node modules. If that is not the case, it is best to do follow the creating your first node tutorial or create your own custom node-package.","title":"Using the Node Dev CLI"},{"location":"integrations/creating-nodes/code/node-developer-cli/#create-the-first-basic-node","text":"Install the n8n-node-dev CLI: npm install -g n8n-node-dev Create and go into the newly created folder in which you want to keep the code of the node Use CLI to create boilerplate node code: n8n-node-dev new Answer the questions (the \u201cExecute\u201d node type is the regular node type that you probably want to create). It will then create the node in the current folder. Program\u2026 Add the functionality to the node Build the node and copy to correct location: n8n-node-dev build That command will build the JavaScript version of the node from the TypeScript code and copy it to the user folder where custom nodes get read from ~/.n8n/custom/ Restart n8n and refresh the window so that the new node gets displayed","title":"Create the first basic node"},{"location":"integrations/creating-nodes/code/node-developer-cli/#create-own-custom-n8n-nodes-module","text":"If you want to create multiple custom nodes which are either: Only for yourself/your company Are only useful for a small number of people Require many or large dependencies Note To learn how to develop and test n8n-nodes-module, refer to the Create n8n-nodes-module documentation. It is best to create your own n8n-nodes-module which can be installed separately. That is an npm package that contains the nodes and is set up in a way that n8n can automatically find and load them on startup. When creating such a module the following rules have to be followed that n8n can automatically find the nodes in the module: The name of the module has to start with n8n-nodes- The package.json file has to contain a key n8n with the paths to nodes and credentials The module has to be installed alongside n8n An example starter module which contains one node and credentials and implements the above can be found here: https://github.com/n8n-io/n8n-nodes-starter","title":"Create own custom n8n-nodes-module"},{"location":"integrations/creating-nodes/code/node-developer-cli/#setup-to-use-n8n-nodes-module","text":"To use a custom n8n-nodes-module , it needs to be installed alongside n8n. For example like this: 1 2 3 4 5 6 7 8 9 10 11 12 # Create folder for n8n installation mkdir my-n8n cd my-n8n # Install n8n npm install n8n # Install custom nodes module npm install n8n-nodes-my-custom-nodes # Start n8n n8n","title":"Setup to use n8n-nodes-module"},{"location":"integrations/creating-nodes/code/node-developer-cli/#developmenttesting-of-custom-n8n-nodes-module","text":"This works in the same way as for any other npm module. Execute in the folder which contains the code of the custom n8n-nodes-module which should be loaded with n8n: 1 2 3 4 5 # Build the code npm run build # \"Publish\" the package locally npm link Then in the folder in which n8n is installed: 1 2 3 4 5 # \"Install\" the above locally published module npm link n8n-nodes-my-custom-nodes # Start n8n n8n","title":"Development/Testing of custom n8n-nodes-module"},{"location":"integrations/creating-nodes/code/node-linter/","text":"Nodelinter # Nodelinter is an extensible static analysis tool for checking your n8n node files to ensure n8n recommended best practices are followed when developing new nodes. This includes rules for: * Alphabetization of node parameters and options * Casing for display names and descriptions * Default values per parameter type * Required and optional key-value pairs See the full linting list here for more details. Installation and Usage # Nodelinter is a dependency of the nodes-base package and available upon installing n8n. You can run Nodelinter from the packages/nodes-base directory as follows: 1 npm run nodelinter -- --<options> Keep in mind Be sure to run Nodelinter and verify your code before submitting a pull request. Options # Option Description Example --target Path of the file or directory to lint Lint a single file: --target=nodes/Stripe/Stripe.node.ts Lint all files in a directory: --target=nodes/Stripe --config Path of the custom config to use --config=/Users/john/Documents/myConfig.json --patterns Lintable file patterns --patterns:.node.ts,Description.ts --print Print output to JSON A custom filename can optionally be specified. --print=myLintOutput --errors-only Enable error logs only --warnings-only Enable warning logs only --infos-only Enable info logs only Custom config # The Nodelinter default config can be overridden to, for example, change the areas and issues linted. To do so create a JSON file containing the key values you want to override. For example: 1 2 3 4 5 6 7 8 9 10 11 12 13 { \"target\" : \"/Users/john/n8n/packages/nodes-base/nodes/Notion/Notion.node.ts\" , \"patterns\" : [ \".node.ts\" ], \"sortMethod\" : \"lineNumber\" , \"lintings\" : { \"PARAM_DESCRIPTION_MISSING_WHERE_OPTIONAL\" : { \"enabled\" : false }, \"NAME_WITH_NO_CAMELCASE\" : { \"enabled\" : false } } } Name this file nodelinter.config.json and place it anywhere in your nodes-base directory and it will be automatically detected. Alternatively, you can specify the custom config file and location using the --config option. Lint exceptions # You can create exceptions for individual lines of code from any or all linting rules as follows: 1 // nodelinter-ignore-next-line <LINTING_NAME> <LINTING_NAME> If no specific linting name is provided that line will be excepted from all rules. For example: Exception for one rule: 1 2 // nodelinter-ignore-next-line PARAM_DESCRIPTION_WITH_EXCESS_WHITESPACE description: 'Time zone used in the response. The default is the time zone of the calendar.', Exception for all rules: 1 2 // nodelinter-ignore-next-line description: 'Time zone used in the response. The default is the time zone of the calendar.',","title":"Node linter"},{"location":"integrations/creating-nodes/code/node-linter/#nodelinter","text":"Nodelinter is an extensible static analysis tool for checking your n8n node files to ensure n8n recommended best practices are followed when developing new nodes. This includes rules for: * Alphabetization of node parameters and options * Casing for display names and descriptions * Default values per parameter type * Required and optional key-value pairs See the full linting list here for more details.","title":"Nodelinter"},{"location":"integrations/creating-nodes/code/node-linter/#installation-and-usage","text":"Nodelinter is a dependency of the nodes-base package and available upon installing n8n. You can run Nodelinter from the packages/nodes-base directory as follows: 1 npm run nodelinter -- --<options> Keep in mind Be sure to run Nodelinter and verify your code before submitting a pull request.","title":"Installation and Usage"},{"location":"integrations/creating-nodes/code/node-linter/#options","text":"Option Description Example --target Path of the file or directory to lint Lint a single file: --target=nodes/Stripe/Stripe.node.ts Lint all files in a directory: --target=nodes/Stripe --config Path of the custom config to use --config=/Users/john/Documents/myConfig.json --patterns Lintable file patterns --patterns:.node.ts,Description.ts --print Print output to JSON A custom filename can optionally be specified. --print=myLintOutput --errors-only Enable error logs only --warnings-only Enable warning logs only --infos-only Enable info logs only","title":"Options"},{"location":"integrations/creating-nodes/code/node-linter/#custom-config","text":"The Nodelinter default config can be overridden to, for example, change the areas and issues linted. To do so create a JSON file containing the key values you want to override. For example: 1 2 3 4 5 6 7 8 9 10 11 12 13 { \"target\" : \"/Users/john/n8n/packages/nodes-base/nodes/Notion/Notion.node.ts\" , \"patterns\" : [ \".node.ts\" ], \"sortMethod\" : \"lineNumber\" , \"lintings\" : { \"PARAM_DESCRIPTION_MISSING_WHERE_OPTIONAL\" : { \"enabled\" : false }, \"NAME_WITH_NO_CAMELCASE\" : { \"enabled\" : false } } } Name this file nodelinter.config.json and place it anywhere in your nodes-base directory and it will be automatically detected. Alternatively, you can specify the custom config file and location using the --config option.","title":"Custom config"},{"location":"integrations/creating-nodes/code/node-linter/#lint-exceptions","text":"You can create exceptions for individual lines of code from any or all linting rules as follows: 1 // nodelinter-ignore-next-line <LINTING_NAME> <LINTING_NAME> If no specific linting name is provided that line will be excepted from all rules. For example: Exception for one rule: 1 2 // nodelinter-ignore-next-line PARAM_DESCRIPTION_WITH_EXCESS_WHITESPACE description: 'Time zone used in the response. The default is the time zone of the calendar.', Exception for all rules: 1 2 // nodelinter-ignore-next-line description: 'Time zone used in the response. The default is the time zone of the calendar.',","title":"Lint exceptions"},{"location":"integrations/creating-nodes/code/review-checklist/","text":"Node Review Checklist # If you want to create a new node for a service - that's great, thank you! We recommend you take a look at the existing nodes to get an idea of how your code should look and work like. There are several things to keep in mind when creating the node. To help you, we prepared a checklist that covers the requirements for creating nodes, from preparation to submission. Make sure you tick the boxes below before submitting a node for review, as this will help our team review your PR easier and faster. Preparation # Set up your editor for code formatting (indentation, new lines, linting). If you use Visual Studio Code, you can use the TSLint extension for linting. Get credentials (e.g., Client ID, Client Secret, API key, user login, user password, website URL) for the service you are building a node for. Development # Open a pull request as early as possible with WIP in the pull request title. If you are creating a node requested by a community member, make sure to comment on the feature request in the community forum . Ensure complementary operations to each resource (e.g., create, delete) have been added. Ensure the node works with multiple items via one input. Ensure the parameters have the correct type. Mind the defaults: if the service has a default as true, keep it as true. Changing default values can break the existing workflows of the users. Check if the node disposes of everything properly, in particular, if connections were properly closed. Check your code using Nodelinter to ensure a clean lint before submitting your pull request Testing # Test \"create\" and \"update\" operations with all fields/operations. Test the continueOnFail option with a Function node. (For example, a Widget node has a GET operation that takes a widgetId and returns information on the widget. To test that the workflow continues on fail, set the Widget node to continue on fail, create a Function node, return a valid and an invalid widgetId, connect the Function node to Widget node, and run the workflow. The Widget node should show two items: one with information on the widget and another one with the error from having passed an invalid ID.) Code formatting # Ensure the branch lints cleanly by running npm run lint . Ensure the indentation is correct. Check this in the editorconfig. Ensure there are no extra spaces. Check this in the editorconfig. Code comment dividers inside if-branches. Use \"create/delete\" verbs for operations, except for tags, where you should use \"add/remove\". Errors and Outputs # Ensure empty API responses return { success: true } . Ensure the error responses are handled and displayed correctly (e.g., malformed requests, requests with invalid credentials) and use the current format. You can check this by making failing requests to the API. Check if the response can be simplified and add a simplify function (e.g., SecurityScorecard node ). Ensure the response from Create is consistent with Get . Ensure the response from Get All is consistent with Get . Presentation # Ensure the primary menu contains only required parameters. Ensure a JSON object is not shown in a single column in Table view. Make sure all GetAll operations have the fields return and limit . Ensure the property subtitle is set. Make sure the pagination (if any) is working correctly. Set Limit 1. Writing # Ensure all descriptions are correct and end with a period. Ensure that most descriptions exist, excluding redundant ones. Ensure IDs in displayNames are capitalized (i.e.: \"IDs\", not \"ids\" or \"Ids\"). Ensure that IDs, if multiple, have descriptive qualifiers. Ensure the name property in description in the node class is written in camelCase. Ensure the file name and the Class name are identical. Branding # Ensure the name of the service is written correctly (e.g., \"GitHub\" not \"Github\"). If the node is a trigger node, ensure it is named as such, by adding \"Trigger\" after the service name (e.g., \"Trello Trigger\"). Ensure the logo is either a PNG or SVG, ideally the latter. Vecta is a good website to find SVGs of different applications. If the logo is an SVG, ensure the canvas is a perfect square. If the logo is PNG, ensure it is 60x60 pixels and compressed. Ensure the border color of the node matches the branding of the service. Nice-to-haves (optional) # Add handler for continueOnFail . This feature is included in some of the newest nodes (e.g Lemlist node ) to continue the workflow even if the node's execution fails. Remove required: false and description: '' in the node descriptions (e.g., Lemlist node ). At call site, specify first body and then qs . At call site, prepend the endpoint with slash / (e.g., \"/campaign\").","title":"Node review checklist"},{"location":"integrations/creating-nodes/code/review-checklist/#node-review-checklist","text":"If you want to create a new node for a service - that's great, thank you! We recommend you take a look at the existing nodes to get an idea of how your code should look and work like. There are several things to keep in mind when creating the node. To help you, we prepared a checklist that covers the requirements for creating nodes, from preparation to submission. Make sure you tick the boxes below before submitting a node for review, as this will help our team review your PR easier and faster.","title":"Node Review Checklist"},{"location":"integrations/creating-nodes/code/review-checklist/#preparation","text":"Set up your editor for code formatting (indentation, new lines, linting). If you use Visual Studio Code, you can use the TSLint extension for linting. Get credentials (e.g., Client ID, Client Secret, API key, user login, user password, website URL) for the service you are building a node for.","title":"Preparation"},{"location":"integrations/creating-nodes/code/review-checklist/#development","text":"Open a pull request as early as possible with WIP in the pull request title. If you are creating a node requested by a community member, make sure to comment on the feature request in the community forum . Ensure complementary operations to each resource (e.g., create, delete) have been added. Ensure the node works with multiple items via one input. Ensure the parameters have the correct type. Mind the defaults: if the service has a default as true, keep it as true. Changing default values can break the existing workflows of the users. Check if the node disposes of everything properly, in particular, if connections were properly closed. Check your code using Nodelinter to ensure a clean lint before submitting your pull request","title":"Development"},{"location":"integrations/creating-nodes/code/review-checklist/#testing","text":"Test \"create\" and \"update\" operations with all fields/operations. Test the continueOnFail option with a Function node. (For example, a Widget node has a GET operation that takes a widgetId and returns information on the widget. To test that the workflow continues on fail, set the Widget node to continue on fail, create a Function node, return a valid and an invalid widgetId, connect the Function node to Widget node, and run the workflow. The Widget node should show two items: one with information on the widget and another one with the error from having passed an invalid ID.)","title":"Testing"},{"location":"integrations/creating-nodes/code/review-checklist/#code-formatting","text":"Ensure the branch lints cleanly by running npm run lint . Ensure the indentation is correct. Check this in the editorconfig. Ensure there are no extra spaces. Check this in the editorconfig. Code comment dividers inside if-branches. Use \"create/delete\" verbs for operations, except for tags, where you should use \"add/remove\".","title":"Code formatting"},{"location":"integrations/creating-nodes/code/review-checklist/#errors-and-outputs","text":"Ensure empty API responses return { success: true } . Ensure the error responses are handled and displayed correctly (e.g., malformed requests, requests with invalid credentials) and use the current format. You can check this by making failing requests to the API. Check if the response can be simplified and add a simplify function (e.g., SecurityScorecard node ). Ensure the response from Create is consistent with Get . Ensure the response from Get All is consistent with Get .","title":"Errors and Outputs"},{"location":"integrations/creating-nodes/code/review-checklist/#presentation","text":"Ensure the primary menu contains only required parameters. Ensure a JSON object is not shown in a single column in Table view. Make sure all GetAll operations have the fields return and limit . Ensure the property subtitle is set. Make sure the pagination (if any) is working correctly. Set Limit 1.","title":"Presentation"},{"location":"integrations/creating-nodes/code/review-checklist/#writing","text":"Ensure all descriptions are correct and end with a period. Ensure that most descriptions exist, excluding redundant ones. Ensure IDs in displayNames are capitalized (i.e.: \"IDs\", not \"ids\" or \"Ids\"). Ensure that IDs, if multiple, have descriptive qualifiers. Ensure the name property in description in the node class is written in camelCase. Ensure the file name and the Class name are identical.","title":"Writing"},{"location":"integrations/creating-nodes/code/review-checklist/#branding","text":"Ensure the name of the service is written correctly (e.g., \"GitHub\" not \"Github\"). If the node is a trigger node, ensure it is named as such, by adding \"Trigger\" after the service name (e.g., \"Trello Trigger\"). Ensure the logo is either a PNG or SVG, ideally the latter. Vecta is a good website to find SVGs of different applications. If the logo is an SVG, ensure the canvas is a perfect square. If the logo is PNG, ensure it is 60x60 pixels and compressed. Ensure the border color of the node matches the branding of the service.","title":"Branding"},{"location":"integrations/creating-nodes/code/review-checklist/#nice-to-haves-optional","text":"Add handler for continueOnFail . This feature is included in some of the newest nodes (e.g Lemlist node ) to continue the workflow even if the node's execution fails. Remove required: false and description: '' in the node descriptions (e.g., Lemlist node ). At call site, specify first body and then qs . At call site, prepend the endpoint with slash / (e.g., \"/campaign\").","title":"Nice-to-haves (optional)"},{"location":"integrations/creating-nodes/code/standards/","text":"General Guidelines # Please make sure that everything works correctly and that no unnecessary code gets added. It is important to follow the following guidelines: Do not change incoming data # Never change the incoming data a node receives (which can be queried with this.getInputData() ) as it gets shared by all nodes. If data has to get added, changed or deleted it has to be cloned and the new data returned. If that is not done, sibling nodes which execute after the current one will operate on the altered data and would process different data than they were supposed to. It is however not needed to always clone all the data. If a node for, example only, changes only the binary data but not the JSON data, a new item can be created which reuses the reference to the JSON item. An example can be seen in the code of the ReadBinaryFile-Node . Write nodes in TypeScript # All code of n8n is written in TypeScript and hence, the nodes should also be written in TypeScript. That makes development easier, faster, and avoids at least some bugs. Use the built in request library # Some third-party services have their own libraries on npm which make it easier to create an integration. It can be quite tempting to use them. The problem with those is that you add another dependency and not only one, you add but also all the dependencies of the dependencies. This means more and more code gets added, has to get loaded, can introduce security vulnerabilities, bugs, and so on. So please use the built-in module which can be used like this: 1 const response = await this . helpers . httpRequest ( options ); The full documentation and migration instructions from the deprecated this.helpers.request can be found here . That is using the npm package request-promise-native which is the basic npm request module but with promises. For a full set of options consider looking at the underlying request options documentation . Reuse parameter names # When a node can perform multiple operations like edit and delete some kind of entity, for both operations, it would need an entity-id. Do not call them \"editId\" and \"deleteId\", call them \"id\". n8n can handle multiple parameters with the same name without a problem as long as only one is visible. To make sure that is the case, the \"displayOptions\" can be used. By keeping the same name, the value can be kept if a user switches the operation from \"edit\" to \"delete\". Create an 'Additional Fields' parameter # Some nodes may need a lot of options. Add only the very important ones to the top level and for all others, create an 'Additional Fields' parameter where they can be added if needed. This ensures that the interface stays clean and does not unnecessarily confuse people. A good example of that would be the XML node. Follow existing parameter naming guideline # There is not much of a guideline yet but if your node can do multiple things, call the parameter which sets the behavior either \"mode\" (like \"Merge\" and \"XML\" node) or \"operation\" like the most other ones. If these operations can be done on different resources (like \"User\" or \"Order) create a \"resource\" parameter (like \"Pipedrive\" and \"Trello\" node). Node icons # Check existing node icons as a reference when you create own ones. The resolution of an icon should be 60x60px and saved as PNG. Node versions # n8n now supports node versioning and it's a blast! You can make changes to existing nodes without breaking the existing behavior by introducing a new version. You can check an example of a versioned node by browsing the Mattermost node . Node versioning in a glimpse: The main node file should now extend NodeVersionedType instead of INodeType The main node file now only contains a base description containing the defaultVersion (usually the latest) and a list of versions We recommend you use v1 , v2 , etc. for version folder names A new code separation has been created and can be seen in the Mattermost node above. Highlights: actions folder with description and implementation of each possible action methods is an optional folder with the loading dynamic parameters' functions transport is a folder with all the communication implementation Note: For the actions folder we recommend using resources and operations names as subfolders hierarchically. For the implementation an description you can use separate files. Our recommendation is to use execute.ts and description.ts as file names. This make browsing through the code a lot easier. This can be simplified for nodes that have a less complicated structure.","title":"Standards"},{"location":"integrations/creating-nodes/code/standards/#general-guidelines","text":"Please make sure that everything works correctly and that no unnecessary code gets added. It is important to follow the following guidelines:","title":"General Guidelines"},{"location":"integrations/creating-nodes/code/standards/#do-not-change-incoming-data","text":"Never change the incoming data a node receives (which can be queried with this.getInputData() ) as it gets shared by all nodes. If data has to get added, changed or deleted it has to be cloned and the new data returned. If that is not done, sibling nodes which execute after the current one will operate on the altered data and would process different data than they were supposed to. It is however not needed to always clone all the data. If a node for, example only, changes only the binary data but not the JSON data, a new item can be created which reuses the reference to the JSON item. An example can be seen in the code of the ReadBinaryFile-Node .","title":"Do not change incoming data"},{"location":"integrations/creating-nodes/code/standards/#write-nodes-in-typescript","text":"All code of n8n is written in TypeScript and hence, the nodes should also be written in TypeScript. That makes development easier, faster, and avoids at least some bugs.","title":"Write nodes in TypeScript"},{"location":"integrations/creating-nodes/code/standards/#use-the-built-in-request-library","text":"Some third-party services have their own libraries on npm which make it easier to create an integration. It can be quite tempting to use them. The problem with those is that you add another dependency and not only one, you add but also all the dependencies of the dependencies. This means more and more code gets added, has to get loaded, can introduce security vulnerabilities, bugs, and so on. So please use the built-in module which can be used like this: 1 const response = await this . helpers . httpRequest ( options ); The full documentation and migration instructions from the deprecated this.helpers.request can be found here . That is using the npm package request-promise-native which is the basic npm request module but with promises. For a full set of options consider looking at the underlying request options documentation .","title":"Use the built in request library"},{"location":"integrations/creating-nodes/code/standards/#reuse-parameter-names","text":"When a node can perform multiple operations like edit and delete some kind of entity, for both operations, it would need an entity-id. Do not call them \"editId\" and \"deleteId\", call them \"id\". n8n can handle multiple parameters with the same name without a problem as long as only one is visible. To make sure that is the case, the \"displayOptions\" can be used. By keeping the same name, the value can be kept if a user switches the operation from \"edit\" to \"delete\".","title":"Reuse parameter names"},{"location":"integrations/creating-nodes/code/standards/#create-an-additional-fields-parameter","text":"Some nodes may need a lot of options. Add only the very important ones to the top level and for all others, create an 'Additional Fields' parameter where they can be added if needed. This ensures that the interface stays clean and does not unnecessarily confuse people. A good example of that would be the XML node.","title":"Create an 'Additional Fields' parameter"},{"location":"integrations/creating-nodes/code/standards/#follow-existing-parameter-naming-guideline","text":"There is not much of a guideline yet but if your node can do multiple things, call the parameter which sets the behavior either \"mode\" (like \"Merge\" and \"XML\" node) or \"operation\" like the most other ones. If these operations can be done on different resources (like \"User\" or \"Order) create a \"resource\" parameter (like \"Pipedrive\" and \"Trello\" node).","title":"Follow existing parameter naming guideline"},{"location":"integrations/creating-nodes/code/standards/#node-icons","text":"Check existing node icons as a reference when you create own ones. The resolution of an icon should be 60x60px and saved as PNG.","title":"Node icons"},{"location":"integrations/creating-nodes/code/standards/#node-versions","text":"n8n now supports node versioning and it's a blast! You can make changes to existing nodes without breaking the existing behavior by introducing a new version. You can check an example of a versioned node by browsing the Mattermost node . Node versioning in a glimpse: The main node file should now extend NodeVersionedType instead of INodeType The main node file now only contains a base description containing the defaultVersion (usually the latest) and a list of versions We recommend you use v1 , v2 , etc. for version folder names A new code separation has been created and can be seen in the Mattermost node above. Highlights: actions folder with description and implementation of each possible action methods is an optional folder with the loading dynamic parameters' functions transport is a folder with all the communication implementation Note: For the actions folder we recommend using resources and operations names as subfolders hierarchically. For the implementation an description you can use separate files. Our recommendation is to use execute.ts and description.ts as file names. This make browsing through the code a lot easier. This can be simplified for nodes that have a less complicated structure.","title":"Node versions"},{"location":"integrations/creating-nodes/code/troubleshooting-node-development/","text":"Troubleshooting # Credentials # Error message: 'Credentials of type \u201c*\u201d are not known' # Ensure that the name in the credentials array matches the name used in the property name of the credentials' class. Editor UI # Error message: 'There was a problem loading init data: API-Server can not be reached. It is probably down' # Ensure that the node\u2019s file name, class\u2019s name, and node\u2019s folder name matches the path added to packages/nodes-base/package.json . Ensure the names used in the displayOptions property are names used by UI elements in the node. Node icon doesn't show up in the Create Node menu and the Editor UI # Ensure that the icon is in the same folder as the node. Ensure that it's either in PNG or SVG format. When the icon is referenced in the 'icon' property, ensure that it includes the logo extension ( .png or .svg ) and that it is preceded by the world file: . For example, file:friendGrid.png or file:friendGrid.svg . Node icon does not fit correctly # If you are using an SVG file, make sure the canvas size is square. You can find instructions to change the canvas size of an SVG file using GIMP here . If you are using a PNG file, make sure that it's 60x60 pixels. Node does not show up in the Create Node menu # Ensure that the node is registered in the packages/nodes-base/package.json file. Changes to the description properties do not show in the UI on refreshing # Every time a change is made to the description properties, you have to stop the current n8n process (ctrl + c) and run it again (npm run dev).","title":"Troubleshooting"},{"location":"integrations/creating-nodes/code/troubleshooting-node-development/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"integrations/creating-nodes/code/troubleshooting-node-development/#credentials","text":"","title":"Credentials"},{"location":"integrations/creating-nodes/code/troubleshooting-node-development/#error-message-credentials-of-type-are-not-known","text":"Ensure that the name in the credentials array matches the name used in the property name of the credentials' class.","title":"Error message: 'Credentials of type \u201c*\u201d are not known'"},{"location":"integrations/creating-nodes/code/troubleshooting-node-development/#editor-ui","text":"","title":"Editor UI"},{"location":"integrations/creating-nodes/code/troubleshooting-node-development/#error-message-there-was-a-problem-loading-init-data-api-server-can-not-be-reached-it-is-probably-down","text":"Ensure that the node\u2019s file name, class\u2019s name, and node\u2019s folder name matches the path added to packages/nodes-base/package.json . Ensure the names used in the displayOptions property are names used by UI elements in the node.","title":"Error message: 'There was a problem loading init data: API-Server can not be reached. It is probably down'"},{"location":"integrations/creating-nodes/code/troubleshooting-node-development/#node-icon-doesnt-show-up-in-the-create-node-menu-and-the-editor-ui","text":"Ensure that the icon is in the same folder as the node. Ensure that it's either in PNG or SVG format. When the icon is referenced in the 'icon' property, ensure that it includes the logo extension ( .png or .svg ) and that it is preceded by the world file: . For example, file:friendGrid.png or file:friendGrid.svg .","title":"Node icon doesn't show up in the Create Node menu and the Editor UI"},{"location":"integrations/creating-nodes/code/troubleshooting-node-development/#node-icon-does-not-fit-correctly","text":"If you are using an SVG file, make sure the canvas size is square. You can find instructions to change the canvas size of an SVG file using GIMP here . If you are using a PNG file, make sure that it's 60x60 pixels.","title":"Node icon does not fit correctly"},{"location":"integrations/creating-nodes/code/troubleshooting-node-development/#node-does-not-show-up-in-the-create-node-menu","text":"Ensure that the node is registered in the packages/nodes-base/package.json file.","title":"Node does not show up in the Create Node menu"},{"location":"integrations/creating-nodes/code/troubleshooting-node-development/#changes-to-the-description-properties-do-not-show-in-the-ui-on-refreshing","text":"Every time a change is made to the description properties, you have to stop the current n8n process (ctrl + c) and run it again (npm run dev).","title":"Changes to the description properties do not show in the UI on refreshing"},{"location":"integrations/creating-nodes/code/ui-elements/","text":"Node UI Elements # n8n provides a set of predefined UI components (based on a JSON file) that allow users to input all sorts of data types. Currently, the following UI elements are available in n8n. [[toc]] String # The string type is used to input string values. Basic configuration 1 2 3 4 5 6 7 8 { displayName : Name , // The value the user would see in the UI name : name , // The name use to reference the element UI within the code type : string , required : true , // Whether the field is required or not default : 'n8n' , // Value that would be set by default description : 'The name of the user' , }, Variation for inputting passwords 1 2 3 4 5 6 7 8 9 10 11 12 { displayName : 'Password' , name : 'password' , type : 'string' , required : true , typeOptions : { password : true , }, default : '' , description : `User's password` , }, Variation with multiple rows 1 2 3 4 5 6 7 8 9 10 11 { displayName : 'Description' , name : 'description' , type : 'string' , required : true , typeOptions : { rows : 4 , }, default : '' , description : 'Description' , }, Number # The number type is used to input numbers. Basic configuration 1 2 3 4 5 6 7 8 9 10 11 12 13 { displayName : 'Age' , name : 'age' , type : 'number' , required : true , typeOptions : { maxValue : 10 , minValue : 0 , numberStepSize : 1 , }, default : 10 , description : 'Your current age' , }, Variation with decimal points 1 2 3 4 5 6 7 8 9 10 11 { displayName : 'Amount' , name : 'amount' , type : 'number' , required : true , typeOptions : { numberPrecision : 2 , }, default : 10.00 , description : 'Your current amount' , }, Collection # The collection type is used to input a collection of fields. For example, additional fields (or optional fields). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 { displayName : 'Filters' , name : 'filters' , type : 'collection' , placeholder : 'Add Field' , default : {}, options : [ { displayName : 'Type' , name : 'type' , type : 'options' , options : [ { name : 'Automated' , value : 'automated' , }, { name : 'Past' , value : 'past' , }, { name : 'Upcoming' , value : 'upcoming' , }, ], default : '' , }, ], }, Datetime # The dateTime type provides a calendar from which you can pick a specific date and time. 1 2 3 4 5 6 7 { displayName : 'Modified Since' , name : 'modified_since' , type : 'dateTime' , default : '' , description : 'The date and time when the file was last modified' , }, Boolean # The boolean type is used to input a value that is either true or false. It is shown as a toggle that can be either on or off. 1 2 3 4 5 6 7 { displayName : 'Wait for Image' , name : 'waitForImage' , type : 'boolean' , default : true , // Initial state of the toggle description : 'Whether to wait for the image or not' , }, Color # The color type provides a color palette from which a specific color can be selected. 1 2 3 4 5 6 { displayName : 'Background Color' , name : 'backgroundColor' , type : 'color' , default : '' , // Initially selected color }, Options # The options type is used to provide options from which a single one has to be selected. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 { displayName : 'Resource' , name : 'resource' , type : 'options' , options : [ { name : 'Image' , value : 'image' , }, { name : 'Template' , value : 'template' , }, ], default : 'image' , // The initially selected option description : 'Resource to consume' , }, Multi Options # The multiOptions type is used to provide options from which many can be selected. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 { displayName : 'Events' , name : 'events' , type : 'multiOptions' , options : [ { name : 'Plan Created' , value : 'planCreated' , }, { name : 'Plan Deleted' , value : 'planDeleted' , }, ], default : [], // Initially selected options description : 'The events to be monitored' , }, Fixed Collection # The `fixedCollection? type is used to present groups of fields that are semantically related. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 { displayName : 'Metadata' , name : 'metadataUi' , placeholder : 'Add Metadata' , type : 'fixedCollection' , default : '' , typeOptions : { multipleValues : true , }, description : '' , options : [ { name : 'metadataValues' , displayName : 'Metadata' , values : [ { displayName : 'Name' , name : 'name' , type : 'string' , default : 'Name of the metadata key to add.' , }, { displayName : 'Value' , name : 'value' , type : 'string' , default : '' , description : 'Value to set for the metadata key.' , }, ], }, ], }, JSON # The json type is used to input data formatted as JSON. 1 2 3 4 5 6 7 { displayName : 'Content (JSON)' , name : 'content' , type : 'json' , default : '' , description : '' , },","title":"Node UI elements"},{"location":"integrations/creating-nodes/code/ui-elements/#node-ui-elements","text":"n8n provides a set of predefined UI components (based on a JSON file) that allow users to input all sorts of data types. Currently, the following UI elements are available in n8n. [[toc]]","title":"Node UI Elements"},{"location":"integrations/creating-nodes/code/ui-elements/#string","text":"The string type is used to input string values. Basic configuration 1 2 3 4 5 6 7 8 { displayName : Name , // The value the user would see in the UI name : name , // The name use to reference the element UI within the code type : string , required : true , // Whether the field is required or not default : 'n8n' , // Value that would be set by default description : 'The name of the user' , }, Variation for inputting passwords 1 2 3 4 5 6 7 8 9 10 11 12 { displayName : 'Password' , name : 'password' , type : 'string' , required : true , typeOptions : { password : true , }, default : '' , description : `User's password` , }, Variation with multiple rows 1 2 3 4 5 6 7 8 9 10 11 { displayName : 'Description' , name : 'description' , type : 'string' , required : true , typeOptions : { rows : 4 , }, default : '' , description : 'Description' , },","title":"String"},{"location":"integrations/creating-nodes/code/ui-elements/#number","text":"The number type is used to input numbers. Basic configuration 1 2 3 4 5 6 7 8 9 10 11 12 13 { displayName : 'Age' , name : 'age' , type : 'number' , required : true , typeOptions : { maxValue : 10 , minValue : 0 , numberStepSize : 1 , }, default : 10 , description : 'Your current age' , }, Variation with decimal points 1 2 3 4 5 6 7 8 9 10 11 { displayName : 'Amount' , name : 'amount' , type : 'number' , required : true , typeOptions : { numberPrecision : 2 , }, default : 10.00 , description : 'Your current amount' , },","title":"Number"},{"location":"integrations/creating-nodes/code/ui-elements/#collection","text":"The collection type is used to input a collection of fields. For example, additional fields (or optional fields). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 { displayName : 'Filters' , name : 'filters' , type : 'collection' , placeholder : 'Add Field' , default : {}, options : [ { displayName : 'Type' , name : 'type' , type : 'options' , options : [ { name : 'Automated' , value : 'automated' , }, { name : 'Past' , value : 'past' , }, { name : 'Upcoming' , value : 'upcoming' , }, ], default : '' , }, ], },","title":"Collection"},{"location":"integrations/creating-nodes/code/ui-elements/#datetime","text":"The dateTime type provides a calendar from which you can pick a specific date and time. 1 2 3 4 5 6 7 { displayName : 'Modified Since' , name : 'modified_since' , type : 'dateTime' , default : '' , description : 'The date and time when the file was last modified' , },","title":"Datetime"},{"location":"integrations/creating-nodes/code/ui-elements/#boolean","text":"The boolean type is used to input a value that is either true or false. It is shown as a toggle that can be either on or off. 1 2 3 4 5 6 7 { displayName : 'Wait for Image' , name : 'waitForImage' , type : 'boolean' , default : true , // Initial state of the toggle description : 'Whether to wait for the image or not' , },","title":"Boolean"},{"location":"integrations/creating-nodes/code/ui-elements/#color","text":"The color type provides a color palette from which a specific color can be selected. 1 2 3 4 5 6 { displayName : 'Background Color' , name : 'backgroundColor' , type : 'color' , default : '' , // Initially selected color },","title":"Color"},{"location":"integrations/creating-nodes/code/ui-elements/#options","text":"The options type is used to provide options from which a single one has to be selected. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 { displayName : 'Resource' , name : 'resource' , type : 'options' , options : [ { name : 'Image' , value : 'image' , }, { name : 'Template' , value : 'template' , }, ], default : 'image' , // The initially selected option description : 'Resource to consume' , },","title":"Options"},{"location":"integrations/creating-nodes/code/ui-elements/#multi-options","text":"The multiOptions type is used to provide options from which many can be selected. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 { displayName : 'Events' , name : 'events' , type : 'multiOptions' , options : [ { name : 'Plan Created' , value : 'planCreated' , }, { name : 'Plan Deleted' , value : 'planDeleted' , }, ], default : [], // Initially selected options description : 'The events to be monitored' , },","title":"Multi Options"},{"location":"integrations/creating-nodes/code/ui-elements/#fixed-collection","text":"The `fixedCollection? type is used to present groups of fields that are semantically related. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 { displayName : 'Metadata' , name : 'metadataUi' , placeholder : 'Add Metadata' , type : 'fixedCollection' , default : '' , typeOptions : { multipleValues : true , }, description : '' , options : [ { name : 'metadataValues' , displayName : 'Metadata' , values : [ { displayName : 'Name' , name : 'name' , type : 'string' , default : 'Name of the metadata key to add.' , }, { displayName : 'Value' , name : 'value' , type : 'string' , default : '' , description : 'Value to set for the metadata key.' , }, ], }, ], },","title":"Fixed Collection"},{"location":"integrations/creating-nodes/code/ui-elements/#json","text":"The json type is used to input data formatted as JSON. 1 2 3 4 5 6 7 { displayName : 'Content (JSON)' , name : 'content' , type : 'json' , default : '' , description : '' , },","title":"JSON"},{"location":"integrations/credentials/","text":"Overview # This section contains step-by-step information about authenticating the different nodes in n8n.","title":"Overview"},{"location":"integrations/credentials/#overview","text":"This section contains step-by-step information about authenticating the different nodes in n8n.","title":"Overview"},{"location":"integrations/credentials/actionNetwork/","text":"Action Network # You can use these credentials to authenticate the following nodes: Action Network Prerequisites # Create an Action Network account. Contact Action Network to become a partner and enable API access. Using API key # After becoming an Action Network partner: Open your Action Network dashboard. From the Start Organizing menu navigate to Details > API & Sync . Use the dropdown to select the list you want to generate a key for, your personal list or that of any groups you are an administrator of. From the Your API Key section, generate a new API key: Copy your new key and use it with your Action Network node credentials in n8n.","title":"Action Network"},{"location":"integrations/credentials/actionNetwork/#action-network","text":"You can use these credentials to authenticate the following nodes: Action Network","title":"Action Network"},{"location":"integrations/credentials/actionNetwork/#prerequisites","text":"Create an Action Network account. Contact Action Network to become a partner and enable API access.","title":"Prerequisites"},{"location":"integrations/credentials/actionNetwork/#using-api-key","text":"After becoming an Action Network partner: Open your Action Network dashboard. From the Start Organizing menu navigate to Details > API & Sync . Use the dropdown to select the list you want to generate a key for, your personal list or that of any groups you are an administrator of. From the Your API Key section, generate a new API key: Copy your new key and use it with your Action Network node credentials in n8n.","title":"Using API key"},{"location":"integrations/credentials/activeCampaign/","text":"ActiveCampaign # You can use these credentials to authenticate the following nodes with ActiveCampaign. - ActiveCampaign - Active Campaign Trigger Prerequisites # Create an ActiveCampaign account. Using Access Token # Open your ActiveCampaign dashboard. Click on the gears icon on the bottom left to open the Settings. Click on the Developer option under the Settings panel. In the Developer Settings, copy the 'Key' and 'URL' under the \u2018API Access\u2019 panel. Use these credentials with your ActiveCampaign node credentials in n8n.","title":"ActiveCampaign"},{"location":"integrations/credentials/activeCampaign/#activecampaign","text":"You can use these credentials to authenticate the following nodes with ActiveCampaign. - ActiveCampaign - Active Campaign Trigger","title":"ActiveCampaign"},{"location":"integrations/credentials/activeCampaign/#prerequisites","text":"Create an ActiveCampaign account.","title":"Prerequisites"},{"location":"integrations/credentials/activeCampaign/#using-access-token","text":"Open your ActiveCampaign dashboard. Click on the gears icon on the bottom left to open the Settings. Click on the Developer option under the Settings panel. In the Developer Settings, copy the 'Key' and 'URL' under the \u2018API Access\u2019 panel. Use these credentials with your ActiveCampaign node credentials in n8n.","title":"Using Access Token"},{"location":"integrations/credentials/acuityScheduling/","text":"Acuity Scheduling # You can use these credentials to authenticate the following nodes with Acuity Scheduling. - Acuity Scheduling Trigger Prerequisites # Create an Acuity Scheduling account. Using OAuth # \u26c5\ufe0f Note for n8n.cloud users You'll only need to enter the Credentials Name and click on the circle button in the OAuth section to connect your Acuity Scheduling account to n8n. Visit the Acuity OAuth2 Account Registration page . Enter a name in the Account Name field. Enter your email address in the Email Address field. Enter your URL in the Website field. Enter a description in the Application Description field. Copy your OAuth Callback URL from the 'Create New Credentials' screen in n8n and paste in the Callback URIs section. Click on the Register button. Use the provided Client ID and the Client Secret with your Acuity Scheduling OAuth2 API credentials in n8n. Click on the circle button in the OAuth section to connect your Acuity Scheduling account to n8n. Click the Save button to save your credentials. Using Access Token # Open your Acuity Scheduling dashboard. Click on 'Integrations' in the left sidebar. Scroll down and click on 'view credentials' under the API section. Copy the User ID and API Key from the pop-up that is displayed. Use these credentials with your Acuity Scheduling node credentials in n8n.","title":"Acuity Scheduling"},{"location":"integrations/credentials/acuityScheduling/#acuity-scheduling","text":"You can use these credentials to authenticate the following nodes with Acuity Scheduling. - Acuity Scheduling Trigger","title":"Acuity Scheduling"},{"location":"integrations/credentials/acuityScheduling/#prerequisites","text":"Create an Acuity Scheduling account.","title":"Prerequisites"},{"location":"integrations/credentials/acuityScheduling/#using-oauth","text":"\u26c5\ufe0f Note for n8n.cloud users You'll only need to enter the Credentials Name and click on the circle button in the OAuth section to connect your Acuity Scheduling account to n8n. Visit the Acuity OAuth2 Account Registration page . Enter a name in the Account Name field. Enter your email address in the Email Address field. Enter your URL in the Website field. Enter a description in the Application Description field. Copy your OAuth Callback URL from the 'Create New Credentials' screen in n8n and paste in the Callback URIs section. Click on the Register button. Use the provided Client ID and the Client Secret with your Acuity Scheduling OAuth2 API credentials in n8n. Click on the circle button in the OAuth section to connect your Acuity Scheduling account to n8n. Click the Save button to save your credentials.","title":"Using OAuth"},{"location":"integrations/credentials/acuityScheduling/#using-access-token","text":"Open your Acuity Scheduling dashboard. Click on 'Integrations' in the left sidebar. Scroll down and click on 'view credentials' under the API section. Copy the User ID and API Key from the pop-up that is displayed. Use these credentials with your Acuity Scheduling node credentials in n8n.","title":"Using Access Token"},{"location":"integrations/credentials/affinity/","text":"Affinity # You can use these credentials to authenticate the following nodes with Affinity. - Affinity - Affinity Trigger Prerequisites # Create an Affinity account. Using Access Token # Open your Affinity dashboard. Open hamburger menu on the top left. Click on Settings. Click on API. Click on 'Generate an API Key\u2019 button. Use the API key with your Affinity node credentials in n8n.","title":"Affinity"},{"location":"integrations/credentials/affinity/#affinity","text":"You can use these credentials to authenticate the following nodes with Affinity. - Affinity - Affinity Trigger","title":"Affinity"},{"location":"integrations/credentials/affinity/#prerequisites","text":"Create an Affinity account.","title":"Prerequisites"},{"location":"integrations/credentials/affinity/#using-access-token","text":"Open your Affinity dashboard. Open hamburger menu on the top left. Click on Settings. Click on API. Click on 'Generate an API Key\u2019 button. Use the API key with your Affinity node credentials in n8n.","title":"Using Access Token"},{"location":"integrations/credentials/agileCrm/","text":"Agile CRM # You can use these credentials to authenticate the following nodes with Agile CRM. - Agile CRM Prerequisites # Create an Agile CRM account. Using Access Token # Open your Agile CRM dashboard. Click on your user icon in the top right of the window. Click on the Admin Settings button. Click on the 'Developers & Api' button in the bottom left. Use the REST API key, your registered email and your Agile CRM subdomain (for instance, n8n) with your Agile CRM node credentials in n8n.","title":"Agile CRM"},{"location":"integrations/credentials/agileCrm/#agile-crm","text":"You can use these credentials to authenticate the following nodes with Agile CRM. - Agile CRM","title":"Agile CRM"},{"location":"integrations/credentials/agileCrm/#prerequisites","text":"Create an Agile CRM account.","title":"Prerequisites"},{"location":"integrations/credentials/agileCrm/#using-access-token","text":"Open your Agile CRM dashboard. Click on your user icon in the top right of the window. Click on the Admin Settings button. Click on the 'Developers & Api' button in the bottom left. Use the REST API key, your registered email and your Agile CRM subdomain (for instance, n8n) with your Agile CRM node credentials in n8n.","title":"Using Access Token"},{"location":"integrations/credentials/airtable/","text":"Airtable # You can use these credentials to authenticate the following nodes with Airtable. - Airtable - Airtable Trigger Prerequisites # Create an Airtable account. Using API Key # Open your Airtable dashboard . Click on the user icon on the top right and select 'Account' from the dropdown list. Under the API section, click on the Generate API key button. Copy the displayed API key. Enter a name for your credentials in the Credentials Name field in the 'Airtable API' credentials in n8n. Paste the API key in the API Key field in the 'Airtable API' credentials in n8n. Click on the Create button to create the credentials. The following video demonstrates the steps mentioned above.","title":"Airtable"},{"location":"integrations/credentials/airtable/#airtable","text":"You can use these credentials to authenticate the following nodes with Airtable. - Airtable - Airtable Trigger","title":"Airtable"},{"location":"integrations/credentials/airtable/#prerequisites","text":"Create an Airtable account.","title":"Prerequisites"},{"location":"integrations/credentials/airtable/#using-api-key","text":"Open your Airtable dashboard . Click on the user icon on the top right and select 'Account' from the dropdown list. Under the API section, click on the Generate API key button. Copy the displayed API key. Enter a name for your credentials in the Credentials Name field in the 'Airtable API' credentials in n8n. Paste the API key in the API Key field in the 'Airtable API' credentials in n8n. Click on the Create button to create the credentials. The following video demonstrates the steps mentioned above.","title":"Using API Key"},{"location":"integrations/credentials/amqp/","text":"AMQP # You can use these credentials to authenticate the following nodes with AMQP. - AMQP Sender - AMQP Trigger Prerequisites # You need to have a AMQP 1.0 compatible message broker installed. Using ActiveMQ connection # Use your Hostname, Port, User, and Password as the AMQP Sender credential data in n8n. Note: The default username for ActiveMQ is admin and the default password is admin .","title":"AMQP"},{"location":"integrations/credentials/amqp/#amqp","text":"You can use these credentials to authenticate the following nodes with AMQP. - AMQP Sender - AMQP Trigger","title":"AMQP"},{"location":"integrations/credentials/amqp/#prerequisites","text":"You need to have a AMQP 1.0 compatible message broker installed.","title":"Prerequisites"},{"location":"integrations/credentials/amqp/#using-activemq-connection","text":"Use your Hostname, Port, User, and Password as the AMQP Sender credential data in n8n. Note: The default username for ActiveMQ is admin and the default password is admin .","title":"Using ActiveMQ connection"},{"location":"integrations/credentials/apiTemplateIo/","text":"APITemplate.io # You can use these credentials to authenticate the following nodes with APITemplate.io. - APITemplate.io Prerequisites # Create an APITemplate.io account. Using API Key # Open your APITemplate.io dashboard . Click on API Integration on the left sidebar. Click on the Copy text button to copy the API key. Enter a name for your credentials in the Credentials Name field in the 'APITemplate.io API' credentials in n8n. Paste the API key in the API Key field in the 'APITemplate.io API' credentials in n8n. Click on the Create button to create the credentials. The following video demonstrates the steps mentioned above.","title":"APITemplate.io"},{"location":"integrations/credentials/apiTemplateIo/#apitemplateio","text":"You can use these credentials to authenticate the following nodes with APITemplate.io. - APITemplate.io","title":"APITemplate.io"},{"location":"integrations/credentials/apiTemplateIo/#prerequisites","text":"Create an APITemplate.io account.","title":"Prerequisites"},{"location":"integrations/credentials/apiTemplateIo/#using-api-key","text":"Open your APITemplate.io dashboard . Click on API Integration on the left sidebar. Click on the Copy text button to copy the API key. Enter a name for your credentials in the Credentials Name field in the 'APITemplate.io API' credentials in n8n. Paste the API key in the API Key field in the 'APITemplate.io API' credentials in n8n. Click on the Create button to create the credentials. The following video demonstrates the steps mentioned above.","title":"Using API Key"},{"location":"integrations/credentials/asana/","text":"Asana # You can use these credentials to authenticate the following nodes with Asana. - Asana - Asana Trigger Prerequisites # Create an Asana account. Using OAuth # \u26c5\ufe0f Note for n8n.cloud users You'll only need to enter the Credentials Name and click on the circle button in the OAuth section to connect your Asana account to n8n. Open your Asana dashboard. Click on your user icon in the top right. Click on My Profile Settings... Click on the Apps tab. Click on Manage Developer Apps . Click on New App . Enter a name, accept the API terms and conditions , and click on Create app . Copy the OAuth Callback URL from n8n and paste it in the Redirect URLs field and click Add . Use the provided Client ID and Client secret with your Asana OAuth2 API credentials in n8n. Click on the circle button in the OAuth section to connect an Asana account to n8n. Click the Save button to save your credentials in n8n. Using Access Token # Open your Asana dashboard. Click on your user icon in the top right of the window. Click on My Profile Settings . Click on the Apps tab. Click on Manage Developer Apps . Click on New access token under the Personal access tokens section. Enter a name for the access token and agree to the API terms and conditions. Click on the Create token button. Copy the token and use it with your Asana node credentials in n8n.","title":"Asana"},{"location":"integrations/credentials/asana/#asana","text":"You can use these credentials to authenticate the following nodes with Asana. - Asana - Asana Trigger","title":"Asana"},{"location":"integrations/credentials/asana/#prerequisites","text":"Create an Asana account.","title":"Prerequisites"},{"location":"integrations/credentials/asana/#using-oauth","text":"\u26c5\ufe0f Note for n8n.cloud users You'll only need to enter the Credentials Name and click on the circle button in the OAuth section to connect your Asana account to n8n. Open your Asana dashboard. Click on your user icon in the top right. Click on My Profile Settings... Click on the Apps tab. Click on Manage Developer Apps . Click on New App . Enter a name, accept the API terms and conditions , and click on Create app . Copy the OAuth Callback URL from n8n and paste it in the Redirect URLs field and click Add . Use the provided Client ID and Client secret with your Asana OAuth2 API credentials in n8n. Click on the circle button in the OAuth section to connect an Asana account to n8n. Click the Save button to save your credentials in n8n.","title":"Using OAuth"},{"location":"integrations/credentials/asana/#using-access-token","text":"Open your Asana dashboard. Click on your user icon in the top right of the window. Click on My Profile Settings . Click on the Apps tab. Click on Manage Developer Apps . Click on New access token under the Personal access tokens section. Enter a name for the access token and agree to the API terms and conditions. Click on the Create token button. Copy the token and use it with your Asana node credentials in n8n.","title":"Using Access Token"},{"location":"integrations/credentials/automizy/","text":"Automizy # You can use these credentials to authenticate the following nodes with Automizy. - Automizy Prerequisites # Create an Automizy account. Using API Token # Access the Automizy dashboard . Click on Settings in the bottom left corner and select 'API Token'. Click on the CREATE TOKEN button. Click on the COPY & CLOSE button to copy the API token. Use this API token with your Auotmizy node credentials in n8n.","title":"Automizy"},{"location":"integrations/credentials/automizy/#automizy","text":"You can use these credentials to authenticate the following nodes with Automizy. - Automizy","title":"Automizy"},{"location":"integrations/credentials/automizy/#prerequisites","text":"Create an Automizy account.","title":"Prerequisites"},{"location":"integrations/credentials/automizy/#using-api-token","text":"Access the Automizy dashboard . Click on Settings in the bottom left corner and select 'API Token'. Click on the CREATE TOKEN button. Click on the COPY & CLOSE button to copy the API token. Use this API token with your Auotmizy node credentials in n8n.","title":"Using API Token"},{"location":"integrations/credentials/autopilot/","text":"Autopilot # You can use these credentials to authenticate the following nodes with Autopilot. - Autopilot - Autopilot Trigger Prerequisites # Create an Autopilot account. Using API Key # Open your Autopilot dashboard . Click on the gears icon on the left sidebar to open the Settings menu. Click on Autopilot API . Click on the Generate button to create the API key. Copy the displayed API key. Enter a name for your credentials in the Credentials Name field in the 'Autopilot API' credentials in n8n. Paste the API key in the API Key field in the 'Autopilot API' credentials in n8n. Click on the Create button to create the credentials. The following video demonstrates the steps mentioned above.","title":"Autopilot"},{"location":"integrations/credentials/autopilot/#autopilot","text":"You can use these credentials to authenticate the following nodes with Autopilot. - Autopilot - Autopilot Trigger","title":"Autopilot"},{"location":"integrations/credentials/autopilot/#prerequisites","text":"Create an Autopilot account.","title":"Prerequisites"},{"location":"integrations/credentials/autopilot/#using-api-key","text":"Open your Autopilot dashboard . Click on the gears icon on the left sidebar to open the Settings menu. Click on Autopilot API . Click on the Generate button to create the API key. Copy the displayed API key. Enter a name for your credentials in the Credentials Name field in the 'Autopilot API' credentials in n8n. Paste the API key in the API Key field in the 'Autopilot API' credentials in n8n. Click on the Create button to create the credentials. The following video demonstrates the steps mentioned above.","title":"Using API Key"},{"location":"integrations/credentials/aws/","text":"AWS # You can use these credentials to authenticate the following nodes with AWS. AWS DynamoDB AWS Lambda AWS Rekognition AWS S3 AWS SES AWS SNS AWS SNS Trigger AWS SQS AWS Textract AWS Transcribe Prerequisites # Create an AWS account. Using Access Token # Open your AWS Management Console . Click on your name on the top right and select 'My Security Credentials' from the dropdown. Click on the Create New Access Key button, under the Access keys (access key ID and secret access key) section Click on the Show Access Key button. Copy the displayed Access Key ID. Enter the name for your credentials in the Credentials Name field in the 'AWS' credentials in n8n. Paste the Access Key ID in the Access Key ID field in the 'AWS' credentials in n8n. Copy the secret access key from your AWS console. Paste the secret access key in the Secret Access Key field in the 'AWS' credentials in n8n. Click the Create button to save your credentials in n8n. Note: If you're running your AWS instance in a different region, please update the Region field accordingly. The following video demonstrates the steps mentioned above.","title":"AWS"},{"location":"integrations/credentials/aws/#aws","text":"You can use these credentials to authenticate the following nodes with AWS. AWS DynamoDB AWS Lambda AWS Rekognition AWS S3 AWS SES AWS SNS AWS SNS Trigger AWS SQS AWS Textract AWS Transcribe","title":"AWS"},{"location":"integrations/credentials/aws/#prerequisites","text":"Create an AWS account.","title":"Prerequisites"},{"location":"integrations/credentials/aws/#using-access-token","text":"Open your AWS Management Console . Click on your name on the top right and select 'My Security Credentials' from the dropdown. Click on the Create New Access Key button, under the Access keys (access key ID and secret access key) section Click on the Show Access Key button. Copy the displayed Access Key ID. Enter the name for your credentials in the Credentials Name field in the 'AWS' credentials in n8n. Paste the Access Key ID in the Access Key ID field in the 'AWS' credentials in n8n. Copy the secret access key from your AWS console. Paste the secret access key in the Secret Access Key field in the 'AWS' credentials in n8n. Click the Create button to save your credentials in n8n. Note: If you're running your AWS instance in a different region, please update the Region field accordingly. The following video demonstrates the steps mentioned above.","title":"Using Access Token"},{"location":"integrations/credentials/bambooHr/","text":"BambooHR # You can use these credentials to authenticate the following nodes with BambooHR. - BambooHR Prerequisites # Create a BambooHR account. Using Access Token # Log into your BambooHR account and click on the profile image in the upper right corner. Click on API Keys . Click on Add New Key , enter any name for your new key and hit Generate Key . Copy the key provided by BambooHR into the API Key field of n8n's credentials modal. Enter your subdomain (the part between https:// and .bamboohr.com ) in the Subdomain field of n8n's credentials modal. Click on Save .","title":"BambooHR"},{"location":"integrations/credentials/bambooHr/#bamboohr","text":"You can use these credentials to authenticate the following nodes with BambooHR. - BambooHR","title":"BambooHR"},{"location":"integrations/credentials/bambooHr/#prerequisites","text":"Create a BambooHR account.","title":"Prerequisites"},{"location":"integrations/credentials/bambooHr/#using-access-token","text":"Log into your BambooHR account and click on the profile image in the upper right corner. Click on API Keys . Click on Add New Key , enter any name for your new key and hit Generate Key . Copy the key provided by BambooHR into the API Key field of n8n's credentials modal. Enter your subdomain (the part between https:// and .bamboohr.com ) in the Subdomain field of n8n's credentials modal. Click on Save .","title":"Using Access Token"},{"location":"integrations/credentials/bannerbear/","text":"Bannerbear # You can use these credentials to authenticate the following nodes with Bannerbear. - Bannerbear Prerequisites # Create a BannerBear account. Using Access Token # Open your BannerBear dashboard. Click on \"Create New Project\". Enter Project name and save. Click on Projects tab and enter the newly creatted project. Click on \"Settings / API Key\". Use API key in your Bannerbear node credentials in n8n.","title":"Bannerbear"},{"location":"integrations/credentials/bannerbear/#bannerbear","text":"You can use these credentials to authenticate the following nodes with Bannerbear. - Bannerbear","title":"Bannerbear"},{"location":"integrations/credentials/bannerbear/#prerequisites","text":"Create a BannerBear account.","title":"Prerequisites"},{"location":"integrations/credentials/bannerbear/#using-access-token","text":"Open your BannerBear dashboard. Click on \"Create New Project\". Enter Project name and save. Click on Projects tab and enter the newly creatted project. Click on \"Settings / API Key\". Use API key in your Bannerbear node credentials in n8n.","title":"Using Access Token"},{"location":"integrations/credentials/baserow/","text":"Baserow # You can use these credentials to authenticate the following node: Baserow Prerequisites # Create a Baserow account on any hosted Baserow instance or a self hosted instance. Using User Account # In n8n, open the Credentials menu item and click on New In the Add new credential dialogue, select Baserow API and click on the Continue button If using the online version of Baserow, leave the Host as https://api/baserow.io , otherwise set it to your self-hosted instance API URL. Enter your Baserow username in the Username field Enter your Baserow password in the Password field Click on the Save button You can now use this credential in your Baserow nodes.","title":"Baserow"},{"location":"integrations/credentials/baserow/#baserow","text":"You can use these credentials to authenticate the following node: Baserow","title":"Baserow"},{"location":"integrations/credentials/baserow/#prerequisites","text":"Create a Baserow account on any hosted Baserow instance or a self hosted instance.","title":"Prerequisites"},{"location":"integrations/credentials/baserow/#using-user-account","text":"In n8n, open the Credentials menu item and click on New In the Add new credential dialogue, select Baserow API and click on the Continue button If using the online version of Baserow, leave the Host as https://api/baserow.io , otherwise set it to your self-hosted instance API URL. Enter your Baserow username in the Username field Enter your Baserow password in the Password field Click on the Save button You can now use this credential in your Baserow nodes.","title":"Using User Account"},{"location":"integrations/credentials/beeminder/","text":"Beeminder # You can use these credentials to authenticate the following nodes with Beeminder. - Beeminder Prerequisites # Create a Beeminder account. Using API Key # Open your Beeminder dashboard . Click on your avatar at the top-right corner. Select 'ACCOUNT SETTINGS' from the dropdown list. Scroll up and click on the APPS & API tab. Copy the Auth Token displayed in the API section. Enter the name for your credentials in the Credentials Name field in the 'Beeminder API' credentials in n8n. Enter your username in the User field. Paste the Auth Token in the Auth Token field. Click on the Save button to save your credentials. The following video demonstrates the steps mentioned above.","title":"Beeminder"},{"location":"integrations/credentials/beeminder/#beeminder","text":"You can use these credentials to authenticate the following nodes with Beeminder. - Beeminder","title":"Beeminder"},{"location":"integrations/credentials/beeminder/#prerequisites","text":"Create a Beeminder account.","title":"Prerequisites"},{"location":"integrations/credentials/beeminder/#using-api-key","text":"Open your Beeminder dashboard . Click on your avatar at the top-right corner. Select 'ACCOUNT SETTINGS' from the dropdown list. Scroll up and click on the APPS & API tab. Copy the Auth Token displayed in the API section. Enter the name for your credentials in the Credentials Name field in the 'Beeminder API' credentials in n8n. Enter your username in the User field. Paste the Auth Token in the Auth Token field. Click on the Save button to save your credentials. The following video demonstrates the steps mentioned above.","title":"Using API Key"},{"location":"integrations/credentials/bitbucket/","text":"Bitbucket # You can use these credentials to authenticate the following nodes with Bitbucket. - Bitbucket Trigger Prerequisites # Create an Bitbucket account. Using Username and Password # Use the username and application password.","title":"Bitbucket"},{"location":"integrations/credentials/bitbucket/#bitbucket","text":"You can use these credentials to authenticate the following nodes with Bitbucket. - Bitbucket Trigger","title":"Bitbucket"},{"location":"integrations/credentials/bitbucket/#prerequisites","text":"Create an Bitbucket account.","title":"Prerequisites"},{"location":"integrations/credentials/bitbucket/#using-username-and-password","text":"Use the username and application password.","title":"Using Username and Password"},{"location":"integrations/credentials/bitly/","text":"Bitly # You can use these credentials to authenticate the following nodes with Bitly. - Bitly Prerequisites # Create a Bitly account. Using OAuth # \u26c5\ufe0f Note for n8n.cloud users You'll only need to enter the Credentials Name and click on the circle button in the OAuth section to connect your Bitly account to n8n. Open your Bitly dashboard. Click on your account button in the top right. Click on \"Profile Settings\". Click on \"Registered OAuth Applications\". Click on \"GET REGISTRATION CODE\". Use Client Secret and Client ID in your Bitly node credentials in n8n. Enter n8n provided redirect URL. Redirect URL Explanation here . Using Access Token # Open your Bitly dashboard. Click on your account button in the top right. Click on \"Profile Settings\". Click on \"Generate Access Token\". Enter password. Use the access token in your Bitly node credentials in n8n.","title":"Bitly"},{"location":"integrations/credentials/bitly/#bitly","text":"You can use these credentials to authenticate the following nodes with Bitly. - Bitly","title":"Bitly"},{"location":"integrations/credentials/bitly/#prerequisites","text":"Create a Bitly account.","title":"Prerequisites"},{"location":"integrations/credentials/bitly/#using-oauth","text":"\u26c5\ufe0f Note for n8n.cloud users You'll only need to enter the Credentials Name and click on the circle button in the OAuth section to connect your Bitly account to n8n. Open your Bitly dashboard. Click on your account button in the top right. Click on \"Profile Settings\". Click on \"Registered OAuth Applications\". Click on \"GET REGISTRATION CODE\". Use Client Secret and Client ID in your Bitly node credentials in n8n. Enter n8n provided redirect URL. Redirect URL Explanation here .","title":"Using OAuth"},{"location":"integrations/credentials/bitly/#using-access-token","text":"Open your Bitly dashboard. Click on your account button in the top right. Click on \"Profile Settings\". Click on \"Generate Access Token\". Enter password. Use the access token in your Bitly node credentials in n8n.","title":"Using Access Token"},{"location":"integrations/credentials/bitwarden/","text":"Bitwarden # You can use these credentials to authenticate the following nodes with Bitwarden. - Bitwarden Prerequisites # Create a Bitwarden organisation account. Using API Key # Open your Bitwarden vault . Click on your organisation under the ORGANISATIONS section. Click on the Settings tab. Click on the View API key button under the API key section. Enter your master password in the Master password field. Click on the View API key button. Copy the displayed client id. Enter the name for your credentials in the Credentials Name field in the 'Bitwarden API' credentials in n8n. Paste the client id in the Client ID field in the 'Bitwarden API' credentials in n8n. Copy the client secret from Bitwarden. Paste the client secret in the Client Secret field in the 'Bitwarden API' credentials in n8n. Click on the Create button to create your credentials. Note: If you're hosting Bitwarden on your server, select 'Self-hosted' from the Environment dropdown list. You also need to enter the domain of your hosted instance in the Self-hosted domain field. The following video demonstrates the steps mentioned above.","title":"Bitwarden"},{"location":"integrations/credentials/bitwarden/#bitwarden","text":"You can use these credentials to authenticate the following nodes with Bitwarden. - Bitwarden","title":"Bitwarden"},{"location":"integrations/credentials/bitwarden/#prerequisites","text":"Create a Bitwarden organisation account.","title":"Prerequisites"},{"location":"integrations/credentials/bitwarden/#using-api-key","text":"Open your Bitwarden vault . Click on your organisation under the ORGANISATIONS section. Click on the Settings tab. Click on the View API key button under the API key section. Enter your master password in the Master password field. Click on the View API key button. Copy the displayed client id. Enter the name for your credentials in the Credentials Name field in the 'Bitwarden API' credentials in n8n. Paste the client id in the Client ID field in the 'Bitwarden API' credentials in n8n. Copy the client secret from Bitwarden. Paste the client secret in the Client Secret field in the 'Bitwarden API' credentials in n8n. Click on the Create button to create your credentials. Note: If you're hosting Bitwarden on your server, select 'Self-hosted' from the Environment dropdown list. You also need to enter the domain of your hosted instance in the Self-hosted domain field. The following video demonstrates the steps mentioned above.","title":"Using API Key"},{"location":"integrations/credentials/box/","text":"Box # You can use these credentials to authenticate the following nodes with Box. - Box - Box Trigger Prerequisites # Create a Box account. Using OAuth # \u26c5\ufe0f Note for n8n.cloud users You'll only need to enter the Credentials Name and click on the circle button in the OAuth section to connect your Box account to n8n. Access the Box Developers Console . Click on the Create New App button. Select 'Custom App' and click Next . Select 'Standard OAuth 2.0 (User Authentication)'and click Next . Enter any other necessary information and click on the Create App button. Copy the 'OAuth Callback URL' provided in the Box OAuth2 API credentials in n8n and paste it in the 'Redirect URI' field in the Box app page. Click the Save Changes button and use the displayed 'Client ID' and the 'Client Secret' with your Box OAuth2 API credentials in n8n. Click on the circle button in the OAuth section to connect a Box account to n8n. Click the Save button to save your credentials in n8n.","title":"Box"},{"location":"integrations/credentials/box/#box","text":"You can use these credentials to authenticate the following nodes with Box. - Box - Box Trigger","title":"Box"},{"location":"integrations/credentials/box/#prerequisites","text":"Create a Box account.","title":"Prerequisites"},{"location":"integrations/credentials/box/#using-oauth","text":"\u26c5\ufe0f Note for n8n.cloud users You'll only need to enter the Credentials Name and click on the circle button in the OAuth section to connect your Box account to n8n. Access the Box Developers Console . Click on the Create New App button. Select 'Custom App' and click Next . Select 'Standard OAuth 2.0 (User Authentication)'and click Next . Enter any other necessary information and click on the Create App button. Copy the 'OAuth Callback URL' provided in the Box OAuth2 API credentials in n8n and paste it in the 'Redirect URI' field in the Box app page. Click the Save Changes button and use the displayed 'Client ID' and the 'Client Secret' with your Box OAuth2 API credentials in n8n. Click on the circle button in the OAuth section to connect a Box account to n8n. Click the Save button to save your credentials in n8n.","title":"Using OAuth"},{"location":"integrations/credentials/brandfetch/","text":"Brandfetch # You can use these credentials to authenticate the following nodes with Brandfetch. - Brandfetch Prerequisites # Create a Brandfetch account. Using API Key # Access your Brandfetch dashboard . Click on API on the left sidebar. Select a plan and click on the Get API Key button. Use the App Key with your Brandfetch API credentials in n8n.","title":"Brandfetch"},{"location":"integrations/credentials/brandfetch/#brandfetch","text":"You can use these credentials to authenticate the following nodes with Brandfetch. - Brandfetch","title":"Brandfetch"},{"location":"integrations/credentials/brandfetch/#prerequisites","text":"Create a Brandfetch account.","title":"Prerequisites"},{"location":"integrations/credentials/brandfetch/#using-api-key","text":"Access your Brandfetch dashboard . Click on API on the left sidebar. Select a plan and click on the Get API Key button. Use the App Key with your Brandfetch API credentials in n8n.","title":"Using API Key"},{"location":"integrations/credentials/bubble/","text":"Bubble # You can use these credentials to authenticate the following nodes with Bubble. - Bubble Prerequisites # Create a Bubble account. Note: You need a Personal or a higher plan to get access to the Bubble API. Using API Key # Open your Bubble dashboard page. Select an app under the My apps section to open the app. Click on Settings on the left-sidebar. Click on the API tab. Click on the Generate a new API token button. Enter a token name in the API Token Label field. Copy the displayed Private Key. Enter the name for your credentials in the Credentials Name field in the 'Bubble API' credentials in n8n. Paste the Private Key in the API Token field in the 'Bubble API' credentials in n8n. Enter the app name in the APP Name field. Select 'Development' from the Environment dropdown list. If you want to use the 'Live' environment, select 'Live' instead. Click on the Create button to create your credentials. Note: If you're self-hosting your Bubble app, select 'Self-hosted' from the Hosting dropdown list. You will also need to enter the domain of your hosted instance in the Domain field. The following video demonstrates the steps mentioned above.","title":"Bubble"},{"location":"integrations/credentials/bubble/#bubble","text":"You can use these credentials to authenticate the following nodes with Bubble. - Bubble","title":"Bubble"},{"location":"integrations/credentials/bubble/#prerequisites","text":"Create a Bubble account. Note: You need a Personal or a higher plan to get access to the Bubble API.","title":"Prerequisites"},{"location":"integrations/credentials/bubble/#using-api-key","text":"Open your Bubble dashboard page. Select an app under the My apps section to open the app. Click on Settings on the left-sidebar. Click on the API tab. Click on the Generate a new API token button. Enter a token name in the API Token Label field. Copy the displayed Private Key. Enter the name for your credentials in the Credentials Name field in the 'Bubble API' credentials in n8n. Paste the Private Key in the API Token field in the 'Bubble API' credentials in n8n. Enter the app name in the APP Name field. Select 'Development' from the Environment dropdown list. If you want to use the 'Live' environment, select 'Live' instead. Click on the Create button to create your credentials. Note: If you're self-hosting your Bubble app, select 'Self-hosted' from the Hosting dropdown list. You will also need to enter the domain of your hosted instance in the Domain field. The following video demonstrates the steps mentioned above.","title":"Using API Key"},{"location":"integrations/credentials/calendly/","text":"Calendly # You can use these credentials to authenticate the following nodes with Calendly. - Calendly Trigger Prerequisites # Create a Calendly premium account. Using Access Token # Open your Calendly dashboard. Click on \"Integrations\". Use API key in your Calendly node credentials in n8n.","title":"Calendly"},{"location":"integrations/credentials/calendly/#calendly","text":"You can use these credentials to authenticate the following nodes with Calendly. - Calendly Trigger","title":"Calendly"},{"location":"integrations/credentials/calendly/#prerequisites","text":"Create a Calendly premium account.","title":"Prerequisites"},{"location":"integrations/credentials/calendly/#using-access-token","text":"Open your Calendly dashboard. Click on \"Integrations\". Use API key in your Calendly node credentials in n8n.","title":"Using Access Token"},{"location":"integrations/credentials/chargebee/","text":"Chargebee # You can use these credentials to authenticate the following nodes with Chargebee. - Chargebee - Chargebee Trigger Prerequisites # Create a Chargebee account. Using Access Token # Open your Chargebee dashboard. Click on \"Settings\". Click on \"Configure Chargebee\". Scroll down and click on \"API Keys\". Use selected API key and Account name in your Chargebee node credentials in n8n.","title":"Chargebee"},{"location":"integrations/credentials/chargebee/#chargebee","text":"You can use these credentials to authenticate the following nodes with Chargebee. - Chargebee - Chargebee Trigger","title":"Chargebee"},{"location":"integrations/credentials/chargebee/#prerequisites","text":"Create a Chargebee account.","title":"Prerequisites"},{"location":"integrations/credentials/chargebee/#using-access-token","text":"Open your Chargebee dashboard. Click on \"Settings\". Click on \"Configure Chargebee\". Scroll down and click on \"API Keys\". Use selected API key and Account name in your Chargebee node credentials in n8n.","title":"Using Access Token"},{"location":"integrations/credentials/circleCi/","text":"CircleCI # You can use these credentials to authenticate the following nodes with CircleCI. - CircleCI Prerequisites # Create a CircleCI account. Using Access Token # Access your CircleCI User Settings. Visit the Personal API Tokens section. Click on the Create New Token button. Type in a name for your token and click on the Add API Token button. Copy the generated API Token and use it with your CircleCI API node credentials in n8n.","title":"CircleCI"},{"location":"integrations/credentials/circleCi/#circleci","text":"You can use these credentials to authenticate the following nodes with CircleCI. - CircleCI","title":"CircleCI"},{"location":"integrations/credentials/circleCi/#prerequisites","text":"Create a CircleCI account.","title":"Prerequisites"},{"location":"integrations/credentials/circleCi/#using-access-token","text":"Access your CircleCI User Settings. Visit the Personal API Tokens section. Click on the Create New Token button. Type in a name for your token and click on the Add API Token button. Copy the generated API Token and use it with your CircleCI API node credentials in n8n.","title":"Using Access Token"},{"location":"integrations/credentials/ciscoWebex/","text":"Webex by Cisco # You can use these credentials to authenticate the following nodes: Webex by Cisco Webex by Cisco Trigger Prerequisites # Create a Webex by Cisco account. Using OAuth # Navigate to Webex for Developers and sign in using your Webex by Cisco account. From the user menu select My Webex Apps , then Create a New App . From the Create a New App page select Create an Integration . Complete the following required fields for your new integration: Integration Name : Provide a name for your Webex app. Contact Email : Enter your email address. Icon : Provide an icon for your app or select one of the available defaults. Description : Enter a brief description of your app. Redirect URIs : Enter the OAuth Callback URL from the n8n credentials modal. Scopes : Enable the following scopes: spark:rooms_read spark:messages_write spark:messages_read spark:membership_read spark_membership_write meeting:recordings_write meeting:recordings_read meeting:preferences_read meeting:schedules_write meeting:schedules_read Click Add Integration to create your app. Copy the Client ID and Client Secret for this new app. From n8n: Enter a descriptive Credentials Name . Under Credential Data , enter the Client ID and Client Secret obtained above. Under OAuth , click the circle button to initiate authentication. A popup may appear prompting you to login to your Webex by Cisco account. After authentication is complete, click Create to save your new credentials.","title":"Webex by Cisco"},{"location":"integrations/credentials/ciscoWebex/#webex-by-cisco","text":"You can use these credentials to authenticate the following nodes: Webex by Cisco Webex by Cisco Trigger","title":"Webex by Cisco"},{"location":"integrations/credentials/ciscoWebex/#prerequisites","text":"Create a Webex by Cisco account.","title":"Prerequisites"},{"location":"integrations/credentials/ciscoWebex/#using-oauth","text":"Navigate to Webex for Developers and sign in using your Webex by Cisco account. From the user menu select My Webex Apps , then Create a New App . From the Create a New App page select Create an Integration . Complete the following required fields for your new integration: Integration Name : Provide a name for your Webex app. Contact Email : Enter your email address. Icon : Provide an icon for your app or select one of the available defaults. Description : Enter a brief description of your app. Redirect URIs : Enter the OAuth Callback URL from the n8n credentials modal. Scopes : Enable the following scopes: spark:rooms_read spark:messages_write spark:messages_read spark:membership_read spark_membership_write meeting:recordings_write meeting:recordings_read meeting:preferences_read meeting:schedules_write meeting:schedules_read Click Add Integration to create your app. Copy the Client ID and Client Secret for this new app. From n8n: Enter a descriptive Credentials Name . Under Credential Data , enter the Client ID and Client Secret obtained above. Under OAuth , click the circle button to initiate authentication. A popup may appear prompting you to login to your Webex by Cisco account. After authentication is complete, click Create to save your new credentials.","title":"Using OAuth"},{"location":"integrations/credentials/clearbit/","text":"Clearbit # You can use these credentials to authenticate the following nodes with Clearbit. - Clearbit Prerequisites # Create a Clearbit account. Using Access Token # Open your Clearbit dashboard. Click on \"API\". Click on \"Configure Chargebee\". Use selected API key in your Clearbit node credentials in n8n.","title":"Clearbit"},{"location":"integrations/credentials/clearbit/#clearbit","text":"You can use these credentials to authenticate the following nodes with Clearbit. - Clearbit","title":"Clearbit"},{"location":"integrations/credentials/clearbit/#prerequisites","text":"Create a Clearbit account.","title":"Prerequisites"},{"location":"integrations/credentials/clearbit/#using-access-token","text":"Open your Clearbit dashboard. Click on \"API\". Click on \"Configure Chargebee\". Use selected API key in your Clearbit node credentials in n8n.","title":"Using Access Token"},{"location":"integrations/credentials/clickUp/","text":"ClickUp # You can use these credentials to authenticate the following nodes with ClickUp. - ClickUp - ClickUp Trigger Prerequisites # Create a ClickUp account. Using OAuth # \u26c5\ufe0f Note for n8n.cloud users You'll only need to enter the Credentials Name and click on the circle button in the OAuth section to connect your ClickUp account to n8n. Open your ClickUp dashboard . Click on your profile icon in the bottom left. Click on Integrations under your workspace profile. Click on ClickUp API . Click on the + Create an App button under the ClikcUp API section. Enter the name of your app in the App Name field. Copy the 'OAuth Callback URL' provided in the 'ClickUp OAuth2 API' credentials in n8n. Paste it in the Redirect URL(s) field. Click on the Create App button. Copy the displayed client ID. Enter a name for your credentials in the Credentials Name field in the 'ClickUp OAuth2 API' credentials in n8n. Paste the client ID in the Client ID field in the 'ClickUp OAuth2 API' credentials in n8n. Copy the client secret from ClickUp. Paste the client secret in the Client Secret field in the 'ClickUp OAuth2 API' credentials in n8n. Click on the circle button in the OAuth section to connect a ClickUp account to n8n. Click the Save button to save your credentials in n8n. The following video demonstrates the steps mentioned above. The following video demonstrates the steps to authenticate the ClickUp node on n8n.cloud . Using Access Token # Open the ClickUp dashboard . Click on your profile icon in the bottom left. Click on Apps under your user profile. Click on the Generate button under the API Token section. Click on the Copy button to copy the token. Enter a name for your credentials in the Credentials Name field in the 'ClickUp API' credentials in n8n. Paste the token in the Access Token field in the 'ClickUp API' credentials in n8n. Click on the Create button to create the credentials.","title":"ClickUp"},{"location":"integrations/credentials/clickUp/#clickup","text":"You can use these credentials to authenticate the following nodes with ClickUp. - ClickUp - ClickUp Trigger","title":"ClickUp"},{"location":"integrations/credentials/clickUp/#prerequisites","text":"Create a ClickUp account.","title":"Prerequisites"},{"location":"integrations/credentials/clickUp/#using-oauth","text":"\u26c5\ufe0f Note for n8n.cloud users You'll only need to enter the Credentials Name and click on the circle button in the OAuth section to connect your ClickUp account to n8n. Open your ClickUp dashboard . Click on your profile icon in the bottom left. Click on Integrations under your workspace profile. Click on ClickUp API . Click on the + Create an App button under the ClikcUp API section. Enter the name of your app in the App Name field. Copy the 'OAuth Callback URL' provided in the 'ClickUp OAuth2 API' credentials in n8n. Paste it in the Redirect URL(s) field. Click on the Create App button. Copy the displayed client ID. Enter a name for your credentials in the Credentials Name field in the 'ClickUp OAuth2 API' credentials in n8n. Paste the client ID in the Client ID field in the 'ClickUp OAuth2 API' credentials in n8n. Copy the client secret from ClickUp. Paste the client secret in the Client Secret field in the 'ClickUp OAuth2 API' credentials in n8n. Click on the circle button in the OAuth section to connect a ClickUp account to n8n. Click the Save button to save your credentials in n8n. The following video demonstrates the steps mentioned above. The following video demonstrates the steps to authenticate the ClickUp node on n8n.cloud .","title":"Using OAuth"},{"location":"integrations/credentials/clickUp/#using-access-token","text":"Open the ClickUp dashboard . Click on your profile icon in the bottom left. Click on Apps under your user profile. Click on the Generate button under the API Token section. Click on the Copy button to copy the token. Enter a name for your credentials in the Credentials Name field in the 'ClickUp API' credentials in n8n. Paste the token in the Access Token field in the 'ClickUp API' credentials in n8n. Click on the Create button to create the credentials.","title":"Using Access Token"},{"location":"integrations/credentials/clockify/","text":"Clockify # You can use these credentials to authenticate the following nodes with Clockify. - Clockify - Clockify Trigger Prerequisites # Create a Clockify account. Using Access Token # Open your Clockify dashboard. Click on your profile. Click on \"Profile Settings\". Scroll down and click on \"Generate\" under API. Use selected API key in your Clockify node credentials in n8n.","title":"Clockify"},{"location":"integrations/credentials/clockify/#clockify","text":"You can use these credentials to authenticate the following nodes with Clockify. - Clockify - Clockify Trigger","title":"Clockify"},{"location":"integrations/credentials/clockify/#prerequisites","text":"Create a Clockify account.","title":"Prerequisites"},{"location":"integrations/credentials/clockify/#using-access-token","text":"Open your Clockify dashboard. Click on your profile. Click on \"Profile Settings\". Scroll down and click on \"Generate\" under API. Use selected API key in your Clockify node credentials in n8n.","title":"Using Access Token"},{"location":"integrations/credentials/cockpit/","text":"Cockpit # You can use these credentials to authenticate the following nodes with Cockpit. - Cockpit Prerequisites # Create a Cockpit account. Using Access Token # Open your Cockpit dashboard. Click on your profile in the top right. Click on \"Account\". Scroll down and copy API key. Use selected API key and your Cockpit URL in your Cockpit node credentials in n8n.","title":"Cockpit"},{"location":"integrations/credentials/cockpit/#cockpit","text":"You can use these credentials to authenticate the following nodes with Cockpit. - Cockpit","title":"Cockpit"},{"location":"integrations/credentials/cockpit/#prerequisites","text":"Create a Cockpit account.","title":"Prerequisites"},{"location":"integrations/credentials/cockpit/#using-access-token","text":"Open your Cockpit dashboard. Click on your profile in the top right. Click on \"Account\". Scroll down and copy API key. Use selected API key and your Cockpit URL in your Cockpit node credentials in n8n.","title":"Using Access Token"},{"location":"integrations/credentials/coda/","text":"Coda # You can use these credentials to authenticate the following nodes with Coda. - Coda Prerequisites # Create a Coda account. Using Access Token # Open your Coda dashboard. Click on your profile in the top right. Click on the 3 dots and then Account settings.. Scroll down and click on \"Generate\" under API. Use selected API access token in your Coda node credentials in n8n.","title":"Coda"},{"location":"integrations/credentials/coda/#coda","text":"You can use these credentials to authenticate the following nodes with Coda. - Coda","title":"Coda"},{"location":"integrations/credentials/coda/#prerequisites","text":"Create a Coda account.","title":"Prerequisites"},{"location":"integrations/credentials/coda/#using-access-token","text":"Open your Coda dashboard. Click on your profile in the top right. Click on the 3 dots and then Account settings.. Scroll down and click on \"Generate\" under API. Use selected API access token in your Coda node credentials in n8n.","title":"Using Access Token"},{"location":"integrations/credentials/contentful/","text":"Contentful # You can use these credentials to authenticate the following nodes with Contentful. - Contentful Prerequisites # Create a Contentful account. Using Access Token # Open your Contentful dashboard. Open the 'Settings' dropdown list on the top bar. Click on API keys . Click on the Add API key button in the top right. Enter a name for the API key in the Name field and click Save . Use the displayed Space ID , Content Delivery API - access token , and Content Preview API - access token with your Contentful node API credentials in n8n. Click on the Save button to save your credentials.","title":"Contentful"},{"location":"integrations/credentials/contentful/#contentful","text":"You can use these credentials to authenticate the following nodes with Contentful. - Contentful","title":"Contentful"},{"location":"integrations/credentials/contentful/#prerequisites","text":"Create a Contentful account.","title":"Prerequisites"},{"location":"integrations/credentials/contentful/#using-access-token","text":"Open your Contentful dashboard. Open the 'Settings' dropdown list on the top bar. Click on API keys . Click on the Add API key button in the top right. Enter a name for the API key in the Name field and click Save . Use the displayed Space ID , Content Delivery API - access token , and Content Preview API - access token with your Contentful node API credentials in n8n. Click on the Save button to save your credentials.","title":"Using Access Token"},{"location":"integrations/credentials/convertKit/","text":"ConvertKit # You can use these credentials to authenticate the following nodes with ConvertKit. - ConvertKit - ConvertKit Trigger Prerequisites # Create a ConvertKit account. Using Access Token # Access your ConvertKit dashboard. Click on the user icon in the top right and select Account settings . Click on Show in the API Secret section to reveal the access token. Use the access token in the API Secret section with your ConvertKit API credentials in n8n. Click on the Save button to save your credentials.","title":"ConvertKit"},{"location":"integrations/credentials/convertKit/#convertkit","text":"You can use these credentials to authenticate the following nodes with ConvertKit. - ConvertKit - ConvertKit Trigger","title":"ConvertKit"},{"location":"integrations/credentials/convertKit/#prerequisites","text":"Create a ConvertKit account.","title":"Prerequisites"},{"location":"integrations/credentials/convertKit/#using-access-token","text":"Access your ConvertKit dashboard. Click on the user icon in the top right and select Account settings . Click on Show in the API Secret section to reveal the access token. Use the access token in the API Secret section with your ConvertKit API credentials in n8n. Click on the Save button to save your credentials.","title":"Using Access Token"},{"location":"integrations/credentials/copper/","text":"Copper # You can use these credentials to authenticate the following nodes with Copper. - Copper - Copper Trigger Prerequisites # Create a Copper account. Using Access Token # Open your Copper dashboard. Click on the Settings tab on the left-sidebar. Click on Integrations and select API Keys . Click on the GENERATE API KEY button. Copy the displayed API key. Enter the name for your credentials in the Credentials Name field in the 'Copper API' credentials in n8n. Paste the API key in the API Key field in the 'Copper API' credentials in n8n. Enter the email address in the Email field in the 'Copper API' credentials in n8n. Click the Create button to create your credentials in n8n. The following video demonstrates the steps mentioned above.","title":"Copper"},{"location":"integrations/credentials/copper/#copper","text":"You can use these credentials to authenticate the following nodes with Copper. - Copper - Copper Trigger","title":"Copper"},{"location":"integrations/credentials/copper/#prerequisites","text":"Create a Copper account.","title":"Prerequisites"},{"location":"integrations/credentials/copper/#using-access-token","text":"Open your Copper dashboard. Click on the Settings tab on the left-sidebar. Click on Integrations and select API Keys . Click on the GENERATE API KEY button. Copy the displayed API key. Enter the name for your credentials in the Credentials Name field in the 'Copper API' credentials in n8n. Paste the API key in the API Key field in the 'Copper API' credentials in n8n. Enter the email address in the Email field in the 'Copper API' credentials in n8n. Click the Create button to create your credentials in n8n. The following video demonstrates the steps mentioned above.","title":"Using Access Token"},{"location":"integrations/credentials/cortex/","text":"You can use these credentials to authenticate the following nodes with Cortex. - Cortex Prerequisites # Install Cortex on your server. Using API Key # Access your Cortex dashboard. Click on your user icon on the top right corner and select 'Settings'. Scroll down to the API Key section and click on the Reveal button. Use the API Key and your Cortex instance URL with your Cortex node credentials in n8n.","title":"Cortex"},{"location":"integrations/credentials/cortex/#prerequisites","text":"Install Cortex on your server.","title":"Prerequisites"},{"location":"integrations/credentials/cortex/#using-api-key","text":"Access your Cortex dashboard. Click on your user icon on the top right corner and select 'Settings'. Scroll down to the API Key section and click on the Reveal button. Use the API Key and your Cortex instance URL with your Cortex node credentials in n8n.","title":"Using API Key"},{"location":"integrations/credentials/crateDb/","text":"CrateDB # You can use these credentials to authenticate the following nodes with CrateDB. - CrateDB Prerequisites # An available instance of CrateDB. Using Database Connection # Retrieve your CrateDB credentials and connection parameters. Use the credentials and connection parameters with your CrateDB node credentials in n8n.","title":"CrateDB"},{"location":"integrations/credentials/crateDb/#cratedb","text":"You can use these credentials to authenticate the following nodes with CrateDB. - CrateDB","title":"CrateDB"},{"location":"integrations/credentials/crateDb/#prerequisites","text":"An available instance of CrateDB.","title":"Prerequisites"},{"location":"integrations/credentials/crateDb/#using-database-connection","text":"Retrieve your CrateDB credentials and connection parameters. Use the credentials and connection parameters with your CrateDB node credentials in n8n.","title":"Using Database Connection"},{"location":"integrations/credentials/customerIo/","text":"Customer.io # You can use these credentials to authenticate the following nodes with Customer.io. - Customer.io - Customer.io Trigger Prerequisites # Create a Customer.io account. Using Access Token # Open your Customer.io dashboard . Click on the user icon in the top right and select Account settings . Click on API Credentials . Click on the Create Tracking API Key button. Enter a name for the Tracking API Key in the Name . Select a workspace from the Workspace dropdown list. Click on the Create Tracking API Key button. Copy the displayed 'Site ID'. Enter the name for your credentials in the Credentials Name field in the 'Customer.io API' credentials in n8n. Paste the Site ID in the Tracking Site ID field in the 'Customer.io API' credentials in n8n. Copy the 'API Key' from the Manage API Credentials page. Paste the API key in the Tracking API Key field in the 'Customer.io API' credentials in n8n. Click on the App API Keys tab on the Manage API Credentials page. Click on the Create App API Key button. Enter a name for the App API Key in the Name field. Select a workspace from the Workspace dropdown list. Click on the Create App API Key button. Copy the displayed API key. Paste the API key in the App API Key field in the 'Customer.io API' credentials in n8n. Click on the Create button to create your credentials. The following video demonstrates the steps mentioned above. FAQs # Why do I need the Tracking API Key and the App API Key? # Customer.io uses different API Keys for different endpoints. Based on the operation you want to perform, n8n uses the correct API key to connect to your Customer.io account.","title":"Customer.io"},{"location":"integrations/credentials/customerIo/#customerio","text":"You can use these credentials to authenticate the following nodes with Customer.io. - Customer.io - Customer.io Trigger","title":"Customer.io"},{"location":"integrations/credentials/customerIo/#prerequisites","text":"Create a Customer.io account.","title":"Prerequisites"},{"location":"integrations/credentials/customerIo/#using-access-token","text":"Open your Customer.io dashboard . Click on the user icon in the top right and select Account settings . Click on API Credentials . Click on the Create Tracking API Key button. Enter a name for the Tracking API Key in the Name . Select a workspace from the Workspace dropdown list. Click on the Create Tracking API Key button. Copy the displayed 'Site ID'. Enter the name for your credentials in the Credentials Name field in the 'Customer.io API' credentials in n8n. Paste the Site ID in the Tracking Site ID field in the 'Customer.io API' credentials in n8n. Copy the 'API Key' from the Manage API Credentials page. Paste the API key in the Tracking API Key field in the 'Customer.io API' credentials in n8n. Click on the App API Keys tab on the Manage API Credentials page. Click on the Create App API Key button. Enter a name for the App API Key in the Name field. Select a workspace from the Workspace dropdown list. Click on the Create App API Key button. Copy the displayed API key. Paste the API key in the App API Key field in the 'Customer.io API' credentials in n8n. Click on the Create button to create your credentials. The following video demonstrates the steps mentioned above.","title":"Using Access Token"},{"location":"integrations/credentials/customerIo/#faqs","text":"","title":"FAQs"},{"location":"integrations/credentials/customerIo/#why-do-i-need-the-tracking-api-key-and-the-app-api-key","text":"Customer.io uses different API Keys for different endpoints. Based on the operation you want to perform, n8n uses the correct API key to connect to your Customer.io account.","title":"Why do I need the Tracking API Key and the App API Key?"},{"location":"integrations/credentials/deepL/","text":"DeepL # You can use these credentials to authenticate the following nodes with DeepL. - DeepL Prerequisites # Create a DeepL developer account. Using API Key # Open your DeepL account page. Scroll down to the Authentication Key for DeepL API section. Copy the displayed 'API Key'. Enter the name for your credentials in the Credentials Name field in the 'DeepL API' credentials in n8n. Paste the API key in the API Key field in the 'DeepL API' credentials in n8n. Click on the Create button to create your credentials in n8n. The following video demonstrates the steps mentioned above.","title":"DeepL"},{"location":"integrations/credentials/deepL/#deepl","text":"You can use these credentials to authenticate the following nodes with DeepL. - DeepL","title":"DeepL"},{"location":"integrations/credentials/deepL/#prerequisites","text":"Create a DeepL developer account.","title":"Prerequisites"},{"location":"integrations/credentials/deepL/#using-api-key","text":"Open your DeepL account page. Scroll down to the Authentication Key for DeepL API section. Copy the displayed 'API Key'. Enter the name for your credentials in the Credentials Name field in the 'DeepL API' credentials in n8n. Paste the API key in the API Key field in the 'DeepL API' credentials in n8n. Click on the Create button to create your credentials in n8n. The following video demonstrates the steps mentioned above.","title":"Using API Key"},{"location":"integrations/credentials/demio/","text":"Demio # You can use these credentials to authenticate the following nodes with Demio. - Demio Prerequisites # Create a Demio account. Using API Key # Open your Demio dashboard . Click on your user icon in the top right. Click on Settings . Click on the API tab. Copy the displayed 'API Key'. Enter the name for your credentials in the Credentials Name field in the 'Demio API' credentials in n8n. Paste the API key in the API Key field in the 'Demio API' credentials in n8n. Copy the 'API Secret' from Demio. Paste the API secret in the API Secret field in the 'Demio API' credentials in n8n. Click the Create button to save your credentials in n8n. The following video demonstrates the steps mentioned above.","title":"Demio"},{"location":"integrations/credentials/demio/#demio","text":"You can use these credentials to authenticate the following nodes with Demio. - Demio","title":"Demio"},{"location":"integrations/credentials/demio/#prerequisites","text":"Create a Demio account.","title":"Prerequisites"},{"location":"integrations/credentials/demio/#using-api-key","text":"Open your Demio dashboard . Click on your user icon in the top right. Click on Settings . Click on the API tab. Copy the displayed 'API Key'. Enter the name for your credentials in the Credentials Name field in the 'Demio API' credentials in n8n. Paste the API key in the API Key field in the 'Demio API' credentials in n8n. Copy the 'API Secret' from Demio. Paste the API secret in the API Secret field in the 'Demio API' credentials in n8n. Click the Create button to save your credentials in n8n. The following video demonstrates the steps mentioned above.","title":"Using API Key"},{"location":"integrations/credentials/dhl/","text":"DHL # You can use these credentials to authenticate the following nodes with DHL. - DHL Prerequisites # Create a DHL Developer account. Using Access Token # Navigate to the apps page of the DHL Developer portal. Click the + Create App button. Enter a descriptive name in the App name field. In the Select APIs section, search for Shipment Tracking - Unified in the API's name field. Below Add API to app , click the Plus (+) button next to the entry for Shipment Tracking - Unified . Click on the Add app button. Back on the apps page, click on your newly created app. Click the Show key link to reveal your access token. Use the token with your DHL credentials in n8n.","title":"DHL"},{"location":"integrations/credentials/dhl/#dhl","text":"You can use these credentials to authenticate the following nodes with DHL. - DHL","title":"DHL"},{"location":"integrations/credentials/dhl/#prerequisites","text":"Create a DHL Developer account.","title":"Prerequisites"},{"location":"integrations/credentials/dhl/#using-access-token","text":"Navigate to the apps page of the DHL Developer portal. Click the + Create App button. Enter a descriptive name in the App name field. In the Select APIs section, search for Shipment Tracking - Unified in the API's name field. Below Add API to app , click the Plus (+) button next to the entry for Shipment Tracking - Unified . Click on the Add app button. Back on the apps page, click on your newly created app. Click the Show key link to reveal your access token. Use the token with your DHL credentials in n8n.","title":"Using Access Token"},{"location":"integrations/credentials/discord/","text":"Discord # You can follow these instructions to create a webhook in Discord to use with the following nodes. - Discord Prerequisites # Create a Discord account. Creating a webhook in Discord # To create a webhook in Discord that sends content to your channel, go to the settings of your channel. Select 'Integrations' from the sidebar. Click on the Create Webhook button. Name your bot, and click on the Copy Webhook URL button to copy the webhook URL. Back in n8n, use the copied webhook URL in your Discord node.","title":"Discord"},{"location":"integrations/credentials/discord/#discord","text":"You can follow these instructions to create a webhook in Discord to use with the following nodes. - Discord","title":"Discord"},{"location":"integrations/credentials/discord/#prerequisites","text":"Create a Discord account.","title":"Prerequisites"},{"location":"integrations/credentials/discord/#creating-a-webhook-in-discord","text":"To create a webhook in Discord that sends content to your channel, go to the settings of your channel. Select 'Integrations' from the sidebar. Click on the Create Webhook button. Name your bot, and click on the Copy Webhook URL button to copy the webhook URL. Back in n8n, use the copied webhook URL in your Discord node.","title":"Creating a webhook in Discord"},{"location":"integrations/credentials/discourse/","text":"Discourse # You can use these credentials to authenticate the following nodes with Discourse. - Discourse Prerequisites # Host an instance of Discourse Create an account on your hosted instance and make sure that you are an admin Using API Key # Open your Discourse dashboard. Click on the API tab. Click on the + New API Key button. Enter a description in the Description field. Based on your use-case, do one of the following: If you want to create the API key for a single user, select 'Single User' from the User Level dropdown list. Enter the username in the User field and select the user from the dropdown list. If you want to create the API key for all your users, select 'All Users' from the User Level dropdown list. If you want to select all the scopes, check the Global Key (allowed all actions) checkbox. Otherwise, select scopes individually under the Scopes section. Click on the Save button. Copy the displayed API key. Enter the name for your credentials in the Credentials Name field in the 'Discourse API' credentials in n8n. Enter the URL of your Discourse instance in the URL field in the 'Discourse API' credentials in n8n. For example, https://community.n8n.io . Paste the API key in the API Key field in the 'Discourse API' credentials in n8n. Enter your Discourse username in the Username field in the 'Discourse API' credentials in n8n. Click the Create button to create your credentials in n8n. The following video demonstrates the steps mentioned above.","title":"Discourse"},{"location":"integrations/credentials/discourse/#discourse","text":"You can use these credentials to authenticate the following nodes with Discourse. - Discourse","title":"Discourse"},{"location":"integrations/credentials/discourse/#prerequisites","text":"Host an instance of Discourse Create an account on your hosted instance and make sure that you are an admin","title":"Prerequisites"},{"location":"integrations/credentials/discourse/#using-api-key","text":"Open your Discourse dashboard. Click on the API tab. Click on the + New API Key button. Enter a description in the Description field. Based on your use-case, do one of the following: If you want to create the API key for a single user, select 'Single User' from the User Level dropdown list. Enter the username in the User field and select the user from the dropdown list. If you want to create the API key for all your users, select 'All Users' from the User Level dropdown list. If you want to select all the scopes, check the Global Key (allowed all actions) checkbox. Otherwise, select scopes individually under the Scopes section. Click on the Save button. Copy the displayed API key. Enter the name for your credentials in the Credentials Name field in the 'Discourse API' credentials in n8n. Enter the URL of your Discourse instance in the URL field in the 'Discourse API' credentials in n8n. For example, https://community.n8n.io . Paste the API key in the API Key field in the 'Discourse API' credentials in n8n. Enter your Discourse username in the Username field in the 'Discourse API' credentials in n8n. Click the Create button to create your credentials in n8n. The following video demonstrates the steps mentioned above.","title":"Using API Key"},{"location":"integrations/credentials/disqus/","text":"Disqus # You can use these credentials to authenticate the following nodes with Disqus. - Disqus Prerequisites # Create a Disqus account. Using Access Token # Access the Disqus Application Registration Page . Fill out the application information and click on Register my application . Click on Details at the top and use the provided 'API Key' with your Disqus node credentials in n8n.","title":"Disqus"},{"location":"integrations/credentials/disqus/#disqus","text":"You can use these credentials to authenticate the following nodes with Disqus. - Disqus","title":"Disqus"},{"location":"integrations/credentials/disqus/#prerequisites","text":"Create a Disqus account.","title":"Prerequisites"},{"location":"integrations/credentials/disqus/#using-access-token","text":"Access the Disqus Application Registration Page . Fill out the application information and click on Register my application . Click on Details at the top and use the provided 'API Key' with your Disqus node credentials in n8n.","title":"Using Access Token"},{"location":"integrations/credentials/drift/","text":"Drift # You can use these credentials to authenticate the following nodes with Drift. - Drift Prerequisites # Create a Drift account. Using OAuth # \u26c5\ufe0f Note for n8n.cloud users You'll only need to enter the Credentials Name and click on the circle button in the OAuth section to connect your Drift account to n8n. Access your Drift apps page. Click on the Build Your App button. You can also select an existing app if you already have one. Enter a name in the App name field. Click on 'Oauth & Scopes' in the sidebar. Copy your OAuth Callback URL from the 'Create New Credentials' screen in n8n, paste in the Add Redirect URL field, and click on the Add button. Click on 'App Credentials' in the sidebar. Use the Client ID and Secret ID with your Drift OAuth2 API node credentials in n8n. Click on the circle button in the OAuth section to connect your Drift account to n8n. Click the Save button to save your credentials. Using Access Token # Access your Drift apps . Select your App (or create a new one). Click on \"Manage\". Click on \"Installing to Drift\". Use token with your Drift Node credentials in n8n.","title":"Drift"},{"location":"integrations/credentials/drift/#drift","text":"You can use these credentials to authenticate the following nodes with Drift. - Drift","title":"Drift"},{"location":"integrations/credentials/drift/#prerequisites","text":"Create a Drift account.","title":"Prerequisites"},{"location":"integrations/credentials/drift/#using-oauth","text":"\u26c5\ufe0f Note for n8n.cloud users You'll only need to enter the Credentials Name and click on the circle button in the OAuth section to connect your Drift account to n8n. Access your Drift apps page. Click on the Build Your App button. You can also select an existing app if you already have one. Enter a name in the App name field. Click on 'Oauth & Scopes' in the sidebar. Copy your OAuth Callback URL from the 'Create New Credentials' screen in n8n, paste in the Add Redirect URL field, and click on the Add button. Click on 'App Credentials' in the sidebar. Use the Client ID and Secret ID with your Drift OAuth2 API node credentials in n8n. Click on the circle button in the OAuth section to connect your Drift account to n8n. Click the Save button to save your credentials.","title":"Using OAuth"},{"location":"integrations/credentials/drift/#using-access-token","text":"Access your Drift apps . Select your App (or create a new one). Click on \"Manage\". Click on \"Installing to Drift\". Use token with your Drift Node credentials in n8n.","title":"Using Access Token"},{"location":"integrations/credentials/dropbox/","text":"Dropbox # You can use these credentials to authenticate the following nodes with Dropbox. - Dropbox Prerequisites # Create a Dropbox account. Using OAuth # \u26c5\ufe0f Note for n8n.cloud users You'll only need to enter the Credentials Name and click on the circle button in the OAuth section to connect your Dropbox account to n8n. Access the Dropbox app creation page. Select 'Scoped access' under the Choose an API section. Select an access type under the Choose the type of access you need . You can read more about the access type here . In the Name your app section, enter a name for your app. Click on the Create app button. Click on the Permissions tab and give all the permissions under the Files and folders section. Click on the Submit button. Click on the Settings tab. Copy your OAuth Callback URL from the 'Create New Credentials' screen in n8n and paste in the Redirect URIs field under the OAuth 2 section. Click on the Add button. Enter the provided App key and the App secret in the Client ID and Client Secret field, respectively, in your Dropbox OAuth2 API credentials in n8n. Click on the circle button in the OAuth section to connect your Dropbox account to n8n. Click on the Save button to save your credentials. Using Access Token # Access the Dropbox app creation page. Select 'Scoped access' under the Choose an API section. Select an access type under the Choose the type of access you need . You can read more about the access type here . In the Name your app section, enter a name for your app. Click on the Create app button. Click on the Permissions tab and give all the permissions under the Files and folders section. Click on the Submit button. Click on the Settings tab. Scroll down to the OAuth 2 section and select 'No expiration' from the Access token expiration dropdown list. Click on the Generate button. Use the displayed Generated access token with your Dropbox credentials in n8n.","title":"Dropbox"},{"location":"integrations/credentials/dropbox/#dropbox","text":"You can use these credentials to authenticate the following nodes with Dropbox. - Dropbox","title":"Dropbox"},{"location":"integrations/credentials/dropbox/#prerequisites","text":"Create a Dropbox account.","title":"Prerequisites"},{"location":"integrations/credentials/dropbox/#using-oauth","text":"\u26c5\ufe0f Note for n8n.cloud users You'll only need to enter the Credentials Name and click on the circle button in the OAuth section to connect your Dropbox account to n8n. Access the Dropbox app creation page. Select 'Scoped access' under the Choose an API section. Select an access type under the Choose the type of access you need . You can read more about the access type here . In the Name your app section, enter a name for your app. Click on the Create app button. Click on the Permissions tab and give all the permissions under the Files and folders section. Click on the Submit button. Click on the Settings tab. Copy your OAuth Callback URL from the 'Create New Credentials' screen in n8n and paste in the Redirect URIs field under the OAuth 2 section. Click on the Add button. Enter the provided App key and the App secret in the Client ID and Client Secret field, respectively, in your Dropbox OAuth2 API credentials in n8n. Click on the circle button in the OAuth section to connect your Dropbox account to n8n. Click on the Save button to save your credentials.","title":"Using OAuth"},{"location":"integrations/credentials/dropbox/#using-access-token","text":"Access the Dropbox app creation page. Select 'Scoped access' under the Choose an API section. Select an access type under the Choose the type of access you need . You can read more about the access type here . In the Name your app section, enter a name for your app. Click on the Create app button. Click on the Permissions tab and give all the permissions under the Files and folders section. Click on the Submit button. Click on the Settings tab. Scroll down to the OAuth 2 section and select 'No expiration' from the Access token expiration dropdown list. Click on the Generate button. Use the displayed Generated access token with your Dropbox credentials in n8n.","title":"Using Access Token"},{"location":"integrations/credentials/dropcontact/","text":"Dropcontact # You can use these credentials to authenticate the following nodes with Dropcontact. - Dropcontact Prerequisites # Create an account on a Dropcontact app. Using API Key # Open your Dropcontact dashboard . Select API from the left sidebar. Click on the Copy button to copy the API key. Paste the API key in the API Key field in the 'Credential for Dropcontact API' fields in n8n. Click on the Save button to create your credentials.","title":"Dropcontact"},{"location":"integrations/credentials/dropcontact/#dropcontact","text":"You can use these credentials to authenticate the following nodes with Dropcontact. - Dropcontact","title":"Dropcontact"},{"location":"integrations/credentials/dropcontact/#prerequisites","text":"Create an account on a Dropcontact app.","title":"Prerequisites"},{"location":"integrations/credentials/dropcontact/#using-api-key","text":"Open your Dropcontact dashboard . Select API from the left sidebar. Click on the Copy button to copy the API key. Paste the API key in the API Key field in the 'Credential for Dropcontact API' fields in n8n. Click on the Save button to create your credentials.","title":"Using API Key"},{"location":"integrations/credentials/egoi/","text":"E-goi # You can use these credentials to authenticate the following nodes with E-goi. - E-goi Prerequisites # Create an E-goi account. Using API Key # Access your E-goi dashboard. Click on your name on the top right corner and select 'Integrations'. Copy the API key that is displayed and use it with your E-goi node credentials in n8n.","title":"E-goi"},{"location":"integrations/credentials/egoi/#e-goi","text":"You can use these credentials to authenticate the following nodes with E-goi. - E-goi","title":"E-goi"},{"location":"integrations/credentials/egoi/#prerequisites","text":"Create an E-goi account.","title":"Prerequisites"},{"location":"integrations/credentials/egoi/#using-api-key","text":"Access your E-goi dashboard. Click on your name on the top right corner and select 'Integrations'. Copy the API key that is displayed and use it with your E-goi node credentials in n8n.","title":"Using API Key"},{"location":"integrations/credentials/elasticSecurity/","text":"Elastic Security # You can use these credentials to authenticate the following nodes: Elastic Security Prerequisites # Create an Elastic Security account. Deploy an application. Using Basic Auth # From Elastic Security : Navigate to your Dashboard > Deployments section and open the dashboard for the desired deployment. From the Applications section, copy the endpoint of your application. From n8n : In the Credential Data section, enter your: Username Password Base URL: The application endpoint obtained above. Click Save to save your credentials.","title":"Elastic Security"},{"location":"integrations/credentials/elasticSecurity/#elastic-security","text":"You can use these credentials to authenticate the following nodes: Elastic Security","title":"Elastic Security"},{"location":"integrations/credentials/elasticSecurity/#prerequisites","text":"Create an Elastic Security account. Deploy an application.","title":"Prerequisites"},{"location":"integrations/credentials/elasticSecurity/#using-basic-auth","text":"From Elastic Security : Navigate to your Dashboard > Deployments section and open the dashboard for the desired deployment. From the Applications section, copy the endpoint of your application. From n8n : In the Credential Data section, enter your: Username Password Base URL: The application endpoint obtained above. Click Save to save your credentials.","title":"Using Basic Auth"},{"location":"integrations/credentials/elasticsearch/","text":"Elasticsearch # You can use these credentials to authenticate the following nodes: Elasticsearch Prerequisites # Create an Elasticsearch account. Deploy an application. Using Basic Auth # From Elasticsearch : Navigate to your Dashboard > Deployments section and open the dashboard for the desired deployment. From the Applications section, copy the endpoint of the Elasticsearch application. From n8n : Enter a descriptive Credentials Name . In the Credential Data section, enter your: Username Password Base URL: The Elasticsearch application endpoint obtained above. Click Create to save your credentials.","title":"Elasticsearch"},{"location":"integrations/credentials/elasticsearch/#elasticsearch","text":"You can use these credentials to authenticate the following nodes: Elasticsearch","title":"Elasticsearch"},{"location":"integrations/credentials/elasticsearch/#prerequisites","text":"Create an Elasticsearch account. Deploy an application.","title":"Prerequisites"},{"location":"integrations/credentials/elasticsearch/#using-basic-auth","text":"From Elasticsearch : Navigate to your Dashboard > Deployments section and open the dashboard for the desired deployment. From the Applications section, copy the endpoint of the Elasticsearch application. From n8n : Enter a descriptive Credentials Name . In the Credential Data section, enter your: Username Password Base URL: The Elasticsearch application endpoint obtained above. Click Create to save your credentials.","title":"Using Basic Auth"},{"location":"integrations/credentials/emelia/","text":"Emelia # You can use these credentials to authenticate the following nodes with Emelia. - Emelia - Emelia Trigger Prerequisites # Create a Emelia account. Using API Key # Open the Emelia dashboard page. Click on the avatar on the top-right and select 'API Keys'. Click on the Generate new API key button. Click on the menu icon and select 'Copy API Key' from the dropdown list. Enter a name for your credentials in the Credentials Name field in the 'Emelia API' credentials in n8n. Paste the API key in the API Key field in the 'Emelia API' credentials in n8n. Click the Create button to create your credentials in n8n. The following video demonstrates the steps mentioned above.","title":"Emelia"},{"location":"integrations/credentials/emelia/#emelia","text":"You can use these credentials to authenticate the following nodes with Emelia. - Emelia - Emelia Trigger","title":"Emelia"},{"location":"integrations/credentials/emelia/#prerequisites","text":"Create a Emelia account.","title":"Prerequisites"},{"location":"integrations/credentials/emelia/#using-api-key","text":"Open the Emelia dashboard page. Click on the avatar on the top-right and select 'API Keys'. Click on the Generate new API key button. Click on the menu icon and select 'Copy API Key' from the dropdown list. Enter a name for your credentials in the Credentials Name field in the 'Emelia API' credentials in n8n. Paste the API key in the API Key field in the 'Emelia API' credentials in n8n. Click the Create button to create your credentials in n8n. The following video demonstrates the steps mentioned above.","title":"Using API Key"},{"location":"integrations/credentials/erpnext/","text":"ERPNext # You can use these credentials to authenticate the following nodes with Emelia. - ERPNext Prerequisites # Create a ERPNext account. Using API Key # Open your ERPNext dashboard page. Click on Settings on the top and select 'My Settings'. Scroll down to the bottom of the page and click on API Access . Click on the Generate Keys button. Copy the displayed API Secret. Enter a name for your credentials in the Credentials Name field in the 'ERPNext API' credentials in n8n. Paste the API Secret in the API Secret field in the 'ERPNext API' credentials in n8n. Copy the API Key from ERPNext. Note: You might have to refresh the ERPNext window to view the API Key. Paste the API Key in the API Key field in the 'ERPNext API' credentials in n8n. Enter the subdomain of your ERPNext account in the Subdomain field in the 'ERPNext API' credentials in n8n. Refer to the FAQs to learn how to get your subdomain. Click on the Create button to create your credentials in n8n. The following video demonstrates the steps mentioned above. FAQs # How to find the subdomain of an ERPNext account? # In the address bar of your browser, you can find the subdomain. The string between https:// and .erpnext.com is your subdomain. For example, if the URL in the address bar is https://n8n.erpnext.com , the subdomain will be n8n .","title":"ERPNext"},{"location":"integrations/credentials/erpnext/#erpnext","text":"You can use these credentials to authenticate the following nodes with Emelia. - ERPNext","title":"ERPNext"},{"location":"integrations/credentials/erpnext/#prerequisites","text":"Create a ERPNext account.","title":"Prerequisites"},{"location":"integrations/credentials/erpnext/#using-api-key","text":"Open your ERPNext dashboard page. Click on Settings on the top and select 'My Settings'. Scroll down to the bottom of the page and click on API Access . Click on the Generate Keys button. Copy the displayed API Secret. Enter a name for your credentials in the Credentials Name field in the 'ERPNext API' credentials in n8n. Paste the API Secret in the API Secret field in the 'ERPNext API' credentials in n8n. Copy the API Key from ERPNext. Note: You might have to refresh the ERPNext window to view the API Key. Paste the API Key in the API Key field in the 'ERPNext API' credentials in n8n. Enter the subdomain of your ERPNext account in the Subdomain field in the 'ERPNext API' credentials in n8n. Refer to the FAQs to learn how to get your subdomain. Click on the Create button to create your credentials in n8n. The following video demonstrates the steps mentioned above.","title":"Using API Key"},{"location":"integrations/credentials/erpnext/#faqs","text":"","title":"FAQs"},{"location":"integrations/credentials/erpnext/#how-to-find-the-subdomain-of-an-erpnext-account","text":"In the address bar of your browser, you can find the subdomain. The string between https:// and .erpnext.com is your subdomain. For example, if the URL in the address bar is https://n8n.erpnext.com , the subdomain will be n8n .","title":"How to find the subdomain of an ERPNext account?"},{"location":"integrations/credentials/eventbrite/","text":"Eventbrite # You can use these credentials to authenticate the following nodes with Eventbrite. - Eventbrite Trigger Prerequisites # Create a Eventbrite account. Using OAuth # \u26c5\ufe0f Note for n8n.cloud users You'll only need to enter the Credentials Name and click on the circle button in the OAuth section to connect your Eventbrite account to n8n. Log in to your Eventbrite account. Click on the user icon in the top right. Select Account Settings in the drop down menu. Click on Developer links > API keys in the sidebar. Click on the Create API Key button. Copy the 'OAuth Callback URL' provided in the Eventbrite OAuth API credentials in n8n and paste it in the 'OAuth Redirect URI' field in the Eventbrite API creation page. Fill out any other information that is necessary and click 'Create Key'. Find your API key in the 'API Keys' page and click on 'Show API key, client secret and tokens'. Click on 'Show API key, client secret and tokens' and use the 'API key' and the 'Client secret' with your Eventbrite OAuth API credentials in n8n. Click on the circle button in the OAuth section to connect an Eventbrite account to n8n. Click the Save button to save your credentials. Using Access Token # Log in to your Eventbrite account. Visit your API keys page . Copy your private token. Use provided key with your Eventbrite node credentials in n8n.","title":"Eventbrite"},{"location":"integrations/credentials/eventbrite/#eventbrite","text":"You can use these credentials to authenticate the following nodes with Eventbrite. - Eventbrite Trigger","title":"Eventbrite"},{"location":"integrations/credentials/eventbrite/#prerequisites","text":"Create a Eventbrite account.","title":"Prerequisites"},{"location":"integrations/credentials/eventbrite/#using-oauth","text":"\u26c5\ufe0f Note for n8n.cloud users You'll only need to enter the Credentials Name and click on the circle button in the OAuth section to connect your Eventbrite account to n8n. Log in to your Eventbrite account. Click on the user icon in the top right. Select Account Settings in the drop down menu. Click on Developer links > API keys in the sidebar. Click on the Create API Key button. Copy the 'OAuth Callback URL' provided in the Eventbrite OAuth API credentials in n8n and paste it in the 'OAuth Redirect URI' field in the Eventbrite API creation page. Fill out any other information that is necessary and click 'Create Key'. Find your API key in the 'API Keys' page and click on 'Show API key, client secret and tokens'. Click on 'Show API key, client secret and tokens' and use the 'API key' and the 'Client secret' with your Eventbrite OAuth API credentials in n8n. Click on the circle button in the OAuth section to connect an Eventbrite account to n8n. Click the Save button to save your credentials.","title":"Using OAuth"},{"location":"integrations/credentials/eventbrite/#using-access-token","text":"Log in to your Eventbrite account. Visit your API keys page . Copy your private token. Use provided key with your Eventbrite node credentials in n8n.","title":"Using Access Token"},{"location":"integrations/credentials/facebookApp/","text":"Facebook App # You can use these credentials to authenticate the following nodes with Facebook. - Facebook Trigger Note: If you want to create credentials for the Facebook Graph API node, follow the instructions mentioned in the Facebook Graph API credentials documentation. Prerequisites # Create a Facebook account. Using App Access Token # Access the Facebook for Developers portal . Click on My Apps on the top right corner. Access your app. Create an app if you don't already have one. Add the Webhooks product from the Add a Product section on the dashboard. Click on Settings in the left sidebar and select 'Basic'. Click on the Show button and login with your Facebook account. Copy the App Secret displayed on the page. Access the Facebook Graph API Explorer . Select your app from the Facebook App dropdown list on the right sidebar. Select 'Get App Token' from the User or Page dropdown list on the right sidebar. Use the app secret and the generated access token with your Facebook node credentials in n8n.","title":"Facebook App"},{"location":"integrations/credentials/facebookApp/#facebook-app","text":"You can use these credentials to authenticate the following nodes with Facebook. - Facebook Trigger Note: If you want to create credentials for the Facebook Graph API node, follow the instructions mentioned in the Facebook Graph API credentials documentation.","title":"Facebook App"},{"location":"integrations/credentials/facebookApp/#prerequisites","text":"Create a Facebook account.","title":"Prerequisites"},{"location":"integrations/credentials/facebookApp/#using-app-access-token","text":"Access the Facebook for Developers portal . Click on My Apps on the top right corner. Access your app. Create an app if you don't already have one. Add the Webhooks product from the Add a Product section on the dashboard. Click on Settings in the left sidebar and select 'Basic'. Click on the Show button and login with your Facebook account. Copy the App Secret displayed on the page. Access the Facebook Graph API Explorer . Select your app from the Facebook App dropdown list on the right sidebar. Select 'Get App Token' from the User or Page dropdown list on the right sidebar. Use the app secret and the generated access token with your Facebook node credentials in n8n.","title":"Using App Access Token"},{"location":"integrations/credentials/facebookGraph/","text":"Facebook Graph API # You can use these credentials to authenticate the following nodes with Facebook. - Facebook Graph API Note: If you want to create credentials for the Facebook Trigger node, follow the instructions mentioned in the Facebook App credentials documentation. Prerequisites # Create a Facebook account. Using Access Token # Access Facebook for Developers portal . Click on \"My Apps\". Access your app. Create an app if you don't already have one. Access the Facebook Graph API Explorer . Select your app under the Facebook App dropdown list on the right sidebar. Click on the 'Generate Access Token' button and login with your facebook account. Use generated access token with your Facebook node credentials in n8n.","title":"Facebook Graph API"},{"location":"integrations/credentials/facebookGraph/#facebook-graph-api","text":"You can use these credentials to authenticate the following nodes with Facebook. - Facebook Graph API Note: If you want to create credentials for the Facebook Trigger node, follow the instructions mentioned in the Facebook App credentials documentation.","title":"Facebook Graph API"},{"location":"integrations/credentials/facebookGraph/#prerequisites","text":"Create a Facebook account.","title":"Prerequisites"},{"location":"integrations/credentials/facebookGraph/#using-access-token","text":"Access Facebook for Developers portal . Click on \"My Apps\". Access your app. Create an app if you don't already have one. Access the Facebook Graph API Explorer . Select your app under the Facebook App dropdown list on the right sidebar. Click on the 'Generate Access Token' button and login with your facebook account. Use generated access token with your Facebook node credentials in n8n.","title":"Using Access Token"},{"location":"integrations/credentials/figma/","text":"Figma # You can use these credentials to authenticate the following nodes: Figma Trigger (Beta) Prerequisites # Create a Figma account. Using API Key # Log in to Figma . Click on the avatar on the top-right and select Settings . Scroll down to Personal access tokens , enter a name for your token in the input field and confirm by pressing Enter. Click on Copy this token . Paste the API key in the Access Token field of the Figma API credentials screen in n8n. Click the Save button to save your credentials in n8n.","title":"Figma"},{"location":"integrations/credentials/figma/#figma","text":"You can use these credentials to authenticate the following nodes: Figma Trigger (Beta)","title":"Figma"},{"location":"integrations/credentials/figma/#prerequisites","text":"Create a Figma account.","title":"Prerequisites"},{"location":"integrations/credentials/figma/#using-api-key","text":"Log in to Figma . Click on the avatar on the top-right and select Settings . Scroll down to Personal access tokens , enter a name for your token in the input field and confirm by pressing Enter. Click on Copy this token . Paste the API key in the Access Token field of the Figma API credentials screen in n8n. Click the Save button to save your credentials in n8n.","title":"Using API Key"},{"location":"integrations/credentials/fileMaker/","text":"FileMaker # You can use these credentials to authenticate the following nodes with FileMaker. - FileMaker Prerequisites # Create an user account on a FileMaker server. Using Database Connection # Retrieve your FileMaker credentials and connection parameters. Use the credentials and connection parameters with your FileMaker node credentials in n8n. Click on the Save button to save your credentials.","title":"FileMaker"},{"location":"integrations/credentials/fileMaker/#filemaker","text":"You can use these credentials to authenticate the following nodes with FileMaker. - FileMaker","title":"FileMaker"},{"location":"integrations/credentials/fileMaker/#prerequisites","text":"Create an user account on a FileMaker server.","title":"Prerequisites"},{"location":"integrations/credentials/fileMaker/#using-database-connection","text":"Retrieve your FileMaker credentials and connection parameters. Use the credentials and connection parameters with your FileMaker node credentials in n8n. Click on the Save button to save your credentials.","title":"Using Database Connection"},{"location":"integrations/credentials/flow/","text":"Flow # You can use these credentials to authenticate the following nodes with Flow. - Flow - Flow Trigger Prerequisites # Create a Flow account. Using Access Token # Access your Flow dashboard. Click on your Organisation icon in the top left. Click on Account Preferences. Click on the Create a Personal Access Token button. As you generate your access token, you will also receive an organisation ID. Use provided access token and organisation ID with your Flow node credentials in n8n.","title":"Flow"},{"location":"integrations/credentials/flow/#flow","text":"You can use these credentials to authenticate the following nodes with Flow. - Flow - Flow Trigger","title":"Flow"},{"location":"integrations/credentials/flow/#prerequisites","text":"Create a Flow account.","title":"Prerequisites"},{"location":"integrations/credentials/flow/#using-access-token","text":"Access your Flow dashboard. Click on your Organisation icon in the top left. Click on Account Preferences. Click on the Create a Personal Access Token button. As you generate your access token, you will also receive an organisation ID. Use provided access token and organisation ID with your Flow node credentials in n8n.","title":"Using Access Token"},{"location":"integrations/credentials/formIoTrigger/","text":"Form.io Trigger # You can use these credentials to authenticate the following nodes: Form.io Trigger Prerequisites # Create a Form.io account. Using Basic auth # After creating your Form.io account, from n8n: Enter a descriptive Credentials Name . Select whether your Environment is Cloud-hosted or Self-hosted . Enter your Form.io account Email . Enter your Form.io account Password . Click Create to save your new credentials.","title":"Form.io Trigger"},{"location":"integrations/credentials/formIoTrigger/#formio-trigger","text":"You can use these credentials to authenticate the following nodes: Form.io Trigger","title":"Form.io Trigger"},{"location":"integrations/credentials/formIoTrigger/#prerequisites","text":"Create a Form.io account.","title":"Prerequisites"},{"location":"integrations/credentials/formIoTrigger/#using-basic-auth","text":"After creating your Form.io account, from n8n: Enter a descriptive Credentials Name . Select whether your Environment is Cloud-hosted or Self-hosted . Enter your Form.io account Email . Enter your Form.io account Password . Click Create to save your new credentials.","title":"Using Basic auth"},{"location":"integrations/credentials/formstackTrigger/","text":"Formstack Trigger # You can use these credentials to authenticate the following nodes: Formstack Trigger Prerequisites # Create a Formstack account. Using Access token # After creating your Formstack account: From the user menu select API . Select New Application . In the Create Application window enter the following: Application Name : Provide a descriptive name. Redirect URI : Enter the OAuth callback URL for your n8n instance in the format http://<n8n_url>/rest/oauth2-credential/callback . For example http://localhost:5678/rest/oauth2-credential/callback . Description : Enter a brief description. Platform : Select Website . Click Create Application . Copy the Access Token for your new application. From n8n: Enter a descriptive Credentials Name . Enter your Formstack Access Token . Click Create to save your new credentials. Using OAuth2 # After creating your Formstack account: From the user menu select API . Select New Application . In the Create Application window enter the following: Application Name : Provide a descriptive name. Redirect URI : Enter the OAuth callback URL for your n8n instance in the format http://<n8n_url>/rest/oauth2-credential/callback . For example http://localhost:5678/rest/oauth2-credential/callback . Description : Enter a brief description. Platform : Select Website . Click Create Application . Select your new application to view the Application Details . Copy the Client ID and Client Secret . From n8n: Enter a descriptive Credentials Name . Enter your Formstack Client ID . Enter your Formstack Client Secret . Click the circle button to initiate the OAuth2 flow. In the modal window select Authorize . Click Create to save your new credentials.","title":"Formstack Trigger"},{"location":"integrations/credentials/formstackTrigger/#formstack-trigger","text":"You can use these credentials to authenticate the following nodes: Formstack Trigger","title":"Formstack Trigger"},{"location":"integrations/credentials/formstackTrigger/#prerequisites","text":"Create a Formstack account.","title":"Prerequisites"},{"location":"integrations/credentials/formstackTrigger/#using-access-token","text":"After creating your Formstack account: From the user menu select API . Select New Application . In the Create Application window enter the following: Application Name : Provide a descriptive name. Redirect URI : Enter the OAuth callback URL for your n8n instance in the format http://<n8n_url>/rest/oauth2-credential/callback . For example http://localhost:5678/rest/oauth2-credential/callback . Description : Enter a brief description. Platform : Select Website . Click Create Application . Copy the Access Token for your new application. From n8n: Enter a descriptive Credentials Name . Enter your Formstack Access Token . Click Create to save your new credentials.","title":"Using Access token"},{"location":"integrations/credentials/formstackTrigger/#using-oauth2","text":"After creating your Formstack account: From the user menu select API . Select New Application . In the Create Application window enter the following: Application Name : Provide a descriptive name. Redirect URI : Enter the OAuth callback URL for your n8n instance in the format http://<n8n_url>/rest/oauth2-credential/callback . For example http://localhost:5678/rest/oauth2-credential/callback . Description : Enter a brief description. Platform : Select Website . Click Create Application . Select your new application to view the Application Details . Copy the Client ID and Client Secret . From n8n: Enter a descriptive Credentials Name . Enter your Formstack Client ID . Enter your Formstack Client Secret . Click the circle button to initiate the OAuth2 flow. In the modal window select Authorize . Click Create to save your new credentials.","title":"Using OAuth2"},{"location":"integrations/credentials/freshdesk/","text":"Freshdesk # You can use these credentials to authenticate the following nodes with Freshdesk. - Freshdesk Prerequisites # Create a Freshdesk account. Using Access Token # Access your Freshdesk dashboard. Click on your Organisation icon in the top right. Click on Profile Settings. Find your API key on the right panel. Use provided API key and your subdomain (i.e n8n) with your Freshdesk node credentials in n8n.","title":"Freshdesk"},{"location":"integrations/credentials/freshdesk/#freshdesk","text":"You can use these credentials to authenticate the following nodes with Freshdesk. - Freshdesk","title":"Freshdesk"},{"location":"integrations/credentials/freshdesk/#prerequisites","text":"Create a Freshdesk account.","title":"Prerequisites"},{"location":"integrations/credentials/freshdesk/#using-access-token","text":"Access your Freshdesk dashboard. Click on your Organisation icon in the top right. Click on Profile Settings. Find your API key on the right panel. Use provided API key and your subdomain (i.e n8n) with your Freshdesk node credentials in n8n.","title":"Using Access Token"},{"location":"integrations/credentials/freshservice/","text":"Freshservice # You can use these credentials to authenticate the following nodes: Freshservice Prerequisites # Create a Freshservice account. Using API Key # From Freshservice: Access your Freshservice dashboard. Click on your User icon in the top right and select Settings . Click on API Settings . Copy your API key. From n8n: Enter a descriptive Credentials Name . Under Credential Data , enter the API Key obtained above in the corresponding field. In the Domain field enter the subdomain of your Freshservice account. This is part of the URL, for example https://<subdomain>.freshservice.com/ . Click Save to create your new credentials.","title":"Freshservice"},{"location":"integrations/credentials/freshservice/#freshservice","text":"You can use these credentials to authenticate the following nodes: Freshservice","title":"Freshservice"},{"location":"integrations/credentials/freshservice/#prerequisites","text":"Create a Freshservice account.","title":"Prerequisites"},{"location":"integrations/credentials/freshservice/#using-api-key","text":"From Freshservice: Access your Freshservice dashboard. Click on your User icon in the top right and select Settings . Click on API Settings . Copy your API key. From n8n: Enter a descriptive Credentials Name . Under Credential Data , enter the API Key obtained above in the corresponding field. In the Domain field enter the subdomain of your Freshservice account. This is part of the URL, for example https://<subdomain>.freshservice.com/ . Click Save to create your new credentials.","title":"Using API Key"},{"location":"integrations/credentials/freshworksCrm/","text":"Freshworks CRM # You can use these credentials to authenticate the following nodes: Freshworks CRM Prerequisites # Create a Freshworks CRM account. Using API Key # From Freshworks CRM: Access your Freshworks CRM dashboard. Click on your User icon in the top right and select Settings . Click on API Settings . Copy your API key. From n8n: Enter a descriptive Credentials Name . Under Credential Data , enter the API Key obtained above in the corresponding field. In the Domain field enter the subdomain of your Freshworks CRM account. This is part of the URL, for example https://<subdomain>.myfreshworks.com/ . Click Save to create your new credentials.","title":"Freshworks CRM"},{"location":"integrations/credentials/freshworksCrm/#freshworks-crm","text":"You can use these credentials to authenticate the following nodes: Freshworks CRM","title":"Freshworks CRM"},{"location":"integrations/credentials/freshworksCrm/#prerequisites","text":"Create a Freshworks CRM account.","title":"Prerequisites"},{"location":"integrations/credentials/freshworksCrm/#using-api-key","text":"From Freshworks CRM: Access your Freshworks CRM dashboard. Click on your User icon in the top right and select Settings . Click on API Settings . Copy your API key. From n8n: Enter a descriptive Credentials Name . Under Credential Data , enter the API Key obtained above in the corresponding field. In the Domain field enter the subdomain of your Freshworks CRM account. This is part of the URL, for example https://<subdomain>.myfreshworks.com/ . Click Save to create your new credentials.","title":"Using API Key"},{"location":"integrations/credentials/ftp/","text":"FTP # You can use these credentials to authenticate the following nodes with FTP. - FTP Prerequisites # Create an account on an FTP server. Using FTP/SFTP # Retrieve your login credentials, FTP/SFTP host, and port parameters. Use the login credentials, FTP/SFTP host, and port parameters with your FTP node credentials in n8n. Click on the Save button to save your credentials.","title":"FTP"},{"location":"integrations/credentials/ftp/#ftp","text":"You can use these credentials to authenticate the following nodes with FTP. - FTP","title":"FTP"},{"location":"integrations/credentials/ftp/#prerequisites","text":"Create an account on an FTP server.","title":"Prerequisites"},{"location":"integrations/credentials/ftp/#using-ftpsftp","text":"Retrieve your login credentials, FTP/SFTP host, and port parameters. Use the login credentials, FTP/SFTP host, and port parameters with your FTP node credentials in n8n. Click on the Save button to save your credentials.","title":"Using FTP/SFTP"},{"location":"integrations/credentials/getResponse/","text":"GetResponse # You can use these credentials to authenticate the following nodes with GetResponse. - GetResponse - GetResponse Trigger Prerequisites # Create a GetResponse account. Using OAuth # Callback URL with GetResponse Note: The Redirect URL should be a URL in your domain. For example, https://mytemplatemaker.example.com/gr_callback . GetResponse doesn't accept the localhost callback URL. Refer to the FAQs to learn to configure the credentials for the local environment. Open your GetResponse dashboard . Click on Menu and select 'Integrations and API'. Click on the Custom apps tab. Click on the Register your app button. Enter all the necessary information. Copy your OAuth Callback URL from the 'Create New Credentials' screen in n8n and paste it in the Redirect URL field. Click on the Add button. Click on the app you created to get the Client ID and the Client Secret . Copy the displayed Client ID . Enter a name for your credentials in the Credentials Name field in the 'GetResponse OAuth2 API' credentials in n8n. Paste the Client ID in the Client ID field in the 'GetResponse OAuth2 API' credentials in n8n. Copy the Client secret key from GetResponse. Paste it in the Client Secret field in the 'GetResponse OAuth2 API' credentials in n8n. Click on the circle button in the OAuth section to connect a GetResponse account to n8n. Click on the Save button to save your credentials in n8n. The following video demonstrates the steps mentioned above. Using API Key # Open your GetResponse dashboard . Click on Menu and select 'Integrations and API'. Click on the API tab. Click on the Generate API key button. Enter a name for your key. Click on the Generate button. Copy the displayed API key . Enter a name for your credentials in the Credentials Name field in the 'GetResponse API' credentials in n8n. Paste the API key in the API Key field in the 'GetResponse API' credentials in n8n. Click the Create button to create your credentials in n8n. The following video demonstrates the steps mentioned above. FAQs # How to configure the OAuth credentials for the local environment? # GetResponse doesn't accept the localhost callback URL. However, you can follow the steps mentioned below to configure the OAuth credentials for the local environment: 1. We will use ngrok to expose the local server running on port 5678 to the internet. In your terminal, run the following command: 1 ngrok http 5678 2. Run the following command in a new terminal. Replace <YOUR-NGROK-URL> with the URL that you get from the previous step. 1 export WEBHOOK_URL = <YOUR-NGROK-URL> 3. Start your n8n instance. 4. Follow the instructions mentioned in the Using OAuth section to configure your credentials. Further Reference # OAuth 2.0 - Authorization Code Authentication - API key","title":"GetResponse"},{"location":"integrations/credentials/getResponse/#getresponse","text":"You can use these credentials to authenticate the following nodes with GetResponse. - GetResponse - GetResponse Trigger","title":"GetResponse"},{"location":"integrations/credentials/getResponse/#prerequisites","text":"Create a GetResponse account.","title":"Prerequisites"},{"location":"integrations/credentials/getResponse/#using-oauth","text":"Callback URL with GetResponse Note: The Redirect URL should be a URL in your domain. For example, https://mytemplatemaker.example.com/gr_callback . GetResponse doesn't accept the localhost callback URL. Refer to the FAQs to learn to configure the credentials for the local environment. Open your GetResponse dashboard . Click on Menu and select 'Integrations and API'. Click on the Custom apps tab. Click on the Register your app button. Enter all the necessary information. Copy your OAuth Callback URL from the 'Create New Credentials' screen in n8n and paste it in the Redirect URL field. Click on the Add button. Click on the app you created to get the Client ID and the Client Secret . Copy the displayed Client ID . Enter a name for your credentials in the Credentials Name field in the 'GetResponse OAuth2 API' credentials in n8n. Paste the Client ID in the Client ID field in the 'GetResponse OAuth2 API' credentials in n8n. Copy the Client secret key from GetResponse. Paste it in the Client Secret field in the 'GetResponse OAuth2 API' credentials in n8n. Click on the circle button in the OAuth section to connect a GetResponse account to n8n. Click on the Save button to save your credentials in n8n. The following video demonstrates the steps mentioned above.","title":"Using OAuth"},{"location":"integrations/credentials/getResponse/#using-api-key","text":"Open your GetResponse dashboard . Click on Menu and select 'Integrations and API'. Click on the API tab. Click on the Generate API key button. Enter a name for your key. Click on the Generate button. Copy the displayed API key . Enter a name for your credentials in the Credentials Name field in the 'GetResponse API' credentials in n8n. Paste the API key in the API Key field in the 'GetResponse API' credentials in n8n. Click the Create button to create your credentials in n8n. The following video demonstrates the steps mentioned above.","title":"Using API Key"},{"location":"integrations/credentials/getResponse/#faqs","text":"","title":"FAQs"},{"location":"integrations/credentials/getResponse/#how-to-configure-the-oauth-credentials-for-the-local-environment","text":"GetResponse doesn't accept the localhost callback URL. However, you can follow the steps mentioned below to configure the OAuth credentials for the local environment: 1. We will use ngrok to expose the local server running on port 5678 to the internet. In your terminal, run the following command: 1 ngrok http 5678 2. Run the following command in a new terminal. Replace <YOUR-NGROK-URL> with the URL that you get from the previous step. 1 export WEBHOOK_URL = <YOUR-NGROK-URL> 3. Start your n8n instance. 4. Follow the instructions mentioned in the Using OAuth section to configure your credentials.","title":"How to configure the OAuth credentials for the local environment?"},{"location":"integrations/credentials/getResponse/#further-reference","text":"OAuth 2.0 - Authorization Code Authentication - API key","title":"Further Reference"},{"location":"integrations/credentials/ghost/","text":"Ghost # You can use these credentials to authenticate the following nodes with Ghost. - Ghost Prerequisites # Create a Ghost account. Using Admin API # Access your Ghost Admin dashboard. Click on Integrations in the left sidebar. Click on + Add custom integration under the CUSTOM INTEGRATIONS section. Enter a name for the integration in the Name field. Click on the Create button. Use this URL and Admin API Key with your Ghost node credentials in n8n. Using Content API # Access your Ghost Admin dashboard. Click on Integrations in the left sidebar. Click on + Add custom integration under the CUSTOM INTEGRATIONS section. Enter a name for the integration in the Name field. Click on the Create button. Use this URL and Content API Key with your Ghost node credentials in n8n.","title":"Ghost"},{"location":"integrations/credentials/ghost/#ghost","text":"You can use these credentials to authenticate the following nodes with Ghost. - Ghost","title":"Ghost"},{"location":"integrations/credentials/ghost/#prerequisites","text":"Create a Ghost account.","title":"Prerequisites"},{"location":"integrations/credentials/ghost/#using-admin-api","text":"Access your Ghost Admin dashboard. Click on Integrations in the left sidebar. Click on + Add custom integration under the CUSTOM INTEGRATIONS section. Enter a name for the integration in the Name field. Click on the Create button. Use this URL and Admin API Key with your Ghost node credentials in n8n.","title":"Using Admin API"},{"location":"integrations/credentials/ghost/#using-content-api","text":"Access your Ghost Admin dashboard. Click on Integrations in the left sidebar. Click on + Add custom integration under the CUSTOM INTEGRATIONS section. Enter a name for the integration in the Name field. Click on the Create button. Use this URL and Content API Key with your Ghost node credentials in n8n.","title":"Using Content API"},{"location":"integrations/credentials/git/","text":"Git # You can use these credentials to authenticate the following nodes with Git. - Git Prerequisites # Create an account on GitHub , GitLab , or similar platforms. Using Username and Password # Enter a name for your credentials in the Credentials Name field in the 'Git' credentials in n8n. Enter your GitHub, GitLab (or similar platforms) username in the Username field in the 'Git' credentials in n8n. Enter your GitHub, GitLab (or similar platforms) password in the Password field in the 'Git' credentials in n8n. Click the Create button to create your credentials in n8n. The following video demonstrates the steps mentioned above.","title":"Git"},{"location":"integrations/credentials/git/#git","text":"You can use these credentials to authenticate the following nodes with Git. - Git","title":"Git"},{"location":"integrations/credentials/git/#prerequisites","text":"Create an account on GitHub , GitLab , or similar platforms.","title":"Prerequisites"},{"location":"integrations/credentials/git/#using-username-and-password","text":"Enter a name for your credentials in the Credentials Name field in the 'Git' credentials in n8n. Enter your GitHub, GitLab (or similar platforms) username in the Username field in the 'Git' credentials in n8n. Enter your GitHub, GitLab (or similar platforms) password in the Password field in the 'Git' credentials in n8n. Click the Create button to create your credentials in n8n. The following video demonstrates the steps mentioned above.","title":"Using Username and Password"},{"location":"integrations/credentials/github/","text":"GitHub # You can use these credentials to authenticate the following nodes with GitHub. - GitHub - GitHub Trigger Prerequisites # Create a GitHub account. Using OAuth # \u26c5\ufe0f Note for n8n.cloud users You'll only need to enter the Credentials Name and click on the circle button in the OAuth section to connect your GitHub account to n8n. Open your GitHub dashboard . Click on your user icon in the top right. Click on Settings . Click on Developer settings . Select OAuth Apps . Click on the Register a new application button. Enter the Application name and Homepage URL . Copy the OAuth Callback URL from n8n and paste it in the Authorization callback URL field. Click on the Register application button. Copy the displayed 'Client ID'. Enter the name for your credentials in the Credentials Name field in the 'Github OAuth2 API' credentials in n8n. Paste the client ID in the Client ID field in the 'Github OAuth2 API' credentials in n8n. On your application page, click on the Generate a new client secret button. Copy the displayed 'Client Secret'. Paste the client secret in the Client Secret field in the 'Github OAuth2 API' credentials in n8n. Click on the circle button in the OAuth section to connect a GitHub account to n8n. Click the Save button to save your credentials in n8n. The following video demonstrates the steps mentioned above. The following video demonstrates the steps to authenticate the GitHub node on n8n.cloud . Using Access Token # Open your GitHub dashboard . Click on your user icon in the top right. Click on Settings . Click on Developer settings . Select Personal access tokens . Click on Generate new token . Enter a note in the Note field. Select the relevant scopes from the Select scopes section. Scroll down to the bottom and click on the Generate token button. Copy the displayed 'Personal access token'. Enter the name for your credentials in the Credentials Name field in the 'Github API' credentials in n8n. Enter your GitHub username in the User field in the 'Github API' credentials in n8n. Paste the access token in the Access Token field in the 'Github API' credentials in n8n. Click the Create button to save your credentials in n8n. The following video demonstrates the steps mentioned above.","title":"GitHub"},{"location":"integrations/credentials/github/#github","text":"You can use these credentials to authenticate the following nodes with GitHub. - GitHub - GitHub Trigger","title":"GitHub"},{"location":"integrations/credentials/github/#prerequisites","text":"Create a GitHub account.","title":"Prerequisites"},{"location":"integrations/credentials/github/#using-oauth","text":"\u26c5\ufe0f Note for n8n.cloud users You'll only need to enter the Credentials Name and click on the circle button in the OAuth section to connect your GitHub account to n8n. Open your GitHub dashboard . Click on your user icon in the top right. Click on Settings . Click on Developer settings . Select OAuth Apps . Click on the Register a new application button. Enter the Application name and Homepage URL . Copy the OAuth Callback URL from n8n and paste it in the Authorization callback URL field. Click on the Register application button. Copy the displayed 'Client ID'. Enter the name for your credentials in the Credentials Name field in the 'Github OAuth2 API' credentials in n8n. Paste the client ID in the Client ID field in the 'Github OAuth2 API' credentials in n8n. On your application page, click on the Generate a new client secret button. Copy the displayed 'Client Secret'. Paste the client secret in the Client Secret field in the 'Github OAuth2 API' credentials in n8n. Click on the circle button in the OAuth section to connect a GitHub account to n8n. Click the Save button to save your credentials in n8n. The following video demonstrates the steps mentioned above. The following video demonstrates the steps to authenticate the GitHub node on n8n.cloud .","title":"Using OAuth"},{"location":"integrations/credentials/github/#using-access-token","text":"Open your GitHub dashboard . Click on your user icon in the top right. Click on Settings . Click on Developer settings . Select Personal access tokens . Click on Generate new token . Enter a note in the Note field. Select the relevant scopes from the Select scopes section. Scroll down to the bottom and click on the Generate token button. Copy the displayed 'Personal access token'. Enter the name for your credentials in the Credentials Name field in the 'Github API' credentials in n8n. Enter your GitHub username in the User field in the 'Github API' credentials in n8n. Paste the access token in the Access Token field in the 'Github API' credentials in n8n. Click the Create button to save your credentials in n8n. The following video demonstrates the steps mentioned above.","title":"Using Access Token"},{"location":"integrations/credentials/gitlab/","text":"GitLab # You can use these credentials to authenticate the following nodes with GitLab. - GitLab - GitLab Trigger Prerequisites # Create a GitLab account. Using OAuth # \u26c5\ufe0f Note for n8n.cloud users You'll only need to enter the Credentials Name and click on the circle button in the OAuth section to connect your GitLab account to n8n. Access your GitLab dashboard. Click on your user icon in the top right. Click on 'Settings'. Click on 'Applications' in the sidebar. Enter a name in the Name field. Copy the 'OAuth Callback URL' provided in the 'Gitlab OAuth2 API' credentials in n8n and paste it in the Redirect URI field in the GitLab app creation page. Select any scopes you plan to use and then click on Save application . Use the Application ID and Secret with your GitLab OAuth2 API credentials in n8n. Click on the circle button in the OAuth section to connect a GitLab account to n8n. Click on the Save button to save your credentials. Using Access Token # Access your GitLab dashboard. Click on your user icon in the top right. Click on 'Settings'. Click on 'Access Tokens' in the sidebar. Enter a name in the Name field. Fill out the required information to receive the access token. Select any scopes you plan to use and then click on Create personal access token . Use the generated access token with your GitLab node credentials in n8n. Click on the Save button to save your credentials.","title":"GitLab"},{"location":"integrations/credentials/gitlab/#gitlab","text":"You can use these credentials to authenticate the following nodes with GitLab. - GitLab - GitLab Trigger","title":"GitLab"},{"location":"integrations/credentials/gitlab/#prerequisites","text":"Create a GitLab account.","title":"Prerequisites"},{"location":"integrations/credentials/gitlab/#using-oauth","text":"\u26c5\ufe0f Note for n8n.cloud users You'll only need to enter the Credentials Name and click on the circle button in the OAuth section to connect your GitLab account to n8n. Access your GitLab dashboard. Click on your user icon in the top right. Click on 'Settings'. Click on 'Applications' in the sidebar. Enter a name in the Name field. Copy the 'OAuth Callback URL' provided in the 'Gitlab OAuth2 API' credentials in n8n and paste it in the Redirect URI field in the GitLab app creation page. Select any scopes you plan to use and then click on Save application . Use the Application ID and Secret with your GitLab OAuth2 API credentials in n8n. Click on the circle button in the OAuth section to connect a GitLab account to n8n. Click on the Save button to save your credentials.","title":"Using OAuth"},{"location":"integrations/credentials/gitlab/#using-access-token","text":"Access your GitLab dashboard. Click on your user icon in the top right. Click on 'Settings'. Click on 'Access Tokens' in the sidebar. Enter a name in the Name field. Fill out the required information to receive the access token. Select any scopes you plan to use and then click on Create personal access token . Use the generated access token with your GitLab node credentials in n8n. Click on the Save button to save your credentials.","title":"Using Access Token"},{"location":"integrations/credentials/goToWebinar/","text":"GoToWebinar # You can use these credentials to authenticate the following nodes with GoToWebinar. - GoToWebinar Prerequisites # Create a GoToWebinar account. Using OAuth # Sign in to the GoTo Developer Center page. Click on the OAuth Clients tab. Click on the Create a client button. Enter a name in the Client name field. Copy the 'OAuth Callback URL' provided in the 'GoToWebinar OAuth2 API' credentials in n8n. Paste the URL in the Redirect URIs field and click on the Next button. Based on your use-case, select the required scopes. Click on the Save button. Copy the displayed Client ID . Enter a name for your credentials in the Credentials Name field in the 'GoToWebinar OAuth2 API' credentials in n8n. Paste the client ID in the Client ID field in the 'GoToWebinar OAuth2 API' credentials in n8n. Copy the displayed Client secret from the GoTo Client Management Portal. Accept the I have stored the client secret option and click on the Done button. Paste the client secret in the Client Secret field in the 'GoToWebinar OAuth2 API' credentials in n8n. Click on the circle button in the OAuth section to connect a GoToWebinar account to n8n. Click the Save button to save your credentials in n8n. The following video demonstrates the steps mentioned above.","title":"GoToWebinar"},{"location":"integrations/credentials/goToWebinar/#gotowebinar","text":"You can use these credentials to authenticate the following nodes with GoToWebinar. - GoToWebinar","title":"GoToWebinar"},{"location":"integrations/credentials/goToWebinar/#prerequisites","text":"Create a GoToWebinar account.","title":"Prerequisites"},{"location":"integrations/credentials/goToWebinar/#using-oauth","text":"Sign in to the GoTo Developer Center page. Click on the OAuth Clients tab. Click on the Create a client button. Enter a name in the Client name field. Copy the 'OAuth Callback URL' provided in the 'GoToWebinar OAuth2 API' credentials in n8n. Paste the URL in the Redirect URIs field and click on the Next button. Based on your use-case, select the required scopes. Click on the Save button. Copy the displayed Client ID . Enter a name for your credentials in the Credentials Name field in the 'GoToWebinar OAuth2 API' credentials in n8n. Paste the client ID in the Client ID field in the 'GoToWebinar OAuth2 API' credentials in n8n. Copy the displayed Client secret from the GoTo Client Management Portal. Accept the I have stored the client secret option and click on the Done button. Paste the client secret in the Client Secret field in the 'GoToWebinar OAuth2 API' credentials in n8n. Click on the circle button in the OAuth section to connect a GoToWebinar account to n8n. Click the Save button to save your credentials in n8n. The following video demonstrates the steps mentioned above.","title":"Using OAuth"},{"location":"integrations/credentials/google/","text":"Google # There are two authentication methods available for Google services nodes, OAuth2 and the Service Account authentication. Refer to the official Google documentation to learn which is appropriate for your case case. Note that while all nodes are compatible with OAuth2 authentication, only some also support Service Account authentication. Prerequisites # Google Cloud account Google Cloud Platform project Request API Access ( For Google Perspective Only ) Compatible nodes # Once configured, you can use your credentials to authenticate the following nodes: Node OAuth Service Account G Suite Admin :white_check_mark: :x: Gmail :white_check_mark: :white_check_mark: Google Analytics :white_check_mark: :x: Google BigQuery :white_check_mark: :x: Google Books :white_check_mark: :white_check_mark: Google Calendar :white_check_mark: :x: Google Chat :x: :white_check_mark: Google Contacts :white_check_mark: :x: Google Cloud Firestore :white_check_mark: :x: Google Cloud Natural Language :white_check_mark: :x: Google Cloud Realtime Database :white_check_mark: :x: Google Docs :white_check_mark: :white_check_mark: Google Drive :white_check_mark: :white_check_mark: Google Drive Trigger :white_check_mark: :white_check_mark: Google Perspective :white_check_mark: :x: Google Sheets :white_check_mark: :white_check_mark: Google Slides :white_check_mark: :white_check_mark: Google Tasks :white_check_mark: :x: Google Translate :white_check_mark: :white_check_mark: YouTube :white_check_mark: :x: \u26c5\ufe0f Note for n8n.cloud users For the following nodes, you only need to enter the Credentials Name and click on the Sign in with Google button in the OAuth section to connect your Google account to n8n: Google Calendar Google Contacts Google Sheets Google Tasks Using OAuth # From your Google Cloud Console dashboard: Click on the hamburger menu and select APIs & Services > Credentials . Click on + CREATE CREDENTIALS and select OAuth client ID . !!! tip \u2757\ufe0f Note for new users If you're creating OAuth credentials for the first time, you will have to configure the consent screen . From the Application type dropdown select Web application . A name is automatically generated, change it if desired. From the Authorized redirect URIs section, select + Add URI . Enter the OAuth Callback URL provided in the Google node credential modal: Click the CREATE button. From your n8n instance: Enter your new Client ID and Client Secret from Google Cloud Console in the n8n Credentials modal. Enter a Credentials Name . Click on the Sign in with Google button to complete your Google authentication. Save your new credentials in n8n. Now you must enable each Google service (e.g. Sheets, Drive, etc.) API that you want to use. The following video demonstrates the steps mentioned above. Using Service Account # From your Google Cloud Console dashboard: Click on the hamburger menu and select APIs & Services > Credentials . Click on + CREATE CREDENTIALS and select Service account . Enter a name in the Service account name field. Click on the CREATE button. Based on your use-case, you may want to Select a role and Grant users access to this service account using the corresponding sections. Click Done . Select your newly created service account under the Service Accounts section and open the Keys tab. Click on ADD KEY and select Create new key . In the modal that appears, select JSON and click Create . The file is saved to your computer. From you n8n instance: Enter a Credentials Name . In the Service Account Email field, enter the email associated with your new Service Account (visible in the Details tab). Enter the Private Key from the downloaded JSON file. If you are running an n8n version older than 0.156.0: Replace all instances of \\n in the JSON file with new lines. ( Optional ) Click the toggle to enable Impersonate a User and enter the desired email. Save your credentials. Now you must enable each Google service (e.g. Sheets, Drive, etc.) API that you want to use. The following video demonstrates the steps mentioned above. Enable APIs # To enable an API, follow the steps below: Access your Google Cloud Console . From the hamburger menu select APIs & Services > Library . Search for and select the API(s) you want to enable. Click on the ENABLE button. FAQs # Google hasn't verified this app # If using the OAuth authentication method, you might come across the warning \"Google hasn't verified this app\". To avoid this, you can create OAuth credentials from the same account you want to authenticate. However, if you're using credentials that were generated by another account (by a developer or another third party), you can follow the steps mentioned below: Click on Advanced . Click on Go to CREDENTIALS_NAME (unsafe) . CREDENTIALS_NAME is the name of the credentials created by the third party. Grant the requested permissions.","title":"Google"},{"location":"integrations/credentials/google/#google","text":"There are two authentication methods available for Google services nodes, OAuth2 and the Service Account authentication. Refer to the official Google documentation to learn which is appropriate for your case case. Note that while all nodes are compatible with OAuth2 authentication, only some also support Service Account authentication.","title":"Google"},{"location":"integrations/credentials/google/#prerequisites","text":"Google Cloud account Google Cloud Platform project Request API Access ( For Google Perspective Only )","title":"Prerequisites"},{"location":"integrations/credentials/google/#compatible-nodes","text":"Once configured, you can use your credentials to authenticate the following nodes: Node OAuth Service Account G Suite Admin :white_check_mark: :x: Gmail :white_check_mark: :white_check_mark: Google Analytics :white_check_mark: :x: Google BigQuery :white_check_mark: :x: Google Books :white_check_mark: :white_check_mark: Google Calendar :white_check_mark: :x: Google Chat :x: :white_check_mark: Google Contacts :white_check_mark: :x: Google Cloud Firestore :white_check_mark: :x: Google Cloud Natural Language :white_check_mark: :x: Google Cloud Realtime Database :white_check_mark: :x: Google Docs :white_check_mark: :white_check_mark: Google Drive :white_check_mark: :white_check_mark: Google Drive Trigger :white_check_mark: :white_check_mark: Google Perspective :white_check_mark: :x: Google Sheets :white_check_mark: :white_check_mark: Google Slides :white_check_mark: :white_check_mark: Google Tasks :white_check_mark: :x: Google Translate :white_check_mark: :white_check_mark: YouTube :white_check_mark: :x: \u26c5\ufe0f Note for n8n.cloud users For the following nodes, you only need to enter the Credentials Name and click on the Sign in with Google button in the OAuth section to connect your Google account to n8n: Google Calendar Google Contacts Google Sheets Google Tasks","title":"Compatible nodes"},{"location":"integrations/credentials/google/#using-oauth","text":"From your Google Cloud Console dashboard: Click on the hamburger menu and select APIs & Services > Credentials . Click on + CREATE CREDENTIALS and select OAuth client ID . !!! tip \u2757\ufe0f Note for new users If you're creating OAuth credentials for the first time, you will have to configure the consent screen . From the Application type dropdown select Web application . A name is automatically generated, change it if desired. From the Authorized redirect URIs section, select + Add URI . Enter the OAuth Callback URL provided in the Google node credential modal: Click the CREATE button. From your n8n instance: Enter your new Client ID and Client Secret from Google Cloud Console in the n8n Credentials modal. Enter a Credentials Name . Click on the Sign in with Google button to complete your Google authentication. Save your new credentials in n8n. Now you must enable each Google service (e.g. Sheets, Drive, etc.) API that you want to use. The following video demonstrates the steps mentioned above.","title":"Using OAuth"},{"location":"integrations/credentials/google/#using-service-account","text":"From your Google Cloud Console dashboard: Click on the hamburger menu and select APIs & Services > Credentials . Click on + CREATE CREDENTIALS and select Service account . Enter a name in the Service account name field. Click on the CREATE button. Based on your use-case, you may want to Select a role and Grant users access to this service account using the corresponding sections. Click Done . Select your newly created service account under the Service Accounts section and open the Keys tab. Click on ADD KEY and select Create new key . In the modal that appears, select JSON and click Create . The file is saved to your computer. From you n8n instance: Enter a Credentials Name . In the Service Account Email field, enter the email associated with your new Service Account (visible in the Details tab). Enter the Private Key from the downloaded JSON file. If you are running an n8n version older than 0.156.0: Replace all instances of \\n in the JSON file with new lines. ( Optional ) Click the toggle to enable Impersonate a User and enter the desired email. Save your credentials. Now you must enable each Google service (e.g. Sheets, Drive, etc.) API that you want to use. The following video demonstrates the steps mentioned above.","title":"Using Service Account"},{"location":"integrations/credentials/google/#enable-apis","text":"To enable an API, follow the steps below: Access your Google Cloud Console . From the hamburger menu select APIs & Services > Library . Search for and select the API(s) you want to enable. Click on the ENABLE button.","title":"Enable APIs"},{"location":"integrations/credentials/google/#faqs","text":"","title":"FAQs"},{"location":"integrations/credentials/google/#google-hasnt-verified-this-app","text":"If using the OAuth authentication method, you might come across the warning \"Google hasn't verified this app\". To avoid this, you can create OAuth credentials from the same account you want to authenticate. However, if you're using credentials that were generated by another account (by a developer or another third party), you can follow the steps mentioned below: Click on Advanced . Click on Go to CREDENTIALS_NAME (unsafe) . CREDENTIALS_NAME is the name of the credentials created by the third party. Grant the requested permissions.","title":"Google hasn't verified this app"},{"location":"integrations/credentials/gotify/","text":"Gotify # You can use these credentials to authenticate the following nodes with Gotify. - Gotify Prerequisites # Install Gotify on your server. Using API Token # Note: To create a message, the App API Token is required. To delete or retrieve all messages, you need the Client API Token . Access your Gotify dashboard. Click on APPS in the navigation menu. Click on the CREATE APPLICATION button. Enter an application name in the Name field. Click on the CREATE button. Click on CLIENTS in the navigation menu. Click on the CREATE CLIENT button. Enter a name for the client in the Name field. Click on the CREATE button. Use the App Token, Client Token, and the Host URL with your Gotify API credentials in n8n. Click the Save button to save your credentials in n8n.","title":"Gotify"},{"location":"integrations/credentials/gotify/#gotify","text":"You can use these credentials to authenticate the following nodes with Gotify. - Gotify","title":"Gotify"},{"location":"integrations/credentials/gotify/#prerequisites","text":"Install Gotify on your server.","title":"Prerequisites"},{"location":"integrations/credentials/gotify/#using-api-token","text":"Note: To create a message, the App API Token is required. To delete or retrieve all messages, you need the Client API Token . Access your Gotify dashboard. Click on APPS in the navigation menu. Click on the CREATE APPLICATION button. Enter an application name in the Name field. Click on the CREATE button. Click on CLIENTS in the navigation menu. Click on the CREATE CLIENT button. Enter a name for the client in the Name field. Click on the CREATE button. Use the App Token, Client Token, and the Host URL with your Gotify API credentials in n8n. Click the Save button to save your credentials in n8n.","title":"Using API Token"},{"location":"integrations/credentials/grafana/","text":"Grafana # You can use these credentials to authenticate the following nodes with Grafana. - Grafana Prerequisites # Create a Grafana account. Using Access Token # In Grafana, click the gears icon in the sidebar on the left and select the API Keys option. Click the \"Add API key\" button and enter any Key name . Click Add and copy the key shown. Use the key with your Grafana credentials in n8n. Enter the base URL of your instance (e.g. https://n8n.grafana.net ) in n8n.","title":"Grafana"},{"location":"integrations/credentials/grafana/#grafana","text":"You can use these credentials to authenticate the following nodes with Grafana. - Grafana","title":"Grafana"},{"location":"integrations/credentials/grafana/#prerequisites","text":"Create a Grafana account.","title":"Prerequisites"},{"location":"integrations/credentials/grafana/#using-access-token","text":"In Grafana, click the gears icon in the sidebar on the left and select the API Keys option. Click the \"Add API key\" button and enter any Key name . Click Add and copy the key shown. Use the key with your Grafana credentials in n8n. Enter the base URL of your instance (e.g. https://n8n.grafana.net ) in n8n.","title":"Using Access Token"},{"location":"integrations/credentials/grist/","text":"Grist # You can use these credentials to authenticate the following nodes: Grist . Prerequisites # Create a Grist account. API key # From Grist: Navigate to your Profile Settings . In the Api key section click Create . Copy the generated API key for use in n8n. From n8n: Enter the API Key obtained above. Use the dropdown to select if your are using a Free or Paid plan. For Paid plans, enter your Custom Subdomain (e.g. <subdomain>.getgrist.com ). Click on the Create button to create the credentials.","title":"Grist"},{"location":"integrations/credentials/grist/#grist","text":"You can use these credentials to authenticate the following nodes: Grist .","title":"Grist"},{"location":"integrations/credentials/grist/#prerequisites","text":"Create a Grist account.","title":"Prerequisites"},{"location":"integrations/credentials/grist/#api-key","text":"From Grist: Navigate to your Profile Settings . In the Api key section click Create . Copy the generated API key for use in n8n. From n8n: Enter the API Key obtained above. Use the dropdown to select if your are using a Free or Paid plan. For Paid plans, enter your Custom Subdomain (e.g. <subdomain>.getgrist.com ). Click on the Create button to create the credentials.","title":"API key"},{"location":"integrations/credentials/gumroad/","text":"Gumroad # You can use these credentials to authenticate the following nodes with Gumroad. - Gumroad Trigger Prerequisites # Create a Gumroad account. Using Access Token # Access your Gumroad dashboard. Click on your user icon on the top right. Click on Settings. Click on the Advanced tab. Scroll down and fill out the required fields and create a new application.. From here, you have access the ability to generate an access token. Use provided access token with your Gumroad node credentials in n8n.","title":"Gumroad"},{"location":"integrations/credentials/gumroad/#gumroad","text":"You can use these credentials to authenticate the following nodes with Gumroad. - Gumroad Trigger","title":"Gumroad"},{"location":"integrations/credentials/gumroad/#prerequisites","text":"Create a Gumroad account.","title":"Prerequisites"},{"location":"integrations/credentials/gumroad/#using-access-token","text":"Access your Gumroad dashboard. Click on your user icon on the top right. Click on Settings. Click on the Advanced tab. Scroll down and fill out the required fields and create a new application.. From here, you have access the ability to generate an access token. Use provided access token with your Gumroad node credentials in n8n.","title":"Using Access Token"},{"location":"integrations/credentials/haloPSA/","text":"HaloPSA # You can use these credentials to authenticate the following nodes with HaloPSA. - HaloPSA Prerequisites # Create a HaloPSA account. Allow your application to use the API: # Access your HaloPSA dashboard. Click on the Configuration link in the left panel. Under the Integrations menu entry, click on HaloPSA API . In the API Details section you find the values Resource Server , Authorisation Server , and Tenant . In the Applications section click on the View Applications button. Click on the New button to register a new application or click on an existing one and then the Edit button to edit it. Enter a name for your application (for example n8n ). Choose Client ID and Secret (Services) as the Authentication Method . Make a note of both the Client ID and the Client Secret . The Client Secret will only be shown once and you will need to generate a new one when lost. Select Agent as your Login Type and one of your agents in the Agent to log in as field. On the Permissions tab, tick all and hit the Save button. On n8n's HaloPSA credentials screen, fill in the values obtained in the previous steps. The Tenant field will be accessible only when the Hosting Type is set to Hosted Solution of Halo .","title":"HaloPSA"},{"location":"integrations/credentials/haloPSA/#halopsa","text":"You can use these credentials to authenticate the following nodes with HaloPSA. - HaloPSA","title":"HaloPSA"},{"location":"integrations/credentials/haloPSA/#prerequisites","text":"Create a HaloPSA account.","title":"Prerequisites"},{"location":"integrations/credentials/haloPSA/#allow-your-application-to-use-the-api","text":"Access your HaloPSA dashboard. Click on the Configuration link in the left panel. Under the Integrations menu entry, click on HaloPSA API . In the API Details section you find the values Resource Server , Authorisation Server , and Tenant . In the Applications section click on the View Applications button. Click on the New button to register a new application or click on an existing one and then the Edit button to edit it. Enter a name for your application (for example n8n ). Choose Client ID and Secret (Services) as the Authentication Method . Make a note of both the Client ID and the Client Secret . The Client Secret will only be shown once and you will need to generate a new one when lost. Select Agent as your Login Type and one of your agents in the Agent to log in as field. On the Permissions tab, tick all and hit the Save button. On n8n's HaloPSA credentials screen, fill in the values obtained in the previous steps. The Tenant field will be accessible only when the Hosting Type is set to Hosted Solution of Halo .","title":"Allow your application to use the API:"},{"location":"integrations/credentials/harvest/","text":"Harvest # You can use these credentials to authenticate the following nodes with Harvest. - Harvest Prerequisites # Create a Harvest account. Using OAuth # Access the Harvest Developer portal. Click on the Create New OAuth2 Application button. Enter an application name in the Name field. Copy the 'OAuth Callback URL' provided in the Harvest OAuth2 API credentials in n8n and paste it in the Redirect URL field. Click on the Create Application button. Copy the Client ID and Client Secret provided by the new Harvest app that you created and paste it in the Harvest OAuth2 API credentials in n8n. Click on the circle button in the OAuth section to connect your Harvest account to n8n. Click on the Save button to save your credentials. Using Access Token # Access the Harvest Developer portal. Click on the Create New Personal Access Token button. Enter a token name in the Name field. Click on the Create Personal Access Token button. Use the token with Harvest node credentials in n8n.","title":"Harvest"},{"location":"integrations/credentials/harvest/#harvest","text":"You can use these credentials to authenticate the following nodes with Harvest. - Harvest","title":"Harvest"},{"location":"integrations/credentials/harvest/#prerequisites","text":"Create a Harvest account.","title":"Prerequisites"},{"location":"integrations/credentials/harvest/#using-oauth","text":"Access the Harvest Developer portal. Click on the Create New OAuth2 Application button. Enter an application name in the Name field. Copy the 'OAuth Callback URL' provided in the Harvest OAuth2 API credentials in n8n and paste it in the Redirect URL field. Click on the Create Application button. Copy the Client ID and Client Secret provided by the new Harvest app that you created and paste it in the Harvest OAuth2 API credentials in n8n. Click on the circle button in the OAuth section to connect your Harvest account to n8n. Click on the Save button to save your credentials.","title":"Using OAuth"},{"location":"integrations/credentials/harvest/#using-access-token","text":"Access the Harvest Developer portal. Click on the Create New Personal Access Token button. Enter a token name in the Name field. Click on the Create Personal Access Token button. Use the token with Harvest node credentials in n8n.","title":"Using Access Token"},{"location":"integrations/credentials/helpScout/","text":"Help Scout # You can use these credentials to authenticate the following nodes with Help Scout. - Help Scout - Help Scout Trigger Prerequisites # Create a Help Scout account. Using OAuth # \u26c5\ufe0f Note for n8n.cloud users You'll only need to enter the Credentials Name and click on the circle button in the OAuth section to connect your Help Scout account to n8n. Log in to your Help Scout account. Click on the user icon in the top right. Select 'Your Profile' in the drop down menu. Click on 'My Apps' in the sidebar. Click on the Create My App button. Copy the 'OAuth Callback URL' provided in the HelpScout OAuth2 API credentials in n8n and paste it in the 'Redirection URL' field in Help Scout. Fill out any other information that is necessary and click 'Create'. Click on the Save button and use the 'App ID' and the 'App Secret' with your HelpScout OAuth2 API credentials in n8n. Click on the circle button in the OAuth section to connect a Help Scout account to n8n. Click the Save button to save your credentials.","title":"Help Scout"},{"location":"integrations/credentials/helpScout/#help-scout","text":"You can use these credentials to authenticate the following nodes with Help Scout. - Help Scout - Help Scout Trigger","title":"Help Scout"},{"location":"integrations/credentials/helpScout/#prerequisites","text":"Create a Help Scout account.","title":"Prerequisites"},{"location":"integrations/credentials/helpScout/#using-oauth","text":"\u26c5\ufe0f Note for n8n.cloud users You'll only need to enter the Credentials Name and click on the circle button in the OAuth section to connect your Help Scout account to n8n. Log in to your Help Scout account. Click on the user icon in the top right. Select 'Your Profile' in the drop down menu. Click on 'My Apps' in the sidebar. Click on the Create My App button. Copy the 'OAuth Callback URL' provided in the HelpScout OAuth2 API credentials in n8n and paste it in the 'Redirection URL' field in Help Scout. Fill out any other information that is necessary and click 'Create'. Click on the Save button and use the 'App ID' and the 'App Secret' with your HelpScout OAuth2 API credentials in n8n. Click on the circle button in the OAuth section to connect a Help Scout account to n8n. Click the Save button to save your credentials.","title":"Using OAuth"},{"location":"integrations/credentials/homeAssistant/","text":"Home Assistant # You can use these credentials to authenticate the following nodes with Home Assistant. - Home Assistant Prerequisites # Install Home Assistant Create a Home Assistant account. Review the Home Assistant Autentication API documentation Using access token # Access your Home Assistant UI, for example homeassistant.local:8123 . Open your user profile page and navigate to the Long-Lived Access Tokens section. Generate a new token and copy it. Use that token with your Home Assistant node credentials in n8n.","title":"Home Assistant"},{"location":"integrations/credentials/homeAssistant/#home-assistant","text":"You can use these credentials to authenticate the following nodes with Home Assistant. - Home Assistant","title":"Home Assistant"},{"location":"integrations/credentials/homeAssistant/#prerequisites","text":"Install Home Assistant Create a Home Assistant account. Review the Home Assistant Autentication API documentation","title":"Prerequisites"},{"location":"integrations/credentials/homeAssistant/#using-access-token","text":"Access your Home Assistant UI, for example homeassistant.local:8123 . Open your user profile page and navigate to the Long-Lived Access Tokens section. Generate a new token and copy it. Use that token with your Home Assistant node credentials in n8n.","title":"Using access token"},{"location":"integrations/credentials/httpRequest/","text":"HTTP Request # You can use these credentials to authenticate the following nodes: HTTP Request Prerequisites # You must use the authentication method required by the app or service you want to query. The following authentication methods are available: Basic Auth Digest Auth Header Auth OAuth1 OAuth2 None You can learn more about HTTP authentication here . Using Basic Auth / Digest Auth # Enter a descriptive Credentials Name . In the Credential Data section, enter the Username and Password for the app or service your HTTP Request is targeting. Click Create to save your credentials. Using Header Auth # Enter a descriptive Credentials Name . In the Credential Data section, enter the header Name and Value required for the app or service your HTTP Request is targeting. Read more about HTTP headers . Click Create to save your credentials. Using OAuth1 # Enter a descriptive Credentials Name . In the Credential Data section, enter the following authentication details: Authorization URL Access Token URL Consumer Key Consumer Secret Request Token URL Signature Method Click Create to save your credentials. Read more about OAuth1 . Using OAuth2 # Enter a descriptive Credentials Name . In the Credential Data section, enter the following authentication details: Authorization URL Access Token URL Client ID Client Secret Scope Auth URI Query Parameters Authentication Click Create to save your credentials. Read more about OAuth2 .","title":"HTTP Request"},{"location":"integrations/credentials/httpRequest/#http-request","text":"You can use these credentials to authenticate the following nodes: HTTP Request","title":"HTTP Request"},{"location":"integrations/credentials/httpRequest/#prerequisites","text":"You must use the authentication method required by the app or service you want to query. The following authentication methods are available: Basic Auth Digest Auth Header Auth OAuth1 OAuth2 None You can learn more about HTTP authentication here .","title":"Prerequisites"},{"location":"integrations/credentials/httpRequest/#using-basic-auth-digest-auth","text":"Enter a descriptive Credentials Name . In the Credential Data section, enter the Username and Password for the app or service your HTTP Request is targeting. Click Create to save your credentials.","title":"Using Basic Auth / Digest Auth"},{"location":"integrations/credentials/httpRequest/#using-header-auth","text":"Enter a descriptive Credentials Name . In the Credential Data section, enter the header Name and Value required for the app or service your HTTP Request is targeting. Read more about HTTP headers . Click Create to save your credentials.","title":"Using Header Auth"},{"location":"integrations/credentials/httpRequest/#using-oauth1","text":"Enter a descriptive Credentials Name . In the Credential Data section, enter the following authentication details: Authorization URL Access Token URL Consumer Key Consumer Secret Request Token URL Signature Method Click Create to save your credentials. Read more about OAuth1 .","title":"Using OAuth1"},{"location":"integrations/credentials/httpRequest/#using-oauth2","text":"Enter a descriptive Credentials Name . In the Credential Data section, enter the following authentication details: Authorization URL Access Token URL Client ID Client Secret Scope Auth URI Query Parameters Authentication Click Create to save your credentials. Read more about OAuth2 .","title":"Using OAuth2"},{"location":"integrations/credentials/hubspot/","text":"HubSpot # You can use these credentials to authenticate the following nodes with HubSpot. - HubSpot - HubSpot Trigger Prerequisites # Create a HubSpot account. Using OAuth # \u26c5\ufe0f Note for n8n.cloud users You'll only need to enter the Credentials Name and click on the circle button in the OAuth section to connect your HubSpot account to n8n. \u26a0 HubSpot old accounts Some HubSpot accounts don't have access to all the scopes. HubSpot is migrating accounts gradually. If you can't' find all the scopes in your current HubSpot developer account, try creating a fresh developer account. Access your HubSpot Developer Home . Click on the Manage apps button. Click on the Create app button in the top right. Specify an app name in the Public app name field. Click on the 'Auth' tab. Use the provided Client ID and the Client secret with your HubSpot OAuth2 API credentials in n8n. If you are using the HubSpot Trigger node, copy the App ID along with the information in the previous step. Copy your OAuth Callback URL from the 'Create New Credentials' screen in n8n and paste in the Redirect URL section. In the Scopes section, select the following scopes in the Find a scope search box: Trigger node: oauth crm.objects.contacts (read), crm.schemas.contacts (read), crm.objects.companies (read), crm.schemas.companies (read), crm.objects.deals (read), crm.schemas.deals (read), Regular node: oauth crm.schemas.deals (read), crm.objects.owners (read), crm.objects.contacts (write), crm.objects.companies (write), crm.objects.companies (read), crm.objects.deals (read), crm.schemas.contacts (read), crm.objects.deals (write), crm.objects.contacts (read), crm.schemas.companies (read), forms, tickets, Click on the Save button to save your settings in HubSpot. Back in n8n, click on the circle button in the OAuth section to connect your HubSpot account to n8n. Click the Save button to save your credentials. Using API key # Access your HubSpot dashboard. Click on the gear icon on the top right. Click on Integrations and then API key . Click on the Create key button. Use the key with HubSpot node credentials in n8n. Using APP Token # Follow the instructions in the Private Apps Documentation to get your access token. Set the access token as the key in your HubSpot credentials in n8n. Using Developer API Key (for HubSpot Trigger node) # Access your HubSpot Developer Home . Click on Apps in the top bar. Click on the Get HubSpot API key button. Click on the Show key button. Use the displayed Developer API key with your HubSpot Trigger node credentials in n8n.","title":"HubSpot"},{"location":"integrations/credentials/hubspot/#hubspot","text":"You can use these credentials to authenticate the following nodes with HubSpot. - HubSpot - HubSpot Trigger","title":"HubSpot"},{"location":"integrations/credentials/hubspot/#prerequisites","text":"Create a HubSpot account.","title":"Prerequisites"},{"location":"integrations/credentials/hubspot/#using-oauth","text":"\u26c5\ufe0f Note for n8n.cloud users You'll only need to enter the Credentials Name and click on the circle button in the OAuth section to connect your HubSpot account to n8n. \u26a0 HubSpot old accounts Some HubSpot accounts don't have access to all the scopes. HubSpot is migrating accounts gradually. If you can't' find all the scopes in your current HubSpot developer account, try creating a fresh developer account. Access your HubSpot Developer Home . Click on the Manage apps button. Click on the Create app button in the top right. Specify an app name in the Public app name field. Click on the 'Auth' tab. Use the provided Client ID and the Client secret with your HubSpot OAuth2 API credentials in n8n. If you are using the HubSpot Trigger node, copy the App ID along with the information in the previous step. Copy your OAuth Callback URL from the 'Create New Credentials' screen in n8n and paste in the Redirect URL section. In the Scopes section, select the following scopes in the Find a scope search box: Trigger node: oauth crm.objects.contacts (read), crm.schemas.contacts (read), crm.objects.companies (read), crm.schemas.companies (read), crm.objects.deals (read), crm.schemas.deals (read), Regular node: oauth crm.schemas.deals (read), crm.objects.owners (read), crm.objects.contacts (write), crm.objects.companies (write), crm.objects.companies (read), crm.objects.deals (read), crm.schemas.contacts (read), crm.objects.deals (write), crm.objects.contacts (read), crm.schemas.companies (read), forms, tickets, Click on the Save button to save your settings in HubSpot. Back in n8n, click on the circle button in the OAuth section to connect your HubSpot account to n8n. Click the Save button to save your credentials.","title":"Using OAuth"},{"location":"integrations/credentials/hubspot/#using-api-key","text":"Access your HubSpot dashboard. Click on the gear icon on the top right. Click on Integrations and then API key . Click on the Create key button. Use the key with HubSpot node credentials in n8n.","title":"Using API key"},{"location":"integrations/credentials/hubspot/#using-app-token","text":"Follow the instructions in the Private Apps Documentation to get your access token. Set the access token as the key in your HubSpot credentials in n8n.","title":"Using APP Token"},{"location":"integrations/credentials/hubspot/#using-developer-api-key-for-hubspot-trigger-node","text":"Access your HubSpot Developer Home . Click on Apps in the top bar. Click on the Get HubSpot API key button. Click on the Show key button. Use the displayed Developer API key with your HubSpot Trigger node credentials in n8n.","title":"Using Developer API Key (for HubSpot Trigger node)"},{"location":"integrations/credentials/humanticAi/","text":"Humantic AI # You can use these credentials to authenticate the following nodes with Humantic AI. - Humantic AI Using API # Access the Humantic AI API page. Enter your email address in the Business Email field. Click on the GET API KEY button. Enter all the necessary information. Click on the Get API Key button. Set a password for your account and click on the SET PASSWORD button. Use the provided api key with your Humantic AI API credentials in n8n.","title":"Humantic AI"},{"location":"integrations/credentials/humanticAi/#humantic-ai","text":"You can use these credentials to authenticate the following nodes with Humantic AI. - Humantic AI","title":"Humantic AI"},{"location":"integrations/credentials/humanticAi/#using-api","text":"Access the Humantic AI API page. Enter your email address in the Business Email field. Click on the GET API KEY button. Enter all the necessary information. Click on the Get API Key button. Set a password for your account and click on the SET PASSWORD button. Use the provided api key with your Humantic AI API credentials in n8n.","title":"Using API"},{"location":"integrations/credentials/hunter/","text":"Hunter # You can use these credentials to authenticate the following nodes with Hunter. - Hunter Prerequisites # Create a Hunter account. Using Access Token # Access your Hunter dashboard. Click on your profile icon on the top right. Click on API. Use the key with Hunter node credentials in n8n.","title":"Hunter"},{"location":"integrations/credentials/hunter/#hunter","text":"You can use these credentials to authenticate the following nodes with Hunter. - Hunter","title":"Hunter"},{"location":"integrations/credentials/hunter/#prerequisites","text":"Create a Hunter account.","title":"Prerequisites"},{"location":"integrations/credentials/hunter/#using-access-token","text":"Access your Hunter dashboard. Click on your profile icon on the top right. Click on API. Use the key with Hunter node credentials in n8n.","title":"Using Access Token"},{"location":"integrations/credentials/imap/","text":"IMAP # You can use these credentials to authenticate the following nodes with IMAP. - IMAP Email Prerequisites # Create an email account on a service with IMAP support. Using IMAP # Retrieve your login credentials and IMAP connection parameters. Use the login credentials and IMAP connection parameters with your IMAP Email node credentials in n8n. Click on the Save button to save your credentials. Using Gmail # Access your Gmail account. Click on the gears icon on the top and click on See all settings . Click on the Forwarding and POP/IMAP tab. Under the IMAP access section, select 'Enable IMAP'. Click on the Save Changes button. Go to your Google Account page. Click on Security on the left sidebar. Click on 2-Step Verification under the Signing in to Google section. Set up your 2-Step Verification method. Click on App passwords under the Signing in to Google section. Select 'Mail' from the Select app dropdown list. Select 'Other' from the Select device dropdown list. Enter a name in the text field. Click on the GENERATE button. Copy the displayed password. In the IMAP node credentials, enter your email address in the User field. For example, example@gmail.com . Paste the App password you copied in Step 15 in the Password field. Enter imap.gmail.com in the Host field. Toggle SSL/TLS to true . Click on Save to save your credentials. Note: Before executing the node, set the Ignore SSL Issues option to true as the Gmail certificate is self-signed. Using Yahoo Mail # Open your Yahoo Mail account. Click on your avatar on the top right and select 'Account info'. Click on the Account security tab in the left sidebar. Scroll down to the bottom and click on Generate app password . Select 'Other app' from the Select your app dropdown list. Enter the name of the app in the Enter custom name field. Click on the Generate button. Copy the displayed password. Enter the name for your credentials in the Credentials Name field in the 'IMAP' credentials in n8n. Enter your email address in the User field. Paste the password you copied earlier in the Password field. Enter imap.mail.yahoo.com in the Host field. Toggle SSL/TLS to true . Click on Save to save your credentials. The following video demonstrates the steps mentioned above. Using Outlook.com # Enter the name for your credentials in the Credentials Name field in the 'IMAP' credentials in n8n. Enter your email address in the User field. Enter your account password in the Password field. Enter outlook.office365.com in the Host field. Toggle SSL/TLS to true . Click on Create to create your credentials. Note If you get a connection error, please follow the steps mentioned in the FAQs . The following video demonstrates the steps mentioned above. FAQs # How to solve the connection error when connecting to Outlook.com? # If you receive a connection error while configuring the credentials for your Outlook account, follow the steps mentioned below: 1. Go to account.live.com/activity . 2. Sign in using the email address and password of your account. 3. Under the Recent activity section, find the Session Type event that matches the most recent time you received the connection error and click to expand it. 4. Select This was me to let the system know you authorize the IMAP connection. Set up IMAP for Gmail account Sign in with App Passwords for your Gmail Account Set up IMAP for Yahoo mail account Sign in with App Passwords for your Yahoo mail Account POP, IMAP, and SMTP settings for Outlook.com","title":"IMAP"},{"location":"integrations/credentials/imap/#imap","text":"You can use these credentials to authenticate the following nodes with IMAP. - IMAP Email","title":"IMAP"},{"location":"integrations/credentials/imap/#prerequisites","text":"Create an email account on a service with IMAP support.","title":"Prerequisites"},{"location":"integrations/credentials/imap/#using-imap","text":"Retrieve your login credentials and IMAP connection parameters. Use the login credentials and IMAP connection parameters with your IMAP Email node credentials in n8n. Click on the Save button to save your credentials.","title":"Using IMAP"},{"location":"integrations/credentials/imap/#using-gmail","text":"Access your Gmail account. Click on the gears icon on the top and click on See all settings . Click on the Forwarding and POP/IMAP tab. Under the IMAP access section, select 'Enable IMAP'. Click on the Save Changes button. Go to your Google Account page. Click on Security on the left sidebar. Click on 2-Step Verification under the Signing in to Google section. Set up your 2-Step Verification method. Click on App passwords under the Signing in to Google section. Select 'Mail' from the Select app dropdown list. Select 'Other' from the Select device dropdown list. Enter a name in the text field. Click on the GENERATE button. Copy the displayed password. In the IMAP node credentials, enter your email address in the User field. For example, example@gmail.com . Paste the App password you copied in Step 15 in the Password field. Enter imap.gmail.com in the Host field. Toggle SSL/TLS to true . Click on Save to save your credentials. Note: Before executing the node, set the Ignore SSL Issues option to true as the Gmail certificate is self-signed.","title":"Using Gmail"},{"location":"integrations/credentials/imap/#using-yahoo-mail","text":"Open your Yahoo Mail account. Click on your avatar on the top right and select 'Account info'. Click on the Account security tab in the left sidebar. Scroll down to the bottom and click on Generate app password . Select 'Other app' from the Select your app dropdown list. Enter the name of the app in the Enter custom name field. Click on the Generate button. Copy the displayed password. Enter the name for your credentials in the Credentials Name field in the 'IMAP' credentials in n8n. Enter your email address in the User field. Paste the password you copied earlier in the Password field. Enter imap.mail.yahoo.com in the Host field. Toggle SSL/TLS to true . Click on Save to save your credentials. The following video demonstrates the steps mentioned above.","title":"Using Yahoo Mail"},{"location":"integrations/credentials/imap/#using-outlookcom","text":"Enter the name for your credentials in the Credentials Name field in the 'IMAP' credentials in n8n. Enter your email address in the User field. Enter your account password in the Password field. Enter outlook.office365.com in the Host field. Toggle SSL/TLS to true . Click on Create to create your credentials. Note If you get a connection error, please follow the steps mentioned in the FAQs . The following video demonstrates the steps mentioned above.","title":"Using Outlook.com"},{"location":"integrations/credentials/imap/#faqs","text":"","title":"FAQs"},{"location":"integrations/credentials/imap/#how-to-solve-the-connection-error-when-connecting-to-outlookcom","text":"If you receive a connection error while configuring the credentials for your Outlook account, follow the steps mentioned below: 1. Go to account.live.com/activity . 2. Sign in using the email address and password of your account. 3. Under the Recent activity section, find the Session Type event that matches the most recent time you received the connection error and click to expand it. 4. Select This was me to let the system know you authorize the IMAP connection. Set up IMAP for Gmail account Sign in with App Passwords for your Gmail Account Set up IMAP for Yahoo mail account Sign in with App Passwords for your Yahoo mail Account POP, IMAP, and SMTP settings for Outlook.com","title":"How to solve the connection error when connecting to Outlook.com?"},{"location":"integrations/credentials/intercom/","text":"Intercom # You can use these credentials to authenticate the following nodes with Intercom. - Intercom Prerequisites # Create a Intercom account. Using Access Token # Create an app in your workspace. Click on Configure, then Authentication within the Developer hub. Use the Access Token with the Intercom node credentials in n8n.","title":"Intercom"},{"location":"integrations/credentials/intercom/#intercom","text":"You can use these credentials to authenticate the following nodes with Intercom. - Intercom","title":"Intercom"},{"location":"integrations/credentials/intercom/#prerequisites","text":"Create a Intercom account.","title":"Prerequisites"},{"location":"integrations/credentials/intercom/#using-access-token","text":"Create an app in your workspace. Click on Configure, then Authentication within the Developer hub. Use the Access Token with the Intercom node credentials in n8n.","title":"Using Access Token"},{"location":"integrations/credentials/invoiceNinja/","text":"Invoice Ninja # You can use these credentials to authenticate the following nodes with Invoice Ninja. - Invoice Ninja - Invoice Ninja Trigger Prerequisites # Create an Invoice Ninja account. Using Access Token # Access your Invoice Ninja dashboard. Click on Settings in the bottom left. Scroll down to API keys. Add new token. Use the key and your instance URL with Invoice Ninja node credentials in n8n.","title":"Invoice Ninja"},{"location":"integrations/credentials/invoiceNinja/#invoice-ninja","text":"You can use these credentials to authenticate the following nodes with Invoice Ninja. - Invoice Ninja - Invoice Ninja Trigger","title":"Invoice Ninja"},{"location":"integrations/credentials/invoiceNinja/#prerequisites","text":"Create an Invoice Ninja account.","title":"Prerequisites"},{"location":"integrations/credentials/invoiceNinja/#using-access-token","text":"Access your Invoice Ninja dashboard. Click on Settings in the bottom left. Scroll down to API keys. Add new token. Use the key and your instance URL with Invoice Ninja node credentials in n8n.","title":"Using Access Token"},{"location":"integrations/credentials/iterable/","text":"Iterable # You can use these credentials to authenticate the following nodes with Iterable. - Iterable Prerequisites # Create an Iterable account. Using API Key # Access the Iterable dashboard . Click on Integrations and select 'API keys'. Click on the NEW API KEY button. Enter a name in the Name field. Click on the Create button. Click on the Copy button to copy the API key. Use this API key with your Iterable node credentials in n8n.","title":"Iterable"},{"location":"integrations/credentials/iterable/#iterable","text":"You can use these credentials to authenticate the following nodes with Iterable. - Iterable","title":"Iterable"},{"location":"integrations/credentials/iterable/#prerequisites","text":"Create an Iterable account.","title":"Prerequisites"},{"location":"integrations/credentials/iterable/#using-api-key","text":"Access the Iterable dashboard . Click on Integrations and select 'API keys'. Click on the NEW API KEY button. Enter a name in the Name field. Click on the Create button. Click on the Copy button to copy the API key. Use this API key with your Iterable node credentials in n8n.","title":"Using API Key"},{"location":"integrations/credentials/jenkins/","text":"Jenkins # You can use these credentials to authenticate the following nodes with CircleCI. - Jenkins Prerequisites # Create an account on a Jenkins instance. Using Access Token # Access your Jenkins User. Visit the Configure section. Click on the Add new Token button. Type in a name for your token and click on the Generate button. Copy the generated API Token and use it with your Jenkins API node credentials in n8n.","title":"Jenkins"},{"location":"integrations/credentials/jenkins/#jenkins","text":"You can use these credentials to authenticate the following nodes with CircleCI. - Jenkins","title":"Jenkins"},{"location":"integrations/credentials/jenkins/#prerequisites","text":"Create an account on a Jenkins instance.","title":"Prerequisites"},{"location":"integrations/credentials/jenkins/#using-access-token","text":"Access your Jenkins User. Visit the Configure section. Click on the Add new Token button. Type in a name for your token and click on the Generate button. Copy the generated API Token and use it with your Jenkins API node credentials in n8n.","title":"Using Access Token"},{"location":"integrations/credentials/jira/","text":"Jira # You can use these credentials to authenticate the following nodes with Jira. - Jira - Jira Trigger Prerequisites # Create a Jira account. Using Access Token # Access your Jira dashboard. Click on your user icon in the top right. Click on Account Settings. Click on Security tab. Click on Manage API Tokens. Create API token. Use the API token with Jira node credentials in n8n. Your email and the domain under which the Jira account is under must also be included.","title":"Jira"},{"location":"integrations/credentials/jira/#jira","text":"You can use these credentials to authenticate the following nodes with Jira. - Jira - Jira Trigger","title":"Jira"},{"location":"integrations/credentials/jira/#prerequisites","text":"Create a Jira account.","title":"Prerequisites"},{"location":"integrations/credentials/jira/#using-access-token","text":"Access your Jira dashboard. Click on your user icon in the top right. Click on Account Settings. Click on Security tab. Click on Manage API Tokens. Create API token. Use the API token with Jira node credentials in n8n. Your email and the domain under which the Jira account is under must also be included.","title":"Using Access Token"},{"location":"integrations/credentials/jotForm/","text":"JotForm # You can use these credentials to authenticate the following nodes with JotForm. - JotForm Trigger Prerequisites # Create a JotForm account. Using Access Token # Access your JotForm account . Click on the API tab on the left. Click on the Create New Key button. Change the Permissions to 'Full Access'. Use the key with JotForm node credentials in n8n.","title":"JotForm"},{"location":"integrations/credentials/jotForm/#jotform","text":"You can use these credentials to authenticate the following nodes with JotForm. - JotForm Trigger","title":"JotForm"},{"location":"integrations/credentials/jotForm/#prerequisites","text":"Create a JotForm account.","title":"Prerequisites"},{"location":"integrations/credentials/jotForm/#using-access-token","text":"Access your JotForm account . Click on the API tab on the left. Click on the Create New Key button. Change the Permissions to 'Full Access'. Use the key with JotForm node credentials in n8n.","title":"Using Access Token"},{"location":"integrations/credentials/kafka/","text":"Kafka # You can use these credentials to authenticate the following nodes with Kafka. - Kafka - Kafka Trigger Prerequisites # Have Kafka up and running. You can refer to the official documentation to learn how to do that. Using Kafka # Enter a client ID in the Client ID field. Retrieve the Kafka Brokers and credentials (if any). Use the Client ID , Brokers (comma separated), Username , and Password with your Kafka node credentials in n8n.","title":"Kafka"},{"location":"integrations/credentials/kafka/#kafka","text":"You can use these credentials to authenticate the following nodes with Kafka. - Kafka - Kafka Trigger","title":"Kafka"},{"location":"integrations/credentials/kafka/#prerequisites","text":"Have Kafka up and running. You can refer to the official documentation to learn how to do that.","title":"Prerequisites"},{"location":"integrations/credentials/kafka/#using-kafka","text":"Enter a client ID in the Client ID field. Retrieve the Kafka Brokers and credentials (if any). Use the Client ID , Brokers (comma separated), Username , and Password with your Kafka node credentials in n8n.","title":"Using Kafka"},{"location":"integrations/credentials/keap/","text":"Keap # You can use these credentials to authenticate the following nodes with Keap. - Keap - Keap Trigger Prerequisites # Create a Keap account. Using OAuth # \u26c5\ufe0f Note for n8n.cloud users You'll only need to enter the Credentials Name and click on the circle button in the OAuth section to connect your Keap account to n8n. Access your Keap Developer Console . Click on your email address in the top right corner and select 'Apps' from the dropdown list. Click on the 'New App' button. Enter any necessary information, enable the 'Keap 150k' API and click on the Create button. Use the 'Key' and the 'Secret' displayed with your Keap OAuth2 API credentials in n8n. Click on the circle button in the OAuth section to connect a Keap account to n8n. Click the Save button to save your credentials.","title":"Keap"},{"location":"integrations/credentials/keap/#keap","text":"You can use these credentials to authenticate the following nodes with Keap. - Keap - Keap Trigger","title":"Keap"},{"location":"integrations/credentials/keap/#prerequisites","text":"Create a Keap account.","title":"Prerequisites"},{"location":"integrations/credentials/keap/#using-oauth","text":"\u26c5\ufe0f Note for n8n.cloud users You'll only need to enter the Credentials Name and click on the circle button in the OAuth section to connect your Keap account to n8n. Access your Keap Developer Console . Click on your email address in the top right corner and select 'Apps' from the dropdown list. Click on the 'New App' button. Enter any necessary information, enable the 'Keap 150k' API and click on the Create button. Use the 'Key' and the 'Secret' displayed with your Keap OAuth2 API credentials in n8n. Click on the circle button in the OAuth section to connect a Keap account to n8n. Click the Save button to save your credentials.","title":"Using OAuth"},{"location":"integrations/credentials/kitemaker/","text":"Kitemaker # You can use these credentials to authenticate the following nodes with Kitemaker. - Kitemaker Prerequisites # Create an account on Kitemaker . Using Access Token # Open your Kitemaker work item board . Click on the settings icon next to the organization name in the left sidebar. Select 'Developer settings' from the dropdown list. Click on Add new personal access token under the Personal access tokens section. Enter a name for your token in the Personal access token name field. Click on the Create token button. Copy the displayed token. Enter the name for your credentials in the Credentials Name field in the 'Kitemaker API' credentials in n8n. Paste the token in the Personal Access Token field in the 'Kitemaker API' credentials in n8n. Click on the Create button to create your credentials. The following video demonstrates the steps mentioned above.","title":"Kitemaker"},{"location":"integrations/credentials/kitemaker/#kitemaker","text":"You can use these credentials to authenticate the following nodes with Kitemaker. - Kitemaker","title":"Kitemaker"},{"location":"integrations/credentials/kitemaker/#prerequisites","text":"Create an account on Kitemaker .","title":"Prerequisites"},{"location":"integrations/credentials/kitemaker/#using-access-token","text":"Open your Kitemaker work item board . Click on the settings icon next to the organization name in the left sidebar. Select 'Developer settings' from the dropdown list. Click on Add new personal access token under the Personal access tokens section. Enter a name for your token in the Personal access token name field. Click on the Create token button. Copy the displayed token. Enter the name for your credentials in the Credentials Name field in the 'Kitemaker API' credentials in n8n. Paste the token in the Personal Access Token field in the 'Kitemaker API' credentials in n8n. Click on the Create button to create your credentials. The following video demonstrates the steps mentioned above.","title":"Using Access Token"},{"location":"integrations/credentials/lemlist/","text":"Lemlist # You can use these credentials to authenticate the following nodes with Lemlist. - Lemlist - Lemlist Trigger Prerequisites # Create an account on a Lemlist instance. Using API Key # Open your Lemlist dashboard . Click on the menu on the top left and select 'Settings' from the dropdown list. Click on Integrations under the Misc section from the left sidebar. Copy the API key displayed under the API section. Enter the name for your credentials in the Credentials Name field in the 'Lemlist API' credentials in n8n. Paste the API key in the API Key field in the 'Lemlist API' credentials in n8n. Click on the Create button to create your credentials. The following video demonstrates the steps mentioned above.","title":"Lemlist"},{"location":"integrations/credentials/lemlist/#lemlist","text":"You can use these credentials to authenticate the following nodes with Lemlist. - Lemlist - Lemlist Trigger","title":"Lemlist"},{"location":"integrations/credentials/lemlist/#prerequisites","text":"Create an account on a Lemlist instance.","title":"Prerequisites"},{"location":"integrations/credentials/lemlist/#using-api-key","text":"Open your Lemlist dashboard . Click on the menu on the top left and select 'Settings' from the dropdown list. Click on Integrations under the Misc section from the left sidebar. Copy the API key displayed under the API section. Enter the name for your credentials in the Credentials Name field in the 'Lemlist API' credentials in n8n. Paste the API key in the API Key field in the 'Lemlist API' credentials in n8n. Click on the Create button to create your credentials. The following video demonstrates the steps mentioned above.","title":"Using API Key"},{"location":"integrations/credentials/line/","text":"Line # You can use these credentials to authenticate the following nodes with Line. - Line Prerequisites # Create a Line account. Using OAuth # Access the LINE Notify page. Click on your name on the top right corner and select 'Manage registered services' from the dropdown list. Click on the Add service button. Enter all the necessary information. Copy your OAuth Callback URL from the 'Create New Credentials' screen in n8n and paste it in the Callback URL field. Click on the Agree and continue button. Click on the Add button. Check your inbox for the verification email. Click on the link under the LINE Notify Registration URL in your email. On the LINE Notify page, click on the My services button. Click on the new service you created. Use the provided Client ID and Client Secret with your Line Notify OAuth2 API credentials in n8n. Click on the circle button in the OAuth section to connect a Line account to n8n. Click the Save button to save your credentials in n8n.","title":"Line"},{"location":"integrations/credentials/line/#line","text":"You can use these credentials to authenticate the following nodes with Line. - Line","title":"Line"},{"location":"integrations/credentials/line/#prerequisites","text":"Create a Line account.","title":"Prerequisites"},{"location":"integrations/credentials/line/#using-oauth","text":"Access the LINE Notify page. Click on your name on the top right corner and select 'Manage registered services' from the dropdown list. Click on the Add service button. Enter all the necessary information. Copy your OAuth Callback URL from the 'Create New Credentials' screen in n8n and paste it in the Callback URL field. Click on the Agree and continue button. Click on the Add button. Check your inbox for the verification email. Click on the link under the LINE Notify Registration URL in your email. On the LINE Notify page, click on the My services button. Click on the new service you created. Use the provided Client ID and Client Secret with your Line Notify OAuth2 API credentials in n8n. Click on the circle button in the OAuth section to connect a Line account to n8n. Click the Save button to save your credentials in n8n.","title":"Using OAuth"},{"location":"integrations/credentials/linear/","text":"Linear # You can use these credentials to authenticate the following nodes with Linear. - Linear Trigger Prerequisites # Create a Linear account. Using the Linear API # Open the Linear API settings . Click on the Create key button. Copy the key into API Key field of the credentials screen in n8n.","title":"Linear"},{"location":"integrations/credentials/linear/#linear","text":"You can use these credentials to authenticate the following nodes with Linear. - Linear Trigger","title":"Linear"},{"location":"integrations/credentials/linear/#prerequisites","text":"Create a Linear account.","title":"Prerequisites"},{"location":"integrations/credentials/linear/#using-the-linear-api","text":"Open the Linear API settings . Click on the Create key button. Copy the key into API Key field of the credentials screen in n8n.","title":"Using the Linear API"},{"location":"integrations/credentials/lingvaNex/","text":"LingvaNex # You can use these credentials to authenticate the following nodes with LingvaNex. - LingvaNex Prerequisites # Create a LingvaNex account. Using API # Open your LingvaNex account page. Click on the Cloud API tab. Click on Payment / Subscription . Note that you can use the limited Translation API without having to subscribe or add a payment method. Scroll to the Translation API section. Copy the displayed API key. Enter the name for your credentials in the Credentials Name field in the 'LingvaNex API' credentials in n8n. Paste the API key in the API Key field in the 'LingvaNex API' credentials in n8n. Click on the Create button to create your credentials. The following video demonstrates the steps mentioned above.","title":"LingvaNex"},{"location":"integrations/credentials/lingvaNex/#lingvanex","text":"You can use these credentials to authenticate the following nodes with LingvaNex. - LingvaNex","title":"LingvaNex"},{"location":"integrations/credentials/lingvaNex/#prerequisites","text":"Create a LingvaNex account.","title":"Prerequisites"},{"location":"integrations/credentials/lingvaNex/#using-api","text":"Open your LingvaNex account page. Click on the Cloud API tab. Click on Payment / Subscription . Note that you can use the limited Translation API without having to subscribe or add a payment method. Scroll to the Translation API section. Copy the displayed API key. Enter the name for your credentials in the Credentials Name field in the 'LingvaNex API' credentials in n8n. Paste the API key in the API Key field in the 'LingvaNex API' credentials in n8n. Click on the Create button to create your credentials. The following video demonstrates the steps mentioned above.","title":"Using API"},{"location":"integrations/credentials/linkedIn/","text":"LinkedIn # You can use these credentials to authenticate the following nodes with LinkedIn. - LinkedIn Prerequisites # Create a LinkedIn account. Using OAuth # \u26c5\ufe0f Note for n8n.cloud users You'll only need to enter the Credentials Name and click on the circle button in the OAuth section to connect your LinkedIn account to n8n. Access the LinkedIn app creation page . Enter a name in the App name field. Enter your LinkedIn Page/Profile in the LinkedIn Page field. Add a logo by clicking on the Upload a logo button. Agree to the terms and conditions in the Legal agreement section and click the Create app button at the bottom of the page. Verify your application. You can find instructions on how to verify your LinkedIn application in the FAQs below. Enable APIs for your application. You can find instructions on how and which APIs to enable for your LinkedIn application in the FAQs below. Back in the LinkedIn application creation page, click on the Auth tab. Copy the 'OAuth Callback URL' provided in the LinkedIn OAuth2 API credentials in n8n and add it in the 'Authorized redirect URLs for your app' section in the LinkedIn application creation page. Use the displayed Client ID and the Client Secret with your LinkedIn OAuth API credentials in n8n. Click on the circle button in the OAuth section to connect a LinkedIn account to n8n. Click the Save button to save your credentials in n8n. FAQs # How do I verify my LinkedIn application? # Open the application's page on the LinkedIn developers portal. Click on the Verify button. Click on the Generate URL button under the Verification URL section. Copy the generated URL and open it in your web browser. Click on the Verify button to verify your LinkedIn OAuth application. How do I enable APIs for my LinkedIn application? # Click on the Products tab in your LinkedIn application page. Click the Select button next to the API you want to enable in the Products section. Click the checkbox to accept the terms and conditions and then click on the Add product button. Note: You will need to enable the Share on LinkedIn and Sign In with LinkedIn products to connect with n8n. If you would like to connect an organizational LinkedIn account to n8n, then you also additionally need to enable the Marketing Developer Platform product.","title":"LinkedIn"},{"location":"integrations/credentials/linkedIn/#linkedin","text":"You can use these credentials to authenticate the following nodes with LinkedIn. - LinkedIn","title":"LinkedIn"},{"location":"integrations/credentials/linkedIn/#prerequisites","text":"Create a LinkedIn account.","title":"Prerequisites"},{"location":"integrations/credentials/linkedIn/#using-oauth","text":"\u26c5\ufe0f Note for n8n.cloud users You'll only need to enter the Credentials Name and click on the circle button in the OAuth section to connect your LinkedIn account to n8n. Access the LinkedIn app creation page . Enter a name in the App name field. Enter your LinkedIn Page/Profile in the LinkedIn Page field. Add a logo by clicking on the Upload a logo button. Agree to the terms and conditions in the Legal agreement section and click the Create app button at the bottom of the page. Verify your application. You can find instructions on how to verify your LinkedIn application in the FAQs below. Enable APIs for your application. You can find instructions on how and which APIs to enable for your LinkedIn application in the FAQs below. Back in the LinkedIn application creation page, click on the Auth tab. Copy the 'OAuth Callback URL' provided in the LinkedIn OAuth2 API credentials in n8n and add it in the 'Authorized redirect URLs for your app' section in the LinkedIn application creation page. Use the displayed Client ID and the Client Secret with your LinkedIn OAuth API credentials in n8n. Click on the circle button in the OAuth section to connect a LinkedIn account to n8n. Click the Save button to save your credentials in n8n.","title":"Using OAuth"},{"location":"integrations/credentials/linkedIn/#faqs","text":"","title":"FAQs"},{"location":"integrations/credentials/linkedIn/#how-do-i-verify-my-linkedin-application","text":"Open the application's page on the LinkedIn developers portal. Click on the Verify button. Click on the Generate URL button under the Verification URL section. Copy the generated URL and open it in your web browser. Click on the Verify button to verify your LinkedIn OAuth application.","title":"How do I verify my LinkedIn application?"},{"location":"integrations/credentials/linkedIn/#how-do-i-enable-apis-for-my-linkedin-application","text":"Click on the Products tab in your LinkedIn application page. Click the Select button next to the API you want to enable in the Products section. Click the checkbox to accept the terms and conditions and then click on the Add product button. Note: You will need to enable the Share on LinkedIn and Sign In with LinkedIn products to connect with n8n. If you would like to connect an organizational LinkedIn account to n8n, then you also additionally need to enable the Marketing Developer Platform product.","title":"How do I enable APIs for my LinkedIn application?"},{"location":"integrations/credentials/magento2/","text":"Magento 2 # You can use these credentials to authenticate the following nodes: Magento 2 Prerequisites # Create a Magento account. Using Access Token # From your Magento admin panel: Navigate to System > Extensions > Integrations . Select Add New Integration . Enter a name for your n8n integration and your admin password. Navigate to the API tab and select the Magento resources this n8n integration should be able to access. Select Save to confirm your selections. From the Integrations page, click Activate for the new n8n integration. Select Allow to display a dialog screen with the credentials. Copy the Access Token value to use in n8n. From n8n: Enter the Host address of your Magento store. Enter the Access Token obtained above. Click Save to create the credentials.","title":"Magento 2"},{"location":"integrations/credentials/magento2/#magento-2","text":"You can use these credentials to authenticate the following nodes: Magento 2","title":"Magento 2"},{"location":"integrations/credentials/magento2/#prerequisites","text":"Create a Magento account.","title":"Prerequisites"},{"location":"integrations/credentials/magento2/#using-access-token","text":"From your Magento admin panel: Navigate to System > Extensions > Integrations . Select Add New Integration . Enter a name for your n8n integration and your admin password. Navigate to the API tab and select the Magento resources this n8n integration should be able to access. Select Save to confirm your selections. From the Integrations page, click Activate for the new n8n integration. Select Allow to display a dialog screen with the credentials. Copy the Access Token value to use in n8n. From n8n: Enter the Host address of your Magento store. Enter the Access Token obtained above. Click Save to create the credentials.","title":"Using Access Token"},{"location":"integrations/credentials/mailcheck/","text":"Mailcheck # You can use these credentials to authenticate the following nodes with Mailcheck. - Mailcheck Prerequisites # Create a Mailcheck account. Using API Key # Open the Mailcheck dashboard page. Click on the API on the top menu. Enter a key name in the Enter the key name field. Click on the Create Key button. Click on the Copy button to copy the API key. Enter a name for your credentials in the Credentials Name field in the 'Mailcheck API' credentials in n8n. Paste the API key in the API Key field in the 'Mailcheck API' credentials in n8n. Click on the Create button to create your credentials in n8n. The following video demonstrates the steps mentioned above. Please reach out to Mailcheck support should you have any questions support@mailcheck.co","title":"Mailcheck"},{"location":"integrations/credentials/mailcheck/#mailcheck","text":"You can use these credentials to authenticate the following nodes with Mailcheck. - Mailcheck","title":"Mailcheck"},{"location":"integrations/credentials/mailcheck/#prerequisites","text":"Create a Mailcheck account.","title":"Prerequisites"},{"location":"integrations/credentials/mailcheck/#using-api-key","text":"Open the Mailcheck dashboard page. Click on the API on the top menu. Enter a key name in the Enter the key name field. Click on the Create Key button. Click on the Copy button to copy the API key. Enter a name for your credentials in the Credentials Name field in the 'Mailcheck API' credentials in n8n. Paste the API key in the API Key field in the 'Mailcheck API' credentials in n8n. Click on the Create button to create your credentials in n8n. The following video demonstrates the steps mentioned above. Please reach out to Mailcheck support should you have any questions support@mailcheck.co","title":"Using API Key"},{"location":"integrations/credentials/mailchimp/","text":"Mailchimp # You can use these credentials to authenticate the following nodes with Mailchimp. - Mailchimp - Mailchimp Trigger Prerequisites # Create a Mailchimp account. Using OAuth # \u26c5\ufe0f Note for n8n.cloud users You'll only need to enter the Credentials Name and click on the circle button in the OAuth section to connect your Mailchimp account to n8n. Access your Mailchimp dashboard. Click on your user icon on the top right. Click on 'Account' in the dropdown list. Click on the Extras dropdown list and then select 'Registered apps'. Click on the Register An App button. Copy the 'OAuth Callback URL' from your n8n Mailchimp OAuth2 API credentials and paste it in the 'Redirect URI' field of the Mailchimp form. Fill out any other necessary details and click on the Create button. Use the generated Client ID and Client secret with your Mailchimp OAuth2 API node credentials in n8n. Click on the circle button in the OAuth section to connect your Mailchimp account to n8n. Click the Save button to save your credentials. Using Access Token # Access your Mailchimp dashboard. Click on your user icon on the top right. Click on 'Account' in the dropdown list. Click on the Extras dropdown list and then select 'API Keys'. Scroll down and create a new key by clicking on 'Create a Key' under the 'Your API keys' section. Use the API key with your Mailchimp node credentials in n8n.","title":"Mailchimp"},{"location":"integrations/credentials/mailchimp/#mailchimp","text":"You can use these credentials to authenticate the following nodes with Mailchimp. - Mailchimp - Mailchimp Trigger","title":"Mailchimp"},{"location":"integrations/credentials/mailchimp/#prerequisites","text":"Create a Mailchimp account.","title":"Prerequisites"},{"location":"integrations/credentials/mailchimp/#using-oauth","text":"\u26c5\ufe0f Note for n8n.cloud users You'll only need to enter the Credentials Name and click on the circle button in the OAuth section to connect your Mailchimp account to n8n. Access your Mailchimp dashboard. Click on your user icon on the top right. Click on 'Account' in the dropdown list. Click on the Extras dropdown list and then select 'Registered apps'. Click on the Register An App button. Copy the 'OAuth Callback URL' from your n8n Mailchimp OAuth2 API credentials and paste it in the 'Redirect URI' field of the Mailchimp form. Fill out any other necessary details and click on the Create button. Use the generated Client ID and Client secret with your Mailchimp OAuth2 API node credentials in n8n. Click on the circle button in the OAuth section to connect your Mailchimp account to n8n. Click the Save button to save your credentials.","title":"Using OAuth"},{"location":"integrations/credentials/mailchimp/#using-access-token","text":"Access your Mailchimp dashboard. Click on your user icon on the top right. Click on 'Account' in the dropdown list. Click on the Extras dropdown list and then select 'API Keys'. Scroll down and create a new key by clicking on 'Create a Key' under the 'Your API keys' section. Use the API key with your Mailchimp node credentials in n8n.","title":"Using Access Token"},{"location":"integrations/credentials/mailerLite/","text":"MailerLite # You can use these credentials to authenticate the following nodes with MailerLite. - MailerLite - MailerLite Trigger Prerequisites # Create a MailerLite account. Using API Key # Access the MailerLite dashboard. Click on the profile icon on the top right corner. Select 'Integrations' from the dropdown list. Click on 'Developer API' in the MailerLite API section. Copy the API key that is displayed and use it with your MailerLite node credentials in n8n.","title":"MailerLite"},{"location":"integrations/credentials/mailerLite/#mailerlite","text":"You can use these credentials to authenticate the following nodes with MailerLite. - MailerLite - MailerLite Trigger","title":"MailerLite"},{"location":"integrations/credentials/mailerLite/#prerequisites","text":"Create a MailerLite account.","title":"Prerequisites"},{"location":"integrations/credentials/mailerLite/#using-api-key","text":"Access the MailerLite dashboard. Click on the profile icon on the top right corner. Select 'Integrations' from the dropdown list. Click on 'Developer API' in the MailerLite API section. Copy the API key that is displayed and use it with your MailerLite node credentials in n8n.","title":"Using API Key"},{"location":"integrations/credentials/mailgun/","text":"Mailgun # You can use these credentials to authenticate the following nodes with Mailgun. - Mailgun Prerequisites # Create a Mailgun account. Using Access Token # Access your Mailgun dashboard. Click on Settings on the left panel. Click on API Keys. Click on the eye icon to uncover your API key. Use the API key with Mailgun node credentials in n8n.","title":"Mailgun"},{"location":"integrations/credentials/mailgun/#mailgun","text":"You can use these credentials to authenticate the following nodes with Mailgun. - Mailgun","title":"Mailgun"},{"location":"integrations/credentials/mailgun/#prerequisites","text":"Create a Mailgun account.","title":"Prerequisites"},{"location":"integrations/credentials/mailgun/#using-access-token","text":"Access your Mailgun dashboard. Click on Settings on the left panel. Click on API Keys. Click on the eye icon to uncover your API key. Use the API key with Mailgun node credentials in n8n.","title":"Using Access Token"},{"location":"integrations/credentials/mailjet/","text":"Mailjet # You can use these credentials to authenticate the following nodes with Mailjet. - Mailjet - Mailjet Trigger Prerequisites # Create a Mailjet account. Using Access Token # Access your Mailjet dashboard. Click on your user icon in the top right. Click on 'Account Settings'. Under REST API, click on 'Master API Key & Sub API key management'. Use the API key and Secret Key with Mailjet node credentials in n8n.","title":"Mailjet"},{"location":"integrations/credentials/mailjet/#mailjet","text":"You can use these credentials to authenticate the following nodes with Mailjet. - Mailjet - Mailjet Trigger","title":"Mailjet"},{"location":"integrations/credentials/mailjet/#prerequisites","text":"Create a Mailjet account.","title":"Prerequisites"},{"location":"integrations/credentials/mailjet/#using-access-token","text":"Access your Mailjet dashboard. Click on your user icon in the top right. Click on 'Account Settings'. Under REST API, click on 'Master API Key & Sub API key management'. Use the API key and Secret Key with Mailjet node credentials in n8n.","title":"Using Access Token"},{"location":"integrations/credentials/mandrill/","text":"Mandrill # You can use these credentials to authenticate the following nodes with Mandrill. - Mandrill Prerequisites # Create a Mandrill account. Using Access Token # Access your Mandrill dashboard. Click on the Settings icon in the sidebar. Click on the + New API Key button and create a new API Key. Use the key with your Mandrill API credentials in n8n.","title":"Mandrill"},{"location":"integrations/credentials/mandrill/#mandrill","text":"You can use these credentials to authenticate the following nodes with Mandrill. - Mandrill","title":"Mandrill"},{"location":"integrations/credentials/mandrill/#prerequisites","text":"Create a Mandrill account.","title":"Prerequisites"},{"location":"integrations/credentials/mandrill/#using-access-token","text":"Access your Mandrill dashboard. Click on the Settings icon in the sidebar. Click on the + New API Key button and create a new API Key. Use the key with your Mandrill API credentials in n8n.","title":"Using Access Token"},{"location":"integrations/credentials/marketstack/","text":"Marketstack # You can use these credentials to authenticate the following nodes: Marketstack Prerequisites # Create an account on Marketstack . Using API Key # From Marketstack: Access your Marketstack dashboard. Copy the key provided in the Your API Access Key field. From n8n: Enter a descriptive Credentials Name . Under Credential Data , enter the key obtained above in the corresponding field. Click Save to create your new credentials.","title":"Marketstack"},{"location":"integrations/credentials/marketstack/#marketstack","text":"You can use these credentials to authenticate the following nodes: Marketstack","title":"Marketstack"},{"location":"integrations/credentials/marketstack/#prerequisites","text":"Create an account on Marketstack .","title":"Prerequisites"},{"location":"integrations/credentials/marketstack/#using-api-key","text":"From Marketstack: Access your Marketstack dashboard. Copy the key provided in the Your API Access Key field. From n8n: Enter a descriptive Credentials Name . Under Credential Data , enter the key obtained above in the corresponding field. Click Save to create your new credentials.","title":"Using API Key"},{"location":"integrations/credentials/matrix/","text":"Matrix # You can use these credentials to authenticate the following nodes with Matrix. - Matrix Prerequisites # Create an account on a Matrix server. Using Access Token # Access the Matrix server. Click on your username in the top left corner. Select 'All settings' from the dropdown list. Click on Help & About in the left sidebar. Scroll down to the Advanced section. Click on click to reveal next to 'Access Token'. Copy the 'Homeserver URL' under the Advanced section if you are using a custom server. Use this Homeserver URL and Access Token with your Matrix node credentials in n8n.","title":"Matrix"},{"location":"integrations/credentials/matrix/#matrix","text":"You can use these credentials to authenticate the following nodes with Matrix. - Matrix","title":"Matrix"},{"location":"integrations/credentials/matrix/#prerequisites","text":"Create an account on a Matrix server.","title":"Prerequisites"},{"location":"integrations/credentials/matrix/#using-access-token","text":"Access the Matrix server. Click on your username in the top left corner. Select 'All settings' from the dropdown list. Click on Help & About in the left sidebar. Scroll down to the Advanced section. Click on click to reveal next to 'Access Token'. Copy the 'Homeserver URL' under the Advanced section if you are using a custom server. Use this Homeserver URL and Access Token with your Matrix node credentials in n8n.","title":"Using Access Token"},{"location":"integrations/credentials/mattermost/","text":"Mattermost # You can use these credentials to authenticate the following nodes with Mattermost. - Mattermost Prerequisites # Create a Mattermost account. Note: A system administrator has to grant permission to the user to generate an access token. Refer to the FAQs to learn how a system administrator can grant this permission. Using Access Token # Click on your username on the top left corner and select 'Account Settings' from the dropdown list. Click on the Security tab. Click on Edit in the Personal Access Tokens section. Click on the Create Token button. Enter a description in the Token Description field. Click on the Save button. Click on the Yes, Create button. Use this Acess Token with your Mattermost node credentials in n8n. FAQs # How to grant permissions to the users to generate access tokens? # A system admin has to grant permissions to the users for the user to create access tokens. If you're a system admin, follow the steps mentioned below. Click on your username on the top left corner and select 'System Console' from the dropdown list. Click on Integration Management under the INTEGRATIONS section on the left sidebar. Go to Integration Management. Scroll down to the Enable Personal Access Tokens and enable personal access tokens. Click on the Save button. Click on Users under the USER MANAGEMENT section on the left sidebar. Personal access tokens are generated for individual users, so they must be enabled for each user. Click on Member next to the user you want to grant permission to, and select 'Manage Roles' from the dropdown list. Check the Allow this account to generate personal access tokens checkbox. Select any additional permissions you want to grant the user and click on the Save button. Note: You may also create a bot account and apply the same for it. The user can now generate a personal access token by going to their account settings and following the steps mentioned above . Personal Access Tokens","title":"Mattermost"},{"location":"integrations/credentials/mattermost/#mattermost","text":"You can use these credentials to authenticate the following nodes with Mattermost. - Mattermost","title":"Mattermost"},{"location":"integrations/credentials/mattermost/#prerequisites","text":"Create a Mattermost account. Note: A system administrator has to grant permission to the user to generate an access token. Refer to the FAQs to learn how a system administrator can grant this permission.","title":"Prerequisites"},{"location":"integrations/credentials/mattermost/#using-access-token","text":"Click on your username on the top left corner and select 'Account Settings' from the dropdown list. Click on the Security tab. Click on Edit in the Personal Access Tokens section. Click on the Create Token button. Enter a description in the Token Description field. Click on the Save button. Click on the Yes, Create button. Use this Acess Token with your Mattermost node credentials in n8n.","title":"Using Access Token"},{"location":"integrations/credentials/mattermost/#faqs","text":"","title":"FAQs"},{"location":"integrations/credentials/mattermost/#how-to-grant-permissions-to-the-users-to-generate-access-tokens","text":"A system admin has to grant permissions to the users for the user to create access tokens. If you're a system admin, follow the steps mentioned below. Click on your username on the top left corner and select 'System Console' from the dropdown list. Click on Integration Management under the INTEGRATIONS section on the left sidebar. Go to Integration Management. Scroll down to the Enable Personal Access Tokens and enable personal access tokens. Click on the Save button. Click on Users under the USER MANAGEMENT section on the left sidebar. Personal access tokens are generated for individual users, so they must be enabled for each user. Click on Member next to the user you want to grant permission to, and select 'Manage Roles' from the dropdown list. Check the Allow this account to generate personal access tokens checkbox. Select any additional permissions you want to grant the user and click on the Save button. Note: You may also create a bot account and apply the same for it. The user can now generate a personal access token by going to their account settings and following the steps mentioned above . Personal Access Tokens","title":"How to grant permissions to the users to generate access tokens?"},{"location":"integrations/credentials/mautic/","text":"Mautic # You can use these credentials to authenticate the following nodes with Mautic. - Mautic - Mautic Trigger Prerequisites # Create an account on a Mautic instance. Using OAuth # Open your Mautic dashboard. Click on the gear icon on the top right and select API Credentials . Click on the + New button on the top right. Select 'OAuth 2' from the Authorization Protocol dropdown list. Enter the name of the credentials in the Name field. Copy the 'OAuth Callback URL' provided in the 'Mautic OAuth2 API' credentials in n8n. Paste it in the Redirect URI field on the Mautic credentials page. Click on the Apply button. Enter the name for your credentials in the Credentials Name field in the 'Mautic OAuth2 API' credentials in n8n. Copy the Client ID from the Mautic credentials page. Paste it in the Client ID field in the 'Mautic OAuth2 API' credentials in n8n. Copy the Client Secret from the Mautic credentials page. Paste it in the Client Secret field in the 'Mautic OAuth2 API' credentials in n8n. Enter the URL of your Mautic instance in the URL field. Click on the circle button in the OAuth section to connect a Mautic account to n8n. Click on the Save button to save your credentials. The following video demonstrates the steps mentioned above. Using Credentials # Open your Mautic dashboard. Click on the gear icon on the top right and select Configuration . Select 'API Settings' from the left sidebar. Select 'Yes' under the Enable HTTP basic auth? section. Click on the Apply button. Enter the name for your credentials in the Credentials Name field in the 'Mautic API' credentials in n8n. Enter the URL of your Mautic instance in the URL field in the 'Mautic API' credentials in n8n. Enter your Mautic username in the Username field in the 'Mautic API' credentials in n8n. Enter your Mautic password in the Password field in the 'Mautic API' credentials in n8n. Click on the Create button to create your credentials. The following video demonstrates the steps mentioned above.","title":"Mautic"},{"location":"integrations/credentials/mautic/#mautic","text":"You can use these credentials to authenticate the following nodes with Mautic. - Mautic - Mautic Trigger","title":"Mautic"},{"location":"integrations/credentials/mautic/#prerequisites","text":"Create an account on a Mautic instance.","title":"Prerequisites"},{"location":"integrations/credentials/mautic/#using-oauth","text":"Open your Mautic dashboard. Click on the gear icon on the top right and select API Credentials . Click on the + New button on the top right. Select 'OAuth 2' from the Authorization Protocol dropdown list. Enter the name of the credentials in the Name field. Copy the 'OAuth Callback URL' provided in the 'Mautic OAuth2 API' credentials in n8n. Paste it in the Redirect URI field on the Mautic credentials page. Click on the Apply button. Enter the name for your credentials in the Credentials Name field in the 'Mautic OAuth2 API' credentials in n8n. Copy the Client ID from the Mautic credentials page. Paste it in the Client ID field in the 'Mautic OAuth2 API' credentials in n8n. Copy the Client Secret from the Mautic credentials page. Paste it in the Client Secret field in the 'Mautic OAuth2 API' credentials in n8n. Enter the URL of your Mautic instance in the URL field. Click on the circle button in the OAuth section to connect a Mautic account to n8n. Click on the Save button to save your credentials. The following video demonstrates the steps mentioned above.","title":"Using OAuth"},{"location":"integrations/credentials/mautic/#using-credentials","text":"Open your Mautic dashboard. Click on the gear icon on the top right and select Configuration . Select 'API Settings' from the left sidebar. Select 'Yes' under the Enable HTTP basic auth? section. Click on the Apply button. Enter the name for your credentials in the Credentials Name field in the 'Mautic API' credentials in n8n. Enter the URL of your Mautic instance in the URL field in the 'Mautic API' credentials in n8n. Enter your Mautic username in the Username field in the 'Mautic API' credentials in n8n. Enter your Mautic password in the Password field in the 'Mautic API' credentials in n8n. Click on the Create button to create your credentials. The following video demonstrates the steps mentioned above.","title":"Using Credentials"},{"location":"integrations/credentials/medium/","text":"Medium # You can use these credentials to authenticate the following nodes with Medium. - Medium Prerequisites # Create an account on Medium . Request access to credentials by emailing yourfriends@medium.com . Using OAuth # Log in to your Medium account. Click on the avatar on the top right corner. Select ' Settings ' in the drop-down menu. Select 'Developers' from the menu on the left. Click on the 'Manage applications' button. Click on the 'New application' button. Give your application a Name, and provide a Description. Select the 'OAuth 2' option from the Authorization Protocol dropdown list. Copy the 'OAuth Callback URL' provided in the Medium OAuth2 API credentials in n8n and paste it in the 'Callback URLs' field in the Medium application page. Click on 'Save' to generate the credentials. Copy and paste Client ID and Client Secret in the Medium OAuth2 API credentials in n8n. Click on the circle button in the OAuth section to connect a Medium account to n8n. Click the Save button to save your credentials in n8n. Using Access Token # Log in to your Medium account. Click on the avatar on the top right corner. Select ' Settings ' in the drop-down menu. Select 'Integration tokens' from the menu on the left. Enter a description for your token in the field. Click on the 'Get integration token' button. Copy and paste Token in the Medium API credentials in n8n. Click the Save button to save your credentials in n8n.","title":"Medium"},{"location":"integrations/credentials/medium/#medium","text":"You can use these credentials to authenticate the following nodes with Medium. - Medium","title":"Medium"},{"location":"integrations/credentials/medium/#prerequisites","text":"Create an account on Medium . Request access to credentials by emailing yourfriends@medium.com .","title":"Prerequisites"},{"location":"integrations/credentials/medium/#using-oauth","text":"Log in to your Medium account. Click on the avatar on the top right corner. Select ' Settings ' in the drop-down menu. Select 'Developers' from the menu on the left. Click on the 'Manage applications' button. Click on the 'New application' button. Give your application a Name, and provide a Description. Select the 'OAuth 2' option from the Authorization Protocol dropdown list. Copy the 'OAuth Callback URL' provided in the Medium OAuth2 API credentials in n8n and paste it in the 'Callback URLs' field in the Medium application page. Click on 'Save' to generate the credentials. Copy and paste Client ID and Client Secret in the Medium OAuth2 API credentials in n8n. Click on the circle button in the OAuth section to connect a Medium account to n8n. Click the Save button to save your credentials in n8n.","title":"Using OAuth"},{"location":"integrations/credentials/medium/#using-access-token","text":"Log in to your Medium account. Click on the avatar on the top right corner. Select ' Settings ' in the drop-down menu. Select 'Integration tokens' from the menu on the left. Enter a description for your token in the field. Click on the 'Get integration token' button. Copy and paste Token in the Medium API credentials in n8n. Click the Save button to save your credentials in n8n.","title":"Using Access Token"},{"location":"integrations/credentials/messageBird/","text":"MessageBird # You can use these credentials to authenticate the following nodes with MessageBird. - MessageBird Prerequisites # Create a MessageBird account. Using Access Token # Access your MessageBird dashboard. Go to the Developers section . Click on API access. Click on 'Add access key' and create a new API key. Use this API key with your MessageBird API node credentials in n8n.","title":"MessageBird"},{"location":"integrations/credentials/messageBird/#messagebird","text":"You can use these credentials to authenticate the following nodes with MessageBird. - MessageBird","title":"MessageBird"},{"location":"integrations/credentials/messageBird/#prerequisites","text":"Create a MessageBird account.","title":"Prerequisites"},{"location":"integrations/credentials/messageBird/#using-access-token","text":"Access your MessageBird dashboard. Go to the Developers section . Click on API access. Click on 'Add access key' and create a new API key. Use this API key with your MessageBird API node credentials in n8n.","title":"Using Access Token"},{"location":"integrations/credentials/microsoft/","text":"Microsoft # You can use these credentials to authenticate the following nodes with Microsoft. - Microsoft Dynamics CRM - Microsoft Excel - Microsoft Graph Security - Microsoft OneDrive - Microsoft Outlook - Microsoft Teams - Microsoft To Do Prerequisites # Create a Microsoft Azure account. Using OAuth # \u26c5\ufe0f Note for n8n.cloud users You'll only need to enter the Credentials Name and click on the circle button in the OAuth section to connect your Microsoft account to n8n. Access the Microsoft Application Registration Portal . Click on the Register an application button. Enter a name for your app in the Name field. Select 'Accounts in any organizational directory (Any Azure AD directory - Multitenant) and personal Microsoft accounts (eg. Skype, Xbox)' under the Supported account types section. Copy the 'OAuth Callback URL' provided in the Microsoft node credentials in n8n. Paste it in the Redirect URI (optional) field on the Register an application page. Click on the Register button. Copy the Application (client) ID . Enter the name for your credentials in the Credentials Name field in the Microsoft node credentials in n8n. Paste the Application ID in the Client ID field in the Microsoft node credentials in n8n. On your Microsoft application page, click on Certificates & secrets in the left sidebar. Click on the + New client secret button under the Client secrets section. Enter a description in the Description field. Click on the Add button. Copy the displayed secret under the Value column. Paste the secret in the Client Secret field in the Microsoft node credentials in n8n. Click on the circle button in the OAuth section to connect a Microsoft account to n8n. Login to your Microsoft account and allow the app to access your info. Click on the Save button in the Microsoft node credentials in n8n to save your credentials. The following video demonstrates the steps mentioned above.","title":"Microsoft"},{"location":"integrations/credentials/microsoft/#microsoft","text":"You can use these credentials to authenticate the following nodes with Microsoft. - Microsoft Dynamics CRM - Microsoft Excel - Microsoft Graph Security - Microsoft OneDrive - Microsoft Outlook - Microsoft Teams - Microsoft To Do","title":"Microsoft"},{"location":"integrations/credentials/microsoft/#prerequisites","text":"Create a Microsoft Azure account.","title":"Prerequisites"},{"location":"integrations/credentials/microsoft/#using-oauth","text":"\u26c5\ufe0f Note for n8n.cloud users You'll only need to enter the Credentials Name and click on the circle button in the OAuth section to connect your Microsoft account to n8n. Access the Microsoft Application Registration Portal . Click on the Register an application button. Enter a name for your app in the Name field. Select 'Accounts in any organizational directory (Any Azure AD directory - Multitenant) and personal Microsoft accounts (eg. Skype, Xbox)' under the Supported account types section. Copy the 'OAuth Callback URL' provided in the Microsoft node credentials in n8n. Paste it in the Redirect URI (optional) field on the Register an application page. Click on the Register button. Copy the Application (client) ID . Enter the name for your credentials in the Credentials Name field in the Microsoft node credentials in n8n. Paste the Application ID in the Client ID field in the Microsoft node credentials in n8n. On your Microsoft application page, click on Certificates & secrets in the left sidebar. Click on the + New client secret button under the Client secrets section. Enter a description in the Description field. Click on the Add button. Copy the displayed secret under the Value column. Paste the secret in the Client Secret field in the Microsoft node credentials in n8n. Click on the circle button in the OAuth section to connect a Microsoft account to n8n. Login to your Microsoft account and allow the app to access your info. Click on the Save button in the Microsoft node credentials in n8n to save your credentials. The following video demonstrates the steps mentioned above.","title":"Using OAuth"},{"location":"integrations/credentials/microsoftSql/","text":"Microsoft SQL # You can use these credentials to authenticate the following nodes with Microsoft SQL. - Microsoft SQL Prerequisites # Create an user account on a Microsoft SQL server. Using Database Connection # Retrieve your Microsoft SQL credentials and connection parameters. Use the credentials and connection parameters with your Microsoft SQL node credentials in n8n.","title":"Microsoft SQL"},{"location":"integrations/credentials/microsoftSql/#microsoft-sql","text":"You can use these credentials to authenticate the following nodes with Microsoft SQL. - Microsoft SQL","title":"Microsoft SQL"},{"location":"integrations/credentials/microsoftSql/#prerequisites","text":"Create an user account on a Microsoft SQL server.","title":"Prerequisites"},{"location":"integrations/credentials/microsoftSql/#using-database-connection","text":"Retrieve your Microsoft SQL credentials and connection parameters. Use the credentials and connection parameters with your Microsoft SQL node credentials in n8n.","title":"Using Database Connection"},{"location":"integrations/credentials/mindee/","text":"Mindee # You can use these credentials to authenticate the following nodes with Mindee. - Mindee Prerequisites # Create a Mindee account. Using API Key # Access the Mindee APIs Hub . Click on the API card that you want to use. Click on the Try for free button under the Pricing section. Click on API Keys in the left sidebar. Click on the Add key button. Enter a name for the token. Click on Add new key . Use this API key with your Mindee node credentials in n8n.","title":"Mindee"},{"location":"integrations/credentials/mindee/#mindee","text":"You can use these credentials to authenticate the following nodes with Mindee. - Mindee","title":"Mindee"},{"location":"integrations/credentials/mindee/#prerequisites","text":"Create a Mindee account.","title":"Prerequisites"},{"location":"integrations/credentials/mindee/#using-api-key","text":"Access the Mindee APIs Hub . Click on the API card that you want to use. Click on the Try for free button under the Pricing section. Click on API Keys in the left sidebar. Click on the Add key button. Enter a name for the token. Click on Add new key . Use this API key with your Mindee node credentials in n8n.","title":"Using API Key"},{"location":"integrations/credentials/misp/","text":"MISP # You can use these credentials to authenticate the following nodes: MISP Prerequisites # Install and run a MISP instance. Using API Key # From your MISP UI: 1. Navigate to the Event Actions > Automation menu. 2. Copy the API Key provided there. From n8n: Enter your API key and application Base URL. Use the toggle to select if you want to Allow Unauthorized Certificates . Click Save to create your credentials.","title":"MISP"},{"location":"integrations/credentials/misp/#misp","text":"You can use these credentials to authenticate the following nodes: MISP","title":"MISP"},{"location":"integrations/credentials/misp/#prerequisites","text":"Install and run a MISP instance.","title":"Prerequisites"},{"location":"integrations/credentials/misp/#using-api-key","text":"From your MISP UI: 1. Navigate to the Event Actions > Automation menu. 2. Copy the API Key provided there. From n8n: Enter your API key and application Base URL. Use the toggle to select if you want to Allow Unauthorized Certificates . Click Save to create your credentials.","title":"Using API Key"},{"location":"integrations/credentials/mocean/","text":"Mocean # You can use these credentials to authenticate the following nodes with Mocean. - Mocean Prerequisites # Create a Mocean account. Using Access Token # Access your Mocean Dashboard. Your API key and secret will be visible. Use the API key and secret in your Mocean node credentials in n8n.","title":"Mocean"},{"location":"integrations/credentials/mocean/#mocean","text":"You can use these credentials to authenticate the following nodes with Mocean. - Mocean","title":"Mocean"},{"location":"integrations/credentials/mocean/#prerequisites","text":"Create a Mocean account.","title":"Prerequisites"},{"location":"integrations/credentials/mocean/#using-access-token","text":"Access your Mocean Dashboard. Your API key and secret will be visible. Use the API key and secret in your Mocean node credentials in n8n.","title":"Using Access Token"},{"location":"integrations/credentials/mondayCom/","text":"monday.com # You can use these credentials to authenticate the following nodes with monday.com. - monday.com Prerequisites # Create a monday.com account. Using Access Token # Access your monday.com dashboard. Click on the user icon in the bottom left. Click on Admin. Click on API and generate an API V2 Token. Use the token in your monday.com node credentials in n8n.","title":"monday.com"},{"location":"integrations/credentials/mondayCom/#mondaycom","text":"You can use these credentials to authenticate the following nodes with monday.com. - monday.com","title":"monday.com"},{"location":"integrations/credentials/mondayCom/#prerequisites","text":"Create a monday.com account.","title":"Prerequisites"},{"location":"integrations/credentials/mondayCom/#using-access-token","text":"Access your monday.com dashboard. Click on the user icon in the bottom left. Click on Admin. Click on API and generate an API V2 Token. Use the token in your monday.com node credentials in n8n.","title":"Using Access Token"},{"location":"integrations/credentials/mongoDb/","text":"MongoDB # You can use these credentials to authenticate the following nodes with MongoDB. - MongoDB Prerequisites # Create an user account with the appropriate permissions on a MongoDB server. Using Access Token # Retrieve your MongoDB credentials and connection parameters. Use the credentials and connection parameters with your MongoDB node credentials in n8n.","title":"MongoDB"},{"location":"integrations/credentials/mongoDb/#mongodb","text":"You can use these credentials to authenticate the following nodes with MongoDB. - MongoDB","title":"MongoDB"},{"location":"integrations/credentials/mongoDb/#prerequisites","text":"Create an user account with the appropriate permissions on a MongoDB server.","title":"Prerequisites"},{"location":"integrations/credentials/mongoDb/#using-access-token","text":"Retrieve your MongoDB credentials and connection parameters. Use the credentials and connection parameters with your MongoDB node credentials in n8n.","title":"Using Access Token"},{"location":"integrations/credentials/monicaCrm/","text":"Monica CRM # You can use these credentials to authenticate the following nodes: Monica CRM Prerequisites # Sign up for a Monica CRM account or self-host an instance. Using Access Token # From Monica CRM: Access your dashboard and navigate to the *Settings menu. From the API tab select Create New Token . Enter a name for your new token and click Create . Copy the access token that is displayed in the popup window. From n8n: Enter a descriptive Credentials Name . From the Credential Data section, select your environment type: Cloud-hosted or Self-hosted . (Self-hosted Only) Enter the domain of your Monica CRM instance. In the *API Token field enter the token created above. Click Create to save your new credentials.","title":"Monica CRM"},{"location":"integrations/credentials/monicaCrm/#monica-crm","text":"You can use these credentials to authenticate the following nodes: Monica CRM","title":"Monica CRM"},{"location":"integrations/credentials/monicaCrm/#prerequisites","text":"Sign up for a Monica CRM account or self-host an instance.","title":"Prerequisites"},{"location":"integrations/credentials/monicaCrm/#using-access-token","text":"From Monica CRM: Access your dashboard and navigate to the *Settings menu. From the API tab select Create New Token . Enter a name for your new token and click Create . Copy the access token that is displayed in the popup window. From n8n: Enter a descriptive Credentials Name . From the Credential Data section, select your environment type: Cloud-hosted or Self-hosted . (Self-hosted Only) Enter the domain of your Monica CRM instance. In the *API Token field enter the token created above. Click Create to save your new credentials.","title":"Using Access Token"},{"location":"integrations/credentials/mqtt/","text":"MQTT # You can use these credentials to authenticate the following nodes with MQTT. - MQTT - MQTT Trigger Prerequisites # You need to have a MQTT broker installed. Using MQTT # Use your Protocol, Host, Port, Username, and Password as the MQTT Trigger credential data in n8n. Optionally, you can enable SSL and provide a CA or Client certificate.","title":"MQTT"},{"location":"integrations/credentials/mqtt/#mqtt","text":"You can use these credentials to authenticate the following nodes with MQTT. - MQTT - MQTT Trigger","title":"MQTT"},{"location":"integrations/credentials/mqtt/#prerequisites","text":"You need to have a MQTT broker installed.","title":"Prerequisites"},{"location":"integrations/credentials/mqtt/#using-mqtt","text":"Use your Protocol, Host, Port, Username, and Password as the MQTT Trigger credential data in n8n. Optionally, you can enable SSL and provide a CA or Client certificate.","title":"Using MQTT"},{"location":"integrations/credentials/msg91/","text":"MSG91 # You can use these credentials to authenticate the following nodes with MSG91. - MSG91 Prerequisites # Create a MSG91 account. Using Access Token # Login to your account. Click on the dashboard button on the lop left. Click on 'Developer Platform'. Click on 'Authkey' in the left panel. Click on Create New . Enter the details and click on the Add button. Use the token in your MSG91 node credentials in n8n.","title":"MSG91"},{"location":"integrations/credentials/msg91/#msg91","text":"You can use these credentials to authenticate the following nodes with MSG91. - MSG91","title":"MSG91"},{"location":"integrations/credentials/msg91/#prerequisites","text":"Create a MSG91 account.","title":"Prerequisites"},{"location":"integrations/credentials/msg91/#using-access-token","text":"Login to your account. Click on the dashboard button on the lop left. Click on 'Developer Platform'. Click on 'Authkey' in the left panel. Click on Create New . Enter the details and click on the Add button. Use the token in your MSG91 node credentials in n8n.","title":"Using Access Token"},{"location":"integrations/credentials/mySql/","text":"MySQL # You can use these credentials to authenticate the following nodes with MySQL. - MySQL Prerequisites # Create an user account on a MySQL server. Using Database Connection # Retrieve your MySQL credentials and connection parameters. Use the credentials and connection parameters with your MySQL node credentials in n8n.","title":"MySQL"},{"location":"integrations/credentials/mySql/#mysql","text":"You can use these credentials to authenticate the following nodes with MySQL. - MySQL","title":"MySQL"},{"location":"integrations/credentials/mySql/#prerequisites","text":"Create an user account on a MySQL server.","title":"Prerequisites"},{"location":"integrations/credentials/mySql/#using-database-connection","text":"Retrieve your MySQL credentials and connection parameters. Use the credentials and connection parameters with your MySQL node credentials in n8n.","title":"Using Database Connection"},{"location":"integrations/credentials/nasa/","text":"NASA # You can use these credentials to authenticate the following nodes with NASA. - NASA Using API Key # Access the NASA Open APIs page. Scroll down to the Generate API Key section. Enter the required information. Click on the Signup button. Use this API Key with your NASA node credentials in n8n.","title":"NASA"},{"location":"integrations/credentials/nasa/#nasa","text":"You can use these credentials to authenticate the following nodes with NASA. - NASA","title":"NASA"},{"location":"integrations/credentials/nasa/#using-api-key","text":"Access the NASA Open APIs page. Scroll down to the Generate API Key section. Enter the required information. Click on the Signup button. Use this API Key with your NASA node credentials in n8n.","title":"Using API Key"},{"location":"integrations/credentials/netlify/","text":"Netlify # You can use these credentials to authenticate the following nodes: Netlify Netlify Trigger Prerequisites # Create a Netlify account. Using Access Token # From the Netlify UI: Navigate to User Settings > Personal Access Tokens . Select New access token . Enter a description and select Generate token . From n8n: Enter the access token obtained above. Click Save to create your credentials.","title":"Netlify"},{"location":"integrations/credentials/netlify/#netlify","text":"You can use these credentials to authenticate the following nodes: Netlify Netlify Trigger","title":"Netlify"},{"location":"integrations/credentials/netlify/#prerequisites","text":"Create a Netlify account.","title":"Prerequisites"},{"location":"integrations/credentials/netlify/#using-access-token","text":"From the Netlify UI: Navigate to User Settings > Personal Access Tokens . Select New access token . Enter a description and select Generate token . From n8n: Enter the access token obtained above. Click Save to create your credentials.","title":"Using Access Token"},{"location":"integrations/credentials/nextCloud/","text":"Nextcloud # You can use these credentials to authenticate the following nodes with Nextcloud. - Nextcloud Prerequisites # Create a Nextcloud account. Using OAuth # Log in to your Nextcloud account. Click on the user icon in the top right. Select 'Settings' in the drop down menu. Click on 'Security' under Administration in the sidebar. Copy the 'OAuth Callback URL' provided in the Nextcloud OAuth2 API credentials in n8n and paste it in the Redirection URI field under the 'OAuth 2.0 clients' section in the Nextcloud page. Fill out any other information that is necessary and click on the 'Add' button. Click on the eye icon to reveal the Secret and use the 'Client Identifier' and the 'Secret' with your Nextcloud OAuth2 API credentials in n8n. Replace your domain in the samples for the Authorization URL and Access Token URL fields. Enter your Web DAV URL in the Web DAV URL field. Click on the circle button in the OAuth section to connect a Nextcloud account to n8n. Click the Save button to save your credentials. Using Username and Password # Use your Web DAV URL along with your Nextcloud username and password in the node credentials.","title":"Nextcloud"},{"location":"integrations/credentials/nextCloud/#nextcloud","text":"You can use these credentials to authenticate the following nodes with Nextcloud. - Nextcloud","title":"Nextcloud"},{"location":"integrations/credentials/nextCloud/#prerequisites","text":"Create a Nextcloud account.","title":"Prerequisites"},{"location":"integrations/credentials/nextCloud/#using-oauth","text":"Log in to your Nextcloud account. Click on the user icon in the top right. Select 'Settings' in the drop down menu. Click on 'Security' under Administration in the sidebar. Copy the 'OAuth Callback URL' provided in the Nextcloud OAuth2 API credentials in n8n and paste it in the Redirection URI field under the 'OAuth 2.0 clients' section in the Nextcloud page. Fill out any other information that is necessary and click on the 'Add' button. Click on the eye icon to reveal the Secret and use the 'Client Identifier' and the 'Secret' with your Nextcloud OAuth2 API credentials in n8n. Replace your domain in the samples for the Authorization URL and Access Token URL fields. Enter your Web DAV URL in the Web DAV URL field. Click on the circle button in the OAuth section to connect a Nextcloud account to n8n. Click the Save button to save your credentials.","title":"Using OAuth"},{"location":"integrations/credentials/nextCloud/#using-username-and-password","text":"Use your Web DAV URL along with your Nextcloud username and password in the node credentials.","title":"Using Username and Password"},{"location":"integrations/credentials/nocoDb/","text":"NocoDB # You can use these credentials to authenticate the following nodes: NocoDB Prerequisites # Install NocoDB Enable API Access Using Auth Token # From n8n: Enter a descriptive Credentials Name . In the Credentials Data section enter the following: API Token : The authentication token for your NocoDB project, obtained when enabling API access (above). Host : The host of your NocoDB instance, for example http://localhost:8080 . Click Create to save your new credentials.","title":"NocoDB"},{"location":"integrations/credentials/nocoDb/#nocodb","text":"You can use these credentials to authenticate the following nodes: NocoDB","title":"NocoDB"},{"location":"integrations/credentials/nocoDb/#prerequisites","text":"Install NocoDB Enable API Access","title":"Prerequisites"},{"location":"integrations/credentials/nocoDb/#using-auth-token","text":"From n8n: Enter a descriptive Credentials Name . In the Credentials Data section enter the following: API Token : The authentication token for your NocoDB project, obtained when enabling API access (above). Host : The host of your NocoDB instance, for example http://localhost:8080 . Click Create to save your new credentials.","title":"Using Auth Token"},{"location":"integrations/credentials/notion/","text":"Notion # You can use these credentials to authenticate the following nodes with Notion. - Notion - Notion Trigger Prerequisites # Create a Notion account. Using API Key # Open your Notion workspace . Click on Settings & Members in the left-sidebar. Select Integrations and click on Develop your own integrations . Click on the + New integration button or the Create new integration card. Enter a name for your app in the Name field. Select a workspace to install the integration from the Associated workspace dropdown list. Click on the Submit button. Click on Show next to the Internal Integration Token field. Click on Copy to copy the displayed token. Enter the name for your credentials in the Credentials Name field in the 'Notion API' credentials in n8n. Paste the token in the API Key field in the 'Notion API' credentials in n8n. Click on the Create button to create your credentials. Note: Share the specific pages with the app for those pages to be accessed using the API. The following video demonstrates the steps mentioned above.","title":"Notion"},{"location":"integrations/credentials/notion/#notion","text":"You can use these credentials to authenticate the following nodes with Notion. - Notion - Notion Trigger","title":"Notion"},{"location":"integrations/credentials/notion/#prerequisites","text":"Create a Notion account.","title":"Prerequisites"},{"location":"integrations/credentials/notion/#using-api-key","text":"Open your Notion workspace . Click on Settings & Members in the left-sidebar. Select Integrations and click on Develop your own integrations . Click on the + New integration button or the Create new integration card. Enter a name for your app in the Name field. Select a workspace to install the integration from the Associated workspace dropdown list. Click on the Submit button. Click on Show next to the Internal Integration Token field. Click on Copy to copy the displayed token. Enter the name for your credentials in the Credentials Name field in the 'Notion API' credentials in n8n. Paste the token in the API Key field in the 'Notion API' credentials in n8n. Click on the Create button to create your credentials. Note: Share the specific pages with the app for those pages to be accessed using the API. The following video demonstrates the steps mentioned above.","title":"Using API Key"},{"location":"integrations/credentials/odoo/","text":"Odoo credentials # You can use these credentials to authenticate the following nodes with Odoo: Odoo Sign up for Odoo and create an API key or password. Refer to Odoo's documentation for more information: External API . Note that some Odoo modules and settings require API keys, not passwords. In n8n, create a new credential. You can either: Click Credentials > New , then search for Odoo API . After selecting Odoo API , click Continue . In an Odoo node, click the Credential for Odoo API dropdown, then click Create new . Enter your Odoo information: Site URL : the domain of your Odoo instance. Username : username as displayed on the user's Change password screen in Odoo. Database name : the name of the Odoo instance. Password or API key : the credential you created in step one. Click Save . n8n tests the key to check it can connect to Odoo.","title":"Odoo credentials"},{"location":"integrations/credentials/odoo/#odoo-credentials","text":"You can use these credentials to authenticate the following nodes with Odoo: Odoo Sign up for Odoo and create an API key or password. Refer to Odoo's documentation for more information: External API . Note that some Odoo modules and settings require API keys, not passwords. In n8n, create a new credential. You can either: Click Credentials > New , then search for Odoo API . After selecting Odoo API , click Continue . In an Odoo node, click the Credential for Odoo API dropdown, then click Create new . Enter your Odoo information: Site URL : the domain of your Odoo instance. Username : username as displayed on the user's Change password screen in Odoo. Database name : the name of the Odoo instance. Password or API key : the credential you created in step one. Click Save . n8n tests the key to check it can connect to Odoo.","title":"Odoo credentials"},{"location":"integrations/credentials/oneSimpleApi/","text":"One Simple API # You can use these credentials to authenticate the following nodes with Nextcloud. - One Simple API Prerequisites # Create a One Simple API account. Using an API Token # Log in to your One Simple API account. Create a new API token on the API Tokens page. Check the required permissions for your new API token. Click the Create button. Copy the API token provided by One Simple API. Paste the API token into the API Token field of n8n. Click the Save button.","title":"One Simple API"},{"location":"integrations/credentials/oneSimpleApi/#one-simple-api","text":"You can use these credentials to authenticate the following nodes with Nextcloud. - One Simple API","title":"One Simple API"},{"location":"integrations/credentials/oneSimpleApi/#prerequisites","text":"Create a One Simple API account.","title":"Prerequisites"},{"location":"integrations/credentials/oneSimpleApi/#using-an-api-token","text":"Log in to your One Simple API account. Create a new API token on the API Tokens page. Check the required permissions for your new API token. Click the Create button. Copy the API token provided by One Simple API. Paste the API token into the API Token field of n8n. Click the Save button.","title":"Using an API Token"},{"location":"integrations/credentials/onfleet/","text":"Onfleet credentials # You can use these credentials to authenticate the following nodes with Onfleet: Onfleet Onfleet Trigger Sign up for Onfleet and create an API key. Refer to Onfleet's documentation for more information: Creating an API key Getting started with the Onfleet API In n8n, create a new credential. You can either: Click Credentials > New , then search for Onfleet API . After selecting Onfleet API , click Continue . In an Onfleet node, click the Credential for Onfleet API dropdown, then click Create new . In the Onfleet account modal, paste your Onfleet API key into API key . By default, this credential is available to both the Onfleet and Onfleet Trigger nodes. You can change this using the settings on the Details tab. After entering the key and editing the credential details, click Save . n8n tests the key to check it can connect to Onfleet.","title":"Onfleet credentials"},{"location":"integrations/credentials/onfleet/#onfleet-credentials","text":"You can use these credentials to authenticate the following nodes with Onfleet: Onfleet Onfleet Trigger Sign up for Onfleet and create an API key. Refer to Onfleet's documentation for more information: Creating an API key Getting started with the Onfleet API In n8n, create a new credential. You can either: Click Credentials > New , then search for Onfleet API . After selecting Onfleet API , click Continue . In an Onfleet node, click the Credential for Onfleet API dropdown, then click Create new . In the Onfleet account modal, paste your Onfleet API key into API key . By default, this credential is available to both the Onfleet and Onfleet Trigger nodes. You can change this using the settings on the Details tab. After entering the key and editing the credential details, click Save . n8n tests the key to check it can connect to Onfleet.","title":"Onfleet credentials"},{"location":"integrations/credentials/openWeatherMap/","text":"OpenWeatherMap # You can use these credentials to authenticate the following nodes with OpenWeatherMap. - OpenWeatherMap Prerequisites # Create a OpenWeatherMap account. Using Access Token # Access your OpenWeatherMap account page . In the 'Create key' section, type a name and click on the Generate button. Copy the API Key that you just generated. Use this API key with your OpenWeatherMap API node credentials in n8n.","title":"OpenWeatherMap"},{"location":"integrations/credentials/openWeatherMap/#openweathermap","text":"You can use these credentials to authenticate the following nodes with OpenWeatherMap. - OpenWeatherMap","title":"OpenWeatherMap"},{"location":"integrations/credentials/openWeatherMap/#prerequisites","text":"Create a OpenWeatherMap account.","title":"Prerequisites"},{"location":"integrations/credentials/openWeatherMap/#using-access-token","text":"Access your OpenWeatherMap account page . In the 'Create key' section, type a name and click on the Generate button. Copy the API Key that you just generated. Use this API key with your OpenWeatherMap API node credentials in n8n.","title":"Using Access Token"},{"location":"integrations/credentials/orbit/","text":"Orbit # You can use these credentials to authenticate the following nodes with Orbit. - Orbit Prerequisites # Create an Orbit account. Using API Token # Access the Account Settings page . Scroll down to the API Token section. Click on the Copy button to copy the API Token. Use this API Token in with your Orbit node credentials in n8n. Further Reference # Orbit API Documentation","title":"Orbit"},{"location":"integrations/credentials/orbit/#orbit","text":"You can use these credentials to authenticate the following nodes with Orbit. - Orbit","title":"Orbit"},{"location":"integrations/credentials/orbit/#prerequisites","text":"Create an Orbit account.","title":"Prerequisites"},{"location":"integrations/credentials/orbit/#using-api-token","text":"Access the Account Settings page . Scroll down to the API Token section. Click on the Copy button to copy the API Token. Use this API Token in with your Orbit node credentials in n8n.","title":"Using API Token"},{"location":"integrations/credentials/orbit/#further-reference","text":"Orbit API Documentation","title":"Further Reference"},{"location":"integrations/credentials/oura/","text":"Oura # You can use these credentials to authenticate the following nodes with Oura. - Oura Prerequisites # Create a Oura account. Using Access Token # Open the Personal Access Tokens page. On the top-right corner of the page, click on the Create A New Personal Access Token button. Enter a note for the new Personal Access Token you are about to generate. Click on the Create Personal Access Token to create the Personal Access Token. Copy the displayed Personal Access Token. Enter a name for your credentials in the Credentials Name field in the 'Oura API' credentials in n8n. Paste the Personal Access Token in the Personal Access Token field in the 'Oura API' credentials in n8n. Click on the Create button to create your credentials. Oura API Documentation","title":"Oura"},{"location":"integrations/credentials/oura/#oura","text":"You can use these credentials to authenticate the following nodes with Oura. - Oura","title":"Oura"},{"location":"integrations/credentials/oura/#prerequisites","text":"Create a Oura account.","title":"Prerequisites"},{"location":"integrations/credentials/oura/#using-access-token","text":"Open the Personal Access Tokens page. On the top-right corner of the page, click on the Create A New Personal Access Token button. Enter a note for the new Personal Access Token you are about to generate. Click on the Create Personal Access Token to create the Personal Access Token. Copy the displayed Personal Access Token. Enter a name for your credentials in the Credentials Name field in the 'Oura API' credentials in n8n. Paste the Personal Access Token in the Personal Access Token field in the 'Oura API' credentials in n8n. Click on the Create button to create your credentials. Oura API Documentation","title":"Using Access Token"},{"location":"integrations/credentials/paddle/","text":"Paddle # You can use these credentials to authenticate the following nodes with Paddle. - Paddle Prerequisites # Create a Paddle account. Using Access Token # Open your Paddle dashboard. Open the Developer Tools dropdown list in the sidebar and select Authentication . Enter a name and description in the Generate Auth Code section and click on Generate Key . Click on the Reveal Auth Code button to reveal the access token. Use the displayed vendor_id and Auth Code with your Paddle API credentials in n8n. Click on the Save button to save your credentials.","title":"Paddle"},{"location":"integrations/credentials/paddle/#paddle","text":"You can use these credentials to authenticate the following nodes with Paddle. - Paddle","title":"Paddle"},{"location":"integrations/credentials/paddle/#prerequisites","text":"Create a Paddle account.","title":"Prerequisites"},{"location":"integrations/credentials/paddle/#using-access-token","text":"Open your Paddle dashboard. Open the Developer Tools dropdown list in the sidebar and select Authentication . Enter a name and description in the Generate Auth Code section and click on Generate Key . Click on the Reveal Auth Code button to reveal the access token. Use the displayed vendor_id and Auth Code with your Paddle API credentials in n8n. Click on the Save button to save your credentials.","title":"Using Access Token"},{"location":"integrations/credentials/pagerDuty/","text":"PagerDuty # You can use these credentials to authenticate the following nodes with PagerDuty. - PagerDuty Prerequisites # Create a PagerDuty account. Using OAuth # \u26c5\ufe0f Note for n8n.cloud users You'll only need to enter the Credentials Name and click on the circle button in the OAuth section to connect your PagerDuty account to n8n. Access your PagerDuty dashboard. Select 'Developer Mode' from the number pad icon in the top right. Click on the Create New App button. Enter a name in the App Name field, and a description in the Brief Description field. Select 'Infrastructure Automation' from the Category dropdown list. Choose the appropriate option for the publication of your app and click on the Save button. Click on the Add button in the 'OAuth 2.0' section. Copy the 'OAuth Callback URL' provided in the 'PagerDuty OAuth2 API' credentials in n8n and paste it in the Redirect URL field in the PagerDuty app creation page. Use the provided Client ID and Client Secret with your PagerDuty OAuth2 API credentials in n8n. Select 'Read/Write' from the Set Permission Scopes dropdown list and then click on Save . Click on the circle button in the OAuth section of n8n to connect a PagerDuty account to n8n. Click on the Save button to save your credentials. Using Access Token # Access your PagerDuty dashboard. Click on configuration. Click on API access. Create a new API key. Use this API key with your PagerDuty node credentials in n8n.","title":"PagerDuty"},{"location":"integrations/credentials/pagerDuty/#pagerduty","text":"You can use these credentials to authenticate the following nodes with PagerDuty. - PagerDuty","title":"PagerDuty"},{"location":"integrations/credentials/pagerDuty/#prerequisites","text":"Create a PagerDuty account.","title":"Prerequisites"},{"location":"integrations/credentials/pagerDuty/#using-oauth","text":"\u26c5\ufe0f Note for n8n.cloud users You'll only need to enter the Credentials Name and click on the circle button in the OAuth section to connect your PagerDuty account to n8n. Access your PagerDuty dashboard. Select 'Developer Mode' from the number pad icon in the top right. Click on the Create New App button. Enter a name in the App Name field, and a description in the Brief Description field. Select 'Infrastructure Automation' from the Category dropdown list. Choose the appropriate option for the publication of your app and click on the Save button. Click on the Add button in the 'OAuth 2.0' section. Copy the 'OAuth Callback URL' provided in the 'PagerDuty OAuth2 API' credentials in n8n and paste it in the Redirect URL field in the PagerDuty app creation page. Use the provided Client ID and Client Secret with your PagerDuty OAuth2 API credentials in n8n. Select 'Read/Write' from the Set Permission Scopes dropdown list and then click on Save . Click on the circle button in the OAuth section of n8n to connect a PagerDuty account to n8n. Click on the Save button to save your credentials.","title":"Using OAuth"},{"location":"integrations/credentials/pagerDuty/#using-access-token","text":"Access your PagerDuty dashboard. Click on configuration. Click on API access. Create a new API key. Use this API key with your PagerDuty node credentials in n8n.","title":"Using Access Token"},{"location":"integrations/credentials/payPal/","text":"PayPal # You can use these credentials to authenticate the following nodes with PayPal. - PayPal - PayPal Trigger Prerequisites # Create a PayPal account. Using OAuth # Access your PayPal dashboard . Click on Log in to Dashboard . Enter your PayPal account credentials. In the section 'REST API apps', click on Create app . Enter a name for your app in App Name and click on Create App . Return to n8n and enter the Client ID and Client Secret in your PayPal API credentials. Choose the environment: sandbox or live.","title":"PayPal"},{"location":"integrations/credentials/payPal/#paypal","text":"You can use these credentials to authenticate the following nodes with PayPal. - PayPal - PayPal Trigger","title":"PayPal"},{"location":"integrations/credentials/payPal/#prerequisites","text":"Create a PayPal account.","title":"Prerequisites"},{"location":"integrations/credentials/payPal/#using-oauth","text":"Access your PayPal dashboard . Click on Log in to Dashboard . Enter your PayPal account credentials. In the section 'REST API apps', click on Create app . Enter a name for your app in App Name and click on Create App . Return to n8n and enter the Client ID and Client Secret in your PayPal API credentials. Choose the environment: sandbox or live.","title":"Using OAuth"},{"location":"integrations/credentials/peekalink/","text":"Peekalink # You can use these credentials to authenticate the following nodes with Peekalink. - Peekalink Prerequisites # Create a Peekalink account. Using API Key # Open your Peekalink dashboard. Copy the API key displayed under the Your API Key section. Enter a name for your credentials in the Credentials Name field in the 'Peekalink API' credentials in n8n. Paste the API key in the API Key field in the 'Peekalink API' credentials in n8n. Click on the Create button to create your credentials. The following video demonstrates the steps mentioned above.","title":"Peekalink"},{"location":"integrations/credentials/peekalink/#peekalink","text":"You can use these credentials to authenticate the following nodes with Peekalink. - Peekalink","title":"Peekalink"},{"location":"integrations/credentials/peekalink/#prerequisites","text":"Create a Peekalink account.","title":"Prerequisites"},{"location":"integrations/credentials/peekalink/#using-api-key","text":"Open your Peekalink dashboard. Copy the API key displayed under the Your API Key section. Enter a name for your credentials in the Credentials Name field in the 'Peekalink API' credentials in n8n. Paste the API key in the API Key field in the 'Peekalink API' credentials in n8n. Click on the Create button to create your credentials. The following video demonstrates the steps mentioned above.","title":"Using API Key"},{"location":"integrations/credentials/phantombuster/","text":"Phantombuster # You can use these credentials to authenticate the following nodes with Phantombuster. - Phantombuster Prerequisites # Create a Phantombuster account. Using API # Access your Phantombuster dashboard. Click on your name on the top right and select 'Org settings'. Scroll down to the Third party API keys section. Click on the + Add third party API key button. Use this API Key with your Phantombuster node credentials in n8n.","title":"Phantombuster"},{"location":"integrations/credentials/phantombuster/#phantombuster","text":"You can use these credentials to authenticate the following nodes with Phantombuster. - Phantombuster","title":"Phantombuster"},{"location":"integrations/credentials/phantombuster/#prerequisites","text":"Create a Phantombuster account.","title":"Prerequisites"},{"location":"integrations/credentials/phantombuster/#using-api","text":"Access your Phantombuster dashboard. Click on your name on the top right and select 'Org settings'. Scroll down to the Third party API keys section. Click on the + Add third party API key button. Use this API Key with your Phantombuster node credentials in n8n.","title":"Using API"},{"location":"integrations/credentials/philipsHue/","text":"Philips Hue # You can use these credentials to authenticate the following nodes with Philips Hue. - Philips Hue Prerequisites # Create a Philips Hue Developer account. Using OAuth # Access the Add new Hue Remote API app page. Enter a name in the App name field. Enter a description in the Application description field. Copy the 'OAuth Callback URL' provided in the Philips Hue OAuth2 API credentials in n8n and paste it in the Callback URL field in the Add new Hue Remote API app page. Click on the Submit button. Click on the AppId to reveal the credentials. Use the displayed AppId , ClientId and the ClientSecret with your Philips Hue OAuth2 API credentials in n8n. Click on the circle button in the OAuth section to connect a Philips Hue account to n8n. Click the Save button to save your credentials in n8n.","title":"Philips Hue"},{"location":"integrations/credentials/philipsHue/#philips-hue","text":"You can use these credentials to authenticate the following nodes with Philips Hue. - Philips Hue","title":"Philips Hue"},{"location":"integrations/credentials/philipsHue/#prerequisites","text":"Create a Philips Hue Developer account.","title":"Prerequisites"},{"location":"integrations/credentials/philipsHue/#using-oauth","text":"Access the Add new Hue Remote API app page. Enter a name in the App name field. Enter a description in the Application description field. Copy the 'OAuth Callback URL' provided in the Philips Hue OAuth2 API credentials in n8n and paste it in the Callback URL field in the Add new Hue Remote API app page. Click on the Submit button. Click on the AppId to reveal the credentials. Use the displayed AppId , ClientId and the ClientSecret with your Philips Hue OAuth2 API credentials in n8n. Click on the circle button in the OAuth section to connect a Philips Hue account to n8n. Click the Save button to save your credentials in n8n.","title":"Using OAuth"},{"location":"integrations/credentials/pipedrive/","text":"Pipedrive # You can use these credentials to authenticate the following nodes with Pipedrive. - Pipedrive - Pipedrive Trigger Prerequisites # Create a Pipedrive account. Using OAuth # Create a Developer Sandbox Account . Open your Pipedrive Dashboard. Click on your user profile in the top right and select 'Tools and integrations' from the dropdown list. From the sidebar under the Tools section, select 'Marketplace manager'. Click on the Create new app button. Select either 'Yes' or 'No' when asked if you would like to publish your app on the Pipedrive marketplace. Click on the Next button. Enter the name of the app in the App name field. Copy the 'OAuth Callback URL' provided in the 'Pipedrive OAuth2 API' credentials in n8n. On the Pipedrive app creation page, scroll down to the OAuth & Access scopes section and paste the URL in the Callback URL field. Based on your use-case, select the scopes from the Access scopes section. Scroll up and click on the Save button on the top. Select your app from the 'Marketplace manager' Scroll down to OAuth & Access scopes section and copy the Client ID . Enter the name for your credentials in the Credentials Name field in the 'Pipedrive OAuth2 API' credentials in n8n. Paste the client ID in the Client ID field in the 'Pipedrive OAuth2 API' credentials in n8n. On the Pipedrive application page, click on the Show button next to Client Secret . Copy the Client Secret . Paste the client secret in the Client Secret field in the 'Pipedrive OAuth2 API' credentials in n8n. Click on the circle button in the OAuth section to connect a Pipedrive account to n8n. Click on the Save button to save your credentials. The following video demonstrates the steps mentioned above. Using API Token # Open your Pipedrive Dashboard. Click on your user profile in the top right. Select 'Personal preferences' from the dropdown list. Click on the API tab. Click on the Copy button to copy the API Token. Enter the name for your credentials in the Credentials Name field in the 'Pipedrive API' credentials in n8n. Paste the API token in the API Token field in the 'Pipedrive API' credentials in n8n. Click on the Create button to save your credentials. The following video demonstrates the steps mentioned above.","title":"Pipedrive"},{"location":"integrations/credentials/pipedrive/#pipedrive","text":"You can use these credentials to authenticate the following nodes with Pipedrive. - Pipedrive - Pipedrive Trigger","title":"Pipedrive"},{"location":"integrations/credentials/pipedrive/#prerequisites","text":"Create a Pipedrive account.","title":"Prerequisites"},{"location":"integrations/credentials/pipedrive/#using-oauth","text":"Create a Developer Sandbox Account . Open your Pipedrive Dashboard. Click on your user profile in the top right and select 'Tools and integrations' from the dropdown list. From the sidebar under the Tools section, select 'Marketplace manager'. Click on the Create new app button. Select either 'Yes' or 'No' when asked if you would like to publish your app on the Pipedrive marketplace. Click on the Next button. Enter the name of the app in the App name field. Copy the 'OAuth Callback URL' provided in the 'Pipedrive OAuth2 API' credentials in n8n. On the Pipedrive app creation page, scroll down to the OAuth & Access scopes section and paste the URL in the Callback URL field. Based on your use-case, select the scopes from the Access scopes section. Scroll up and click on the Save button on the top. Select your app from the 'Marketplace manager' Scroll down to OAuth & Access scopes section and copy the Client ID . Enter the name for your credentials in the Credentials Name field in the 'Pipedrive OAuth2 API' credentials in n8n. Paste the client ID in the Client ID field in the 'Pipedrive OAuth2 API' credentials in n8n. On the Pipedrive application page, click on the Show button next to Client Secret . Copy the Client Secret . Paste the client secret in the Client Secret field in the 'Pipedrive OAuth2 API' credentials in n8n. Click on the circle button in the OAuth section to connect a Pipedrive account to n8n. Click on the Save button to save your credentials. The following video demonstrates the steps mentioned above.","title":"Using OAuth"},{"location":"integrations/credentials/pipedrive/#using-api-token","text":"Open your Pipedrive Dashboard. Click on your user profile in the top right. Select 'Personal preferences' from the dropdown list. Click on the API tab. Click on the Copy button to copy the API Token. Enter the name for your credentials in the Credentials Name field in the 'Pipedrive API' credentials in n8n. Paste the API token in the API Token field in the 'Pipedrive API' credentials in n8n. Click on the Create button to save your credentials. The following video demonstrates the steps mentioned above.","title":"Using API Token"},{"location":"integrations/credentials/plivo/","text":"Plivo # You can use these credentials to authenticate the following nodes with Plivo. - Plivo Prerequisites # Create a Plivo account. Using Access Token # Open your Plivo console . Copy the displayed Auth ID under the Account and Payments section. Enter a name for your credentials in the Credentials Name field in the 'Plivo API' credentials in n8n. Paste the Auth ID in the Auth ID field in the 'Plivo API' credentials in n8n. Copy the Auth Token displayed on your Plivo console. Paste the Auth Token in the Auth Token field in the 'Plivo API' credentials in n8n. Click on the Create button to create your credentials. The following video demonstrates the steps mentioned above.","title":"Plivo"},{"location":"integrations/credentials/plivo/#plivo","text":"You can use these credentials to authenticate the following nodes with Plivo. - Plivo","title":"Plivo"},{"location":"integrations/credentials/plivo/#prerequisites","text":"Create a Plivo account.","title":"Prerequisites"},{"location":"integrations/credentials/plivo/#using-access-token","text":"Open your Plivo console . Copy the displayed Auth ID under the Account and Payments section. Enter a name for your credentials in the Credentials Name field in the 'Plivo API' credentials in n8n. Paste the Auth ID in the Auth ID field in the 'Plivo API' credentials in n8n. Copy the Auth Token displayed on your Plivo console. Paste the Auth Token in the Auth Token field in the 'Plivo API' credentials in n8n. Click on the Create button to create your credentials. The following video demonstrates the steps mentioned above.","title":"Using Access Token"},{"location":"integrations/credentials/postHog/","text":"PostHog # You can use these credentials to authenticate the following nodes with PostHog. - PostHog Prerequisites # Create a PostHog account or host PostHog on your server. Using API Key # Open your PostHog dashboard. Click on Project on the left sidebar. Click on the Safety & Privacy tab. Scroll down to the Project API Key section and copy the displayed API key. Enter a name for your credentials in the Credentials Name field in the 'PostHog API' credentials in n8n. If you're hosting PostHog on your own server, update the URL of your PostHog instance in the URL field. Paste the API key in the API Key field in the 'PostHog API' credentials in n8n. Click on the Create button to create your credentials. The following video demonstrates the steps mentioned above.","title":"PostHog"},{"location":"integrations/credentials/postHog/#posthog","text":"You can use these credentials to authenticate the following nodes with PostHog. - PostHog","title":"PostHog"},{"location":"integrations/credentials/postHog/#prerequisites","text":"Create a PostHog account or host PostHog on your server.","title":"Prerequisites"},{"location":"integrations/credentials/postHog/#using-api-key","text":"Open your PostHog dashboard. Click on Project on the left sidebar. Click on the Safety & Privacy tab. Scroll down to the Project API Key section and copy the displayed API key. Enter a name for your credentials in the Credentials Name field in the 'PostHog API' credentials in n8n. If you're hosting PostHog on your own server, update the URL of your PostHog instance in the URL field. Paste the API key in the API Key field in the 'PostHog API' credentials in n8n. Click on the Create button to create your credentials. The following video demonstrates the steps mentioned above.","title":"Using API Key"},{"location":"integrations/credentials/postgres/","text":"Postgres # You can use these credentials to authenticate the following nodes with Postgres. - Postgres Prerequisites # Create an user account on a Postgres server. Using Database Connection # Retrieve your Postgres credentials and connection parameters. Use the credentials and connection parameters with your Postgres node credentials in n8n.","title":"Postgres"},{"location":"integrations/credentials/postgres/#postgres","text":"You can use these credentials to authenticate the following nodes with Postgres. - Postgres","title":"Postgres"},{"location":"integrations/credentials/postgres/#prerequisites","text":"Create an user account on a Postgres server.","title":"Prerequisites"},{"location":"integrations/credentials/postgres/#using-database-connection","text":"Retrieve your Postgres credentials and connection parameters. Use the credentials and connection parameters with your Postgres node credentials in n8n.","title":"Using Database Connection"},{"location":"integrations/credentials/postmark/","text":"Postmark # You can use these credentials to authenticate the following nodes with Postmark. - Postmark Trigger Prerequisites # Create a Postmark account. Using Access Token # Access the Postmark API Tokens page . Enter your postmark server name in the Search for a server field. From the displayed dropdown list, select your server and click on the Get a server API token button. Use the displayed Server API token with your Postmark API credentials in n8n. Click the Save button to save your credentials in n8n.","title":"Postmark"},{"location":"integrations/credentials/postmark/#postmark","text":"You can use these credentials to authenticate the following nodes with Postmark. - Postmark Trigger","title":"Postmark"},{"location":"integrations/credentials/postmark/#prerequisites","text":"Create a Postmark account.","title":"Prerequisites"},{"location":"integrations/credentials/postmark/#using-access-token","text":"Access the Postmark API Tokens page . Enter your postmark server name in the Search for a server field. From the displayed dropdown list, select your server and click on the Get a server API token button. Use the displayed Server API token with your Postmark API credentials in n8n. Click the Save button to save your credentials in n8n.","title":"Using Access Token"},{"location":"integrations/credentials/profitWell/","text":"ProfitWell # You can use these credentials to authenticate the following nodes with ProfitWell. - ProfitWell Prerequisites # Create a ProfitWell account. Using API # Access the ProfitWell dashboard page. Click on the gears icon on the left panel and select 'Integrations'. Click on the API KEYS/DEV KIT tab. Copy the YOUR PRIVATE KEY displayed. Use this Private Key with your ProfitWell node credentials in n8n.","title":"ProfitWell"},{"location":"integrations/credentials/profitWell/#profitwell","text":"You can use these credentials to authenticate the following nodes with ProfitWell. - ProfitWell","title":"ProfitWell"},{"location":"integrations/credentials/profitWell/#prerequisites","text":"Create a ProfitWell account.","title":"Prerequisites"},{"location":"integrations/credentials/profitWell/#using-api","text":"Access the ProfitWell dashboard page. Click on the gears icon on the left panel and select 'Integrations'. Click on the API KEYS/DEV KIT tab. Copy the YOUR PRIVATE KEY displayed. Use this Private Key with your ProfitWell node credentials in n8n.","title":"Using API"},{"location":"integrations/credentials/pushbullet/","text":"Pushbullet # You can use these credentials to authenticate the following nodes with Pushbullet. - Pushbullet Prerequisites # Create a Pushbullet account. Using OAuth # Access the create client page. Enter an app name in the name field. Copy your OAuth Callback URL from the 'Create New Credentials' screen in n8n and paste it in the redirect_uri field. Click on the Add A New OAuth Client button. Use the provided client_id and client_secret with your Pushbullet OAuth2 API credentials in n8n. Click the Connect my account button to connect to Pushbullet and save your credentials in n8n. Pushbullet OAuth Test Link Pushbullet does offer a test link during the client creation process described above. This link is not compatible with n8n. In order to verify the authentication works, simply use the Connect my account button in n8n.","title":"Pushbullet"},{"location":"integrations/credentials/pushbullet/#pushbullet","text":"You can use these credentials to authenticate the following nodes with Pushbullet. - Pushbullet","title":"Pushbullet"},{"location":"integrations/credentials/pushbullet/#prerequisites","text":"Create a Pushbullet account.","title":"Prerequisites"},{"location":"integrations/credentials/pushbullet/#using-oauth","text":"Access the create client page. Enter an app name in the name field. Copy your OAuth Callback URL from the 'Create New Credentials' screen in n8n and paste it in the redirect_uri field. Click on the Add A New OAuth Client button. Use the provided client_id and client_secret with your Pushbullet OAuth2 API credentials in n8n. Click the Connect my account button to connect to Pushbullet and save your credentials in n8n. Pushbullet OAuth Test Link Pushbullet does offer a test link during the client creation process described above. This link is not compatible with n8n. In order to verify the authentication works, simply use the Connect my account button in n8n.","title":"Using OAuth"},{"location":"integrations/credentials/pushcut/","text":"Pushcut # You can use these credentials to authenticate the following nodes with Pushcut. - Pushcut - Pushcut Trigger Prerequisites # Download the Pushcut app. Using API Key # Access the Pushcut application on your device. Click on the Account button. Click on the Add API Key under the INTEGRATIONS section. Click on the Generate button. Use the API Key with your Pushcut node credentials in n8n.","title":"Pushcut"},{"location":"integrations/credentials/pushcut/#pushcut","text":"You can use these credentials to authenticate the following nodes with Pushcut. - Pushcut - Pushcut Trigger","title":"Pushcut"},{"location":"integrations/credentials/pushcut/#prerequisites","text":"Download the Pushcut app.","title":"Prerequisites"},{"location":"integrations/credentials/pushcut/#using-api-key","text":"Access the Pushcut application on your device. Click on the Account button. Click on the Add API Key under the INTEGRATIONS section. Click on the Generate button. Use the API Key with your Pushcut node credentials in n8n.","title":"Using API Key"},{"location":"integrations/credentials/pushover/","text":"Pushover # You can use these credentials to authenticate the following nodes with Pushover. - Pushover Prerequisites # Create a Pushover account. Using API Key # Access the Pushover dashboard . Scroll down to the bottom and click on Create an Application/API Token . Enter the name of your application in the Name field. Read the 'Terms of Services' and the 'Guide to Being Friendly to our API' and, if you agree to them, check the checkbox. Click on the Create Application button. Use this API Key with your Pushover node credentials in n8n.","title":"Pushover"},{"location":"integrations/credentials/pushover/#pushover","text":"You can use these credentials to authenticate the following nodes with Pushover. - Pushover","title":"Pushover"},{"location":"integrations/credentials/pushover/#prerequisites","text":"Create a Pushover account.","title":"Prerequisites"},{"location":"integrations/credentials/pushover/#using-api-key","text":"Access the Pushover dashboard . Scroll down to the bottom and click on Create an Application/API Token . Enter the name of your application in the Name field. Read the 'Terms of Services' and the 'Guide to Being Friendly to our API' and, if you agree to them, check the checkbox. Click on the Create Application button. Use this API Key with your Pushover node credentials in n8n.","title":"Using API Key"},{"location":"integrations/credentials/questDb/","text":"QuestDB # You can use these credentials to authenticate the following nodes with QuestDB. - QuestDB Prerequisites # An available instance of QuestDB. Using Database Connection # Retrieve your QuestDB credentials and connection parameters. Use the credentials and connection parameters with your QuestDB node credentials in n8n.","title":"QuestDB"},{"location":"integrations/credentials/questDb/#questdb","text":"You can use these credentials to authenticate the following nodes with QuestDB. - QuestDB","title":"QuestDB"},{"location":"integrations/credentials/questDb/#prerequisites","text":"An available instance of QuestDB.","title":"Prerequisites"},{"location":"integrations/credentials/questDb/#using-database-connection","text":"Retrieve your QuestDB credentials and connection parameters. Use the credentials and connection parameters with your QuestDB node credentials in n8n.","title":"Using Database Connection"},{"location":"integrations/credentials/quickbase/","text":"Quick Base # You can use these credentials to authenticate the following nodes with Quick Base. - Quick Base Prerequisites # Create a Quick Base account. Using API # Access your Quick Base dashboard. Click on your name on the top right and select 'My preferences' from the dropdown list. Click on Manage my user tokens under the My User Information section. Click on the + New user token button. Enter a name in the Name field. Select an app from the Assign token to apps dropdown list. Click on the Save button. Copy the string of characters located between https:// and /db in your Quick Base URL. This string is the hostname. Use this Hostname and User Token with your Quick Base node credentials in n8n. Further Reference # Quick Base API Portal","title":"Quick Base"},{"location":"integrations/credentials/quickbase/#quick-base","text":"You can use these credentials to authenticate the following nodes with Quick Base. - Quick Base","title":"Quick Base"},{"location":"integrations/credentials/quickbase/#prerequisites","text":"Create a Quick Base account.","title":"Prerequisites"},{"location":"integrations/credentials/quickbase/#using-api","text":"Access your Quick Base dashboard. Click on your name on the top right and select 'My preferences' from the dropdown list. Click on Manage my user tokens under the My User Information section. Click on the + New user token button. Enter a name in the Name field. Select an app from the Assign token to apps dropdown list. Click on the Save button. Copy the string of characters located between https:// and /db in your Quick Base URL. This string is the hostname. Use this Hostname and User Token with your Quick Base node credentials in n8n.","title":"Using API"},{"location":"integrations/credentials/quickbase/#further-reference","text":"Quick Base API Portal","title":"Further Reference"},{"location":"integrations/credentials/quickbooks/","text":"QuickBooks # You can use these credentials to authenticate the following nodes with QuickBooks. - QuickBooks Prerequisites # Create a Intuit developer account. Using OAuth # Open the Intuit Developer dashboard page. Click on the + Create an app button. Select the QuickBooks Online and Payments platform. Enter the name of the app in the What's your app name? field. Select the required scopes under the Select Scope section. Click on the Create app button. Click on Keys & OAuth under the Development section. Scroll down to the Redirect URIs section and click on the Add URI button. Copy the 'OAuth Callback URL' provided in the 'QuickBooks OAuth2 API' credentials in n8n. Paste the URL in the Link field. Click on the Save button. Copy the displayed Client ID . Enter a name for your credentials in the Credentials Name field in the 'QuickBooks OAuth2 API' credentials in n8n. Paste the client ID in the Client ID field in the 'QuickBooks OAuth2 API' credentials in n8n. Copy the displayed Client Secret from the Keys page. Paste the client secret in the Client Secret field in the 'QuickBooks OAuth2 API' credentials in n8n. Select 'Sandbox' from the Environment dropdown list in the 'QuickBooks OAuth2 API' credentials in n8n. Click on the circle button in the OAuth section to connect a QuickBooks account to n8n. Click the Save button to save your credentials in n8n. Note: To build the application in production, you will have to fulfill all the requirements mentioned by Intuit. You can learn more on Intuit's documentation . The following video demonstrates the steps mentioned above.","title":"QuickBooks"},{"location":"integrations/credentials/quickbooks/#quickbooks","text":"You can use these credentials to authenticate the following nodes with QuickBooks. - QuickBooks","title":"QuickBooks"},{"location":"integrations/credentials/quickbooks/#prerequisites","text":"Create a Intuit developer account.","title":"Prerequisites"},{"location":"integrations/credentials/quickbooks/#using-oauth","text":"Open the Intuit Developer dashboard page. Click on the + Create an app button. Select the QuickBooks Online and Payments platform. Enter the name of the app in the What's your app name? field. Select the required scopes under the Select Scope section. Click on the Create app button. Click on Keys & OAuth under the Development section. Scroll down to the Redirect URIs section and click on the Add URI button. Copy the 'OAuth Callback URL' provided in the 'QuickBooks OAuth2 API' credentials in n8n. Paste the URL in the Link field. Click on the Save button. Copy the displayed Client ID . Enter a name for your credentials in the Credentials Name field in the 'QuickBooks OAuth2 API' credentials in n8n. Paste the client ID in the Client ID field in the 'QuickBooks OAuth2 API' credentials in n8n. Copy the displayed Client Secret from the Keys page. Paste the client secret in the Client Secret field in the 'QuickBooks OAuth2 API' credentials in n8n. Select 'Sandbox' from the Environment dropdown list in the 'QuickBooks OAuth2 API' credentials in n8n. Click on the circle button in the OAuth section to connect a QuickBooks account to n8n. Click the Save button to save your credentials in n8n. Note: To build the application in production, you will have to fulfill all the requirements mentioned by Intuit. You can learn more on Intuit's documentation . The following video demonstrates the steps mentioned above.","title":"Using OAuth"},{"location":"integrations/credentials/rabbitmq/","text":"RabbitMQ # You can use these credentials to authenticate the following nodes with RabbitMQ. - RabbitMQ - RabbitMQ Trigger Prerequisites # You need to have a RabbitMQ broker installed. Using RabbitMQ # Use your Hostname, Port, Username, Password, and Vhost as the RabbitMQ credential data in n8n.","title":"RabbitMQ"},{"location":"integrations/credentials/rabbitmq/#rabbitmq","text":"You can use these credentials to authenticate the following nodes with RabbitMQ. - RabbitMQ - RabbitMQ Trigger","title":"RabbitMQ"},{"location":"integrations/credentials/rabbitmq/#prerequisites","text":"You need to have a RabbitMQ broker installed.","title":"Prerequisites"},{"location":"integrations/credentials/rabbitmq/#using-rabbitmq","text":"Use your Hostname, Port, Username, Password, and Vhost as the RabbitMQ credential data in n8n.","title":"Using RabbitMQ"},{"location":"integrations/credentials/raindrop/","text":"Raindrop # You can use these credentials to authenticate the following nodes with Raindrop. - Raindrop Prerequisites # Create a Raindrop account. Using OAuth # Open the Raindrop dashboard page. Click on your username on the top left and select 'Settings' from the dropdown list. Click on the Integrations tab. Click on + Create new app under the For Developers section. Enter the name of the app in the Name field. Accept the Raindrop.io API Terms and Guidelines . Click on the Create button. Under the For Developers section, select the app that you created. Enter a description in the Description field. Enter a URL in the Site field. Copy the 'OAuth Callback URL' provided in the 'Raindrop OAuth2 API' credentials in n8n. Paste the URL in the Redirect URI field and click on the Save button. Copy the displayed Client ID . Enter a name for your credentials in the Credentials Name field in the 'Raindrop OAuth2 API' credentials in n8n. Paste the client ID in the Client ID field in the 'Raindrop OAuth2 API' credentials in n8n. Copy the displayed Client secret from the Raindrop. Paste the client secret in the Client Secret field in the 'Raindrop OAuth2 API' credentials in n8n. Click on the circle button in the OAuth section to connect a Raindrop account to n8n. Click the Save button to save your credentials in n8n. The following video demonstrates the steps mentioned above.","title":"Raindrop"},{"location":"integrations/credentials/raindrop/#raindrop","text":"You can use these credentials to authenticate the following nodes with Raindrop. - Raindrop","title":"Raindrop"},{"location":"integrations/credentials/raindrop/#prerequisites","text":"Create a Raindrop account.","title":"Prerequisites"},{"location":"integrations/credentials/raindrop/#using-oauth","text":"Open the Raindrop dashboard page. Click on your username on the top left and select 'Settings' from the dropdown list. Click on the Integrations tab. Click on + Create new app under the For Developers section. Enter the name of the app in the Name field. Accept the Raindrop.io API Terms and Guidelines . Click on the Create button. Under the For Developers section, select the app that you created. Enter a description in the Description field. Enter a URL in the Site field. Copy the 'OAuth Callback URL' provided in the 'Raindrop OAuth2 API' credentials in n8n. Paste the URL in the Redirect URI field and click on the Save button. Copy the displayed Client ID . Enter a name for your credentials in the Credentials Name field in the 'Raindrop OAuth2 API' credentials in n8n. Paste the client ID in the Client ID field in the 'Raindrop OAuth2 API' credentials in n8n. Copy the displayed Client secret from the Raindrop. Paste the client secret in the Client Secret field in the 'Raindrop OAuth2 API' credentials in n8n. Click on the circle button in the OAuth section to connect a Raindrop account to n8n. Click the Save button to save your credentials in n8n. The following video demonstrates the steps mentioned above.","title":"Using OAuth"},{"location":"integrations/credentials/reddit/","text":"Reddit # You can use these credentials to authenticate the following nodes with Reddit. - Reddit Prerequisites # Create a Reddit account. Using OAuth # Open Reddit . Click on your avatar on the top right and select 'User Settings'. Click on the Safety & Privacy tab. Scroll to the bottom and click on Manage third-party app authorization . Click on the are you a developer? create an app... button. Enter the name of your application in the name field. Copy the 'OAuth Callback URL' provided in the 'Reddit OAuth2 API' credentials in n8n. Paste the URL in the redirect uri field. Click on the create app button. Copy the client ID displayed next to the app's icon. Enter a name for your credentials in the Credentials Name field in the 'Reddit OAuth2 API' credentials in n8n. Paste the client ID in the Client ID field in the 'Reddit OAuth2 API' credentials in n8n. Copy the client secret from Reddit and paste it in the Client Secret field in the 'Reddit OAuth2 API' credentials in n8n. Click on the circle button in the OAuth section to connect a Reddit account to n8n. Click on the Save button to save your credentials. The following video demonstrates the steps mentioned above.","title":"Reddit"},{"location":"integrations/credentials/reddit/#reddit","text":"You can use these credentials to authenticate the following nodes with Reddit. - Reddit","title":"Reddit"},{"location":"integrations/credentials/reddit/#prerequisites","text":"Create a Reddit account.","title":"Prerequisites"},{"location":"integrations/credentials/reddit/#using-oauth","text":"Open Reddit . Click on your avatar on the top right and select 'User Settings'. Click on the Safety & Privacy tab. Scroll to the bottom and click on Manage third-party app authorization . Click on the are you a developer? create an app... button. Enter the name of your application in the name field. Copy the 'OAuth Callback URL' provided in the 'Reddit OAuth2 API' credentials in n8n. Paste the URL in the redirect uri field. Click on the create app button. Copy the client ID displayed next to the app's icon. Enter a name for your credentials in the Credentials Name field in the 'Reddit OAuth2 API' credentials in n8n. Paste the client ID in the Client ID field in the 'Reddit OAuth2 API' credentials in n8n. Copy the client secret from Reddit and paste it in the Client Secret field in the 'Reddit OAuth2 API' credentials in n8n. Click on the circle button in the OAuth section to connect a Reddit account to n8n. Click on the Save button to save your credentials. The following video demonstrates the steps mentioned above.","title":"Using OAuth"},{"location":"integrations/credentials/redis/","text":"Redis # You can use these credentials to authenticate the following nodes with Redis. - Redis Prerequisites # Create an user account on a Redis server. Using Database Connection # Retrieve your Redis credentials and connection parameters. Use the credentials and connection parameters with your Redis node credentials in n8n.","title":"Redis"},{"location":"integrations/credentials/redis/#redis","text":"You can use these credentials to authenticate the following nodes with Redis. - Redis","title":"Redis"},{"location":"integrations/credentials/redis/#prerequisites","text":"Create an user account on a Redis server.","title":"Prerequisites"},{"location":"integrations/credentials/redis/#using-database-connection","text":"Retrieve your Redis credentials and connection parameters. Use the credentials and connection parameters with your Redis node credentials in n8n.","title":"Using Database Connection"},{"location":"integrations/credentials/rocketchat/","text":"Rocket.Chat # You can use these credentials to authenticate the following nodes with Rocket.Chat. - Rocket.Chat Prerequisites # Create a Rocket.Chat account. Have the necessary permission create-personal-access-tokens (from administrator) to be able to generate personal access tokens. Using Access Token # Access your Rocket.Chat instance. Click on the profile icon in the top left. Click on My Account. Click on Personal Access Tokens from the panel on the left. Enter a name for your Personal access token and click on the Add button. Copy the Token and enter that in the Auth Key field in n8n. Copy the User Id and enter that in the User Id field in n8n.","title":"Rocket.Chat"},{"location":"integrations/credentials/rocketchat/#rocketchat","text":"You can use these credentials to authenticate the following nodes with Rocket.Chat. - Rocket.Chat","title":"Rocket.Chat"},{"location":"integrations/credentials/rocketchat/#prerequisites","text":"Create a Rocket.Chat account. Have the necessary permission create-personal-access-tokens (from administrator) to be able to generate personal access tokens.","title":"Prerequisites"},{"location":"integrations/credentials/rocketchat/#using-access-token","text":"Access your Rocket.Chat instance. Click on the profile icon in the top left. Click on My Account. Click on Personal Access Tokens from the panel on the left. Enter a name for your Personal access token and click on the Add button. Copy the Token and enter that in the Auth Key field in n8n. Copy the User Id and enter that in the User Id field in n8n.","title":"Using Access Token"},{"location":"integrations/credentials/rundeck/","text":"Rundeck # You can use these credentials to authenticate the following nodes with Rundeck. - Rundeck Prerequisites # Create a Rundeck account. Using Access Token # Access your Rundeck dashboard. Click on your user icon in the top right. Click on 'Profile'. Next to 'User API Tokens', click on the plus button and generate a new token. Click on 'Show Token' to reveal the token you generated. Use the API token with your Rundeck node credentials in n8n.","title":"Rundeck"},{"location":"integrations/credentials/rundeck/#rundeck","text":"You can use these credentials to authenticate the following nodes with Rundeck. - Rundeck","title":"Rundeck"},{"location":"integrations/credentials/rundeck/#prerequisites","text":"Create a Rundeck account.","title":"Prerequisites"},{"location":"integrations/credentials/rundeck/#using-access-token","text":"Access your Rundeck dashboard. Click on your user icon in the top right. Click on 'Profile'. Next to 'User API Tokens', click on the plus button and generate a new token. Click on 'Show Token' to reveal the token you generated. Use the API token with your Rundeck node credentials in n8n.","title":"Using Access Token"},{"location":"integrations/credentials/s3/","text":"S3 # You can use these credentials to authenticate the following nodes with S3. - S3 Prerequisites # Create an account on S3 compatible server. Using Access Token # Retrieve your S3 endpoint, access key ID, and secret access key from your S3 compatible server. Use the S3 endpoint, access key ID, and the secret access key in your S3 node credentials in n8n. Click on the Save button to save your credentials.","title":"S3"},{"location":"integrations/credentials/s3/#s3","text":"You can use these credentials to authenticate the following nodes with S3. - S3","title":"S3"},{"location":"integrations/credentials/s3/#prerequisites","text":"Create an account on S3 compatible server.","title":"Prerequisites"},{"location":"integrations/credentials/s3/#using-access-token","text":"Retrieve your S3 endpoint, access key ID, and secret access key from your S3 compatible server. Use the S3 endpoint, access key ID, and the secret access key in your S3 node credentials in n8n. Click on the Save button to save your credentials.","title":"Using Access Token"},{"location":"integrations/credentials/salesforce/","text":"Salesforce # You can use these credentials to authenticate the following nodes with Salesforce. - Salesforce Prerequisites # Create a Salesforce account. Using OAuth # \u26c5\ufe0f Note for n8n.cloud users You'll only need to enter the Credentials Name, Access Token URL, and click on the circle button in the OAuth section to connect your Salesforce account to n8n. You can find details on how to obtain the Access Token URL in the instructions below. Access your Salesforce Dashboard. Click on the gear icon in the top right and select Setup from the dropdown list. In the Platform Tools category of the sidebar, select App Manager under the Apps section. Click on the New Connected App button. Enter any necessary information and click on the Enable OAuth Settings checkbox. Copy the OAuth Callback URL provided in the 'Salesforce OAuth2 API' credentials in n8n. On the Salesforce app creation page, paste the URL in the Callback URL field. Add the \"Perform requests on your behalf at any time (refresh_token, offline_access)\" scope in the Selected OAuth Scopes section. Add any other scopes you plan to use in the Selected OAuth Scopes section. Click on the Save button at the bottom of the page. On the New Connected App page, click on the Continue button. In the 'API (Enable OAuth Settings)' section of the page, click on the Click to reveal button to reveal the consumer secret. Copy the displayed Consumer Key and the Consumer Secret and use these with your Salesforce OAuth2 API credentials in n8n. In the n8n credentials window select your Environment Type , where Production or Sandbox. Click on the circle button in the OAuth section to connect a Salesforce account to n8n. Click on the Save button to save your credentials. Using OAuth JWT # To use the OAuth JWT authentication method with the Salesforce node you need to create a private key. Follow the instructions mentioned in the documentation here to create a private key. Access your Salesforce Dashboard. Click on the gear icon in the top right and select Setup from the dropdown list. In the Platform Tools category of the sidebar, select App Manager under the Apps section. Click on the New Connected App button. Enter any necessary information and click on the Enable OAuth Settings checkbox. Copy the OAuth Callback URL provided in the 'Salesforce OAuth2 API' credentials in n8n. On the Salesforce app creation page, paste the URL in the Callback URL field. Click on the Use digital signatures checkbox. Upload the private key that you created earlier. Add the \"Perform requests on your behalf at any time (refresh_token, offline_access)\" scope in the Selected OAuth Scopes section. Add any other scopes you plan to use in the Selected OAuth Scopes section. Click on the Save button at the bottom of the page. On the New Connected App page, click on the Continue button. Copy the displayed Consumer Key and paste it in the Client ID field in your Salesforce JWT API credentials in n8n. Use your Salesforce username in the Username field. Copy the private key that you created earlier and paste it in the Private Key field in your Salesforce JWT API credentials in n8n. Click on the Save button to save your credentials.","title":"Salesforce"},{"location":"integrations/credentials/salesforce/#salesforce","text":"You can use these credentials to authenticate the following nodes with Salesforce. - Salesforce","title":"Salesforce"},{"location":"integrations/credentials/salesforce/#prerequisites","text":"Create a Salesforce account.","title":"Prerequisites"},{"location":"integrations/credentials/salesforce/#using-oauth","text":"\u26c5\ufe0f Note for n8n.cloud users You'll only need to enter the Credentials Name, Access Token URL, and click on the circle button in the OAuth section to connect your Salesforce account to n8n. You can find details on how to obtain the Access Token URL in the instructions below. Access your Salesforce Dashboard. Click on the gear icon in the top right and select Setup from the dropdown list. In the Platform Tools category of the sidebar, select App Manager under the Apps section. Click on the New Connected App button. Enter any necessary information and click on the Enable OAuth Settings checkbox. Copy the OAuth Callback URL provided in the 'Salesforce OAuth2 API' credentials in n8n. On the Salesforce app creation page, paste the URL in the Callback URL field. Add the \"Perform requests on your behalf at any time (refresh_token, offline_access)\" scope in the Selected OAuth Scopes section. Add any other scopes you plan to use in the Selected OAuth Scopes section. Click on the Save button at the bottom of the page. On the New Connected App page, click on the Continue button. In the 'API (Enable OAuth Settings)' section of the page, click on the Click to reveal button to reveal the consumer secret. Copy the displayed Consumer Key and the Consumer Secret and use these with your Salesforce OAuth2 API credentials in n8n. In the n8n credentials window select your Environment Type , where Production or Sandbox. Click on the circle button in the OAuth section to connect a Salesforce account to n8n. Click on the Save button to save your credentials.","title":"Using OAuth"},{"location":"integrations/credentials/salesforce/#using-oauth-jwt","text":"To use the OAuth JWT authentication method with the Salesforce node you need to create a private key. Follow the instructions mentioned in the documentation here to create a private key. Access your Salesforce Dashboard. Click on the gear icon in the top right and select Setup from the dropdown list. In the Platform Tools category of the sidebar, select App Manager under the Apps section. Click on the New Connected App button. Enter any necessary information and click on the Enable OAuth Settings checkbox. Copy the OAuth Callback URL provided in the 'Salesforce OAuth2 API' credentials in n8n. On the Salesforce app creation page, paste the URL in the Callback URL field. Click on the Use digital signatures checkbox. Upload the private key that you created earlier. Add the \"Perform requests on your behalf at any time (refresh_token, offline_access)\" scope in the Selected OAuth Scopes section. Add any other scopes you plan to use in the Selected OAuth Scopes section. Click on the Save button at the bottom of the page. On the New Connected App page, click on the Continue button. Copy the displayed Consumer Key and paste it in the Client ID field in your Salesforce JWT API credentials in n8n. Use your Salesforce username in the Username field. Copy the private key that you created earlier and paste it in the Private Key field in your Salesforce JWT API credentials in n8n. Click on the Save button to save your credentials.","title":"Using OAuth JWT"},{"location":"integrations/credentials/salesmate/","text":"Salesmate # You can use these credentials to authenticate the following nodes with Salesmate. - Salesmate Prerequisites # Create a Salesmate account. Using Access Token # Access your Salesmate Dashboard. Click on your user icon in the top right. Click on My Account. Click on Access Key in the left panel. Copy the session key. Use session key and domain name for your Salesmate node credentials in n8n.","title":"Salesmate"},{"location":"integrations/credentials/salesmate/#salesmate","text":"You can use these credentials to authenticate the following nodes with Salesmate. - Salesmate","title":"Salesmate"},{"location":"integrations/credentials/salesmate/#prerequisites","text":"Create a Salesmate account.","title":"Prerequisites"},{"location":"integrations/credentials/salesmate/#using-access-token","text":"Access your Salesmate Dashboard. Click on your user icon in the top right. Click on My Account. Click on Access Key in the left panel. Copy the session key. Use session key and domain name for your Salesmate node credentials in n8n.","title":"Using Access Token"},{"location":"integrations/credentials/seaTable/","text":"SeaTable # You can use these credentials to authenticate the following nodes: SeaTable SeaTable Trigger Prerequisites # You need to have a SeaTable instance or cloud account. Using API key # From your SeaTable dashboard: From the Bases menu select the base you want to enable access for. Navigate to the base options > Advanced > API Token . In the modal, enter a name for this token and select the Read-Write permission. Click Submit and copy the new API token. From n8n: Select your environment type: Cloud-hosted or Self-hosted . For Self-hosted environments enter the domain of your instance. Enter the API token obtained above and click Save to create your credential.","title":"SeaTable"},{"location":"integrations/credentials/seaTable/#seatable","text":"You can use these credentials to authenticate the following nodes: SeaTable SeaTable Trigger","title":"SeaTable"},{"location":"integrations/credentials/seaTable/#prerequisites","text":"You need to have a SeaTable instance or cloud account.","title":"Prerequisites"},{"location":"integrations/credentials/seaTable/#using-api-key","text":"From your SeaTable dashboard: From the Bases menu select the base you want to enable access for. Navigate to the base options > Advanced > API Token . In the modal, enter a name for this token and select the Read-Write permission. Click Submit and copy the new API token. From n8n: Select your environment type: Cloud-hosted or Self-hosted . For Self-hosted environments enter the domain of your instance. Enter the API token obtained above and click Save to create your credential.","title":"Using API key"},{"location":"integrations/credentials/securityScorecard/","text":"SecurityScorecard # You can use these credentials to authenticate the following nodes with SecurityScorecard. - SecurityScorecard Prerequisites # Create a SecurityScorecard account. Using API # Open your SecurityScorecard dashboard . Click on Integrations and select 'Get an API Key'. Click on Generate new API token . Click on the Confirm button. Copy the generated API key. Enter a name for your credentials in the Credentials Name field in the 'SecurityScorecard API' credentials in n8n. Paste the API key in the API Key field in the 'Security Scorecard API' credentials in n8n. Click on the Create button to create your credentials. The following video demonstrates the steps mentioned above.","title":"SecurityScorecard"},{"location":"integrations/credentials/securityScorecard/#securityscorecard","text":"You can use these credentials to authenticate the following nodes with SecurityScorecard. - SecurityScorecard","title":"SecurityScorecard"},{"location":"integrations/credentials/securityScorecard/#prerequisites","text":"Create a SecurityScorecard account.","title":"Prerequisites"},{"location":"integrations/credentials/securityScorecard/#using-api","text":"Open your SecurityScorecard dashboard . Click on Integrations and select 'Get an API Key'. Click on Generate new API token . Click on the Confirm button. Copy the generated API key. Enter a name for your credentials in the Credentials Name field in the 'SecurityScorecard API' credentials in n8n. Paste the API key in the API Key field in the 'Security Scorecard API' credentials in n8n. Click on the Create button to create your credentials. The following video demonstrates the steps mentioned above.","title":"Using API"},{"location":"integrations/credentials/segment/","text":"Segment # You can use these credentials to authenticate the following nodes with Segment. - Segment Prerequisites # Create a Segment account. Using Access Token # Access your Segment Dashboard. Click on Sources, on the left panel. Click on Add Source. Select Node.js. Copy write key. Use session write key for your Segment node credentials in n8n.","title":"Segment"},{"location":"integrations/credentials/segment/#segment","text":"You can use these credentials to authenticate the following nodes with Segment. - Segment","title":"Segment"},{"location":"integrations/credentials/segment/#prerequisites","text":"Create a Segment account.","title":"Prerequisites"},{"location":"integrations/credentials/segment/#using-access-token","text":"Access your Segment Dashboard. Click on Sources, on the left panel. Click on Add Source. Select Node.js. Copy write key. Use session write key for your Segment node credentials in n8n.","title":"Using Access Token"},{"location":"integrations/credentials/sendEmail/","text":"Send Email # You can use these credentials to authenticate the following nodes with SMTP. - Send Email Prerequisites # Create an email account on a service with SMTP support. Using SMTP # Retrieve your login credentials and SMTP connection parameters. Use the login credentials and SMTP connection parameters with your Send Email node credentials in n8n.","title":"Send Email"},{"location":"integrations/credentials/sendEmail/#send-email","text":"You can use these credentials to authenticate the following nodes with SMTP. - Send Email","title":"Send Email"},{"location":"integrations/credentials/sendEmail/#prerequisites","text":"Create an email account on a service with SMTP support.","title":"Prerequisites"},{"location":"integrations/credentials/sendEmail/#using-smtp","text":"Retrieve your login credentials and SMTP connection parameters. Use the login credentials and SMTP connection parameters with your Send Email node credentials in n8n.","title":"Using SMTP"},{"location":"integrations/credentials/sendgrid/","text":"SendGrid # You can use these credentials to authenticate the following nodes with SendGrid. - SendGrid Prerequisites # Create a SendGrid account. Using API Key # Open your SendGrid dashboard . Click on Settings on the left sidebar. Click on API Keys . Click on the Create API Key button. Enter the name of the key in the API Key Name field. Click on the Create & View button. Click on the displayed API key to copy the key. Enter the name for your credentials in the Credentials Name field in the 'SendGrid API' credentials in n8n. Paste the 'API Key' in the API Key field. Click on the Create button to save your credentials. The following video demonstrates the steps mentioned above.","title":"SendGrid"},{"location":"integrations/credentials/sendgrid/#sendgrid","text":"You can use these credentials to authenticate the following nodes with SendGrid. - SendGrid","title":"SendGrid"},{"location":"integrations/credentials/sendgrid/#prerequisites","text":"Create a SendGrid account.","title":"Prerequisites"},{"location":"integrations/credentials/sendgrid/#using-api-key","text":"Open your SendGrid dashboard . Click on Settings on the left sidebar. Click on API Keys . Click on the Create API Key button. Enter the name of the key in the API Key Name field. Click on the Create & View button. Click on the displayed API key to copy the key. Enter the name for your credentials in the Credentials Name field in the 'SendGrid API' credentials in n8n. Paste the 'API Key' in the API Key field. Click on the Create button to save your credentials. The following video demonstrates the steps mentioned above.","title":"Using API Key"},{"location":"integrations/credentials/sendy/","text":"Sendy # You can use these credentials to authenticate the following nodes with Sendy. - Sendy Prerequisites # Host a Sendy application. Using API Key # Access your Sendy application. Click on the username on the top right corner and select 'Settings'. Copy the API key displayed under the Your API key section. Use this API key and the installation URL with your Sendy node credentials in n8n.","title":"Sendy"},{"location":"integrations/credentials/sendy/#sendy","text":"You can use these credentials to authenticate the following nodes with Sendy. - Sendy","title":"Sendy"},{"location":"integrations/credentials/sendy/#prerequisites","text":"Host a Sendy application.","title":"Prerequisites"},{"location":"integrations/credentials/sendy/#using-api-key","text":"Access your Sendy application. Click on the username on the top right corner and select 'Settings'. Copy the API key displayed under the Your API key section. Use this API key and the installation URL with your Sendy node credentials in n8n.","title":"Using API Key"},{"location":"integrations/credentials/sentryIo/","text":"Sentry.io # You can use these credentials to authenticate the following nodes with Sentry.io. - Sentry.io Prerequisites # Create a Sentry.io account. Using OAuth # \u26c5\ufe0f Note for n8n.cloud users You'll only need to enter the Credentials Name and click on the circle button in the OAuth section to connect your Sentry.io account to n8n. Access your Sentry.io Applications Page . Click on the Create New Application button in the top right. Enter a name in the Name field. Copy the 'OAuth Callback URL' provided in the 'Sentry.io OAuth2 API' credentials in n8n and paste it in the Authorized Redirect URIs field in the Sentry.io Application Details page. Use the displayed Client ID and Client Secret with your Sentry.io OAuth2 API credentials in n8n. Click on the circle button in the OAuth section to connect a Sentry.io account to n8n. Click on the Save button to save your credentials. Using Access Token # Access your Sentry.io Auth Tokens page . Click on the Create New Token button in the top right. Select any scopes you plan to use and then click on Create Token . Use the generated access token with your Sentry.io API credentials in n8n. Click on the Save button to save your credentials.","title":"Sentry.io"},{"location":"integrations/credentials/sentryIo/#sentryio","text":"You can use these credentials to authenticate the following nodes with Sentry.io. - Sentry.io","title":"Sentry.io"},{"location":"integrations/credentials/sentryIo/#prerequisites","text":"Create a Sentry.io account.","title":"Prerequisites"},{"location":"integrations/credentials/sentryIo/#using-oauth","text":"\u26c5\ufe0f Note for n8n.cloud users You'll only need to enter the Credentials Name and click on the circle button in the OAuth section to connect your Sentry.io account to n8n. Access your Sentry.io Applications Page . Click on the Create New Application button in the top right. Enter a name in the Name field. Copy the 'OAuth Callback URL' provided in the 'Sentry.io OAuth2 API' credentials in n8n and paste it in the Authorized Redirect URIs field in the Sentry.io Application Details page. Use the displayed Client ID and Client Secret with your Sentry.io OAuth2 API credentials in n8n. Click on the circle button in the OAuth section to connect a Sentry.io account to n8n. Click on the Save button to save your credentials.","title":"Using OAuth"},{"location":"integrations/credentials/sentryIo/#using-access-token","text":"Access your Sentry.io Auth Tokens page . Click on the Create New Token button in the top right. Select any scopes you plan to use and then click on Create Token . Use the generated access token with your Sentry.io API credentials in n8n. Click on the Save button to save your credentials.","title":"Using Access Token"},{"location":"integrations/credentials/serviceNow/","text":"ServiceNow # You can use these credentials to authenticate the following nodes with serviceNow. - ServiceNow Prerequisites # Create a ServiceNow account. Using OAuth # From your ServiceNow instance: Navigate to System OAuth > Application Registry . Click New button > Create an OAuth API endpoint for external clients . Complete the following fields: Name : Enter a descriptive name for the new endpoint. Client ID : Auto populated field, you will need this ID to configure your n8n credentials. Client Secret : Enter your desired secret or leave blank to auto generate a random string. You will need this to configure your n8n credentials. Redirect URL : Copy the OAuth Callback URL from the n8n credentials window and enter it here. Click Submit to save and create your new endpoint. From n8n: Enter a descriptive Credentials Name . Under Credential Data complete the following fields: Client ID : Enter the client ID generated above. Client Secret : Enter your client secret created above. Subdomain : Enter the subdomain of your ServiceNow instance. This can be seen in your instance URL: https://<subdomain>.service-now.com/ . From the OAuth section, click the circle button to establish the connection. Click Save to finalize your n8n credentials.","title":"ServiceNow"},{"location":"integrations/credentials/serviceNow/#servicenow","text":"You can use these credentials to authenticate the following nodes with serviceNow. - ServiceNow","title":"ServiceNow"},{"location":"integrations/credentials/serviceNow/#prerequisites","text":"Create a ServiceNow account.","title":"Prerequisites"},{"location":"integrations/credentials/serviceNow/#using-oauth","text":"From your ServiceNow instance: Navigate to System OAuth > Application Registry . Click New button > Create an OAuth API endpoint for external clients . Complete the following fields: Name : Enter a descriptive name for the new endpoint. Client ID : Auto populated field, you will need this ID to configure your n8n credentials. Client Secret : Enter your desired secret or leave blank to auto generate a random string. You will need this to configure your n8n credentials. Redirect URL : Copy the OAuth Callback URL from the n8n credentials window and enter it here. Click Submit to save and create your new endpoint. From n8n: Enter a descriptive Credentials Name . Under Credential Data complete the following fields: Client ID : Enter the client ID generated above. Client Secret : Enter your client secret created above. Subdomain : Enter the subdomain of your ServiceNow instance. This can be seen in your instance URL: https://<subdomain>.service-now.com/ . From the OAuth section, click the circle button to establish the connection. Click Save to finalize your n8n credentials.","title":"Using OAuth"},{"location":"integrations/credentials/shopify/","text":"Shopify # You can use these credentials to authenticate the following nodes with Shopify. - Shopify - Shopify Trigger Prerequisites # Create a Shopify account. Using API Key # Access the Apps section of your Shopify Store's admin console. Click on 'Manage private apps' near the bottom of the page. Click on the 'Create new private app' button and create a new app by entering any necessary information. Make sure that you set appropriate for the methods you plan to use under the 'Admin API' section. Upon app creation, scroll down, and you will see your API key, Password, and Shared Secret. Use your password, API key, secret, and shop subdomain with your Shopify node credentials in n8n. Note: Use the subdomain without .myshopify.com in n8n.","title":"Shopify"},{"location":"integrations/credentials/shopify/#shopify","text":"You can use these credentials to authenticate the following nodes with Shopify. - Shopify - Shopify Trigger","title":"Shopify"},{"location":"integrations/credentials/shopify/#prerequisites","text":"Create a Shopify account.","title":"Prerequisites"},{"location":"integrations/credentials/shopify/#using-api-key","text":"Access the Apps section of your Shopify Store's admin console. Click on 'Manage private apps' near the bottom of the page. Click on the 'Create new private app' button and create a new app by entering any necessary information. Make sure that you set appropriate for the methods you plan to use under the 'Admin API' section. Upon app creation, scroll down, and you will see your API key, Password, and Shared Secret. Use your password, API key, secret, and shop subdomain with your Shopify node credentials in n8n. Note: Use the subdomain without .myshopify.com in n8n.","title":"Using API Key"},{"location":"integrations/credentials/signl4/","text":"SIGNL4 # You can use these credentials to authenticate the following nodes with SIGNL4. - SIGNL4 Prerequisites # Create a SIGNL4 account. Using Access Token # Open the '\u2705 Sign up complete' email you received when you signed up for SIGNL4. Your team secret is the last part of the webhook URL. If your webhook URL is https://connect.signl4.com/webhook/helloworld , your team secret would be helloworld .","title":"SIGNL4"},{"location":"integrations/credentials/signl4/#signl4","text":"You can use these credentials to authenticate the following nodes with SIGNL4. - SIGNL4","title":"SIGNL4"},{"location":"integrations/credentials/signl4/#prerequisites","text":"Create a SIGNL4 account.","title":"Prerequisites"},{"location":"integrations/credentials/signl4/#using-access-token","text":"Open the '\u2705 Sign up complete' email you received when you signed up for SIGNL4. Your team secret is the last part of the webhook URL. If your webhook URL is https://connect.signl4.com/webhook/helloworld , your team secret would be helloworld .","title":"Using Access Token"},{"location":"integrations/credentials/slack/","text":"Slack # You can use these credentials to authenticate the following nodes: Slack Prerequisites # Create a Slack account. Using OAuth # \u26c5\ufe0f Note for n8n.cloud users You'll only need to enter the Credentials Name and click on the circle button in the OAuth section to connect your Slack account to n8n. Open the Slack API page. Click on the Create an app button and select From scratch . Enter an App Name in the corresponding field. Select a workspace for your app from the dropdown list. Click on the Create App button. Scroll down to the App Credentials section. Copy and paste Client ID and Client Secret in the corresponding fields of your n8n credentials. On the Basic Information page, navigate to Building Apps for Slack > Add features and functionality > Permissions . In the Redirect URLs section, click on Add New Redirect URL . Copy the OAuth Callback URL provided in n8n and paste it here. Click on the Save URLs button. Scroll down to the Scopes section. Add the required scopes under the Bot Token Scopes section. You can refer to the list of scopes on the Scopes and permissions documentation on Slack. Click on the circle button in the OAuth section to connect a Slack account to n8n. Click the Save button to save your credentials in n8n. Return to the Slack OAuth & Permissions page, scroll up to the OAuth Tokens for Your Workspace section and click on Install to Workspace button. Click on the Allow button. Using Access Token # Open the Slack API page. Click on the Create an app button and select From scratch . Enter an App Name in the corresponding field. Select a workspace for your app from the dropdown list. Click on the Create App button. In the Add features and functionality section select Permissions . Scroll down to the Scopes section and: If you want your app to act on behalf of users that authorize the app, add the required scopes under the User Token Scopes section. If you're building a bot, add the required scopes under the Bot Token Scopes section. Tip You can refer to the list of scopes on the officials Slack Scopes and permissions documentation. From the OAuth Tokens for Your Workspace section click on the Install to Workspace button. Click on the Allow button. In n8n, enter the Access Token created above. Click the Save button to save your credentials in n8n. Privacy policy # For details about how you data is collected and used, see the n8n and Slack privacy policies.","title":"Slack"},{"location":"integrations/credentials/slack/#slack","text":"You can use these credentials to authenticate the following nodes: Slack","title":"Slack"},{"location":"integrations/credentials/slack/#prerequisites","text":"Create a Slack account.","title":"Prerequisites"},{"location":"integrations/credentials/slack/#using-oauth","text":"\u26c5\ufe0f Note for n8n.cloud users You'll only need to enter the Credentials Name and click on the circle button in the OAuth section to connect your Slack account to n8n. Open the Slack API page. Click on the Create an app button and select From scratch . Enter an App Name in the corresponding field. Select a workspace for your app from the dropdown list. Click on the Create App button. Scroll down to the App Credentials section. Copy and paste Client ID and Client Secret in the corresponding fields of your n8n credentials. On the Basic Information page, navigate to Building Apps for Slack > Add features and functionality > Permissions . In the Redirect URLs section, click on Add New Redirect URL . Copy the OAuth Callback URL provided in n8n and paste it here. Click on the Save URLs button. Scroll down to the Scopes section. Add the required scopes under the Bot Token Scopes section. You can refer to the list of scopes on the Scopes and permissions documentation on Slack. Click on the circle button in the OAuth section to connect a Slack account to n8n. Click the Save button to save your credentials in n8n. Return to the Slack OAuth & Permissions page, scroll up to the OAuth Tokens for Your Workspace section and click on Install to Workspace button. Click on the Allow button.","title":"Using OAuth"},{"location":"integrations/credentials/slack/#using-access-token","text":"Open the Slack API page. Click on the Create an app button and select From scratch . Enter an App Name in the corresponding field. Select a workspace for your app from the dropdown list. Click on the Create App button. In the Add features and functionality section select Permissions . Scroll down to the Scopes section and: If you want your app to act on behalf of users that authorize the app, add the required scopes under the User Token Scopes section. If you're building a bot, add the required scopes under the Bot Token Scopes section. Tip You can refer to the list of scopes on the officials Slack Scopes and permissions documentation. From the OAuth Tokens for Your Workspace section click on the Install to Workspace button. Click on the Allow button. In n8n, enter the Access Token created above. Click the Save button to save your credentials in n8n.","title":"Using Access Token"},{"location":"integrations/credentials/slack/#privacy-policy","text":"For details about how you data is collected and used, see the n8n and Slack privacy policies.","title":"Privacy policy"},{"location":"integrations/credentials/sms77/","text":"sms77 # You can use these credentials to authenticate the following nodes with sms77. - sms77 Prerequisites # Create an sms77 account. Using Access Token # Access your sms77 dashboard. Click on the gear icon in the bottom left. Click on the HTTP API tab. Use the API key provided with your sms77 node credentials in n8n.","title":"sms77"},{"location":"integrations/credentials/sms77/#sms77","text":"You can use these credentials to authenticate the following nodes with sms77. - sms77","title":"sms77"},{"location":"integrations/credentials/sms77/#prerequisites","text":"Create an sms77 account.","title":"Prerequisites"},{"location":"integrations/credentials/sms77/#using-access-token","text":"Access your sms77 dashboard. Click on the gear icon in the bottom left. Click on the HTTP API tab. Use the API key provided with your sms77 node credentials in n8n.","title":"Using Access Token"},{"location":"integrations/credentials/snowflake/","text":"Snowflake # You can use these credentials to authenticate the following nodes with Snowflake. - Snowflake Prerequisites # Create a Snowflake account. Using API Key # Access your Snowflake instance. Copy the string of characters located between https:// and snowflakecomputing.com in your Snowflake URL. This string is the name of your Snowflake Account. For example, if the URL of your Snowflake account is https://abc.eu-central-1.snowflakecomputing.com then the name of your account is sx48547.eu-central-1 . Use this account name, database name, username, password, schema, and role with your Snowflake credentials in n8n. Further Reference # Snowflake API Documentation","title":"Snowflake"},{"location":"integrations/credentials/snowflake/#snowflake","text":"You can use these credentials to authenticate the following nodes with Snowflake. - Snowflake","title":"Snowflake"},{"location":"integrations/credentials/snowflake/#prerequisites","text":"Create a Snowflake account.","title":"Prerequisites"},{"location":"integrations/credentials/snowflake/#using-api-key","text":"Access your Snowflake instance. Copy the string of characters located between https:// and snowflakecomputing.com in your Snowflake URL. This string is the name of your Snowflake Account. For example, if the URL of your Snowflake account is https://abc.eu-central-1.snowflakecomputing.com then the name of your account is sx48547.eu-central-1 . Use this account name, database name, username, password, schema, and role with your Snowflake credentials in n8n.","title":"Using API Key"},{"location":"integrations/credentials/snowflake/#further-reference","text":"Snowflake API Documentation","title":"Further Reference"},{"location":"integrations/credentials/splunk/","text":"Splunk # You can use these credentials to authenticate the following nodes: Splunk Prerequisites # Download and install Splunk Enterprise Using API Key # From your Splunk UI: Navigate to the Settings > Tokens menu. Select Enable Token Authentication and create a New Token . Copy the API Key provided there. From n8n: Enter your API key and application Base URL (e.g. https://localhost:8089 ). Use the toggle to select if you want to Allow Unauthorized Certificates . Click Save to create your credentials.","title":"Splunk"},{"location":"integrations/credentials/splunk/#splunk","text":"You can use these credentials to authenticate the following nodes: Splunk","title":"Splunk"},{"location":"integrations/credentials/splunk/#prerequisites","text":"Download and install Splunk Enterprise","title":"Prerequisites"},{"location":"integrations/credentials/splunk/#using-api-key","text":"From your Splunk UI: Navigate to the Settings > Tokens menu. Select Enable Token Authentication and create a New Token . Copy the API Key provided there. From n8n: Enter your API key and application Base URL (e.g. https://localhost:8089 ). Use the toggle to select if you want to Allow Unauthorized Certificates . Click Save to create your credentials.","title":"Using API Key"},{"location":"integrations/credentials/spontit/","text":"Spontit # You can use these credentials to authenticate the following nodes with Spontit. - Spontit Prerequisites # Create a Spontit account. Using API Key # Access the Spontit dashboard . On the navigation menu, click on API , and select 'Get Secret Keys' from the dropdown list. Click on + Create New Key to generate a new API Key. Click on the PROFILE tab on the navigation menu. Copy the displayed username. Use this API Key and Username with your Spontit credentials in n8n. Further Reference # Spontit API Documentation","title":"Spontit"},{"location":"integrations/credentials/spontit/#spontit","text":"You can use these credentials to authenticate the following nodes with Spontit. - Spontit","title":"Spontit"},{"location":"integrations/credentials/spontit/#prerequisites","text":"Create a Spontit account.","title":"Prerequisites"},{"location":"integrations/credentials/spontit/#using-api-key","text":"Access the Spontit dashboard . On the navigation menu, click on API , and select 'Get Secret Keys' from the dropdown list. Click on + Create New Key to generate a new API Key. Click on the PROFILE tab on the navigation menu. Copy the displayed username. Use this API Key and Username with your Spontit credentials in n8n.","title":"Using API Key"},{"location":"integrations/credentials/spontit/#further-reference","text":"Spontit API Documentation","title":"Further Reference"},{"location":"integrations/credentials/spotify/","text":"Spotify # You can use these credentials to authenticate the following nodes with Spotify. - Spotify Prerequisites # Create a Spotify Developer account. Using OAuth # \u26c5\ufe0f Note for n8n.cloud users You'll only need to enter the Credentials Name and click on the circle button in the OAuth section to connect your Spotify account to n8n. Access your Spotify for Developers dashboard. Click the Create an App button at the top of your dashboard. Enter in the app's name and description and click Create . Use provided Client Secret and Client ID with your Spotify node credentials in n8n. Open the app settings and add the n8n provided redirect URL to the app's redirect URI list. Redirect URL Explanation here .","title":"Spotify"},{"location":"integrations/credentials/spotify/#spotify","text":"You can use these credentials to authenticate the following nodes with Spotify. - Spotify","title":"Spotify"},{"location":"integrations/credentials/spotify/#prerequisites","text":"Create a Spotify Developer account.","title":"Prerequisites"},{"location":"integrations/credentials/spotify/#using-oauth","text":"\u26c5\ufe0f Note for n8n.cloud users You'll only need to enter the Credentials Name and click on the circle button in the OAuth section to connect your Spotify account to n8n. Access your Spotify for Developers dashboard. Click the Create an App button at the top of your dashboard. Enter in the app's name and description and click Create . Use provided Client Secret and Client ID with your Spotify node credentials in n8n. Open the app settings and add the n8n provided redirect URL to the app's redirect URI list. Redirect URL Explanation here .","title":"Using OAuth"},{"location":"integrations/credentials/ssh/","text":"SSH # You can use these credentials to authenticate the following nodes: SSH Prerequisites # Authentication for the SSH node requires that you have a username and password for connecting to the remote server, or an SSH key configured for the server or service you are connecting to. See Connecting to GitHub with SSH for an example. Using Password # From the SSH Credentials dropdown, select Create New and complete the following fields: Credentials Name : Enter a descriptive name, here we used ssh_demo . Host : Enter the IP address of the server you are connecting to. Here we are using 192.168.1.8 for a local Mac set up for SSH access. Port : Enter the port to use for this connection. SSH used port 22 by default. User : Enter the your username for this server. Password : Enter your password for the provided username. Click Save to make these credentials available for use. Using Private Key # With Private Key selected in the Authentication field, from the SSH Credentials dropdown select Create New . Complete the following fields: Credentials Name : Enter a descriptive name, here we used ssh_demo . Host : Enter the IP address of the server you are connecting to. Port : Enter the port to use for this connection. SSH used port 22 by default. Private Key : Enter your SSH private key. Passphrase : Enter your passphrase used to secure this key.","title":"SSH"},{"location":"integrations/credentials/ssh/#ssh","text":"You can use these credentials to authenticate the following nodes: SSH","title":"SSH"},{"location":"integrations/credentials/ssh/#prerequisites","text":"Authentication for the SSH node requires that you have a username and password for connecting to the remote server, or an SSH key configured for the server or service you are connecting to. See Connecting to GitHub with SSH for an example.","title":"Prerequisites"},{"location":"integrations/credentials/ssh/#using-password","text":"From the SSH Credentials dropdown, select Create New and complete the following fields: Credentials Name : Enter a descriptive name, here we used ssh_demo . Host : Enter the IP address of the server you are connecting to. Here we are using 192.168.1.8 for a local Mac set up for SSH access. Port : Enter the port to use for this connection. SSH used port 22 by default. User : Enter the your username for this server. Password : Enter your password for the provided username. Click Save to make these credentials available for use.","title":"Using Password"},{"location":"integrations/credentials/ssh/#using-private-key","text":"With Private Key selected in the Authentication field, from the SSH Credentials dropdown select Create New . Complete the following fields: Credentials Name : Enter a descriptive name, here we used ssh_demo . Host : Enter the IP address of the server you are connecting to. Port : Enter the port to use for this connection. SSH used port 22 by default. Private Key : Enter your SSH private key. Passphrase : Enter your passphrase used to secure this key.","title":"Using Private Key"},{"location":"integrations/credentials/stackby/","text":"Stackby # You can use these credentials to authenticate the following nodes with Stackby. - Stackby Prerequisites # Create a Stackby account. Using API Key # Open your Stackby dashboard . Click on the user icon on the top right and select 'Account' from the dropdown list. Under the API section, click on the Create API key button. Copy the displayed API key. Enter a name for your credentials in the Credentials Name field in the 'Stackby API' credentials in n8n. Paste the API key in the API Key field in the 'Stackby API' credentials in n8n. Click on the Create button to create the credentials. The following video demonstrates the steps mentioned above.","title":"Stackby"},{"location":"integrations/credentials/stackby/#stackby","text":"You can use these credentials to authenticate the following nodes with Stackby. - Stackby","title":"Stackby"},{"location":"integrations/credentials/stackby/#prerequisites","text":"Create a Stackby account.","title":"Prerequisites"},{"location":"integrations/credentials/stackby/#using-api-key","text":"Open your Stackby dashboard . Click on the user icon on the top right and select 'Account' from the dropdown list. Under the API section, click on the Create API key button. Copy the displayed API key. Enter a name for your credentials in the Credentials Name field in the 'Stackby API' credentials in n8n. Paste the API key in the API Key field in the 'Stackby API' credentials in n8n. Click on the Create button to create the credentials. The following video demonstrates the steps mentioned above.","title":"Using API Key"},{"location":"integrations/credentials/storyblok/","text":"Storyblok # You can use these credentials to authenticate the following nodes with Storyblok. - Storyblok Prerequisites # Create a Storyblok account. Using API Key to access the Content API # Access the spaces page. Select a space you want to use from the left sidebar. Click on Settings in the left sidebar. Select the API-Keys tab. Select an access level from the Access Level dropdown list. Click on the Create Token button. Use this API Key with your Storyblok Content API credentials in n8n. Using API Key to access the Management API # Access the My Account page. Scroll down to the Personal access tokens section. Click on the Generate new Token button. Use this API Key with your Storyblok Management API credentials in n8n. Further Reference # Content API Documentation Management API Documentation","title":"Storyblok"},{"location":"integrations/credentials/storyblok/#storyblok","text":"You can use these credentials to authenticate the following nodes with Storyblok. - Storyblok","title":"Storyblok"},{"location":"integrations/credentials/storyblok/#prerequisites","text":"Create a Storyblok account.","title":"Prerequisites"},{"location":"integrations/credentials/storyblok/#using-api-key-to-access-the-content-api","text":"Access the spaces page. Select a space you want to use from the left sidebar. Click on Settings in the left sidebar. Select the API-Keys tab. Select an access level from the Access Level dropdown list. Click on the Create Token button. Use this API Key with your Storyblok Content API credentials in n8n.","title":"Using API Key to access the Content API"},{"location":"integrations/credentials/storyblok/#using-api-key-to-access-the-management-api","text":"Access the My Account page. Scroll down to the Personal access tokens section. Click on the Generate new Token button. Use this API Key with your Storyblok Management API credentials in n8n.","title":"Using API Key to access the Management API"},{"location":"integrations/credentials/storyblok/#further-reference","text":"Content API Documentation Management API Documentation","title":"Further Reference"},{"location":"integrations/credentials/strapi/","text":"Strapi # You can use these credentials to authenticate the following nodes with Strapi. - Strapi Prerequisites # Install Strapi on your server. Using API # Access your Strapi Admin dashboard. Click on Settings in the left sidebar. Click on Roles under the USERS & PERMISSIONS PLUGIN section. Click on the pencil icon next to the role you want to edit. In the Permissions section, give the required permissions. Click on the Save button. Click on Users in the left sidebar. Click on the + Add New user button. Enter the required information. Click on ON for the Confirmed field. Select the role that you set the permissions for in the previous steps from the Role dropdown list. Click on the Save button. Use this email, password, and the URL of your Strapi instance with your Strapi node credentials in n8n.","title":"Strapi"},{"location":"integrations/credentials/strapi/#strapi","text":"You can use these credentials to authenticate the following nodes with Strapi. - Strapi","title":"Strapi"},{"location":"integrations/credentials/strapi/#prerequisites","text":"Install Strapi on your server.","title":"Prerequisites"},{"location":"integrations/credentials/strapi/#using-api","text":"Access your Strapi Admin dashboard. Click on Settings in the left sidebar. Click on Roles under the USERS & PERMISSIONS PLUGIN section. Click on the pencil icon next to the role you want to edit. In the Permissions section, give the required permissions. Click on the Save button. Click on Users in the left sidebar. Click on the + Add New user button. Enter the required information. Click on ON for the Confirmed field. Select the role that you set the permissions for in the previous steps from the Role dropdown list. Click on the Save button. Use this email, password, and the URL of your Strapi instance with your Strapi node credentials in n8n.","title":"Using API"},{"location":"integrations/credentials/strava/","text":"Strava # You can use these credentials to authenticate the following nodes with Strava. - Strava - Strava Trigger Prerequisites # Create a Strava account. Using OAuth # Access the My API Application page . Enter the application name in the Application Name field. Enter the website URL in the Website field. Copy the string of characters between https:// (or http:// ) and /oauth2/callback (or /rest/oauth2-credential/callback ) from 'OAuth Callback URL' in n8n. Paste it in the Authorization Callback Domain in Strava. Read 'Strava's API Agreement', and if you agree, check the checkbox. Click on the Create button. Click on App Icon and select an image from the browser window. Click on the Save button. Use this Client ID and Client Secret with your Strava node credentials in n8n.","title":"Strava"},{"location":"integrations/credentials/strava/#strava","text":"You can use these credentials to authenticate the following nodes with Strava. - Strava - Strava Trigger","title":"Strava"},{"location":"integrations/credentials/strava/#prerequisites","text":"Create a Strava account.","title":"Prerequisites"},{"location":"integrations/credentials/strava/#using-oauth","text":"Access the My API Application page . Enter the application name in the Application Name field. Enter the website URL in the Website field. Copy the string of characters between https:// (or http:// ) and /oauth2/callback (or /rest/oauth2-credential/callback ) from 'OAuth Callback URL' in n8n. Paste it in the Authorization Callback Domain in Strava. Read 'Strava's API Agreement', and if you agree, check the checkbox. Click on the Create button. Click on App Icon and select an image from the browser window. Click on the Save button. Use this Client ID and Client Secret with your Strava node credentials in n8n.","title":"Using OAuth"},{"location":"integrations/credentials/stripe/","text":"Stripe # You can use these credentials to authenticate the following nodes with Stripe. - Stripe Trigger - Stripe Prerequisites # Create a Stripe account. Using Access Token # Access your Stripe dashboard. Click on the developers button in the left panel. Click on API keys. Use the secret key with your Stripe node credentials in n8n.","title":"Stripe"},{"location":"integrations/credentials/stripe/#stripe","text":"You can use these credentials to authenticate the following nodes with Stripe. - Stripe Trigger - Stripe","title":"Stripe"},{"location":"integrations/credentials/stripe/#prerequisites","text":"Create a Stripe account.","title":"Prerequisites"},{"location":"integrations/credentials/stripe/#using-access-token","text":"Access your Stripe dashboard. Click on the developers button in the left panel. Click on API keys. Use the secret key with your Stripe node credentials in n8n.","title":"Using Access Token"},{"location":"integrations/credentials/supabase/","text":"Supabase # You can use these credentials to authenticate the following nodes with Supabase. - Supabase Prerequisites # Create a Supabase account. Using Access Token # In the Supabase UI , navigate to the project you would like to connect to. Navigate to Settings page (through the gears button in the left sidebar). Under Project settings , click on API . Copy the value from the Supabase URL field into the Host field of your Supabase credentials in n8n. Copy the value from the Supabase service_role secret field into the Service Role Secret field of your Supabase credentials in n8n. Click Save on the n8n credentials screen.","title":"Supabase"},{"location":"integrations/credentials/supabase/#supabase","text":"You can use these credentials to authenticate the following nodes with Supabase. - Supabase","title":"Supabase"},{"location":"integrations/credentials/supabase/#prerequisites","text":"Create a Supabase account.","title":"Prerequisites"},{"location":"integrations/credentials/supabase/#using-access-token","text":"In the Supabase UI , navigate to the project you would like to connect to. Navigate to Settings page (through the gears button in the left sidebar). Under Project settings , click on API . Copy the value from the Supabase URL field into the Host field of your Supabase credentials in n8n. Copy the value from the Supabase service_role secret field into the Service Role Secret field of your Supabase credentials in n8n. Click Save on the n8n credentials screen.","title":"Using Access Token"},{"location":"integrations/credentials/surveyMonkey/","text":"SurveyMonkey # You can use these credentials to authenticate the following nodes with SurveyMonkey. - SurveyMonkey Trigger Prerequisites # Create a SurveyMonkey account. Using OAuth # Access your SurveyMonkey dashboard. Click on the context menu in the top right. Click on Integrations & Plug-ins Click on Develop. Click on My Apps in the top panel. Create a new app, fill in details. Once created, go to settings. Use the client ID and client secret with your SurveyMonkey OAuth API credentials in n8n. Using Access Token # Access your SurveyMonkey dashboard. Click on the context menu in the top right. Click on Integrations & Plug-ins Click on Develop. Click on My Apps in the top panel. Create a new app, fill in details. Once created, go to settings. Use the access token, client ID and client secret with your SurveyMonkey node credentials in n8n.","title":"SurveyMonkey"},{"location":"integrations/credentials/surveyMonkey/#surveymonkey","text":"You can use these credentials to authenticate the following nodes with SurveyMonkey. - SurveyMonkey Trigger","title":"SurveyMonkey"},{"location":"integrations/credentials/surveyMonkey/#prerequisites","text":"Create a SurveyMonkey account.","title":"Prerequisites"},{"location":"integrations/credentials/surveyMonkey/#using-oauth","text":"Access your SurveyMonkey dashboard. Click on the context menu in the top right. Click on Integrations & Plug-ins Click on Develop. Click on My Apps in the top panel. Create a new app, fill in details. Once created, go to settings. Use the client ID and client secret with your SurveyMonkey OAuth API credentials in n8n.","title":"Using OAuth"},{"location":"integrations/credentials/surveyMonkey/#using-access-token","text":"Access your SurveyMonkey dashboard. Click on the context menu in the top right. Click on Integrations & Plug-ins Click on Develop. Click on My Apps in the top panel. Create a new app, fill in details. Once created, go to settings. Use the access token, client ID and client secret with your SurveyMonkey node credentials in n8n.","title":"Using Access Token"},{"location":"integrations/credentials/syncroMsp/","text":"SyncroMSP # You can use these credentials to authenticate the following nodes with SyncroMSP. - SyncroMSP Prerequisites # Create a SyncroMSP account. Using Access Token # With administrator privileges, navigate to the API Tokens page in SyncroMSP . Click on the + New Token button. On the Custom Permissions tab, enter a name for your new token and adjust the permissions to match your requirements. Click Create API Token once done. Copy the key shown by SyncroMSP into the API Key field of your SyncroMSP credentials in n8n. Enter your SyncroMSP subdomain (the part between https:// and .syncromsp.com ) in the Subdomain field of your SyncroMSP credentials in n8n. Click Save on the n8n credentials screen.","title":"SyncroMSP"},{"location":"integrations/credentials/syncroMsp/#syncromsp","text":"You can use these credentials to authenticate the following nodes with SyncroMSP. - SyncroMSP","title":"SyncroMSP"},{"location":"integrations/credentials/syncroMsp/#prerequisites","text":"Create a SyncroMSP account.","title":"Prerequisites"},{"location":"integrations/credentials/syncroMsp/#using-access-token","text":"With administrator privileges, navigate to the API Tokens page in SyncroMSP . Click on the + New Token button. On the Custom Permissions tab, enter a name for your new token and adjust the permissions to match your requirements. Click Create API Token once done. Copy the key shown by SyncroMSP into the API Key field of your SyncroMSP credentials in n8n. Enter your SyncroMSP subdomain (the part between https:// and .syncromsp.com ) in the Subdomain field of your SyncroMSP credentials in n8n. Click Save on the n8n credentials screen.","title":"Using Access Token"},{"location":"integrations/credentials/taiga/","text":"Taiga # You can use these credentials to authenticate the following nodes with Taiga. - Taiga - Taiga Trigger Prerequisites # Create a Taiga account. Using Username and Password # Use your username and password with the Taiga node credentials in n8n. Note: For self-hosted instances, you will have to additionally use your Taiga URL with the Taiga node credentials in n8n.","title":"Taiga"},{"location":"integrations/credentials/taiga/#taiga","text":"You can use these credentials to authenticate the following nodes with Taiga. - Taiga - Taiga Trigger","title":"Taiga"},{"location":"integrations/credentials/taiga/#prerequisites","text":"Create a Taiga account.","title":"Prerequisites"},{"location":"integrations/credentials/taiga/#using-username-and-password","text":"Use your username and password with the Taiga node credentials in n8n. Note: For self-hosted instances, you will have to additionally use your Taiga URL with the Taiga node credentials in n8n.","title":"Using Username and Password"},{"location":"integrations/credentials/tapfiliate/","text":"Tapfiliate # You can use these credentials to authenticate the following nodes with Tapfiliate. - Tapfiliate Prerequisites # Create a Tapfiliate account. Using API Key # Open your Tapfiliate dashboard page. Click on your avatar on the bottom left of the window. Select 'Profile Settings' from the dropdown list. Scroll down to the API Key section. Copy the displayed API Key . Enter a name for your credentials in the Credentials Name field in the 'Tapfiliate API' credentials in n8n. Paste the API key in the API Key field in the 'Tapfiliate API' credentials in n8n. Click the Create button to create your credentials in n8n. The following video demonstrates the steps mentioned above.","title":"Tapfiliate"},{"location":"integrations/credentials/tapfiliate/#tapfiliate","text":"You can use these credentials to authenticate the following nodes with Tapfiliate. - Tapfiliate","title":"Tapfiliate"},{"location":"integrations/credentials/tapfiliate/#prerequisites","text":"Create a Tapfiliate account.","title":"Prerequisites"},{"location":"integrations/credentials/tapfiliate/#using-api-key","text":"Open your Tapfiliate dashboard page. Click on your avatar on the bottom left of the window. Select 'Profile Settings' from the dropdown list. Scroll down to the API Key section. Copy the displayed API Key . Enter a name for your credentials in the Credentials Name field in the 'Tapfiliate API' credentials in n8n. Paste the API key in the API Key field in the 'Tapfiliate API' credentials in n8n. Click the Create button to create your credentials in n8n. The following video demonstrates the steps mentioned above.","title":"Using API Key"},{"location":"integrations/credentials/telegram/","text":"Telegram # You can use these credentials to authenticate the following nodes with Telegram. - Telegram - Telegram Trigger Prerequisites # Create a Telegram account. Using Bot Access Token # Start a chat with the Botfather . Enter /newbot and reply with your new bot's display name and username. Copy the bot token and use it in the Telegram node credentials in n8n.","title":"Telegram"},{"location":"integrations/credentials/telegram/#telegram","text":"You can use these credentials to authenticate the following nodes with Telegram. - Telegram - Telegram Trigger","title":"Telegram"},{"location":"integrations/credentials/telegram/#prerequisites","text":"Create a Telegram account.","title":"Prerequisites"},{"location":"integrations/credentials/telegram/#using-bot-access-token","text":"Start a chat with the Botfather . Enter /newbot and reply with your new bot's display name and username. Copy the bot token and use it in the Telegram node credentials in n8n.","title":"Using Bot Access Token"},{"location":"integrations/credentials/theHive/","text":"TheHive # You can use these credentials to authenticate the following nodes with The Hive. - TheHive Prerequisites # Install TheHive on your server. Using API Key # Access your TheHive dashboard. Click on the Organization tab in the top right. Click on the Create API Key button for the user you want to generate the API Key for. Use this API Key and your instance URL with your TheHive node credentials in n8n.","title":"TheHive"},{"location":"integrations/credentials/theHive/#thehive","text":"You can use these credentials to authenticate the following nodes with The Hive. - TheHive","title":"TheHive"},{"location":"integrations/credentials/theHive/#prerequisites","text":"Install TheHive on your server.","title":"Prerequisites"},{"location":"integrations/credentials/theHive/#using-api-key","text":"Access your TheHive dashboard. Click on the Organization tab in the top right. Click on the Create API Key button for the user you want to generate the API Key for. Use this API Key and your instance URL with your TheHive node credentials in n8n.","title":"Using API Key"},{"location":"integrations/credentials/timescaleDb/","text":"TimescaleDB # You can use these credentials to authenticate the following nodes with TimescaleDB. - TimescaleDB Prerequisites # An available instance of TimescaleDB. Using Database Connection # Retrieve your TimescaleDB credentials and connection parameters. Use the credentials and connection parameters with your TimescaleDB node credentials in n8n.","title":"TimescaleDB"},{"location":"integrations/credentials/timescaleDb/#timescaledb","text":"You can use these credentials to authenticate the following nodes with TimescaleDB. - TimescaleDB","title":"TimescaleDB"},{"location":"integrations/credentials/timescaleDb/#prerequisites","text":"An available instance of TimescaleDB.","title":"Prerequisites"},{"location":"integrations/credentials/timescaleDb/#using-database-connection","text":"Retrieve your TimescaleDB credentials and connection parameters. Use the credentials and connection parameters with your TimescaleDB node credentials in n8n.","title":"Using Database Connection"},{"location":"integrations/credentials/todoist/","text":"Todoist # You can use these credentials to authenticate the following nodes with Todoist. - Todoist Prerequisites # Create a Todoist account. Using OAuth # \u26c5\ufe0f Note for n8n.cloud users You'll only need to enter the Credentials Name and click on the circle button in the OAuth section to connect your Todoist account to n8n. Access your Todoist App Management Console Enter a name in the App display name field and click on the Create app button. Copy the OAuth Callback URL from n8n and paste it in the OAuth redirect URL field. Click on the Save settings button. Use the provided Client ID and Client secret with your Todoist OAuth2 API credentials in n8n. Click on the circle button in the OAuth section to connect a Todoist account to n8n. Click the Save button to save your credentials in n8n. Using Access Token # Access your Todoist dashboard. Click on the gear icon in the top right. Select Integrations on the left panel. Scroll down to see your API token. Use the API token with your Todoist node credentials in n8n.","title":"Todoist"},{"location":"integrations/credentials/todoist/#todoist","text":"You can use these credentials to authenticate the following nodes with Todoist. - Todoist","title":"Todoist"},{"location":"integrations/credentials/todoist/#prerequisites","text":"Create a Todoist account.","title":"Prerequisites"},{"location":"integrations/credentials/todoist/#using-oauth","text":"\u26c5\ufe0f Note for n8n.cloud users You'll only need to enter the Credentials Name and click on the circle button in the OAuth section to connect your Todoist account to n8n. Access your Todoist App Management Console Enter a name in the App display name field and click on the Create app button. Copy the OAuth Callback URL from n8n and paste it in the OAuth redirect URL field. Click on the Save settings button. Use the provided Client ID and Client secret with your Todoist OAuth2 API credentials in n8n. Click on the circle button in the OAuth section to connect a Todoist account to n8n. Click the Save button to save your credentials in n8n.","title":"Using OAuth"},{"location":"integrations/credentials/todoist/#using-access-token","text":"Access your Todoist dashboard. Click on the gear icon in the top right. Select Integrations on the left panel. Scroll down to see your API token. Use the API token with your Todoist node credentials in n8n.","title":"Using Access Token"},{"location":"integrations/credentials/toggl/","text":"Toggl # You can use these credentials to authenticate the following nodes with Toggl. - Toggl Trigger Prerequisites # Create a Toggl account. Using Username and Password # Use your Toggle username and password with your node credentials in n8n.","title":"Toggl"},{"location":"integrations/credentials/toggl/#toggl","text":"You can use these credentials to authenticate the following nodes with Toggl. - Toggl Trigger","title":"Toggl"},{"location":"integrations/credentials/toggl/#prerequisites","text":"Create a Toggl account.","title":"Prerequisites"},{"location":"integrations/credentials/toggl/#using-username-and-password","text":"Use your Toggle username and password with your node credentials in n8n.","title":"Using Username and Password"},{"location":"integrations/credentials/travisCi/","text":"Travis CI # You can use these credentials to authenticate the following nodes with Travis CI. - Travis CI Prerequisites # Create a Travis CI account. Using Access Token # Open your Travis CI dashboard. Click on the user icon in the top right. Click on 'Settings' in the dropdown list. Click on the Settings tab on the page. Copy the Token from the API authentication section and use it with your Travis API credentials in n8n. Click on the Save button to save your credentials.","title":"Travis CI"},{"location":"integrations/credentials/travisCi/#travis-ci","text":"You can use these credentials to authenticate the following nodes with Travis CI. - Travis CI","title":"Travis CI"},{"location":"integrations/credentials/travisCi/#prerequisites","text":"Create a Travis CI account.","title":"Prerequisites"},{"location":"integrations/credentials/travisCi/#using-access-token","text":"Open your Travis CI dashboard. Click on the user icon in the top right. Click on 'Settings' in the dropdown list. Click on the Settings tab on the page. Copy the Token from the API authentication section and use it with your Travis API credentials in n8n. Click on the Save button to save your credentials.","title":"Using Access Token"},{"location":"integrations/credentials/trello/","text":"Trello # You can use these credentials to authenticate the following nodes with Trello. - Trello - Trello Trigger Prerequisites # Create a Trello account. Using Access Token # Access Trello API Key portal. Gather your API key at the top. Scroll down and you will find your OAuth secret. Click on \"generate a Token\" where you will find your token. Use the API token, OAuth secret and API key with your node credentials in n8n.","title":"Trello"},{"location":"integrations/credentials/trello/#trello","text":"You can use these credentials to authenticate the following nodes with Trello. - Trello - Trello Trigger","title":"Trello"},{"location":"integrations/credentials/trello/#prerequisites","text":"Create a Trello account.","title":"Prerequisites"},{"location":"integrations/credentials/trello/#using-access-token","text":"Access Trello API Key portal. Gather your API key at the top. Scroll down and you will find your OAuth secret. Click on \"generate a Token\" where you will find your token. Use the API token, OAuth secret and API key with your node credentials in n8n.","title":"Using Access Token"},{"location":"integrations/credentials/twake/","text":"Twake # You can use these credentials to authenticate the following nodes with Twake. - Twake Prerequisites # Create a Twake account. Using Access Token # Access your Twake workspace. Click on Main in the top left corner. Select 'Workspace settings' from the dropdown list. Select Applications and connectors . Click on the Search applications... button. Search for n8n and click on the Display button. Click on Install and select Confirm . Click on Configure and copy the Workspace Key. Use the Workspace Key with your Twake node credentials in n8n.","title":"Twake"},{"location":"integrations/credentials/twake/#twake","text":"You can use these credentials to authenticate the following nodes with Twake. - Twake","title":"Twake"},{"location":"integrations/credentials/twake/#prerequisites","text":"Create a Twake account.","title":"Prerequisites"},{"location":"integrations/credentials/twake/#using-access-token","text":"Access your Twake workspace. Click on Main in the top left corner. Select 'Workspace settings' from the dropdown list. Select Applications and connectors . Click on the Search applications... button. Search for n8n and click on the Display button. Click on Install and select Confirm . Click on Configure and copy the Workspace Key. Use the Workspace Key with your Twake node credentials in n8n.","title":"Using Access Token"},{"location":"integrations/credentials/twilio/","text":"Twilio # You can use these credentials to authenticate the following nodes with Twilio. - Twilio Prerequisites # Create a Twilio account. Using Auth Token # Open your Twilio project dashboard . Copy the displayed Account SID. Enter a name for your credentials in the Credentials Name field in the 'Twilio API' credentials in n8n. Paste the Account SID in the Account SID field in the 'Twilio API' credentials in n8n. Copy the Auth Token from the Twilio project dashboard. Paste the Auth Token in the Auth Token field in the 'Twilio API' credentials in n8n. Click on the Create button to create the credentials. The following video demonstrates the steps mentioned above. Using API Key # Open your Twilio project dashboard . Copy the displayed Account SID. Enter a name for your credentials in the Credentials Name field in the 'Twilio API' credentials in n8n. Select 'API Key' from the Auth Type dropdown list. Paste the Account SID in the Account SID field in the 'Twilio API' credentials in n8n. Click on Settings in the left-sidebar. Select API Keys under the Settings . Click on the Create new API Key button. Enter a name in the Friendly Name field. Click on the Create API Key button. Copy the displayed SID. Paste the SID in the API Key SID field in the 'Twilio API' credentials in n8n. Copy the Secret from the Twilio dashboard. Paste the Secret in the API Key Secret field in the 'Twilio API' credentials in n8n. Click on the Create button to create the credentials. The following video demonstrates the steps mentioned above.","title":"Twilio"},{"location":"integrations/credentials/twilio/#twilio","text":"You can use these credentials to authenticate the following nodes with Twilio. - Twilio","title":"Twilio"},{"location":"integrations/credentials/twilio/#prerequisites","text":"Create a Twilio account.","title":"Prerequisites"},{"location":"integrations/credentials/twilio/#using-auth-token","text":"Open your Twilio project dashboard . Copy the displayed Account SID. Enter a name for your credentials in the Credentials Name field in the 'Twilio API' credentials in n8n. Paste the Account SID in the Account SID field in the 'Twilio API' credentials in n8n. Copy the Auth Token from the Twilio project dashboard. Paste the Auth Token in the Auth Token field in the 'Twilio API' credentials in n8n. Click on the Create button to create the credentials. The following video demonstrates the steps mentioned above.","title":"Using Auth Token"},{"location":"integrations/credentials/twilio/#using-api-key","text":"Open your Twilio project dashboard . Copy the displayed Account SID. Enter a name for your credentials in the Credentials Name field in the 'Twilio API' credentials in n8n. Select 'API Key' from the Auth Type dropdown list. Paste the Account SID in the Account SID field in the 'Twilio API' credentials in n8n. Click on Settings in the left-sidebar. Select API Keys under the Settings . Click on the Create new API Key button. Enter a name in the Friendly Name field. Click on the Create API Key button. Copy the displayed SID. Paste the SID in the API Key SID field in the 'Twilio API' credentials in n8n. Copy the Secret from the Twilio dashboard. Paste the Secret in the API Key Secret field in the 'Twilio API' credentials in n8n. Click on the Create button to create the credentials. The following video demonstrates the steps mentioned above.","title":"Using API Key"},{"location":"integrations/credentials/twist/","text":"Twist # You can use these credentials to authenticate the following nodes with Twist. - Twist Prerequisites # Create a Twist account. Using OAuth # Callback URL with Twist Note: The Redirect URL should be a URL in your domain. For example, https://mytemplatemaker.example.com/gr_callback . Twist doesn't accept the localhost callback URL. Refer to the FAQs to learn to configure the credentials for the local environment. Access your Twist workspace. Click on your avatar in the top right corner. Select 'Add integrations...' from the dropdown list. Click on Build on the top. Click on the Add a new integration button. Enter a name in the Integration name field. Enter a description in the Description field. Select 'General integration' from the Integration type dropdown list. Click on the Create my integration button. Click on OAuth Authentication from the left sidebar. Copy the 'OAuth Callback URL' provided in the Twist OAuth2 API credentials in n8n and paste it in the OAuth 2 redirect URL field on your Twist integration page. Click on the Update integration button. Use the Client ID and Client Secret with your Twist node credentials in n8n. Click on the circle button in the OAuth section to connect a Twist account to n8n. Click the Save button to save your credentials in n8n. FAQs # How to configure the OAuth credentials for the local environment? # Twist doesn't accept the localhost callback URL. However, you can follow the steps mentioned below to configure the OAuth credentials for the local environment: 1. We will use ngrok to expose the local server running on port 5678 to the internet. In your terminal, run the following command: 1 ngrok http 5678 2. Run the following command in a new terminal. Replace <YOUR-NGROK-URL> with the URL that you get from the previous step. 1 export WEBHOOK_URL = <YOUR-NGROK-URL> 3. Start your n8n instance. 4. Follow the instructions mentioned in the Using OAuth section to configure your credentials.","title":"Twist"},{"location":"integrations/credentials/twist/#twist","text":"You can use these credentials to authenticate the following nodes with Twist. - Twist","title":"Twist"},{"location":"integrations/credentials/twist/#prerequisites","text":"Create a Twist account.","title":"Prerequisites"},{"location":"integrations/credentials/twist/#using-oauth","text":"Callback URL with Twist Note: The Redirect URL should be a URL in your domain. For example, https://mytemplatemaker.example.com/gr_callback . Twist doesn't accept the localhost callback URL. Refer to the FAQs to learn to configure the credentials for the local environment. Access your Twist workspace. Click on your avatar in the top right corner. Select 'Add integrations...' from the dropdown list. Click on Build on the top. Click on the Add a new integration button. Enter a name in the Integration name field. Enter a description in the Description field. Select 'General integration' from the Integration type dropdown list. Click on the Create my integration button. Click on OAuth Authentication from the left sidebar. Copy the 'OAuth Callback URL' provided in the Twist OAuth2 API credentials in n8n and paste it in the OAuth 2 redirect URL field on your Twist integration page. Click on the Update integration button. Use the Client ID and Client Secret with your Twist node credentials in n8n. Click on the circle button in the OAuth section to connect a Twist account to n8n. Click the Save button to save your credentials in n8n.","title":"Using OAuth"},{"location":"integrations/credentials/twist/#faqs","text":"","title":"FAQs"},{"location":"integrations/credentials/twist/#how-to-configure-the-oauth-credentials-for-the-local-environment","text":"Twist doesn't accept the localhost callback URL. However, you can follow the steps mentioned below to configure the OAuth credentials for the local environment: 1. We will use ngrok to expose the local server running on port 5678 to the internet. In your terminal, run the following command: 1 ngrok http 5678 2. Run the following command in a new terminal. Replace <YOUR-NGROK-URL> with the URL that you get from the previous step. 1 export WEBHOOK_URL = <YOUR-NGROK-URL> 3. Start your n8n instance. 4. Follow the instructions mentioned in the Using OAuth section to configure your credentials.","title":"How to configure the OAuth credentials for the local environment?"},{"location":"integrations/credentials/twitter/","text":"Twitter # You can use these credentials to authenticate the following nodes with Twitter. - Twitter Prerequisites # Create a Twitter developer account . Using OAuth # Access the Twitter Developer portal. Fill out the questionnaire to gain essential access and click Next once done. Confirm the Developer agreement by checking the box and clicking Submit once done. Twitter will now send you a confirmation email. Click the Confirm your email button in the email. After confirming your email, you are redirected to the #Welcome to the Twitter Developer Platform page. Enter a name for your Twitter application and click the Get keys button. Copy the API Key , API Key Secret shown on the next page. Click the Skip to dashboard link at the bottom of the page and click the Yes, I saved them button. Click the Gear button next to your newly created app to open it's App settings . In the Authentication settings sections, click Edit . Turn on the Enable 3-legged OAuth switch and paste the URL shown in the OAuth Redirect URL of the n8n credentials screen into the Callback URLs field of your Twitter apps authentication settings. Enter a valid Website URL in the respective field (for example https://n8n.io). Save your input by clicking the Save button at the bottom of the page. Under App permissions, click Edit and choose the appropriate permissions for your app (pick Read and write and Direct message if you want to use all functions of the Twitter n8n in n8n) and click Save to confirm. In the sidebar on the left, click on the Project your app has been created in (usually Project 1 ) and then on the Apply for Elevated button. Fill out the questionnaire and confirm the inputs on each questionnaire page with a click on Next ( Submit on the final page). Once you receive confirmation that your application has been approved, you're ready to use the n8n Twitter node. In the n8n credentials screen, paste your API Key from steps 6 above into the Consumer Key field, and your API Key Secret into the Consumer Secret field. Click Connect my account and confirm the connection by clicking Authorize app . Further Reference # Application-only Authentication","title":"Twitter"},{"location":"integrations/credentials/twitter/#twitter","text":"You can use these credentials to authenticate the following nodes with Twitter. - Twitter","title":"Twitter"},{"location":"integrations/credentials/twitter/#prerequisites","text":"Create a Twitter developer account .","title":"Prerequisites"},{"location":"integrations/credentials/twitter/#using-oauth","text":"Access the Twitter Developer portal. Fill out the questionnaire to gain essential access and click Next once done. Confirm the Developer agreement by checking the box and clicking Submit once done. Twitter will now send you a confirmation email. Click the Confirm your email button in the email. After confirming your email, you are redirected to the #Welcome to the Twitter Developer Platform page. Enter a name for your Twitter application and click the Get keys button. Copy the API Key , API Key Secret shown on the next page. Click the Skip to dashboard link at the bottom of the page and click the Yes, I saved them button. Click the Gear button next to your newly created app to open it's App settings . In the Authentication settings sections, click Edit . Turn on the Enable 3-legged OAuth switch and paste the URL shown in the OAuth Redirect URL of the n8n credentials screen into the Callback URLs field of your Twitter apps authentication settings. Enter a valid Website URL in the respective field (for example https://n8n.io). Save your input by clicking the Save button at the bottom of the page. Under App permissions, click Edit and choose the appropriate permissions for your app (pick Read and write and Direct message if you want to use all functions of the Twitter n8n in n8n) and click Save to confirm. In the sidebar on the left, click on the Project your app has been created in (usually Project 1 ) and then on the Apply for Elevated button. Fill out the questionnaire and confirm the inputs on each questionnaire page with a click on Next ( Submit on the final page). Once you receive confirmation that your application has been approved, you're ready to use the n8n Twitter node. In the n8n credentials screen, paste your API Key from steps 6 above into the Consumer Key field, and your API Key Secret into the Consumer Secret field. Click Connect my account and confirm the connection by clicking Authorize app .","title":"Using OAuth"},{"location":"integrations/credentials/twitter/#further-reference","text":"Application-only Authentication","title":"Further Reference"},{"location":"integrations/credentials/typeform/","text":"Typeform # You can use these credentials to authenticate the following nodes with Typeform. - Typeform Trigger Prerequisites # Create a Typeform account. Using OAuth # Access your Typeform dashboard. Go to your user profile in the top right. Click on 'Settings' and then click on 'Developer apps' in the sidebar. Click on the Register a new app button. Copy the 'OAuth Callback URL' provided in the Typeform OAuth2 API credentials in n8n and paste it in the Redirect URI(s) section in the Typeform app registration page. Enter any other information necessary and click on the Register app button. Use the displayed Client ID and Client secret with your Typeform OAuth2 API credentials in n8n. Click on the circle button in the OAuth section to connect a Typeform account to n8n. Click the Save button to save your credentials. Using Access Token # Open the Typeform dashboard . Click on your avatar on the top right and select 'Settings'. Click on Personal tokens under the Profile section in the sidebar. Click on the Generate a new token button. Enter a name in the Token name field. Click on the Generate token button. Click on the Copy button to copy the access token. Enter a name for your credentials in the Credentials Name field in the 'Typeform API' credentials in n8n. Paste the access token in the Access Token field in the 'Typeform API' credentials in n8n. Click the Create button to save your credentials in n8n. The following video demonstrates the steps mentioned above.","title":"Typeform"},{"location":"integrations/credentials/typeform/#typeform","text":"You can use these credentials to authenticate the following nodes with Typeform. - Typeform Trigger","title":"Typeform"},{"location":"integrations/credentials/typeform/#prerequisites","text":"Create a Typeform account.","title":"Prerequisites"},{"location":"integrations/credentials/typeform/#using-oauth","text":"Access your Typeform dashboard. Go to your user profile in the top right. Click on 'Settings' and then click on 'Developer apps' in the sidebar. Click on the Register a new app button. Copy the 'OAuth Callback URL' provided in the Typeform OAuth2 API credentials in n8n and paste it in the Redirect URI(s) section in the Typeform app registration page. Enter any other information necessary and click on the Register app button. Use the displayed Client ID and Client secret with your Typeform OAuth2 API credentials in n8n. Click on the circle button in the OAuth section to connect a Typeform account to n8n. Click the Save button to save your credentials.","title":"Using OAuth"},{"location":"integrations/credentials/typeform/#using-access-token","text":"Open the Typeform dashboard . Click on your avatar on the top right and select 'Settings'. Click on Personal tokens under the Profile section in the sidebar. Click on the Generate a new token button. Enter a name in the Token name field. Click on the Generate token button. Click on the Copy button to copy the access token. Enter a name for your credentials in the Credentials Name field in the 'Typeform API' credentials in n8n. Paste the access token in the Access Token field in the 'Typeform API' credentials in n8n. Click the Create button to save your credentials in n8n. The following video demonstrates the steps mentioned above.","title":"Using Access Token"},{"location":"integrations/credentials/uProc/","text":"uProc # You can use these credentials to authenticate the following nodes with uProc. - uProc Prerequisites # Create a uProc account. Using API Key # Access the uProc dashboard . Click on the Settings tab on the left sidebar. Click on the Integrations tab. Use the displayed Email and API Key (real) with your uProc node credentials in n8n.","title":"uProc"},{"location":"integrations/credentials/uProc/#uproc","text":"You can use these credentials to authenticate the following nodes with uProc. - uProc","title":"uProc"},{"location":"integrations/credentials/uProc/#prerequisites","text":"Create a uProc account.","title":"Prerequisites"},{"location":"integrations/credentials/uProc/#using-api-key","text":"Access the uProc dashboard . Click on the Settings tab on the left sidebar. Click on the Integrations tab. Use the displayed Email and API Key (real) with your uProc node credentials in n8n.","title":"Using API Key"},{"location":"integrations/credentials/unleashedSoftware/","text":"Unleashed Software # You can use these credentials to authenticate the following nodes with Unleashed Software. - Unleashed Software Prerequisites # Create an Unleashed Software account. Using Access Token # Access your Unleashed Software dashboard. Click on Integration in the left sidebar and select Unleashed API Access . Use the displayed API Id and API Key with your Unleashed API credentials in n8n. Click on the Save button to save your credentials.","title":"Unleashed Software"},{"location":"integrations/credentials/unleashedSoftware/#unleashed-software","text":"You can use these credentials to authenticate the following nodes with Unleashed Software. - Unleashed Software","title":"Unleashed Software"},{"location":"integrations/credentials/unleashedSoftware/#prerequisites","text":"Create an Unleashed Software account.","title":"Prerequisites"},{"location":"integrations/credentials/unleashedSoftware/#using-access-token","text":"Access your Unleashed Software dashboard. Click on Integration in the left sidebar and select Unleashed API Access . Use the displayed API Id and API Key with your Unleashed API credentials in n8n. Click on the Save button to save your credentials.","title":"Using Access Token"},{"location":"integrations/credentials/uplead/","text":"UpLead # You can use these credentials to authenticate the following nodes with UpLead. - UpLead Prerequisites # Create an UpLead account. Using Access Token # Access your UpLead dashboard. Click on your name in the bottom left. Click on Profile. Scroll down and click on the Generate New API Key . Use the API Key with your UpLead node credentials in n8n.","title":"UpLead"},{"location":"integrations/credentials/uplead/#uplead","text":"You can use these credentials to authenticate the following nodes with UpLead. - UpLead","title":"UpLead"},{"location":"integrations/credentials/uplead/#prerequisites","text":"Create an UpLead account.","title":"Prerequisites"},{"location":"integrations/credentials/uplead/#using-access-token","text":"Access your UpLead dashboard. Click on your name in the bottom left. Click on Profile. Scroll down and click on the Generate New API Key . Use the API Key with your UpLead node credentials in n8n.","title":"Using Access Token"},{"location":"integrations/credentials/uptimeRobot/","text":"UptimeRobot # You can use these credentials to authenticate the following nodes with UptimeRobot. - UptimeRobot Prerequisites # Create an UptimeRobot account. Using API Key # Open your UptimeRobot dashboard . Click on My Settings in the navigation menu. Scroll down to the API Settings at the bottom. Click on Create the main API key under the Main API Key section. Click on Create the main API key button. Copy the displayed API key. Enter the name for your credentials in the Credentials Name field in the 'UptimeRobot API' credentials in n8n. Paste the API key in the API Key field in the 'UptimeRobot API' credentials in n8n. Click on the Create button to create your credentials. The following video demonstrates the steps mentioned above.","title":"UptimeRobot"},{"location":"integrations/credentials/uptimeRobot/#uptimerobot","text":"You can use these credentials to authenticate the following nodes with UptimeRobot. - UptimeRobot","title":"UptimeRobot"},{"location":"integrations/credentials/uptimeRobot/#prerequisites","text":"Create an UptimeRobot account.","title":"Prerequisites"},{"location":"integrations/credentials/uptimeRobot/#using-api-key","text":"Open your UptimeRobot dashboard . Click on My Settings in the navigation menu. Scroll down to the API Settings at the bottom. Click on Create the main API key under the Main API Key section. Click on Create the main API key button. Copy the displayed API key. Enter the name for your credentials in the Credentials Name field in the 'UptimeRobot API' credentials in n8n. Paste the API key in the API Key field in the 'UptimeRobot API' credentials in n8n. Click on the Create button to create your credentials. The following video demonstrates the steps mentioned above.","title":"Using API Key"},{"location":"integrations/credentials/urlScanIo/","text":"urlscan.io # You can use these credentials to authenticate the following nodes with UptimeRobot. - urlscan.io Prerequisites # Create an urlscan.io account. Using API key # From urlscan.io: Navigate to your Settings&API page. Under the API Keys section click + Create new API key . Enter a description for your new API key as prompted and click + Create API key . Copy the new API key for use in n8n. From n8n: Enter the API Key obtained above. Click Save to create your credentials.","title":"urlscan.io"},{"location":"integrations/credentials/urlScanIo/#urlscanio","text":"You can use these credentials to authenticate the following nodes with UptimeRobot. - urlscan.io","title":"urlscan.io"},{"location":"integrations/credentials/urlScanIo/#prerequisites","text":"Create an urlscan.io account.","title":"Prerequisites"},{"location":"integrations/credentials/urlScanIo/#using-api-key","text":"From urlscan.io: Navigate to your Settings&API page. Under the API Keys section click + Create new API key . Enter a description for your new API key as prompted and click + Create API key . Copy the new API key for use in n8n. From n8n: Enter the API Key obtained above. Click Save to create your credentials.","title":"Using API key"},{"location":"integrations/credentials/vero/","text":"Vero # You can use these credentials to authenticate the following nodes with Vero. - Vero Prerequisites # Create a Vero account. Using Access Token # Access your Vero dashboard. Click on the cog icon in the bottom left. Scroll down to see your Auth token. Use the auth token with your Vero node credentials in n8n.","title":"Vero"},{"location":"integrations/credentials/vero/#vero","text":"You can use these credentials to authenticate the following nodes with Vero. - Vero","title":"Vero"},{"location":"integrations/credentials/vero/#prerequisites","text":"Create a Vero account.","title":"Prerequisites"},{"location":"integrations/credentials/vero/#using-access-token","text":"Access your Vero dashboard. Click on the cog icon in the bottom left. Scroll down to see your Auth token. Use the auth token with your Vero node credentials in n8n.","title":"Using Access Token"},{"location":"integrations/credentials/vonage/","text":"Vonage # You can use these credentials to authenticate the following nodes with Vonage. - Vonage Prerequisites # Create a Vonage account. Using API Key # Access the Vonage API dashboard . Copy the API key and the API Secret from the dashboard. Use this API Key and API Secret with your Vonage node credentials in n8n.","title":"Vonage"},{"location":"integrations/credentials/vonage/#vonage","text":"You can use these credentials to authenticate the following nodes with Vonage. - Vonage","title":"Vonage"},{"location":"integrations/credentials/vonage/#prerequisites","text":"Create a Vonage account.","title":"Prerequisites"},{"location":"integrations/credentials/vonage/#using-api-key","text":"Access the Vonage API dashboard . Copy the API key and the API Secret from the dashboard. Use this API Key and API Secret with your Vonage node credentials in n8n.","title":"Using API Key"},{"location":"integrations/credentials/webflow/","text":"Webflow # You can use these credentials to authenticate the following nodes with Webflow. - Webflow - Webflow Trigger Prerequisites # Create a Webflow account. Using OAuth # \u26c5\ufe0f Note for n8n.cloud users You'll only need to enter the Credentials Name and click on the circle button in the OAuth section to connect your Webflow account to n8n. Access your Webflow dashboard. Click on 'Account' on the top right corner. Select 'Account Settings' from the dropdown list. Click on the 'Integrations' tab. Click on the + Register New Application button in the 'My Applications' section. Enter the name of your application in the Application Name field. Enter the description of your application in the Application Description field. Copy the 'OAuth Callback URL' provided in the 'Webflow OAuth2 API' credentials in n8n and paste it in the Redirect URI field in the Webflow integrations page. Enter the homepage URL of your application in the Application Homepage field. Click on the Create button. Click on the View Details button to get the Client Id and Client Secret . Use these credentials with your 'Webflow OAuth2 API' credentials in n8n. Click on the circle button in the OAuth section of n8n to connect a Webflow account to n8n. Click on the Save button to save your credentials. Using Access Token # Access your Webflow dashboard. Click on your desired project. Click on the W icon in the top left. Click on Project Settings. Click on the Integrations tab. Scroll down and click generate API token. Use the api token with your Webflow node credentials in n8n.","title":"Webflow"},{"location":"integrations/credentials/webflow/#webflow","text":"You can use these credentials to authenticate the following nodes with Webflow. - Webflow - Webflow Trigger","title":"Webflow"},{"location":"integrations/credentials/webflow/#prerequisites","text":"Create a Webflow account.","title":"Prerequisites"},{"location":"integrations/credentials/webflow/#using-oauth","text":"\u26c5\ufe0f Note for n8n.cloud users You'll only need to enter the Credentials Name and click on the circle button in the OAuth section to connect your Webflow account to n8n. Access your Webflow dashboard. Click on 'Account' on the top right corner. Select 'Account Settings' from the dropdown list. Click on the 'Integrations' tab. Click on the + Register New Application button in the 'My Applications' section. Enter the name of your application in the Application Name field. Enter the description of your application in the Application Description field. Copy the 'OAuth Callback URL' provided in the 'Webflow OAuth2 API' credentials in n8n and paste it in the Redirect URI field in the Webflow integrations page. Enter the homepage URL of your application in the Application Homepage field. Click on the Create button. Click on the View Details button to get the Client Id and Client Secret . Use these credentials with your 'Webflow OAuth2 API' credentials in n8n. Click on the circle button in the OAuth section of n8n to connect a Webflow account to n8n. Click on the Save button to save your credentials.","title":"Using OAuth"},{"location":"integrations/credentials/webflow/#using-access-token","text":"Access your Webflow dashboard. Click on your desired project. Click on the W icon in the top left. Click on Project Settings. Click on the Integrations tab. Scroll down and click generate API token. Use the api token with your Webflow node credentials in n8n.","title":"Using Access Token"},{"location":"integrations/credentials/wekan/","text":"Wekan # You can use these credentials to authenticate the following nodes with Wekan. - Wekan Prerequisites # Install Wekan on your server. Using API Key # Use the Wekan username, password, and URL with your Wekan node credentials in n8n.","title":"Wekan"},{"location":"integrations/credentials/wekan/#wekan","text":"You can use these credentials to authenticate the following nodes with Wekan. - Wekan","title":"Wekan"},{"location":"integrations/credentials/wekan/#prerequisites","text":"Install Wekan on your server.","title":"Prerequisites"},{"location":"integrations/credentials/wekan/#using-api-key","text":"Use the Wekan username, password, and URL with your Wekan node credentials in n8n.","title":"Using API Key"},{"location":"integrations/credentials/wise/","text":"Wise # You can use these credentials to authenticate the following nodes with Wise. - Wise - Wise Trigger Prerequisites # Create a Wise account. Using API Token # Open your Wise dashboard . Click on the username on the top right and select 'Settings' from the dropdown list. Scroll down to the bottom and click on API tokens . Click on the Add new token button. Enter a name in the Name or description field. Click on the Create token button. Scroll down to the bottom and click on API tokens . Click on Reveal key to reveal the newly generated API key. Enter your Wise account password in the Please enter your password field. Copy the displayed API key. Enter the name for your credentials in the Credentials Name field in the 'Wise API' credentials in n8n. Paste the API key in the API Token field in the 'Wise API' credentials in n8n. If you're using a Wise sandbox account, select 'Test' from the Environment dropdown list in the 'Wise API' credentials in n8n. Click on the Create button to create your credentials. The following video demonstrates the steps mentioned above.","title":"Wise"},{"location":"integrations/credentials/wise/#wise","text":"You can use these credentials to authenticate the following nodes with Wise. - Wise - Wise Trigger","title":"Wise"},{"location":"integrations/credentials/wise/#prerequisites","text":"Create a Wise account.","title":"Prerequisites"},{"location":"integrations/credentials/wise/#using-api-token","text":"Open your Wise dashboard . Click on the username on the top right and select 'Settings' from the dropdown list. Scroll down to the bottom and click on API tokens . Click on the Add new token button. Enter a name in the Name or description field. Click on the Create token button. Scroll down to the bottom and click on API tokens . Click on Reveal key to reveal the newly generated API key. Enter your Wise account password in the Please enter your password field. Copy the displayed API key. Enter the name for your credentials in the Credentials Name field in the 'Wise API' credentials in n8n. Paste the API key in the API Token field in the 'Wise API' credentials in n8n. If you're using a Wise sandbox account, select 'Test' from the Environment dropdown list in the 'Wise API' credentials in n8n. Click on the Create button to create your credentials. The following video demonstrates the steps mentioned above.","title":"Using API Token"},{"location":"integrations/credentials/wooCommerce/","text":"WooCommerce # You can use these credentials to authenticate the following nodes with WooCommerce. - WooCommerce - WooCommerce Trigger Prerequisites # Install the WooCommerce plugin on your WordPress website. Using Access Token # Access your WordPress dashboard. Select 'Settings' from the WooCommerce dropdown list. Click on the Advanced tab. Click on REST API . Click on the Create an API Key button. Enter the necessary details. Select 'Read/Write' from the Permissions dropdown list. Click on the Generate API Key button. Use your WooCommerce website URL, Consumer key & Consumer secret with your WooCommerce node credentials in n8n.","title":"WooCommerce"},{"location":"integrations/credentials/wooCommerce/#woocommerce","text":"You can use these credentials to authenticate the following nodes with WooCommerce. - WooCommerce - WooCommerce Trigger","title":"WooCommerce"},{"location":"integrations/credentials/wooCommerce/#prerequisites","text":"Install the WooCommerce plugin on your WordPress website.","title":"Prerequisites"},{"location":"integrations/credentials/wooCommerce/#using-access-token","text":"Access your WordPress dashboard. Select 'Settings' from the WooCommerce dropdown list. Click on the Advanced tab. Click on REST API . Click on the Create an API Key button. Enter the necessary details. Select 'Read/Write' from the Permissions dropdown list. Click on the Generate API Key button. Use your WooCommerce website URL, Consumer key & Consumer secret with your WooCommerce node credentials in n8n.","title":"Using Access Token"},{"location":"integrations/credentials/wordpress/","text":"WordPress # You can use these credentials to authenticate the following nodes with WordPress. - WordPress Prerequisites # Create a WordPress account or deploy WordPress on a server. Using Username and Password # Log in to your WordPress dashboard. Click on Profile in the left side menu, and scroll down to the Application Password section. Enter an application name in the New Application Password Name field. Click on the Add New Application Password button. Copy the displayed application password. Enter your WordPress username in the Username field in the 'WordPress API' credentials in n8n. Paste the application password in the Password field in the 'WordPress API' credentials in n8n. Enter your WordPress website URL in the WordPress URL field in the 'WordPress API' credentials in n8n. Click on the Save button to save the credentials.","title":"WordPress"},{"location":"integrations/credentials/wordpress/#wordpress","text":"You can use these credentials to authenticate the following nodes with WordPress. - WordPress","title":"WordPress"},{"location":"integrations/credentials/wordpress/#prerequisites","text":"Create a WordPress account or deploy WordPress on a server.","title":"Prerequisites"},{"location":"integrations/credentials/wordpress/#using-username-and-password","text":"Log in to your WordPress dashboard. Click on Profile in the left side menu, and scroll down to the Application Password section. Enter an application name in the New Application Password Name field. Click on the Add New Application Password button. Copy the displayed application password. Enter your WordPress username in the Username field in the 'WordPress API' credentials in n8n. Paste the application password in the Password field in the 'WordPress API' credentials in n8n. Enter your WordPress website URL in the WordPress URL field in the 'WordPress API' credentials in n8n. Click on the Save button to save the credentials.","title":"Using Username and Password"},{"location":"integrations/credentials/workable/","text":"Workable # You can use these credentials to authenticate the following nodes: Workable Trigger Prerequisites # Create a Workable account. Using API Key # Log in to Workable . Click on the avatar on the top-right and select Settings , then Integrations . Scroll down to Access Token and click Generate new token . Copy the newly generated token. Paste the token in the Access Token field of the Workable API credentials screen in n8n. Add the part between https:// and .workable.com of your Workable subdomain in the Subdomain field of the n8n credentials screen. Click the Save button to save your credentials in n8n.","title":"Workable"},{"location":"integrations/credentials/workable/#workable","text":"You can use these credentials to authenticate the following nodes: Workable Trigger","title":"Workable"},{"location":"integrations/credentials/workable/#prerequisites","text":"Create a Workable account.","title":"Prerequisites"},{"location":"integrations/credentials/workable/#using-api-key","text":"Log in to Workable . Click on the avatar on the top-right and select Settings , then Integrations . Scroll down to Access Token and click Generate new token . Copy the newly generated token. Paste the token in the Access Token field of the Workable API credentials screen in n8n. Add the part between https:// and .workable.com of your Workable subdomain in the Subdomain field of the n8n credentials screen. Click the Save button to save your credentials in n8n.","title":"Using API Key"},{"location":"integrations/credentials/wufoo/","text":"Wufoo # You can use these credentials to authenticate the following nodes with Wufoo. - Wufoo Trigger Prerequisites # Create a Wufoo account. Using API Key # Access the Wufoo Form Manager . To the right of the form, click on ... and select API Information from the dropdown list. Copy the API Key . Click on Account from the top right corner and select 'My Account' from the dropdown list. Copy the Subdomain . Use this API Key and Subdomain with your Wufoo Trigger node credentials in n8n.","title":"Wufoo"},{"location":"integrations/credentials/wufoo/#wufoo","text":"You can use these credentials to authenticate the following nodes with Wufoo. - Wufoo Trigger","title":"Wufoo"},{"location":"integrations/credentials/wufoo/#prerequisites","text":"Create a Wufoo account.","title":"Prerequisites"},{"location":"integrations/credentials/wufoo/#using-api-key","text":"Access the Wufoo Form Manager . To the right of the form, click on ... and select API Information from the dropdown list. Copy the API Key . Click on Account from the top right corner and select 'My Account' from the dropdown list. Copy the Subdomain . Use this API Key and Subdomain with your Wufoo Trigger node credentials in n8n.","title":"Using API Key"},{"location":"integrations/credentials/xero/","text":"Xero # You can use these credentials to authenticate the following nodes with Xero. Xero Prerequisites # Create a Xero account. Using OAuth # Go to the apps page in the Xero developer portal. Click on the New app button and fill in any necessary information. Copy the 'OAuth Callback URL' provided in the Xero OAuth API credentials in n8n and paste it in the OAuth 2.0 redirect URI field in the Xero app creation page. Click on the Create app button. Click on Generate a secret and use the 'Client id' and the 'Client secret' with your Xero OAuth API credentials in n8n. Click on the circle button in the OAuth section to connect a Xero account to n8n. Click the Save button to save your credentials.","title":"Xero"},{"location":"integrations/credentials/xero/#xero","text":"You can use these credentials to authenticate the following nodes with Xero. Xero","title":"Xero"},{"location":"integrations/credentials/xero/#prerequisites","text":"Create a Xero account.","title":"Prerequisites"},{"location":"integrations/credentials/xero/#using-oauth","text":"Go to the apps page in the Xero developer portal. Click on the New app button and fill in any necessary information. Copy the 'OAuth Callback URL' provided in the Xero OAuth API credentials in n8n and paste it in the OAuth 2.0 redirect URI field in the Xero app creation page. Click on the Create app button. Click on Generate a secret and use the 'Client id' and the 'Client secret' with your Xero OAuth API credentials in n8n. Click on the circle button in the OAuth section to connect a Xero account to n8n. Click the Save button to save your credentials.","title":"Using OAuth"},{"location":"integrations/credentials/yourls/","text":"Yourls # You can use these credentials to authenticate the following nodes with Yourls. - Yourls Prerequisites # Install Yourls on your server. Using API # Access your Yourls Admin dashboard. Click on Tools on the top left. Scroll down to the Secure passwordless API call section. Copy the signature token . Use this Signature and the URL of your Yourls instance with your Yourls node credentials in n8n.","title":"Yourls"},{"location":"integrations/credentials/yourls/#yourls","text":"You can use these credentials to authenticate the following nodes with Yourls. - Yourls","title":"Yourls"},{"location":"integrations/credentials/yourls/#prerequisites","text":"Install Yourls on your server.","title":"Prerequisites"},{"location":"integrations/credentials/yourls/#using-api","text":"Access your Yourls Admin dashboard. Click on Tools on the top left. Scroll down to the Secure passwordless API call section. Copy the signature token . Use this Signature and the URL of your Yourls instance with your Yourls node credentials in n8n.","title":"Using API"},{"location":"integrations/credentials/zammad/","text":"Zammad # You can use these credentials to authenticate the following nodes with Zammad. - Zammad Prerequisites # Create a hosted Zammad account or set up your own Zammad instance. For the token-based authentication make sure Token Access is enabled in the API section of your Zammad instance's System settings. Basic Auth # Enter the URL of your Zammad instance in the Base URL field of the n8n credentials screen. Enter your Zammad email om the Email field and your password in the Password field. Token Auth # Log in to your Zammad instance Click your avatar in the lower left corner, then click on Profile Select Token Access and click Create Enter a name for your new token and pick all required permissions. Click Create once done. Copy the token shown into the Access Token field in n8n. Enter the URL of your Zammad instance in the Base URL field.","title":"Zammad"},{"location":"integrations/credentials/zammad/#zammad","text":"You can use these credentials to authenticate the following nodes with Zammad. - Zammad","title":"Zammad"},{"location":"integrations/credentials/zammad/#prerequisites","text":"Create a hosted Zammad account or set up your own Zammad instance. For the token-based authentication make sure Token Access is enabled in the API section of your Zammad instance's System settings.","title":"Prerequisites"},{"location":"integrations/credentials/zammad/#basic-auth","text":"Enter the URL of your Zammad instance in the Base URL field of the n8n credentials screen. Enter your Zammad email om the Email field and your password in the Password field.","title":"Basic Auth"},{"location":"integrations/credentials/zammad/#token-auth","text":"Log in to your Zammad instance Click your avatar in the lower left corner, then click on Profile Select Token Access and click Create Enter a name for your new token and pick all required permissions. Click Create once done. Copy the token shown into the Access Token field in n8n. Enter the URL of your Zammad instance in the Base URL field.","title":"Token Auth"},{"location":"integrations/credentials/zendesk/","text":"Zendesk # You can use these credentials to authenticate the following nodes with Zendesk. - Zendesk - Zendesk Trigger Prerequisites # Create a Zendesk account. Using OAuth # Open your Zendesk dashboard. Click on the gear icon on the left. Click on 'API' under the CHANNELS section in the sidebar. Click on the OAuth Clients tab. Click on the Add OAuth client button. Enter the client name in the Client Name field. Enter a description in the Description field. Copy the 'OAuth Callback URL' provided in the 'Zendesk OAuth2 API' credentials in n8n. Paste it in the Redirect URLs field on the Zendesk API credentials page. Click on the Save button. Click on the OK button on the Please store the secret that will appear pop-up. Scroll down to the Secret section and copy the displayed Secret . Paste this secret in the Client Secret field in the 'Zendesk OAuth2 API' credentials in n8n. Copy the Unique identifier from the Zendesk API credentials page. Paste it in the Client ID field in the 'Zendesk OAuth2 API' credentials in n8n. Enter your Zendesk subdomain in the Subdomain field in the 'Zendesk OAuth2 API' credentials in n8n. Refer to the FAQs to learn more about subdomain. Enter the name for your credentials in the Credentials Name field in the 'Zendesk OAuth2 API' credentials in n8n. Click on the circle button in the OAuth section to connect a Zendesk account to n8n. Click on the Save button to save your credentials. The following video demonstrates the steps mentioned above. Using Access Token # Open your Zendesk dashboard. Click on the gear icon on the left. Click on 'API' under the CHANNELS section in the sidebar. If Token access is disabled, click on the switch to toggle it to 'Enabled'. Click on the Add API token button. Enter a description in the API token description field. Click on the Copy button to copy the API token. Click on the Save button. Enter the name for your credentials in the Credentials Name field in the 'Zendesk API' credentials in n8n. Enter your Zendesk subdomain in the Subdomain field. Refer to the FAQs to learn more about subdomain. Enter your Zendesk email address in the Email field. Paste the API token in the API Token field. Click on the Save button to save your credentials. The following video demonstrates the steps mentioned above. FAQs # How do I get my Zendesk subdomain? # To get your Zendesk subdomain, follow the steps mentioned below. 1. Access your Zendesk dashboard. 2. Copy the string of characters located between https:// and .zendesk.com/agent/dashboard in your Zendesk URL. This string is the subdomain. For example, if your Zendesk URL is https://example.zendesk.com/agent/dashboard , the subdomain will be example .","title":"Zendesk"},{"location":"integrations/credentials/zendesk/#zendesk","text":"You can use these credentials to authenticate the following nodes with Zendesk. - Zendesk - Zendesk Trigger","title":"Zendesk"},{"location":"integrations/credentials/zendesk/#prerequisites","text":"Create a Zendesk account.","title":"Prerequisites"},{"location":"integrations/credentials/zendesk/#using-oauth","text":"Open your Zendesk dashboard. Click on the gear icon on the left. Click on 'API' under the CHANNELS section in the sidebar. Click on the OAuth Clients tab. Click on the Add OAuth client button. Enter the client name in the Client Name field. Enter a description in the Description field. Copy the 'OAuth Callback URL' provided in the 'Zendesk OAuth2 API' credentials in n8n. Paste it in the Redirect URLs field on the Zendesk API credentials page. Click on the Save button. Click on the OK button on the Please store the secret that will appear pop-up. Scroll down to the Secret section and copy the displayed Secret . Paste this secret in the Client Secret field in the 'Zendesk OAuth2 API' credentials in n8n. Copy the Unique identifier from the Zendesk API credentials page. Paste it in the Client ID field in the 'Zendesk OAuth2 API' credentials in n8n. Enter your Zendesk subdomain in the Subdomain field in the 'Zendesk OAuth2 API' credentials in n8n. Refer to the FAQs to learn more about subdomain. Enter the name for your credentials in the Credentials Name field in the 'Zendesk OAuth2 API' credentials in n8n. Click on the circle button in the OAuth section to connect a Zendesk account to n8n. Click on the Save button to save your credentials. The following video demonstrates the steps mentioned above.","title":"Using OAuth"},{"location":"integrations/credentials/zendesk/#using-access-token","text":"Open your Zendesk dashboard. Click on the gear icon on the left. Click on 'API' under the CHANNELS section in the sidebar. If Token access is disabled, click on the switch to toggle it to 'Enabled'. Click on the Add API token button. Enter a description in the API token description field. Click on the Copy button to copy the API token. Click on the Save button. Enter the name for your credentials in the Credentials Name field in the 'Zendesk API' credentials in n8n. Enter your Zendesk subdomain in the Subdomain field. Refer to the FAQs to learn more about subdomain. Enter your Zendesk email address in the Email field. Paste the API token in the API Token field. Click on the Save button to save your credentials. The following video demonstrates the steps mentioned above.","title":"Using Access Token"},{"location":"integrations/credentials/zendesk/#faqs","text":"","title":"FAQs"},{"location":"integrations/credentials/zendesk/#how-do-i-get-my-zendesk-subdomain","text":"To get your Zendesk subdomain, follow the steps mentioned below. 1. Access your Zendesk dashboard. 2. Copy the string of characters located between https:// and .zendesk.com/agent/dashboard in your Zendesk URL. This string is the subdomain. For example, if your Zendesk URL is https://example.zendesk.com/agent/dashboard , the subdomain will be example .","title":"How do I get my Zendesk subdomain?"},{"location":"integrations/credentials/zoho/","text":"Zoho # You can use these credentials to authenticate the following nodes with Zoho. - Zoho CRM Prerequisites # Create a Zoho account. Using OAuth # \u26c5\ufe0f Note for n8n.cloud users You'll only need to enter the Credentials Name and click on the circle button in the OAuth section to connect your Zoho account to n8n. Access your Zoho Developer Console . Click on the 'GET STARTED' button. Click on the 'Server-based Applications' box. Copy the 'OAuth Callback URL' provided in the Zoho OAuth2 API credentials in n8n and paste it in the Authorized Redirect URIs field in the Zoho API Console app creation page. Fill in any other necessary information and click on the 'CREATE' button. Use the 'Client ID' and the 'Client Secret' displayed with your Zoho OAuth2 API credentials in n8n. Click on the circle button in the OAuth section to connect a Zoho CRM account to n8n. Click the Save button to save your credentials.","title":"Zoho"},{"location":"integrations/credentials/zoho/#zoho","text":"You can use these credentials to authenticate the following nodes with Zoho. - Zoho CRM","title":"Zoho"},{"location":"integrations/credentials/zoho/#prerequisites","text":"Create a Zoho account.","title":"Prerequisites"},{"location":"integrations/credentials/zoho/#using-oauth","text":"\u26c5\ufe0f Note for n8n.cloud users You'll only need to enter the Credentials Name and click on the circle button in the OAuth section to connect your Zoho account to n8n. Access your Zoho Developer Console . Click on the 'GET STARTED' button. Click on the 'Server-based Applications' box. Copy the 'OAuth Callback URL' provided in the Zoho OAuth2 API credentials in n8n and paste it in the Authorized Redirect URIs field in the Zoho API Console app creation page. Fill in any other necessary information and click on the 'CREATE' button. Use the 'Client ID' and the 'Client Secret' displayed with your Zoho OAuth2 API credentials in n8n. Click on the circle button in the OAuth section to connect a Zoho CRM account to n8n. Click the Save button to save your credentials.","title":"Using OAuth"},{"location":"integrations/credentials/zoom/","text":"Zoom # You can use these credentials to authenticate the following nodes with Zoom. - Zoom Prerequisites # Create a Zoom account. Using OAuth # Visit the Zoom App Marketplace and select the 'Build App' option in the Develop dropdown on the top-right corner. Create a new OAuth app. Select 'User-managed app'. Set the \"Would you like to publish this app on Zoom App Marketplace?\" slider to off. Click on the Create button. Copy the 'OAuth Callback URL' provided in the Zoom OAuth2 API credentials in n8n and paste it in the 'Redirect URL for OAuth' section in the Zoom app creation page. Copy the Whitelist URL' provided in the Zoom OAuth2 API credentials in n8n and paste it in the 'Redirect URL for OAuth' section in the Zoom app creation page. Copy the Client ID and Client Secret provided in the Zoom app creation page and paste it in the Zoom OAuth2 API credentials in n8n. Enter any necessary information and click continue. In the 'Scopes' section, click Add Scopes and choose the scopes that you plan to use. Click on the circle button in the OAuth section to connect your Zoom account to n8n. Click the Save button to save your credentials. Using Access Token # Visit the Zoom App Marketplace and select the 'Build App' option in the Develop dropdown on the top-right corner. Create a new JWT app and enter any necessary information. Go to the 'App Credentials' tab. Click on View JWT Token and copy the given token. Go to the 'Activation' tab and click on the Activate your app button. Use the JWT token you copied with your Zoom API credentials in n8n.","title":"Zoom"},{"location":"integrations/credentials/zoom/#zoom","text":"You can use these credentials to authenticate the following nodes with Zoom. - Zoom","title":"Zoom"},{"location":"integrations/credentials/zoom/#prerequisites","text":"Create a Zoom account.","title":"Prerequisites"},{"location":"integrations/credentials/zoom/#using-oauth","text":"Visit the Zoom App Marketplace and select the 'Build App' option in the Develop dropdown on the top-right corner. Create a new OAuth app. Select 'User-managed app'. Set the \"Would you like to publish this app on Zoom App Marketplace?\" slider to off. Click on the Create button. Copy the 'OAuth Callback URL' provided in the Zoom OAuth2 API credentials in n8n and paste it in the 'Redirect URL for OAuth' section in the Zoom app creation page. Copy the Whitelist URL' provided in the Zoom OAuth2 API credentials in n8n and paste it in the 'Redirect URL for OAuth' section in the Zoom app creation page. Copy the Client ID and Client Secret provided in the Zoom app creation page and paste it in the Zoom OAuth2 API credentials in n8n. Enter any necessary information and click continue. In the 'Scopes' section, click Add Scopes and choose the scopes that you plan to use. Click on the circle button in the OAuth section to connect your Zoom account to n8n. Click the Save button to save your credentials.","title":"Using OAuth"},{"location":"integrations/credentials/zoom/#using-access-token","text":"Visit the Zoom App Marketplace and select the 'Build App' option in the Develop dropdown on the top-right corner. Create a new JWT app and enter any necessary information. Go to the 'App Credentials' tab. Click on View JWT Token and copy the given token. Go to the 'Activation' tab and click on the Activate your app button. Use the JWT token you copied with your Zoom API credentials in n8n.","title":"Using Access Token"},{"location":"integrations/credentials/zulip/","text":"Zulip # You can use these credentials to authenticate the following nodes with Zulip. - Zulip Prerequisites # Create a Zulip account. Using Access Token # Access your Zulip dashboard. Click on the gear icon on the top right. Click on Settings . Click on the Show/change your API key button under the API Key section. Use your Email, URL, and API Key in your Zulip credentials.","title":"Zulip"},{"location":"integrations/credentials/zulip/#zulip","text":"You can use these credentials to authenticate the following nodes with Zulip. - Zulip","title":"Zulip"},{"location":"integrations/credentials/zulip/#prerequisites","text":"Create a Zulip account.","title":"Prerequisites"},{"location":"integrations/credentials/zulip/#using-access-token","text":"Access your Zulip dashboard. Click on the gear icon on the top right. Click on Settings . Click on the Show/change your API key button under the API Key section. Use your Email, URL, and API Key in your Zulip credentials.","title":"Using Access Token"},{"location":"integrations/nodes/","text":"Overview # This section provides information about n8n's nodes.","title":"Overview"},{"location":"integrations/nodes/#overview","text":"This section provides information about n8n's nodes.","title":"Overview"},{"location":"integrations/nodes/n8n-nodes-base.Brandfetch/","text":"Brandfetch # Brandfetch is a brand search engine that helps you find logos, colors, fonts, images, and more. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Return a company's colors Return a company's data Return a company's fonts Return a company's industry Return a company's logo & icon Example Usage # This workflow allows you to get the logo, icon, and information of a company and store it in Airtable. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Brandfetch - Set - Airtable The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Brandfetch node (logo) # This node will fetch the URL of the logo and icon of n8n. If you want the logo and icon of a different company, enter the domain name of that company instead. First of all, you'll have to enter credentials for the Brandfetch node. You can find out how to do that here . Enter n8n.io in the Domain field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node retrieves the URL of n8n's logo and icon. 3. Brandfetch1 node (company) # This node will fetch company data about n8n. Select the credentials that you entered in the previous Brandfetch node. Select 'Company' from the Operation dropdown list. Click on the gears icon next to the Domain field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Brandfetch > Parameters > domain. You can also add the following expression: {{$node[\"Brandfetch\"].parameter[\"domain\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns company data about n8n. 4. Set node # We will use the Set node to ensure that only the data that we set in this node gets passed on to the next nodes in the workflow. We will set the value of Name , Icon URL , and Logo URL in this node. Click on the Add Value button and select 'String' from the dropdown list. Enter Name in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Brandfetch1 > Output Data > JSON > name. You can also add the following expression: {{$node[\"Brandfetch1\"].json[\"name\"]}} . Click on the Add Value button and select 'String' from the dropdown list. Enter Icon URL in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Brandfetch > Output Data > JSON > icon > image. You can also add the following expression: {{$node[\"Brandfetch\"].json[\"icon\"][\"image\"]}} . Click on the Add Value button and select 'String' from the dropdown list. Enter Logo URL in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Brandfetch > Output Data > JSON > logo > image. You can also add the following expression: {{$node[\"Brandfetch\"].json[\"logo\"][\"image\"]}} . Toggle Keep Only Set to true . We set this option to true to ensure that only the data that we have set in this node get passed on to the next nodes in the workflow. Click on Execute Node to run the node. In the screenshot below, you will notice that the node sets the value of Name , Icon URL , and Logo URL . This value is passed to the next node in the workflow. 5. Airtable node (Append) # This node will append the data that we set in the previous node to a table. Create a table like this in your Airtable base. First of all, you'll have to enter credentials for the Airtable node. You can find out how to do that here . Select 'Append' from the Operation dropdown list. Enter the Base ID in the Base ID field. For obtaining the Base ID, head over to their API page and select the correct base. You\u2019ll find the Base ID there. Enter the name of your table in the Table field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node appends the data that we had set in the previous node.","title":"Brandfetch"},{"location":"integrations/nodes/n8n-nodes-base.Brandfetch/#brandfetch","text":"Brandfetch is a brand search engine that helps you find logos, colors, fonts, images, and more. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Brandfetch"},{"location":"integrations/nodes/n8n-nodes-base.Brandfetch/#basic-operations","text":"Return a company's colors Return a company's data Return a company's fonts Return a company's industry Return a company's logo & icon","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.Brandfetch/#example-usage","text":"This workflow allows you to get the logo, icon, and information of a company and store it in Airtable. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Brandfetch - Set - Airtable The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.Brandfetch/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.Brandfetch/#2-brandfetch-node-logo","text":"This node will fetch the URL of the logo and icon of n8n. If you want the logo and icon of a different company, enter the domain name of that company instead. First of all, you'll have to enter credentials for the Brandfetch node. You can find out how to do that here . Enter n8n.io in the Domain field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node retrieves the URL of n8n's logo and icon.","title":"2. Brandfetch node (logo)"},{"location":"integrations/nodes/n8n-nodes-base.Brandfetch/#3-brandfetch1-node-company","text":"This node will fetch company data about n8n. Select the credentials that you entered in the previous Brandfetch node. Select 'Company' from the Operation dropdown list. Click on the gears icon next to the Domain field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Brandfetch > Parameters > domain. You can also add the following expression: {{$node[\"Brandfetch\"].parameter[\"domain\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns company data about n8n.","title":"3. Brandfetch1 node (company)"},{"location":"integrations/nodes/n8n-nodes-base.Brandfetch/#4-set-node","text":"We will use the Set node to ensure that only the data that we set in this node gets passed on to the next nodes in the workflow. We will set the value of Name , Icon URL , and Logo URL in this node. Click on the Add Value button and select 'String' from the dropdown list. Enter Name in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Brandfetch1 > Output Data > JSON > name. You can also add the following expression: {{$node[\"Brandfetch1\"].json[\"name\"]}} . Click on the Add Value button and select 'String' from the dropdown list. Enter Icon URL in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Brandfetch > Output Data > JSON > icon > image. You can also add the following expression: {{$node[\"Brandfetch\"].json[\"icon\"][\"image\"]}} . Click on the Add Value button and select 'String' from the dropdown list. Enter Logo URL in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Brandfetch > Output Data > JSON > logo > image. You can also add the following expression: {{$node[\"Brandfetch\"].json[\"logo\"][\"image\"]}} . Toggle Keep Only Set to true . We set this option to true to ensure that only the data that we have set in this node get passed on to the next nodes in the workflow. Click on Execute Node to run the node. In the screenshot below, you will notice that the node sets the value of Name , Icon URL , and Logo URL . This value is passed to the next node in the workflow.","title":"4. Set node"},{"location":"integrations/nodes/n8n-nodes-base.Brandfetch/#5-airtable-node-append","text":"This node will append the data that we set in the previous node to a table. Create a table like this in your Airtable base. First of all, you'll have to enter credentials for the Airtable node. You can find out how to do that here . Select 'Append' from the Operation dropdown list. Enter the Base ID in the Base ID field. For obtaining the Base ID, head over to their API page and select the correct base. You\u2019ll find the Base ID there. Enter the name of your table in the Table field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node appends the data that we had set in the previous node.","title":"5. Airtable node (Append)"},{"location":"integrations/nodes/n8n-nodes-base.actionNetwork/","text":"Action Network # Action Network is an open platform that empowers individuals and groups to organize for progressive causes. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic operations # Attendance Create Get Get All Event Create Get Get All Person Create Get Get All Update Person Tag Add Remove Petition Create Get Get All Update Signature Create Get Get All Update Tag Create Get Get All Example # This workflow allows you to create a new event in Action Network, then create a new person and mark them as having attended your event. This workflow uses the following two nodes. - Start - ActiveCampaign The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Action Network node # First enter your credentials. You can find out how to do that here . Fill in the remaining parameters as follows: Resource : Select Event from the dropdown list. Operation : Select Create from the dropdown list. Origin System : Enter where this event originated. n8n.io in our example. Title : Enter the name of your event, July Meetup in our example here. Enable the Simple toggle to return an easier to view response as opposed to the complete raw data. Use the Additional Fields to enter any further details about your event. Here we provided the Start Date. 3. Action Network1 node # First enter your credentials. You can find out how to do that here . Fill in the remaining parameters as follows: Resource : Select Person from the dropdown list. Operation : Select Create from the dropdown list. Enable the Simple toggle to return an easier to view response as opposed to the complete raw data. In the Email Address section, enter the address and status for this person (here we Subscribe them). Use the Additional Fields to enter any further details about this person. Here we provided their given name. 4. Action Network2 node # First enter your credentials. You can find out how to do that here . Fill in the remaining parameters as follows: Resource : Select Attendance from the dropdown list. Operation : Select Create from the dropdown list. Person ID : Enter the ID for the person created by the previous node. Event ID : Enter the ID for the event created in the first node. Enable the Simple toggle to return an easier to view response as opposed to the complete raw data.","title":"Action Network"},{"location":"integrations/nodes/n8n-nodes-base.actionNetwork/#action-network","text":"Action Network is an open platform that empowers individuals and groups to organize for progressive causes. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Action Network"},{"location":"integrations/nodes/n8n-nodes-base.actionNetwork/#basic-operations","text":"Attendance Create Get Get All Event Create Get Get All Person Create Get Get All Update Person Tag Add Remove Petition Create Get Get All Update Signature Create Get Get All Update Tag Create Get Get All","title":"Basic operations"},{"location":"integrations/nodes/n8n-nodes-base.actionNetwork/#example","text":"This workflow allows you to create a new event in Action Network, then create a new person and mark them as having attended your event. This workflow uses the following two nodes. - Start - ActiveCampaign The final workflow should look like the following image.","title":"Example"},{"location":"integrations/nodes/n8n-nodes-base.actionNetwork/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.actionNetwork/#2-action-network-node","text":"First enter your credentials. You can find out how to do that here . Fill in the remaining parameters as follows: Resource : Select Event from the dropdown list. Operation : Select Create from the dropdown list. Origin System : Enter where this event originated. n8n.io in our example. Title : Enter the name of your event, July Meetup in our example here. Enable the Simple toggle to return an easier to view response as opposed to the complete raw data. Use the Additional Fields to enter any further details about your event. Here we provided the Start Date.","title":"2. Action Network node"},{"location":"integrations/nodes/n8n-nodes-base.actionNetwork/#3-action-network1-node","text":"First enter your credentials. You can find out how to do that here . Fill in the remaining parameters as follows: Resource : Select Person from the dropdown list. Operation : Select Create from the dropdown list. Enable the Simple toggle to return an easier to view response as opposed to the complete raw data. In the Email Address section, enter the address and status for this person (here we Subscribe them). Use the Additional Fields to enter any further details about this person. Here we provided their given name.","title":"3. Action Network1 node"},{"location":"integrations/nodes/n8n-nodes-base.actionNetwork/#4-action-network2-node","text":"First enter your credentials. You can find out how to do that here . Fill in the remaining parameters as follows: Resource : Select Attendance from the dropdown list. Operation : Select Create from the dropdown list. Person ID : Enter the ID for the person created by the previous node. Event ID : Enter the ID for the event created in the first node. Enable the Simple toggle to return an easier to view response as opposed to the complete raw data.","title":"4. Action Network2 node"},{"location":"integrations/nodes/n8n-nodes-base.activeCampaign/","text":"ActiveCampaign # ActiveCampaign is a cloud software platform for small-to-mid-sized business. The company offers software for customer experience automation, which combines the email marketing, marketing automation, sales automation, and CRM categories. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Account Create an account Delete an account Get data of an account Get data of all accounts Update an account Account Contact Create an association Delete an association Update an association Contact Create a contact Delete a contact Get data of a contact Get data of all contact Update a contact Contact List Add contact to a list Remove contact from a list Contact Tag Add a tag to a contact Remove a tag from a contact Connection Create a connection Delete a connection Get data of a connection Get data of all connections Update a connection Deal Create a deal Delete a deal Get data of a deal Get data of all deals Update a deal Create a deal note Update a deal note E-commerce Order Create a order Delete a order Get data of a order Get data of all orders Update a order E-Commerce Customer Create a E-commerce Customer Delete a E-commerce Customer Get data of a E-commerce Customer Get data of all E-commerce Customer Update a E-commerce Customer E-commerce Order Products Get data of all order products Get data of a ordered product Get data of an order's products List Get all lists Tag Create a tag Delete a tag Get data of a tag Get data of all tags Update a tag Example Usage # This workflow allows you to create a contact in ActiveCampaign. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - ActiveCampaign The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. ActiveCampaign node # First of all, you'll have to enter credentials for the ActiveCampaign node. You can find out how to do that here . Enter the email of the contact in the Email field. Toggle the Update if exists option to yes. Under the Additional Fields section, click on the Add Field button and select First Name . Enter the first name of the contact in the First Name field. Click on Add Field again and select Last Name . Enter the last name of the contact in the Last name field. Click on Execute Node to run the workflow.","title":"ActiveCampaign"},{"location":"integrations/nodes/n8n-nodes-base.activeCampaign/#activecampaign","text":"ActiveCampaign is a cloud software platform for small-to-mid-sized business. The company offers software for customer experience automation, which combines the email marketing, marketing automation, sales automation, and CRM categories. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"ActiveCampaign"},{"location":"integrations/nodes/n8n-nodes-base.activeCampaign/#basic-operations","text":"Account Create an account Delete an account Get data of an account Get data of all accounts Update an account Account Contact Create an association Delete an association Update an association Contact Create a contact Delete a contact Get data of a contact Get data of all contact Update a contact Contact List Add contact to a list Remove contact from a list Contact Tag Add a tag to a contact Remove a tag from a contact Connection Create a connection Delete a connection Get data of a connection Get data of all connections Update a connection Deal Create a deal Delete a deal Get data of a deal Get data of all deals Update a deal Create a deal note Update a deal note E-commerce Order Create a order Delete a order Get data of a order Get data of all orders Update a order E-Commerce Customer Create a E-commerce Customer Delete a E-commerce Customer Get data of a E-commerce Customer Get data of all E-commerce Customer Update a E-commerce Customer E-commerce Order Products Get data of all order products Get data of a ordered product Get data of an order's products List Get all lists Tag Create a tag Delete a tag Get data of a tag Get data of all tags Update a tag","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.activeCampaign/#example-usage","text":"This workflow allows you to create a contact in ActiveCampaign. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - ActiveCampaign The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.activeCampaign/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.activeCampaign/#2-activecampaign-node","text":"First of all, you'll have to enter credentials for the ActiveCampaign node. You can find out how to do that here . Enter the email of the contact in the Email field. Toggle the Update if exists option to yes. Under the Additional Fields section, click on the Add Field button and select First Name . Enter the first name of the contact in the First Name field. Click on Add Field again and select Last Name . Enter the last name of the contact in the Last name field. Click on Execute Node to run the workflow.","title":"2. ActiveCampaign node"},{"location":"integrations/nodes/n8n-nodes-base.affinity/","text":"Affinity # Affinity is a powerful relationship intelligence platform enabling teams to leverage their network to close the next big deal. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # List Get a list Get all lists List Entry Create a list entry Delete a list entry Get a list entry Get all list entries Organization Create an organization Delete an organization Get an organization Get all organizations Update an organization Person Create a person Delete a person Get a person Get all persons Update a person Example Usage # This workflow allows you to create an organization in Affinity. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Affinity The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Affinity node # First of all, you'll have to enter credentials for the Affinity node. You can find out how to do that here . Enter the name of the organization in the Name field. Enter the domain name of the organization in the Domain field. Click on Execute Node to run the workflow.","title":"Affinity"},{"location":"integrations/nodes/n8n-nodes-base.affinity/#affinity","text":"Affinity is a powerful relationship intelligence platform enabling teams to leverage their network to close the next big deal. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Affinity"},{"location":"integrations/nodes/n8n-nodes-base.affinity/#basic-operations","text":"List Get a list Get all lists List Entry Create a list entry Delete a list entry Get a list entry Get all list entries Organization Create an organization Delete an organization Get an organization Get all organizations Update an organization Person Create a person Delete a person Get a person Get all persons Update a person","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.affinity/#example-usage","text":"This workflow allows you to create an organization in Affinity. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Affinity The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.affinity/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.affinity/#2-affinity-node","text":"First of all, you'll have to enter credentials for the Affinity node. You can find out how to do that here . Enter the name of the organization in the Name field. Enter the domain name of the organization in the Domain field. Click on Execute Node to run the workflow.","title":"2. Affinity node"},{"location":"integrations/nodes/n8n-nodes-base.agileCrm/","text":"Agile CRM # Agile CRM is a CRM with Sales, Marketing and Service automation in single platform. It has sales tracking, contact management, marketing automation, web analytics, two-way emails, telephony, and a helpdesk. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Company Create a new company Delete a company Get a company Get all companies Update company properties Contact Create a new contact Delete a contact Get a contact Get all contacts Update contact properties Deal Create a new deal Delete a deal Get a deal Get all deals Update deal properties Example Usage # This workflow allows you to create a new contact in Agile CRM. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Agile CRM The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Agile CRM node # First of all, you'll have to enter credentials for the Agile CRM node. You can find out how to do that here . Select the 'Create' option from the Operation dropdown list. Under the Additional Fields section, click on the Add Field button and select First Name . Enter the first name of the contact in the First Name field. Click on Add Field again and select Last Name . Enter the last name of the contact in the Last name field. Click on Execute Node to run the workflow.","title":"Agile CRM"},{"location":"integrations/nodes/n8n-nodes-base.agileCrm/#agile-crm","text":"Agile CRM is a CRM with Sales, Marketing and Service automation in single platform. It has sales tracking, contact management, marketing automation, web analytics, two-way emails, telephony, and a helpdesk. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Agile CRM"},{"location":"integrations/nodes/n8n-nodes-base.agileCrm/#basic-operations","text":"Company Create a new company Delete a company Get a company Get all companies Update company properties Contact Create a new contact Delete a contact Get a contact Get all contacts Update contact properties Deal Create a new deal Delete a deal Get a deal Get all deals Update deal properties","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.agileCrm/#example-usage","text":"This workflow allows you to create a new contact in Agile CRM. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Agile CRM The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.agileCrm/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.agileCrm/#2-agile-crm-node","text":"First of all, you'll have to enter credentials for the Agile CRM node. You can find out how to do that here . Select the 'Create' option from the Operation dropdown list. Under the Additional Fields section, click on the Add Field button and select First Name . Enter the first name of the contact in the First Name field. Click on Add Field again and select Last Name . Enter the last name of the contact in the Last name field. Click on Execute Node to run the workflow.","title":"2. Agile CRM node"},{"location":"integrations/nodes/n8n-nodes-base.airtable/","text":"Airtable # Airtable is a spreadsheet-database hybrid, with the features of a database but applied to a spreadsheet. The fields in an Airtable table are similar to cells in a spreadsheet, but have types such as 'checkbox', 'phone number', and 'drop-down list', and can reference file attachments like images. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Append the data to a table Delete data from a table List data from a table Read data from a table Update data in a table Example Usage # This workflow allows you to insert and update data from a table in Airtable. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Set - Airtable The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Set node # We will use the Set node to set the values for the name and id fields for a new record. Click on the Add Value button and select 'Number' from the dropdown list. Enter ID in the Name field. Enter an id in the Value field. Click on the Add Value button and select 'String' from the dropdown list. Enter Name in the Name field. Enter a name in the Value field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node sets the value for ID and Name . 3. Airtable node (Append) # This node will append the data that we set in the previous node to a table. Create a table like this in your Airtable base. First of all, you'll have to enter credentials for the Airtable node. You can find out how to do that here . Select 'Append' from the Operation dropdown list. Enter the Base ID in the Base ID field. For obtaining the Base ID, head over to their API page and select the correct base. You\u2019ll find the Base ID there. Enter the name of your table in the Table field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node appends the data that we had set in the previous node. 4. Airtable1 node (List) # This node will list all the records with the name n8n . If you want to list records with a different name, use that name instead. Select the credentials that you entered in the previous node. Select the 'List' option from the Operation dropdown list. Click on the gears icon next to the Base ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Airtable > Parameters > application. You can also add the following expression: {{$node[\"Airtable\"].parameter[\"application\"]}} . Click on the gears icon next to the Table field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Airtable > Parameters > table. You can also add the following expression: {{$node[\"Airtable\"].parameter[\"table\"]}} . Click on Add Option and select 'Filter By Formula' from the dropdown list. Enter Name='n8n' in the Filter By Formula field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node only returns the record with the name n8n . 5. Set1 node # We will use the Set node to ensure that only the data that we set in this node gets passed on to the next nodes in the workflow. We will set the value of Name in this node. Click on the Add Value button and select 'String' from the dropdown list. Enter Name in the Name field. Enter nodemation in the Value field. Toggle Keep Only Set to true . We set this option to true to ensure that only the data that we have set in this node get passed on to the next nodes in the workflow. Click on Execute Node to run the node. In the screenshot below, you will notice that the node sets the value of Name . This value is passed to the next node in the workflow. 6. Airtable2 node (Update) # This node will update the Name field of the record that we received from the previous Airtable node. Select the credentials that you entered in the previous Airtable node. Select 'Update' from the Operation dropdown list. Click on the gears icon next to the Base ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Airtable > Parameters > application. You can also add the following expression: {{$node[\"Airtable\"].parameter[\"application\"]}} . Click on the gears icon next to the Table field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Airtable > Parameters > table. You can also add the following expression: {{$node[\"Airtable\"].parameter[\"table\"]}} . Click on the gears icon next to the Id field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Airtable1 > Output Data > JSON > id. You can also add the following expression: {{$node[\"Airtable1\"].json[\"id\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node updates the Name field. FAQs # How to get the Record ID? # To fetch data for a particular record, you need the Record ID. There are two ways to get the Record ID. Create a Record ID column in Airtable To create a Record ID column in your table, refer to this article . You can then use this Record ID in your Airtable node. Use the List operation To get the Record ID of your record, you can use the List operation of the Airtable node. This operation will return the Record ID along with the fields. You can then use this Record ID in your Airtable node. How to filter records when using the List operation? # To filter records from your Airtable base, use the Filter By Formula option. For example, if you want to return all the users that belong to the organization n8n , follow the steps mentioned below: 1. Select 'List' from the Operation dropdown list. 2. Enter the base ID and the table name in the Base ID and Table field, respectively. 3. Click on Add Option and select 'Filter By Formula' from the dropdown list. 4. Enter the following formula in the Filter By Formula field: {Organization}='n8n' . Similarly, if you want to return all the users that do not belong to the organization n8n , use the following formula: NOT({Organization}='n8n') . Refer to the Airtable documentation to learn more about the formulas.","title":"Airtable"},{"location":"integrations/nodes/n8n-nodes-base.airtable/#airtable","text":"Airtable is a spreadsheet-database hybrid, with the features of a database but applied to a spreadsheet. The fields in an Airtable table are similar to cells in a spreadsheet, but have types such as 'checkbox', 'phone number', and 'drop-down list', and can reference file attachments like images. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Airtable"},{"location":"integrations/nodes/n8n-nodes-base.airtable/#basic-operations","text":"Append the data to a table Delete data from a table List data from a table Read data from a table Update data in a table","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.airtable/#example-usage","text":"This workflow allows you to insert and update data from a table in Airtable. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Set - Airtable The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.airtable/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.airtable/#2-set-node","text":"We will use the Set node to set the values for the name and id fields for a new record. Click on the Add Value button and select 'Number' from the dropdown list. Enter ID in the Name field. Enter an id in the Value field. Click on the Add Value button and select 'String' from the dropdown list. Enter Name in the Name field. Enter a name in the Value field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node sets the value for ID and Name .","title":"2. Set node"},{"location":"integrations/nodes/n8n-nodes-base.airtable/#3-airtable-node-append","text":"This node will append the data that we set in the previous node to a table. Create a table like this in your Airtable base. First of all, you'll have to enter credentials for the Airtable node. You can find out how to do that here . Select 'Append' from the Operation dropdown list. Enter the Base ID in the Base ID field. For obtaining the Base ID, head over to their API page and select the correct base. You\u2019ll find the Base ID there. Enter the name of your table in the Table field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node appends the data that we had set in the previous node.","title":"3. Airtable node (Append)"},{"location":"integrations/nodes/n8n-nodes-base.airtable/#4-airtable1-node-list","text":"This node will list all the records with the name n8n . If you want to list records with a different name, use that name instead. Select the credentials that you entered in the previous node. Select the 'List' option from the Operation dropdown list. Click on the gears icon next to the Base ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Airtable > Parameters > application. You can also add the following expression: {{$node[\"Airtable\"].parameter[\"application\"]}} . Click on the gears icon next to the Table field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Airtable > Parameters > table. You can also add the following expression: {{$node[\"Airtable\"].parameter[\"table\"]}} . Click on Add Option and select 'Filter By Formula' from the dropdown list. Enter Name='n8n' in the Filter By Formula field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node only returns the record with the name n8n .","title":"4. Airtable1 node (List)"},{"location":"integrations/nodes/n8n-nodes-base.airtable/#5-set1-node","text":"We will use the Set node to ensure that only the data that we set in this node gets passed on to the next nodes in the workflow. We will set the value of Name in this node. Click on the Add Value button and select 'String' from the dropdown list. Enter Name in the Name field. Enter nodemation in the Value field. Toggle Keep Only Set to true . We set this option to true to ensure that only the data that we have set in this node get passed on to the next nodes in the workflow. Click on Execute Node to run the node. In the screenshot below, you will notice that the node sets the value of Name . This value is passed to the next node in the workflow.","title":"5. Set1 node"},{"location":"integrations/nodes/n8n-nodes-base.airtable/#6-airtable2-node-update","text":"This node will update the Name field of the record that we received from the previous Airtable node. Select the credentials that you entered in the previous Airtable node. Select 'Update' from the Operation dropdown list. Click on the gears icon next to the Base ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Airtable > Parameters > application. You can also add the following expression: {{$node[\"Airtable\"].parameter[\"application\"]}} . Click on the gears icon next to the Table field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Airtable > Parameters > table. You can also add the following expression: {{$node[\"Airtable\"].parameter[\"table\"]}} . Click on the gears icon next to the Id field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Airtable1 > Output Data > JSON > id. You can also add the following expression: {{$node[\"Airtable1\"].json[\"id\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node updates the Name field.","title":"6. Airtable2 node (Update)"},{"location":"integrations/nodes/n8n-nodes-base.airtable/#faqs","text":"","title":"FAQs"},{"location":"integrations/nodes/n8n-nodes-base.airtable/#how-to-get-the-record-id","text":"To fetch data for a particular record, you need the Record ID. There are two ways to get the Record ID. Create a Record ID column in Airtable To create a Record ID column in your table, refer to this article . You can then use this Record ID in your Airtable node. Use the List operation To get the Record ID of your record, you can use the List operation of the Airtable node. This operation will return the Record ID along with the fields. You can then use this Record ID in your Airtable node.","title":"How to get the Record ID?"},{"location":"integrations/nodes/n8n-nodes-base.airtable/#how-to-filter-records-when-using-the-list-operation","text":"To filter records from your Airtable base, use the Filter By Formula option. For example, if you want to return all the users that belong to the organization n8n , follow the steps mentioned below: 1. Select 'List' from the Operation dropdown list. 2. Enter the base ID and the table name in the Base ID and Table field, respectively. 3. Click on Add Option and select 'Filter By Formula' from the dropdown list. 4. Enter the following formula in the Filter By Formula field: {Organization}='n8n' . Similarly, if you want to return all the users that do not belong to the organization n8n , use the following formula: NOT({Organization}='n8n') . Refer to the Airtable documentation to learn more about the formulas.","title":"How to filter records when using the List operation?"},{"location":"integrations/nodes/n8n-nodes-base.amqp/","text":"AMQP Sender # AMQP is an open standard application layer protocol for message-oriented middleware. The defining features of AMQP are message orientation, queuing, routing, reliability and security. This node supports AMQP 1.0 compatible message brokers. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Send message Example Usage # This workflow allows you to send updates about the position of the ISS every minute to an ActiveMQ queue using the AMQP Sender node. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Cron - HTTP Request - Set - AMQP Sender The final workflow should look like the following image. 1. Cron node # The Cron node will trigger the workflow every minute. Click on Add Cron Time . Select 'Every Minute' from the Mode dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the Cron node is configured to trigger the workflow every minute. 2. HTTP Request node (GET) # This node will make a GET request to the API https://api.wheretheiss.at/v1/satellites/25544/positions to fetch the position of the ISS. This information gets passed on to the next node in the workflow. Enter https://api.wheretheiss.at/v1/satellites/25544/positions in the URL field. Click on the Add Parameter button in the Query Parameters section. Enter timestamps in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Enter the following expression: {{Date.now()}} . This expression will return the current timestamp. Click on Execute Node to run the node. In the screenshot below, you will notice that the node makes a GET request to the API and returns the information about the location of the ISS. 3. Set node # We will use the Set node to ensure that only the data that we set in this node gets passed on to the next nodes in the workflow. Click on Add Value and select 'String' from the dropdown list. Enter Name in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > HTTP Request > Output Data > JSON > 0 > name. You can also add the following expression: {{$node[\"HTTP Request\"].json[\"0\"][\"name\"]}} . Click on Add Value and select 'String' from the dropdown list. Enter Latitude in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > HTTP Request > Output Data > JSON > 0 > latitude. You can also add the following expression: {{$node[\"HTTP Request\"].json[\"0\"][\"latitude\"]}} . Click on Add Value and select 'String' from the dropdown list. Enter Longitude in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > HTTP Request > Output Data > JSON > 0 > longitude. You can also add the following expression: {{$node[\"HTTP Request\"].json[\"0\"][\"longitude\"]}} . Click on Add Value and select 'String' from the dropdown list. Enter Timestamp in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > HTTP Request > Output Data > JSON > 0 > timpestamp. You can also add the following expression: {{$node[\"HTTP Request\"].json[\"0\"][\"timestamp\"]}} . Toggle Keep Only Set to true . We set this option to true to ensure that only the data that we have set in this node get passed on to the next nodes in the workflow. Click on Execute Node to run the node. In the screenshot below, you will notice that the node uses the data from the previous node and returns the data that we set for the workflow. 4. AMQP Sender node # This node will send the data from the previous node to the iss-position queue in ActiveMQ. If you have created a queue with a different name in ActiveMQ, you can use that queue instead. First of all, you'll have to enter credentials for the AMQP Sender node. You can find out how to do that here . Enter the name of the queue or topic in the Queue / Topic field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node sends the data from the previous node to the iss-position queue in ActiveMQ. Activate workflow for production This example workflow uses the Cron node, which is a Trigger node. You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Cron node.","title":"AMQP Sender"},{"location":"integrations/nodes/n8n-nodes-base.amqp/#amqp-sender","text":"AMQP is an open standard application layer protocol for message-oriented middleware. The defining features of AMQP are message orientation, queuing, routing, reliability and security. This node supports AMQP 1.0 compatible message brokers. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"AMQP Sender"},{"location":"integrations/nodes/n8n-nodes-base.amqp/#basic-operations","text":"Send message","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.amqp/#example-usage","text":"This workflow allows you to send updates about the position of the ISS every minute to an ActiveMQ queue using the AMQP Sender node. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Cron - HTTP Request - Set - AMQP Sender The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.amqp/#1-cron-node","text":"The Cron node will trigger the workflow every minute. Click on Add Cron Time . Select 'Every Minute' from the Mode dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the Cron node is configured to trigger the workflow every minute.","title":"1. Cron node"},{"location":"integrations/nodes/n8n-nodes-base.amqp/#2-http-request-node-get","text":"This node will make a GET request to the API https://api.wheretheiss.at/v1/satellites/25544/positions to fetch the position of the ISS. This information gets passed on to the next node in the workflow. Enter https://api.wheretheiss.at/v1/satellites/25544/positions in the URL field. Click on the Add Parameter button in the Query Parameters section. Enter timestamps in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Enter the following expression: {{Date.now()}} . This expression will return the current timestamp. Click on Execute Node to run the node. In the screenshot below, you will notice that the node makes a GET request to the API and returns the information about the location of the ISS.","title":"2. HTTP Request node (GET)"},{"location":"integrations/nodes/n8n-nodes-base.amqp/#3-set-node","text":"We will use the Set node to ensure that only the data that we set in this node gets passed on to the next nodes in the workflow. Click on Add Value and select 'String' from the dropdown list. Enter Name in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > HTTP Request > Output Data > JSON > 0 > name. You can also add the following expression: {{$node[\"HTTP Request\"].json[\"0\"][\"name\"]}} . Click on Add Value and select 'String' from the dropdown list. Enter Latitude in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > HTTP Request > Output Data > JSON > 0 > latitude. You can also add the following expression: {{$node[\"HTTP Request\"].json[\"0\"][\"latitude\"]}} . Click on Add Value and select 'String' from the dropdown list. Enter Longitude in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > HTTP Request > Output Data > JSON > 0 > longitude. You can also add the following expression: {{$node[\"HTTP Request\"].json[\"0\"][\"longitude\"]}} . Click on Add Value and select 'String' from the dropdown list. Enter Timestamp in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > HTTP Request > Output Data > JSON > 0 > timpestamp. You can also add the following expression: {{$node[\"HTTP Request\"].json[\"0\"][\"timestamp\"]}} . Toggle Keep Only Set to true . We set this option to true to ensure that only the data that we have set in this node get passed on to the next nodes in the workflow. Click on Execute Node to run the node. In the screenshot below, you will notice that the node uses the data from the previous node and returns the data that we set for the workflow.","title":"3. Set node"},{"location":"integrations/nodes/n8n-nodes-base.amqp/#4-amqp-sender-node","text":"This node will send the data from the previous node to the iss-position queue in ActiveMQ. If you have created a queue with a different name in ActiveMQ, you can use that queue instead. First of all, you'll have to enter credentials for the AMQP Sender node. You can find out how to do that here . Enter the name of the queue or topic in the Queue / Topic field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node sends the data from the previous node to the iss-position queue in ActiveMQ. Activate workflow for production This example workflow uses the Cron node, which is a Trigger node. You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Cron node.","title":"4. AMQP Sender node"},{"location":"integrations/nodes/n8n-nodes-base.apiTemplateIo/","text":"APITemplate.io # APITemplate.io allows you to auto-generate images and PDF documents. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Account Get Image Create PDF Create Example Usage # This workflow allows you to create an invoice with the information received via a Typeform submission. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Typeform Trigger - APITemplate.io The final workflow should look like the following image. 1. Typeform Trigger node # This node will trigger the workflow when a form is submitted. Make sure to create a form that collects the following information: Bill To (Short Text) Client's Email Address (Email) Item Description (Short Text) Item Price (Number) Item Description (Short Text) Item Price (Number) Select 'Access Token' from the Authentication dropdown list. Enter the credentials for the Typeform Trigger node. You can find out how to do that here . Select the invoice form from the Form dropdown list. Toggle Simplify Answers to false . By setting this option to false, the node returns the values for the fields with duplicate names. Click on Execute Node to run the node. In the screenshot below, you will notice that the node triggers the workflow when the form is submitted. We will pass this information to the next nodes in the workflow. 2. APITemplate.io node (create: pdf) # This node will generate an invoice using the information from the previous node. Create an invoice template in APITemplate.io, if you don't already have one. First of all, you'll have to enter credentials for the APITemplate.io node. You can find out how to do that here . Select 'PDF' from the Resource dropdown list. Select your invoice template from the Template ID dropdown list. Toggle JSON Parameters to true . By setting this option to true, the node allows us to write custom JSON data. Toggle Download to true . Click on the gears icon next to the Properties (JSON) field. Enter the following expression in the Edit Expression field: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 { \"company\" : \"n8n\" , \"email\" : \"{{$json[\" 1 \"][\" email \"]}}\" , \"invoice_no\" : \"213223444\" , \"invoice_date\" : \"18-03-2021\" , \"invoice_due_date\" : \"17-04-2021\" , \"address\" : \"Berlin, Germany\" , \"company_bill_to\" : \"{{$json[\" 0 \"][\" te x t \"]}}\" , \"website\" : \"https://n8n.io\" , \"document_id\" : \"889856789012\" , \"items\" : [ { \"item_name\" : \"{{$json[\" 2 \"][\" te x t \"]}}\" , \"price\" : \"EUR {{$json[\" 3 \"][\" nu mber \"]}}\" }, { \"item_name\" : \"{{$json[\" 4 \"][\" te x t \"]}}\" , \"price\" : \"EUR {{$json[\" 5 \"][\" nu mber \"]}}\" } ] } Click on the Add Field button. Enter a file name in the File Name field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates an invoice using the data from the previous node. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Typeform Trigger node.","title":"APITemplate.io"},{"location":"integrations/nodes/n8n-nodes-base.apiTemplateIo/#apitemplateio","text":"APITemplate.io allows you to auto-generate images and PDF documents. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"APITemplate.io"},{"location":"integrations/nodes/n8n-nodes-base.apiTemplateIo/#basic-operations","text":"Account Get Image Create PDF Create","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.apiTemplateIo/#example-usage","text":"This workflow allows you to create an invoice with the information received via a Typeform submission. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Typeform Trigger - APITemplate.io The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.apiTemplateIo/#1-typeform-trigger-node","text":"This node will trigger the workflow when a form is submitted. Make sure to create a form that collects the following information: Bill To (Short Text) Client's Email Address (Email) Item Description (Short Text) Item Price (Number) Item Description (Short Text) Item Price (Number) Select 'Access Token' from the Authentication dropdown list. Enter the credentials for the Typeform Trigger node. You can find out how to do that here . Select the invoice form from the Form dropdown list. Toggle Simplify Answers to false . By setting this option to false, the node returns the values for the fields with duplicate names. Click on Execute Node to run the node. In the screenshot below, you will notice that the node triggers the workflow when the form is submitted. We will pass this information to the next nodes in the workflow.","title":"1. Typeform Trigger node"},{"location":"integrations/nodes/n8n-nodes-base.apiTemplateIo/#2-apitemplateio-node-create-pdf","text":"This node will generate an invoice using the information from the previous node. Create an invoice template in APITemplate.io, if you don't already have one. First of all, you'll have to enter credentials for the APITemplate.io node. You can find out how to do that here . Select 'PDF' from the Resource dropdown list. Select your invoice template from the Template ID dropdown list. Toggle JSON Parameters to true . By setting this option to true, the node allows us to write custom JSON data. Toggle Download to true . Click on the gears icon next to the Properties (JSON) field. Enter the following expression in the Edit Expression field: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 { \"company\" : \"n8n\" , \"email\" : \"{{$json[\" 1 \"][\" email \"]}}\" , \"invoice_no\" : \"213223444\" , \"invoice_date\" : \"18-03-2021\" , \"invoice_due_date\" : \"17-04-2021\" , \"address\" : \"Berlin, Germany\" , \"company_bill_to\" : \"{{$json[\" 0 \"][\" te x t \"]}}\" , \"website\" : \"https://n8n.io\" , \"document_id\" : \"889856789012\" , \"items\" : [ { \"item_name\" : \"{{$json[\" 2 \"][\" te x t \"]}}\" , \"price\" : \"EUR {{$json[\" 3 \"][\" nu mber \"]}}\" }, { \"item_name\" : \"{{$json[\" 4 \"][\" te x t \"]}}\" , \"price\" : \"EUR {{$json[\" 5 \"][\" nu mber \"]}}\" } ] } Click on the Add Field button. Enter a file name in the File Name field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates an invoice using the data from the previous node. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Typeform Trigger node.","title":"2. APITemplate.io node (create: pdf)"},{"location":"integrations/nodes/n8n-nodes-base.asana/","text":"Asana # Asana is a web and mobile application designed to help teams organize, track, and manage their work. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Project Create a new project Delete a project Get a project Get all projects Update a project Subtask Create a subtask Get all substasks Task Create a task Delete a task Get a task Get all tasks Move a task Search for tasks Update a task Task Comment Add a comment to a task Remove a comment from a task Task Tag Add a tag to a task Remove a tag from a task Task Project Add a task to a project Remove a task from a project User Get a user Get all users Example Usage # This workflow allows you to create a new task in Asana. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Asana The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Asana node # First of all, you'll have to enter credentials for the Asana node. You can find out how to do that here . Select your workspace from the Workspace dropdown list. Enter the name of the task in the Name field. Click on Execute Node to run the workflow.","title":"Asana"},{"location":"integrations/nodes/n8n-nodes-base.asana/#asana","text":"Asana is a web and mobile application designed to help teams organize, track, and manage their work. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Asana"},{"location":"integrations/nodes/n8n-nodes-base.asana/#basic-operations","text":"Project Create a new project Delete a project Get a project Get all projects Update a project Subtask Create a subtask Get all substasks Task Create a task Delete a task Get a task Get all tasks Move a task Search for tasks Update a task Task Comment Add a comment to a task Remove a comment from a task Task Tag Add a tag to a task Remove a tag from a task Task Project Add a task to a project Remove a task from a project User Get a user Get all users","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.asana/#example-usage","text":"This workflow allows you to create a new task in Asana. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Asana The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.asana/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.asana/#2-asana-node","text":"First of all, you'll have to enter credentials for the Asana node. You can find out how to do that here . Select your workspace from the Workspace dropdown list. Enter the name of the task in the Name field. Click on Execute Node to run the workflow.","title":"2. Asana node"},{"location":"integrations/nodes/n8n-nodes-base.automizy/","text":"Automizy # Automizy is an email marketing automation software that offers AI-powered Subject Line Tester, AB testing, and email automation. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Contact Create a contact Delete a contact Get a contact Get all contacts Update a contact List Create a list Delete a list Get a list Get all lists Update a list Example Usage # This workflow allows you to create a new list, add a new contact to that list, update the contact, and get all contacts in the list using the Automizy node. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - Automizy The final workflow should look like the following image. 1. Start node # The Start node exists by default when you create a new workflow. 2. Automizy node (create: list) # This node will create a new list called n8n-docs in Automizy. First of all, you'll have to enter credentials for the Automizy node. You can find out how to do that here . Select 'List' from the Resource dropdown list. Enter n8n-docs in the Name field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new list with the name n8n-docs . 3. Automizy1 node (create: contact) # This node creates a new contact and adds it to the list created in the previous node. Select the credentials that you entered in the previous node. Enter the email address of the contact you want to add to the list in the Email field. Click on the gears icon next to the List ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Automizy > Output Data > JSON > id. You can also add the following expression: {{$node[\"Automizy\"].json[\"id\"]}} . Click on Add Field and select 'Status' from the dropdown list. Select 'Active' from the Status dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new contact with the email address example@n8n.io and status Active and adds it to the list n8n-docs created in the previous node. 4. Automizy2 node (update: contact) # This node updates the contact that we created in the previous node by adding the tag reviewer to it. Make sure that you create a tag in Automizy. Select the credentials that you entered in the previous node. Select 'Update' from the Operation dropdown list. Click on the gears icon next to the Email field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Automizy1 > Output Data > JSON > email. You can also add the following expression: {{$node[\"Automizy1\"].json[\"email\"]}} . Click on Add Field and select 'Tags' from the dropdown list. Select a tag from the Tags dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node updates the contact created in the previous node by adding the tag reviewer to it. 5. Automizy3 node (getAll: contact) # This node returns all the contacts of the n8n-docs list that we created using the Automizy node. Select the credentials that you entered in the previous node. Select 'Get All' from the Operation dropdown list. Click on the gears icon next to the List ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Automizy > Output Data > JSON > id. You can also add the following expression: {{$node[\"Automizy\"].json[\"id\"]}} . Toggle Return All to true. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns all the contacts that are present in the list n8n-docs .","title":"Automizy"},{"location":"integrations/nodes/n8n-nodes-base.automizy/#automizy","text":"Automizy is an email marketing automation software that offers AI-powered Subject Line Tester, AB testing, and email automation. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Automizy"},{"location":"integrations/nodes/n8n-nodes-base.automizy/#basic-operations","text":"Contact Create a contact Delete a contact Get a contact Get all contacts Update a contact List Create a list Delete a list Get a list Get all lists Update a list","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.automizy/#example-usage","text":"This workflow allows you to create a new list, add a new contact to that list, update the contact, and get all contacts in the list using the Automizy node. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - Automizy The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.automizy/#1-start-node","text":"The Start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.automizy/#2-automizy-node-create-list","text":"This node will create a new list called n8n-docs in Automizy. First of all, you'll have to enter credentials for the Automizy node. You can find out how to do that here . Select 'List' from the Resource dropdown list. Enter n8n-docs in the Name field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new list with the name n8n-docs .","title":"2. Automizy node (create: list)"},{"location":"integrations/nodes/n8n-nodes-base.automizy/#3-automizy1-node-create-contact","text":"This node creates a new contact and adds it to the list created in the previous node. Select the credentials that you entered in the previous node. Enter the email address of the contact you want to add to the list in the Email field. Click on the gears icon next to the List ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Automizy > Output Data > JSON > id. You can also add the following expression: {{$node[\"Automizy\"].json[\"id\"]}} . Click on Add Field and select 'Status' from the dropdown list. Select 'Active' from the Status dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new contact with the email address example@n8n.io and status Active and adds it to the list n8n-docs created in the previous node.","title":"3. Automizy1 node (create: contact)"},{"location":"integrations/nodes/n8n-nodes-base.automizy/#4-automizy2-node-update-contact","text":"This node updates the contact that we created in the previous node by adding the tag reviewer to it. Make sure that you create a tag in Automizy. Select the credentials that you entered in the previous node. Select 'Update' from the Operation dropdown list. Click on the gears icon next to the Email field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Automizy1 > Output Data > JSON > email. You can also add the following expression: {{$node[\"Automizy1\"].json[\"email\"]}} . Click on Add Field and select 'Tags' from the dropdown list. Select a tag from the Tags dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node updates the contact created in the previous node by adding the tag reviewer to it.","title":"4. Automizy2 node (update: contact)"},{"location":"integrations/nodes/n8n-nodes-base.automizy/#5-automizy3-node-getall-contact","text":"This node returns all the contacts of the n8n-docs list that we created using the Automizy node. Select the credentials that you entered in the previous node. Select 'Get All' from the Operation dropdown list. Click on the gears icon next to the List ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Automizy > Output Data > JSON > id. You can also add the following expression: {{$node[\"Automizy\"].json[\"id\"]}} . Toggle Return All to true. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns all the contacts that are present in the list n8n-docs .","title":"5. Automizy3 node (getAll: contact)"},{"location":"integrations/nodes/n8n-nodes-base.autopilot/","text":"Autopilot # Autopilot is a visual marketing software that allows you to automate and personalize your marketing across the entire customer journey. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Contact Create/Update a contact Delete a contact Get a contact Get all contacts Contact Journey Add contact to list Contact List Add contact to list. Check if contact is on list. Get all contacts on list. Remove a contact from a list. List Create a list. Get all lists Example Usage # This workflow allows you to create a new list, add a new contact to that list, update the contact, and get all contacts in the list using the Autopilot node. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - Autopilot The final workflow should look like the following image. 1. Start node # The Start node exists by default when you create a new workflow. 2. Autopilot node (create: list) # This node will create a new list called n8n-docs in Autopilot. First of all, you'll have to enter credentials for the Autopilot node. You can find out how to do that here . Select 'List' from the Resource dropdown list. Enter n8n-docs in the Name field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new list with the name n8n-docs . 3. Autopilot1 node (upsert: contact) # This node creates a new contact and adds it to the list created in the previous node. Select the credentials that you entered in the previous node. Enter the email address of the contact you want to add to the list in the Email field. Click on Add Field and select 'List ID' from the dropdown list. Click on the gears icon next to the List ID field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > list_id. You can also add the following expression: {{$json[\"list_id\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new contact with the email address harshil@n8n.io and adds it to the list n8n-docs created in the previous node. 4. Autopilot2 node (update: contact) # This node updates the information of the contact that we created in the previous node. Select the credentials that you entered in the previous node. Click on the gears icon next to the Email field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Autopilot1 > Parameters > email. You can also add the following expression: {{$node[\"Autopilot1\"].parameter[\"email\"]}} . Click on Add Field and select 'Company' from the dropdown list. Enter n8n in the Company field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node updates the contact created in the previous node by adding the tag reviewer to it. 5. Autopilot3 node (getAll: contact) # This node returns all the contacts of the n8n-docs list that we created using the Autopilot node. Select the credentials that you entered in the previous node. Select 'Contact List' from the Resource dropdown list. Select 'Get All' from the Operation dropdown list. Click on the gears icon next to the List ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Autopilot > Output Data > JSON > list_id. You can also add the following expression: {{$node[\"Autopilot\"].json[\"list_id\"]}} . Toggle Return All to true. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns all the contacts that are present in the list n8n-docs .","title":"Autopilot"},{"location":"integrations/nodes/n8n-nodes-base.autopilot/#autopilot","text":"Autopilot is a visual marketing software that allows you to automate and personalize your marketing across the entire customer journey. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Autopilot"},{"location":"integrations/nodes/n8n-nodes-base.autopilot/#basic-operations","text":"Contact Create/Update a contact Delete a contact Get a contact Get all contacts Contact Journey Add contact to list Contact List Add contact to list. Check if contact is on list. Get all contacts on list. Remove a contact from a list. List Create a list. Get all lists","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.autopilot/#example-usage","text":"This workflow allows you to create a new list, add a new contact to that list, update the contact, and get all contacts in the list using the Autopilot node. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - Autopilot The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.autopilot/#1-start-node","text":"The Start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.autopilot/#2-autopilot-node-create-list","text":"This node will create a new list called n8n-docs in Autopilot. First of all, you'll have to enter credentials for the Autopilot node. You can find out how to do that here . Select 'List' from the Resource dropdown list. Enter n8n-docs in the Name field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new list with the name n8n-docs .","title":"2. Autopilot node (create: list)"},{"location":"integrations/nodes/n8n-nodes-base.autopilot/#3-autopilot1-node-upsert-contact","text":"This node creates a new contact and adds it to the list created in the previous node. Select the credentials that you entered in the previous node. Enter the email address of the contact you want to add to the list in the Email field. Click on Add Field and select 'List ID' from the dropdown list. Click on the gears icon next to the List ID field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > list_id. You can also add the following expression: {{$json[\"list_id\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new contact with the email address harshil@n8n.io and adds it to the list n8n-docs created in the previous node.","title":"3. Autopilot1 node (upsert: contact)"},{"location":"integrations/nodes/n8n-nodes-base.autopilot/#4-autopilot2-node-update-contact","text":"This node updates the information of the contact that we created in the previous node. Select the credentials that you entered in the previous node. Click on the gears icon next to the Email field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Autopilot1 > Parameters > email. You can also add the following expression: {{$node[\"Autopilot1\"].parameter[\"email\"]}} . Click on Add Field and select 'Company' from the dropdown list. Enter n8n in the Company field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node updates the contact created in the previous node by adding the tag reviewer to it.","title":"4. Autopilot2 node (update: contact)"},{"location":"integrations/nodes/n8n-nodes-base.autopilot/#5-autopilot3-node-getall-contact","text":"This node returns all the contacts of the n8n-docs list that we created using the Autopilot node. Select the credentials that you entered in the previous node. Select 'Contact List' from the Resource dropdown list. Select 'Get All' from the Operation dropdown list. Click on the gears icon next to the List ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Autopilot > Output Data > JSON > list_id. You can also add the following expression: {{$node[\"Autopilot\"].json[\"list_id\"]}} . Toggle Return All to true. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns all the contacts that are present in the list n8n-docs .","title":"5. Autopilot3 node (getAll: contact)"},{"location":"integrations/nodes/n8n-nodes-base.awsComprehend/","text":"AWS Comprehend # AWS Comprehend is a natural language processing (NLP) service that uses machine learning to find insights and relationships in a text. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Text Identify the dominant language Analyse the sentiment of the text Example Usage # This workflow allows you to analyze the sentiment of feedback received via a Typeform submission and send a message on Mattermost if that feedback is negative. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Typeform Trigger - AWS Comprehend - IF - Mattermost - No Operation, do nothing The final workflow should look like the following image. 1. Typeform Trigger node # This node will trigger the workflow when a feedback form is submitted. Make sure to create a feedback form for your event. Select 'Access Token' from the Authentication dropdown list. Enter the credentials for the Typeform Trigger node. You can find out how to do that here . Select the event feedback form from the Form dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node triggers the workflow when feedback is submitted. We will pass this feedback to the next nodes in the workflow. 2. AWS Comprehend node (detectSentiment: text) # This node will analyze the sentiment of the feedback that we got from the previous node. We will pass the analysis score to the next node in the workflow. First of all, you'll have to enter credentials for the AWS Comprehend node. You can find out how to enter credentials for this node here . Select 'Detect Sentiment' from the Operation dropdown list. Click on the gears icon next to the Text field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > What did you think about the event? You can also add the following expression: {{$json[\"What did you think about the event?\"]}} . If you want to analyze the sentiment for a different question, select that question instead. Click on Execute Node to run the node. In the screenshot below, you will notice that the node analyzes the sentiment of the feedback and gives a score based on that. 3. IF node # This node will check if the sentiment we got from the previous node is negative. If the sentiment is negative, it will return true otherwise false. Click on Add Condition and select 'String'. Click on the gears icon next to the Value 1 field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > Sentiment. You can also add the following expression: {{$json[\"Sentiment\"]}} . Enter NEGATIVE in the Value 2 field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node checks the sentiment that we received from the previous node and returns true if the sentiment is negative. 4. Mattermost node (post: message) # This node will send the feedback and the analysis score to the feedback channel in Mattermost. If you have a different channel, use that instead. Create a Mattermost node connected to the 'true' output of the IF node. You'll have to enter credentials for the Mattermost node. You can find out how to enter credentials for this node here . Select a channel from the Channel ID dropdown list. Click on the gears icon next to the Message field click on Add Expression . Enter the following message in the Expression field: You got new feedback with a score of {{$json[\"SentimentScore\"][\"Negative\"]}}. Here is what it says:{{$node[\"Typeform Trigger\"].json[\"What did you think about the event?\"]}} . Click on Execute Node to run the workflow. In the screenshot below, you will notice that the node sends the feedback and the analysis score to the feedback channel in Mattermost. 5. NoOp node # Adding this node here is optional, as the absence of this node won't make a difference to the functioning of the workflow. Create a NoOp node connected to the 'false' output of the IF node. Click on Execute Node to run the node. Activate workflow for production This example workflow uses the Typeform Trigger node. You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered when a new form is submitted.","title":"AWS Comprehend"},{"location":"integrations/nodes/n8n-nodes-base.awsComprehend/#aws-comprehend","text":"AWS Comprehend is a natural language processing (NLP) service that uses machine learning to find insights and relationships in a text. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"AWS Comprehend"},{"location":"integrations/nodes/n8n-nodes-base.awsComprehend/#basic-operations","text":"Text Identify the dominant language Analyse the sentiment of the text","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.awsComprehend/#example-usage","text":"This workflow allows you to analyze the sentiment of feedback received via a Typeform submission and send a message on Mattermost if that feedback is negative. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Typeform Trigger - AWS Comprehend - IF - Mattermost - No Operation, do nothing The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.awsComprehend/#1-typeform-trigger-node","text":"This node will trigger the workflow when a feedback form is submitted. Make sure to create a feedback form for your event. Select 'Access Token' from the Authentication dropdown list. Enter the credentials for the Typeform Trigger node. You can find out how to do that here . Select the event feedback form from the Form dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node triggers the workflow when feedback is submitted. We will pass this feedback to the next nodes in the workflow.","title":"1. Typeform Trigger node"},{"location":"integrations/nodes/n8n-nodes-base.awsComprehend/#2-aws-comprehend-node-detectsentiment-text","text":"This node will analyze the sentiment of the feedback that we got from the previous node. We will pass the analysis score to the next node in the workflow. First of all, you'll have to enter credentials for the AWS Comprehend node. You can find out how to enter credentials for this node here . Select 'Detect Sentiment' from the Operation dropdown list. Click on the gears icon next to the Text field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > What did you think about the event? You can also add the following expression: {{$json[\"What did you think about the event?\"]}} . If you want to analyze the sentiment for a different question, select that question instead. Click on Execute Node to run the node. In the screenshot below, you will notice that the node analyzes the sentiment of the feedback and gives a score based on that.","title":"2. AWS Comprehend node (detectSentiment: text)"},{"location":"integrations/nodes/n8n-nodes-base.awsComprehend/#3-if-node","text":"This node will check if the sentiment we got from the previous node is negative. If the sentiment is negative, it will return true otherwise false. Click on Add Condition and select 'String'. Click on the gears icon next to the Value 1 field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > Sentiment. You can also add the following expression: {{$json[\"Sentiment\"]}} . Enter NEGATIVE in the Value 2 field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node checks the sentiment that we received from the previous node and returns true if the sentiment is negative.","title":"3. IF node"},{"location":"integrations/nodes/n8n-nodes-base.awsComprehend/#4-mattermost-node-post-message","text":"This node will send the feedback and the analysis score to the feedback channel in Mattermost. If you have a different channel, use that instead. Create a Mattermost node connected to the 'true' output of the IF node. You'll have to enter credentials for the Mattermost node. You can find out how to enter credentials for this node here . Select a channel from the Channel ID dropdown list. Click on the gears icon next to the Message field click on Add Expression . Enter the following message in the Expression field: You got new feedback with a score of {{$json[\"SentimentScore\"][\"Negative\"]}}. Here is what it says:{{$node[\"Typeform Trigger\"].json[\"What did you think about the event?\"]}} . Click on Execute Node to run the workflow. In the screenshot below, you will notice that the node sends the feedback and the analysis score to the feedback channel in Mattermost.","title":"4. Mattermost node (post: message)"},{"location":"integrations/nodes/n8n-nodes-base.awsComprehend/#5-noop-node","text":"Adding this node here is optional, as the absence of this node won't make a difference to the functioning of the workflow. Create a NoOp node connected to the 'false' output of the IF node. Click on Execute Node to run the node. Activate workflow for production This example workflow uses the Typeform Trigger node. You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered when a new form is submitted.","title":"5. NoOp node"},{"location":"integrations/nodes/n8n-nodes-base.awsDynamoDb/","text":"AWS DynamoDB # AWS DynamoDB is a key-value and document database provided by Amazon as a part of Amazon Web Services. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic operations # Item Create a new record, or update the current one if it already exists (upsert/put) Delete an item Get an item Get all items Example usage # This workflow allows you to insert an item into your DynamoDB database. This example usage workflow would use the following two nodes. - Start - Function - AWS DynamoDB The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Function node # The function node will return the item to insert, properly formatted for our table structure id: number . Enter the following snippet: 1 2 3 4 5 6 7 8 9 return [ { json : { id : { 'N' : '1' } } } ] 3. AWS DynamoDB node # First enter credentials for the AWS DynamoDB node. You can find out how to do that here . The Item Resource is selected by default. Select the Create or Update Operation . Enter the Table Name where you are inserting data. In Data to Send select Define Below for Each Column . Click on Execute Node to run the workflow.","title":"AWS DynamoDB"},{"location":"integrations/nodes/n8n-nodes-base.awsDynamoDb/#aws-dynamodb","text":"AWS DynamoDB is a key-value and document database provided by Amazon as a part of Amazon Web Services. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"AWS DynamoDB"},{"location":"integrations/nodes/n8n-nodes-base.awsDynamoDb/#basic-operations","text":"Item Create a new record, or update the current one if it already exists (upsert/put) Delete an item Get an item Get all items","title":"Basic operations"},{"location":"integrations/nodes/n8n-nodes-base.awsDynamoDb/#example-usage","text":"This workflow allows you to insert an item into your DynamoDB database. This example usage workflow would use the following two nodes. - Start - Function - AWS DynamoDB The final workflow should look like the following image.","title":"Example usage"},{"location":"integrations/nodes/n8n-nodes-base.awsDynamoDb/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.awsDynamoDb/#2-function-node","text":"The function node will return the item to insert, properly formatted for our table structure id: number . Enter the following snippet: 1 2 3 4 5 6 7 8 9 return [ { json : { id : { 'N' : '1' } } } ]","title":"2. Function node"},{"location":"integrations/nodes/n8n-nodes-base.awsDynamoDb/#3-aws-dynamodb-node","text":"First enter credentials for the AWS DynamoDB node. You can find out how to do that here . The Item Resource is selected by default. Select the Create or Update Operation . Enter the Table Name where you are inserting data. In Data to Send select Define Below for Each Column . Click on Execute Node to run the workflow.","title":"3. AWS DynamoDB node"},{"location":"integrations/nodes/n8n-nodes-base.awsLambda/","text":"AWS Lambda # AWS Lambda is an event-driven, serverless computing platform provided by Amazon as a part of Amazon Web Services. It is a computing service that runs code in response to events and automatically manages the computing resources required by that code. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Invoke a function Example Usage # This workflow allows you to invoke a function using AWS Lambda. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - AWS Lambda The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. AWS Lambda node # First of all, you'll have to enter credentials for the AWS Lambda node. You can find out how to do that here . Select the function that you want to invoke from the Function dropdown list. Click on Execute Node to run the workflow.","title":"AWS Lambda"},{"location":"integrations/nodes/n8n-nodes-base.awsLambda/#aws-lambda","text":"AWS Lambda is an event-driven, serverless computing platform provided by Amazon as a part of Amazon Web Services. It is a computing service that runs code in response to events and automatically manages the computing resources required by that code. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"AWS Lambda"},{"location":"integrations/nodes/n8n-nodes-base.awsLambda/#basic-operations","text":"Invoke a function","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.awsLambda/#example-usage","text":"This workflow allows you to invoke a function using AWS Lambda. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - AWS Lambda The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.awsLambda/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.awsLambda/#2-aws-lambda-node","text":"First of all, you'll have to enter credentials for the AWS Lambda node. You can find out how to do that here . Select the function that you want to invoke from the Function dropdown list. Click on Execute Node to run the workflow.","title":"2. AWS Lambda node"},{"location":"integrations/nodes/n8n-nodes-base.awsRekognition/","text":"AWS Rekognition # AWS Rekognition allows you to add image and video analysis to your applications. With AWS Rekognition, you can identify faces, labels, and celebrities in images. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Image Analyze Example Usage # This workflow allows you to detect a face from an image using the AWS Rekognition node. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - HTTP Request - AWS Rekognition The final workflow should look like the following image. 1. Start node # The Start node exists by default when you create a new workflow. 2. HTTP Request node (GET) # This example workflow uses the HTTP Request node to fetch an image from a URL. You can also use the Read Binary File node to read an image file from the path you specify. Enter the URL of the image in the URL field. For example, https://n8n.io/_nuxt/img/04c67e5.png . Select 'File' from the Response Format dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the HTTP Request node fetches the image from the URL. This image gets passed on as binary data to the next node in the workflow. 3. AWS Rekognition node (analyze: image) # This node will detect faces in the image that we fetched in the previous node. You can also use this node to analyze an image stored in your AWS Bucket. First of all, you'll have to enter credentials for the AWS Rekognition node. You can find out how to enter credentials for this node here . Set Binary Data to true . Click on Execute Node to run the node. In the screenshot below, you will observe that the node detects the face in the image that we got from the HTTP Request node.","title":"AWS Rekognition"},{"location":"integrations/nodes/n8n-nodes-base.awsRekognition/#aws-rekognition","text":"AWS Rekognition allows you to add image and video analysis to your applications. With AWS Rekognition, you can identify faces, labels, and celebrities in images. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"AWS Rekognition"},{"location":"integrations/nodes/n8n-nodes-base.awsRekognition/#basic-operations","text":"Image Analyze","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.awsRekognition/#example-usage","text":"This workflow allows you to detect a face from an image using the AWS Rekognition node. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - HTTP Request - AWS Rekognition The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.awsRekognition/#1-start-node","text":"The Start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.awsRekognition/#2-http-request-node-get","text":"This example workflow uses the HTTP Request node to fetch an image from a URL. You can also use the Read Binary File node to read an image file from the path you specify. Enter the URL of the image in the URL field. For example, https://n8n.io/_nuxt/img/04c67e5.png . Select 'File' from the Response Format dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the HTTP Request node fetches the image from the URL. This image gets passed on as binary data to the next node in the workflow.","title":"2. HTTP Request node (GET)"},{"location":"integrations/nodes/n8n-nodes-base.awsRekognition/#3-aws-rekognition-node-analyze-image","text":"This node will detect faces in the image that we fetched in the previous node. You can also use this node to analyze an image stored in your AWS Bucket. First of all, you'll have to enter credentials for the AWS Rekognition node. You can find out how to enter credentials for this node here . Set Binary Data to true . Click on Execute Node to run the node. In the screenshot below, you will observe that the node detects the face in the image that we got from the HTTP Request node.","title":"3. AWS Rekognition node (analyze: image)"},{"location":"integrations/nodes/n8n-nodes-base.awsS3/","text":"AWS S3 # AWS S3 is a service offered by Amazon Web Services that provides object storage through a web service interface. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Bucket Create a bucket Delete a bucket Get all buckets Search within a bucket File Copy a file Delete a file Download a file Get all files Upload a file Folder Create a folder Delete a folder Get all folders Example Usage # This workflow allows you to create a bucket on AWS S3. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - AWS S3 The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. AWS S3 node # First of all, you'll have to enter credentials for the AWS S3 node. You can find out how to do that here . Select 'Bucket' from the Resource dropdown list. Enter a name for your bucket in the Name field. Click on Execute Node to run the workflow.","title":"AWS S3"},{"location":"integrations/nodes/n8n-nodes-base.awsS3/#aws-s3","text":"AWS S3 is a service offered by Amazon Web Services that provides object storage through a web service interface. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"AWS S3"},{"location":"integrations/nodes/n8n-nodes-base.awsS3/#basic-operations","text":"Bucket Create a bucket Delete a bucket Get all buckets Search within a bucket File Copy a file Delete a file Download a file Get all files Upload a file Folder Create a folder Delete a folder Get all folders","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.awsS3/#example-usage","text":"This workflow allows you to create a bucket on AWS S3. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - AWS S3 The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.awsS3/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.awsS3/#2-aws-s3-node","text":"First of all, you'll have to enter credentials for the AWS S3 node. You can find out how to do that here . Select 'Bucket' from the Resource dropdown list. Enter a name for your bucket in the Name field. Click on Execute Node to run the workflow.","title":"2. AWS S3 node"},{"location":"integrations/nodes/n8n-nodes-base.awsSes/","text":"AWS SES # AWS SES is a cost-effective, flexible, and scalable email service that enables developers to send mail from within any application. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Custom Verification Email Create a new custom verification email template Delete an existing custom verification email template Get the custom email verification template Get all the existing custom verification email templates for your account Add an email address to the list of identities Update an existing custom verification email template. Email Send Send Template Template Create a template Delete a template Get a template Get all templates Update a template Example Usage # This workflow allows you to send an email using AWS SES. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - AWS SES The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. AWS SNS node # First of all, you'll have to enter credentials for the AWS SES node. You can find out how to do that here . Enter a subject for your email in the Subject field. Enter your message in the Body field. Enter the email address from which you want to send the email in the From Email field. Click on the Add To Email button and add your recipient email addresses. Click on Execute Node to run the workflow.","title":"AWS SES"},{"location":"integrations/nodes/n8n-nodes-base.awsSes/#aws-ses","text":"AWS SES is a cost-effective, flexible, and scalable email service that enables developers to send mail from within any application. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"AWS SES"},{"location":"integrations/nodes/n8n-nodes-base.awsSes/#basic-operations","text":"Custom Verification Email Create a new custom verification email template Delete an existing custom verification email template Get the custom email verification template Get all the existing custom verification email templates for your account Add an email address to the list of identities Update an existing custom verification email template. Email Send Send Template Template Create a template Delete a template Get a template Get all templates Update a template","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.awsSes/#example-usage","text":"This workflow allows you to send an email using AWS SES. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - AWS SES The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.awsSes/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.awsSes/#2-aws-sns-node","text":"First of all, you'll have to enter credentials for the AWS SES node. You can find out how to do that here . Enter a subject for your email in the Subject field. Enter your message in the Body field. Enter the email address from which you want to send the email in the From Email field. Click on the Add To Email button and add your recipient email addresses. Click on Execute Node to run the workflow.","title":"2. AWS SNS node"},{"location":"integrations/nodes/n8n-nodes-base.awsSns/","text":"AWS SNS # AWS SNS is a notification service provided as part of Amazon Web Services. It provides a low-cost infrastructure for the mass delivery of messages, predominantly to mobile users. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Publish a message to a topic Example Usage # This workflow allows you to publish a message using AWS SNS. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - AWS SNS The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. AWS SNS node # First of all, you'll have to enter credentials for the AWS SNS node. You can find out how to do that here . Select the topic in the Topic dropdown list. You can find instructions on how to create a new topic in AWS SNS here . Enter a subject for your message in the Subject field. Enter your message in the Message field. Click on Execute Node to run the workflow.","title":"AWS SNS"},{"location":"integrations/nodes/n8n-nodes-base.awsSns/#aws-sns","text":"AWS SNS is a notification service provided as part of Amazon Web Services. It provides a low-cost infrastructure for the mass delivery of messages, predominantly to mobile users. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"AWS SNS"},{"location":"integrations/nodes/n8n-nodes-base.awsSns/#basic-operations","text":"Publish a message to a topic","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.awsSns/#example-usage","text":"This workflow allows you to publish a message using AWS SNS. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - AWS SNS The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.awsSns/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.awsSns/#2-aws-sns-node","text":"First of all, you'll have to enter credentials for the AWS SNS node. You can find out how to do that here . Select the topic in the Topic dropdown list. You can find instructions on how to create a new topic in AWS SNS here . Enter a subject for your message in the Subject field. Enter your message in the Message field. Click on Execute Node to run the workflow.","title":"2. AWS SNS node"},{"location":"integrations/nodes/n8n-nodes-base.awsSqs/","text":"AWS SQS # AWS SQS is a fully managed message queuing service that enables you to decouple and scale microservices, distributed systems, and serverless applications. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Send a message to a queue. Example Usage # This workflow allows you to send position updates of the ISS every minute to a queue using the AWS SQS node. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Cron - HTTP Request - Set - AWS SQS The final workflow should look like the following image. 1. Cron node # The Cron node will trigger the workflow every minute. Click on Add Cron Time . Select 'Every Minute' from the Mode dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the Cron node is configured to trigger the workflow every minute. 2. HTTP Request node (GET) # This node will make a GET request to the API https://api.wheretheiss.at/v1/satellites/25544/positions to fetch the position of the ISS. This information gets passed on to the next node in the workflow. Enter https://api.wheretheiss.at/v1/satellites/25544/positions in the URL field. Click on the Add Parameter button in the Query Parameters section. Enter timestamps in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Enter the following expression: {{Date.now()}} . This expression will return the current timestamp. Click on Execute Node to run the node. In the screenshot below, you will notice that the node makes a GET request to the API and returns the information about the location of the ISS. 3. Set node # We will use the Set node to ensure that only the data that we set in this node gets passed on to the next nodes in the workflow. Click on Add Value and select 'String' from the dropdown list. Enter Name in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > HTTP Request > Output Data > JSON > 0 > name. You can also add the following expression: {{$node[\"HTTP Request\"].json[\"0\"][\"name\"]}} . Click on Add Value and select 'Number' from the dropdown list. Enter Latitude in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > HTTP Request > Output Data > JSON > 0 > latitude. You can also add the following expression: {{$node[\"HTTP Request\"].json[\"0\"][\"latitude\"]}} . Click on Add Value and select 'Number' from the dropdown list. Enter Longitude in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > HTTP Request > Output Data > JSON > 0 > longitude. You can also add the following expression: {{$node[\"HTTP Request\"].json[\"0\"][\"longitude\"]}} . Click on Add Value and select 'Number' from the dropdown list. Enter Timestamp in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > HTTP Request > Output Data > JSON > 0 > timpestamp. You can also add the following expression: {{$node[\"HTTP Request\"].json[\"0\"][\"timestamp\"]}} . Toggle Keep Only Set to true . We set this option to true to ensure that only the data that we have set in this node get passed on to the next nodes in the workflow. Click on Execute Node to run the node. In the screenshot below, you will notice that the node uses the data from the previous node and returns the data that we set for the workflow. 4. AWS SQS node # This node will send the data from the previous node to the iss-position queue. If you have created a queue with a different one, you can use that queue instead. First of all, you'll have to enter credentials for the AWS SQS node. You can find out how to do that here . Select the queue from the Queue dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node sends the data from the previous node to the iss-position queue in ActiveMQ. Activate workflow for production This example workflow uses the Cron node, which is a Trigger node. You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Cron node.","title":"AWS SQS"},{"location":"integrations/nodes/n8n-nodes-base.awsSqs/#aws-sqs","text":"AWS SQS is a fully managed message queuing service that enables you to decouple and scale microservices, distributed systems, and serverless applications. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"AWS SQS"},{"location":"integrations/nodes/n8n-nodes-base.awsSqs/#basic-operations","text":"Send a message to a queue.","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.awsSqs/#example-usage","text":"This workflow allows you to send position updates of the ISS every minute to a queue using the AWS SQS node. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Cron - HTTP Request - Set - AWS SQS The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.awsSqs/#1-cron-node","text":"The Cron node will trigger the workflow every minute. Click on Add Cron Time . Select 'Every Minute' from the Mode dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the Cron node is configured to trigger the workflow every minute.","title":"1. Cron node"},{"location":"integrations/nodes/n8n-nodes-base.awsSqs/#2-http-request-node-get","text":"This node will make a GET request to the API https://api.wheretheiss.at/v1/satellites/25544/positions to fetch the position of the ISS. This information gets passed on to the next node in the workflow. Enter https://api.wheretheiss.at/v1/satellites/25544/positions in the URL field. Click on the Add Parameter button in the Query Parameters section. Enter timestamps in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Enter the following expression: {{Date.now()}} . This expression will return the current timestamp. Click on Execute Node to run the node. In the screenshot below, you will notice that the node makes a GET request to the API and returns the information about the location of the ISS.","title":"2. HTTP Request node (GET)"},{"location":"integrations/nodes/n8n-nodes-base.awsSqs/#3-set-node","text":"We will use the Set node to ensure that only the data that we set in this node gets passed on to the next nodes in the workflow. Click on Add Value and select 'String' from the dropdown list. Enter Name in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > HTTP Request > Output Data > JSON > 0 > name. You can also add the following expression: {{$node[\"HTTP Request\"].json[\"0\"][\"name\"]}} . Click on Add Value and select 'Number' from the dropdown list. Enter Latitude in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > HTTP Request > Output Data > JSON > 0 > latitude. You can also add the following expression: {{$node[\"HTTP Request\"].json[\"0\"][\"latitude\"]}} . Click on Add Value and select 'Number' from the dropdown list. Enter Longitude in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > HTTP Request > Output Data > JSON > 0 > longitude. You can also add the following expression: {{$node[\"HTTP Request\"].json[\"0\"][\"longitude\"]}} . Click on Add Value and select 'Number' from the dropdown list. Enter Timestamp in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > HTTP Request > Output Data > JSON > 0 > timpestamp. You can also add the following expression: {{$node[\"HTTP Request\"].json[\"0\"][\"timestamp\"]}} . Toggle Keep Only Set to true . We set this option to true to ensure that only the data that we have set in this node get passed on to the next nodes in the workflow. Click on Execute Node to run the node. In the screenshot below, you will notice that the node uses the data from the previous node and returns the data that we set for the workflow.","title":"3. Set node"},{"location":"integrations/nodes/n8n-nodes-base.awsSqs/#4-aws-sqs-node","text":"This node will send the data from the previous node to the iss-position queue. If you have created a queue with a different one, you can use that queue instead. First of all, you'll have to enter credentials for the AWS SQS node. You can find out how to do that here . Select the queue from the Queue dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node sends the data from the previous node to the iss-position queue in ActiveMQ. Activate workflow for production This example workflow uses the Cron node, which is a Trigger node. You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Cron node.","title":"4. AWS SQS node"},{"location":"integrations/nodes/n8n-nodes-base.awsTextract/","text":"AWS Textract # AWS Textract is a service that extracts printed text, handwriting, and data from any document. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Analyze Receipt or Invoice Example Usage # This workflow allows you to extract data from a an invoice stored in AWS S3. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - AWS S3 - AWS Textract The final workflow looks like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. AWS S3 node (download: file) # This node will retrieve an image file with a receipt from an S3 bucket. Choose your credentials for the AWS S3 node. See here for information on how to create these credentials. Enter the bucket name in the Bucket Name field. Enter the file key in the File Key field. Click on Execute Node to run the node. In the screenshot below you can see the file returned by the node. 3. AWS Textract node (analyzeExpense) # This node will extract data from the receipt returned by the previous node. Choose your AWS credentials. Click on Execute Node to run the node. In the screenshot below, you can see the receipt data extracted by AWS Textract and returned by the node.","title":"AWS Textract"},{"location":"integrations/nodes/n8n-nodes-base.awsTextract/#aws-textract","text":"AWS Textract is a service that extracts printed text, handwriting, and data from any document. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"AWS Textract"},{"location":"integrations/nodes/n8n-nodes-base.awsTextract/#basic-operations","text":"Analyze Receipt or Invoice","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.awsTextract/#example-usage","text":"This workflow allows you to extract data from a an invoice stored in AWS S3. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - AWS S3 - AWS Textract The final workflow looks like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.awsTextract/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.awsTextract/#2-aws-s3-node-download-file","text":"This node will retrieve an image file with a receipt from an S3 bucket. Choose your credentials for the AWS S3 node. See here for information on how to create these credentials. Enter the bucket name in the Bucket Name field. Enter the file key in the File Key field. Click on Execute Node to run the node. In the screenshot below you can see the file returned by the node.","title":"2. AWS S3 node (download: file)"},{"location":"integrations/nodes/n8n-nodes-base.awsTextract/#3-aws-textract-node-analyzeexpense","text":"This node will extract data from the receipt returned by the previous node. Choose your AWS credentials. Click on Execute Node to run the node. In the screenshot below, you can see the receipt data extracted by AWS Textract and returned by the node.","title":"3. AWS Textract node (analyzeExpense)"},{"location":"integrations/nodes/n8n-nodes-base.awsTranscribe/","text":"AWS Transcribe # AWS Transcribe is a service that recognizes speech in your audio or video and transcribes that speech into text. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Transcription Job - Create a transcription job - Delete a transcription job - Get a transcription job - Get all transcriptions job Example Usage # This workflow allows you to create transcription jobs for all your audio and video files stored in AWS S3. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - AWS S3 - AWS Transcribe The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. AWS S3 node (getAll: file) # This node will retrieve all the files from an S3 bucket you specify. First of all, you'll have to enter credentials for the AWS S3 node. You can find out how to do that here . Select 'Get All' from the Operation dropdown list. Enter the bucket name in the Bucket Name field. Toggle Return All to true . This option will return information on all the files stored in the S3 bucket. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns information of all the files stored in the bucket you specified. 3. AWS Transcribe node (create: transcriptionJob) # This node will create a transcription job for the files that get returned by the previous node. Select the credentials that you entered in the previous node. Click on the gears icon next to the Job Name field and click on Add Expression . Enter {{$json[\"Key\"].replace(/\\s/g,'-')}} in the Expression field. The code snippet fetches the name of the file and replaces the white-spaces with a hyphen (-). Click on the gears icon next to the Media File URI field and click on Add Expression . Enter s3://{{$node[\"AWS S3\"].parameter[\"bucketName\"]}}/{{$json[\"Key\"]}} in the Expression field. Toggle Detect Language to true . Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a transcription job for the files stored in an S3 bucket.","title":"AWS Transcribe"},{"location":"integrations/nodes/n8n-nodes-base.awsTranscribe/#aws-transcribe","text":"AWS Transcribe is a service that recognizes speech in your audio or video and transcribes that speech into text. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"AWS Transcribe"},{"location":"integrations/nodes/n8n-nodes-base.awsTranscribe/#basic-operations","text":"Transcription Job - Create a transcription job - Delete a transcription job - Get a transcription job - Get all transcriptions job","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.awsTranscribe/#example-usage","text":"This workflow allows you to create transcription jobs for all your audio and video files stored in AWS S3. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - AWS S3 - AWS Transcribe The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.awsTranscribe/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.awsTranscribe/#2-aws-s3-node-getall-file","text":"This node will retrieve all the files from an S3 bucket you specify. First of all, you'll have to enter credentials for the AWS S3 node. You can find out how to do that here . Select 'Get All' from the Operation dropdown list. Enter the bucket name in the Bucket Name field. Toggle Return All to true . This option will return information on all the files stored in the S3 bucket. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns information of all the files stored in the bucket you specified.","title":"2. AWS S3 node (getAll: file)"},{"location":"integrations/nodes/n8n-nodes-base.awsTranscribe/#3-aws-transcribe-node-create-transcriptionjob","text":"This node will create a transcription job for the files that get returned by the previous node. Select the credentials that you entered in the previous node. Click on the gears icon next to the Job Name field and click on Add Expression . Enter {{$json[\"Key\"].replace(/\\s/g,'-')}} in the Expression field. The code snippet fetches the name of the file and replaces the white-spaces with a hyphen (-). Click on the gears icon next to the Media File URI field and click on Add Expression . Enter s3://{{$node[\"AWS S3\"].parameter[\"bucketName\"]}}/{{$json[\"Key\"]}} in the Expression field. Toggle Detect Language to true . Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a transcription job for the files stored in an S3 bucket.","title":"3. AWS Transcribe node (create: transcriptionJob)"},{"location":"integrations/nodes/n8n-nodes-base.bambooHr/","text":"BambooHR # BambooHR provides human resources software as a service. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Company Report Get a company report Employee Create an employee Get an employee Get all employees Update an employee Employee Document Delete an employee document Download an employee document Get all employee document Update an employee document Upload an employee document File Delete a company file Download a company file Get all company files Update a company file Upload a company file","title":"BambooHR"},{"location":"integrations/nodes/n8n-nodes-base.bambooHr/#bamboohr","text":"BambooHR provides human resources software as a service. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"BambooHR"},{"location":"integrations/nodes/n8n-nodes-base.bambooHr/#basic-operations","text":"Company Report Get a company report Employee Create an employee Get an employee Get all employees Update an employee Employee Document Delete an employee document Download an employee document Get all employee document Update an employee document Upload an employee document File Delete a company file Download a company file Get all company files Update a company file Upload a company file","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.bannerbear/","text":"Bannerbear # Bannerbear is an API-based image generation service that automatically generates variations of graphic templates. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Image Create an image Get an image Template Get a template Get all templates Example Usage # This workflow allows you to create an image using the Bannerbear welcome template. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Bannerbear The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Bannerbear node # First of all, you'll have to enter credentials for the Bannerbear node. You can find out how to do that here . Select 'Welcome Template' from the Template ID dropdown list. Click on the Add Field dropdown, select 'Wait for Image', and set the slider is set to 'on'. Click on the Add Modification button and select 'message' from the Name dropdown list. Enter the text in the Text field. Click on Execute Node to run the workflow.","title":"Bannerbear"},{"location":"integrations/nodes/n8n-nodes-base.bannerbear/#bannerbear","text":"Bannerbear is an API-based image generation service that automatically generates variations of graphic templates. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Bannerbear"},{"location":"integrations/nodes/n8n-nodes-base.bannerbear/#basic-operations","text":"Image Create an image Get an image Template Get a template Get all templates","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.bannerbear/#example-usage","text":"This workflow allows you to create an image using the Bannerbear welcome template. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Bannerbear The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.bannerbear/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.bannerbear/#2-bannerbear-node","text":"First of all, you'll have to enter credentials for the Bannerbear node. You can find out how to do that here . Select 'Welcome Template' from the Template ID dropdown list. Click on the Add Field dropdown, select 'Wait for Image', and set the slider is set to 'on'. Click on the Add Modification button and select 'message' from the Name dropdown list. Enter the text in the Text field. Click on Execute Node to run the workflow.","title":"2. Bannerbear node"},{"location":"integrations/nodes/n8n-nodes-base.baserow/","text":"Baserow # Baserow is an open source no-code database and Airtable alternative. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic operations # Row Create a row Delete a row Retrieve a row Retrieve all rows Update a row Example # This workflow allows you to create, find, and delete rows in Baserow default Customer table. This example workflow uses the following nodes. Start Set Baserow The final workflow should look like the following image: For this workflow you need an account to any Baserow instance with the demo table Customers . 1. Start node # The start node exists by default when you create a new workflow. 2. Set node # We will use the Set node to set the values for the name and id fields of a new record. Click on the Add Value button and select 'String' from the dropdown list. Enter Name in the Name field. Enter a name in the Value field. Click on the Add Value button and select 'String' from the dropdown list. Enter Last name in the Name field. Enter a last name in the Value field. Click on the Add Value button and select 'Boolean' from the dropdown list. Enter Active in the Name field. Check the value. Click on Execute Node to run the node. 3. Baserow node (Create) # This node will create a row in the Customers table with the content from the previous node. Enter your credentials for the Baserow node. You can find out how to create credentials here . Enter your Baserow instance URL (default value is for official version). Select 'Create' from the Operation dropdown list. Enter the Table ID in the Table ID field. For obtaining the Table ID, see the Database API page available from the database menu. Click on Execute Node to run the node. 4. Baserow node (List) # This node will list all the rows with the name Bill . If you want to list records with a different name, use that name instead. Select the credentials that you entered in the previous node. Click on the gears icon next to the Host field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Baserow > Parameters > Host . You can also add the following expression: {{$node[\"Baserow\"].parameter[\"host\"]}} . Select the 'List' option from the Operation dropdown list. Click on the gears icon next to the Table ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Baserow > Parameters > Table . You can also add the following expression: {{$node[\"Baserow\"].parameter[\"table\"]}} . Click on Add Option and select 'Search' from the dropdown list. Enter Bill in the Search field. Click on Execute Node to run the node. You will notice that the node only returns the record with a column containing Bill . 5. Baserow node (Delete) # This node will delete all the rows listed from the previous node. Select the credentials that you entered in the previous node. Click on the gears icon next to the Host field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Baserow > Parameters > Host . You can also add the following expression: {{$node[\"Baserow\"].parameter[\"host\"]}} . Select the 'Delete' option from the Operation dropdown list. Click on the gears icon next to the Table ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Baserow > Parameters > Table . You can also add the following expression: {{$node[\"Baserow\"].parameter[\"table\"]}} . Click on the gears icon next to the Row ID field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > id . You can also add the following expression: {{$json[\"id\"]}} . Click on Execute Node to run the node.","title":"Baserow"},{"location":"integrations/nodes/n8n-nodes-base.baserow/#baserow","text":"Baserow is an open source no-code database and Airtable alternative. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Baserow"},{"location":"integrations/nodes/n8n-nodes-base.baserow/#basic-operations","text":"Row Create a row Delete a row Retrieve a row Retrieve all rows Update a row","title":"Basic operations"},{"location":"integrations/nodes/n8n-nodes-base.baserow/#example","text":"This workflow allows you to create, find, and delete rows in Baserow default Customer table. This example workflow uses the following nodes. Start Set Baserow The final workflow should look like the following image: For this workflow you need an account to any Baserow instance with the demo table Customers .","title":"Example"},{"location":"integrations/nodes/n8n-nodes-base.baserow/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.baserow/#2-set-node","text":"We will use the Set node to set the values for the name and id fields of a new record. Click on the Add Value button and select 'String' from the dropdown list. Enter Name in the Name field. Enter a name in the Value field. Click on the Add Value button and select 'String' from the dropdown list. Enter Last name in the Name field. Enter a last name in the Value field. Click on the Add Value button and select 'Boolean' from the dropdown list. Enter Active in the Name field. Check the value. Click on Execute Node to run the node.","title":"2. Set node"},{"location":"integrations/nodes/n8n-nodes-base.baserow/#3-baserow-node-create","text":"This node will create a row in the Customers table with the content from the previous node. Enter your credentials for the Baserow node. You can find out how to create credentials here . Enter your Baserow instance URL (default value is for official version). Select 'Create' from the Operation dropdown list. Enter the Table ID in the Table ID field. For obtaining the Table ID, see the Database API page available from the database menu. Click on Execute Node to run the node.","title":"3. Baserow node (Create)"},{"location":"integrations/nodes/n8n-nodes-base.baserow/#4-baserow-node-list","text":"This node will list all the rows with the name Bill . If you want to list records with a different name, use that name instead. Select the credentials that you entered in the previous node. Click on the gears icon next to the Host field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Baserow > Parameters > Host . You can also add the following expression: {{$node[\"Baserow\"].parameter[\"host\"]}} . Select the 'List' option from the Operation dropdown list. Click on the gears icon next to the Table ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Baserow > Parameters > Table . You can also add the following expression: {{$node[\"Baserow\"].parameter[\"table\"]}} . Click on Add Option and select 'Search' from the dropdown list. Enter Bill in the Search field. Click on Execute Node to run the node. You will notice that the node only returns the record with a column containing Bill .","title":"4. Baserow node (List)"},{"location":"integrations/nodes/n8n-nodes-base.baserow/#5-baserow-node-delete","text":"This node will delete all the rows listed from the previous node. Select the credentials that you entered in the previous node. Click on the gears icon next to the Host field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Baserow > Parameters > Host . You can also add the following expression: {{$node[\"Baserow\"].parameter[\"host\"]}} . Select the 'Delete' option from the Operation dropdown list. Click on the gears icon next to the Table ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Baserow > Parameters > Table . You can also add the following expression: {{$node[\"Baserow\"].parameter[\"table\"]}} . Click on the gears icon next to the Row ID field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > id . You can also add the following expression: {{$json[\"id\"]}} . Click on Execute Node to run the node.","title":"5. Baserow node (Delete)"},{"location":"integrations/nodes/n8n-nodes-base.beeminder/","text":"Beeminder # Beeminder is a service that helps you to self-track and stick to your goals. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Datapoint - Create datapoint for a goal - Delete a datapoint - Get all datapoints for a goal - Update a datapoint Example Usage # This workflow allows you to add a datapoint to Beeminder when a new activity gets added to Strava. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Strava Trigger - Beeminder The final workflow should look like the following image. 1. Strava Trigger node # This node will trigger the workflow whenever a new activity gets added to your Strava account. First of all, you'll have to enter credentials for the Strava Trigger node. You can find out how to do that here . Select 'created' from the Event dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node triggers the workflow when a new activity gets added to Strava. 2. Beeminder node (create: datapoint) # This node will create a datapoint for the goal testing . If you have created a goal with a different name, select that goal instead. First of all, you'll have to enter credentials for the Beeminder node. You can find out how to do that here . Select a goal from the Goal Name dropdown list. Click on Add Field and select 'Comment'. Click on the gears icon next to the Comment field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > object_data > name. You can also add the following expression: {{$json[\"object_data\"][\"name\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a datapoint in Beeminder. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Strava Trigger node.","title":"Beeminder"},{"location":"integrations/nodes/n8n-nodes-base.beeminder/#beeminder","text":"Beeminder is a service that helps you to self-track and stick to your goals. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Beeminder"},{"location":"integrations/nodes/n8n-nodes-base.beeminder/#basic-operations","text":"Datapoint - Create datapoint for a goal - Delete a datapoint - Get all datapoints for a goal - Update a datapoint","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.beeminder/#example-usage","text":"This workflow allows you to add a datapoint to Beeminder when a new activity gets added to Strava. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Strava Trigger - Beeminder The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.beeminder/#1-strava-trigger-node","text":"This node will trigger the workflow whenever a new activity gets added to your Strava account. First of all, you'll have to enter credentials for the Strava Trigger node. You can find out how to do that here . Select 'created' from the Event dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node triggers the workflow when a new activity gets added to Strava.","title":"1. Strava Trigger node"},{"location":"integrations/nodes/n8n-nodes-base.beeminder/#2-beeminder-node-create-datapoint","text":"This node will create a datapoint for the goal testing . If you have created a goal with a different name, select that goal instead. First of all, you'll have to enter credentials for the Beeminder node. You can find out how to do that here . Select a goal from the Goal Name dropdown list. Click on Add Field and select 'Comment'. Click on the gears icon next to the Comment field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > object_data > name. You can also add the following expression: {{$json[\"object_data\"][\"name\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a datapoint in Beeminder. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Strava Trigger node.","title":"2. Beeminder node (create: datapoint)"},{"location":"integrations/nodes/n8n-nodes-base.bitly/","text":"Bitly # Bitly is URL shortening service and a link management platform that allows users to shorten, create and share trusted, powerful links for businesses. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Link Create a link Get a link Update a link Example Usage # This workflow shows you how to create a new link. You can also find the workflow on the website. This example usage workflow uses the following two nodes. - Start - Bitly The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Bitly node # First of all, you'll have to enter credentials for the Twilio node. You can find out how to do that here . Enter the URL in the Long URL field. Click on Execute Node to run the workflow.","title":"Bitly"},{"location":"integrations/nodes/n8n-nodes-base.bitly/#bitly","text":"Bitly is URL shortening service and a link management platform that allows users to shorten, create and share trusted, powerful links for businesses. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Bitly"},{"location":"integrations/nodes/n8n-nodes-base.bitly/#basic-operations","text":"Link Create a link Get a link Update a link","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.bitly/#example-usage","text":"This workflow shows you how to create a new link. You can also find the workflow on the website. This example usage workflow uses the following two nodes. - Start - Bitly The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.bitly/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.bitly/#2-bitly-node","text":"First of all, you'll have to enter credentials for the Twilio node. You can find out how to do that here . Enter the URL in the Long URL field. Click on Execute Node to run the workflow.","title":"2. Bitly node"},{"location":"integrations/nodes/n8n-nodes-base.bitwarden/","text":"Bitwarden # Bitwarden is an open-source password management solution for individuals, teams, and business organizations. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Collection Delete Get Get All Update Event Get All Group Create Delete Get Get All Get Members Update Update Members Member Create Delete Get Get All Get Groups Update Update Groups Example Usage # This workflow allows you to create a group, add members to the group, and get the members of the group in Bitwarden. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Bitwarden The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Bitwarden node (create: group) # This node will create a new group called documentation in Bitwarden. First of all, you'll have to enter credentials for the Bitwarden node. You can find out how to do that here . Select 'Group' from the Resource dropdown list. Select 'Create' from the Operation dropdown list. Enter documentation in the Name field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new group in Bitwarden. 3. Bitwarden1 node (getAll: member) # This node will get all the members from Bitwarden. Select the credentials that you entered in the previous node. Select 'Member' from the Resource dropdown list. Select 'Get All' from the Operation dropdown list. Toggle Return All to true . Click on Execute Node to run the node. In the screenshot below, you will notice that the node retrieves all the members from Bitwarden. 4. Bitwarden2 node (updateMembers: group) # This node will update all the members in the group that we created earlier. Select the credentials that you entered in the previous node. Select 'Group' from the Resource dropdown list. Select 'Update Members' from the Operation dropdown list. Click on the gears icon next to the Group ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Bitwarden > Output Data > JSON > id. You can also add the following expression: {{$node[\"Bitwarden\"].json[\"id\"]}} . Click on the gears icon next to the Member IDs field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > id. You can also add the following expression: {{$json[\"id\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node updates the members of the group. 5. Bitwarden3 node (getMembers: group) # This node will get all the members in the group that we created earlier. Select the credentials that you entered in the previous node. Select 'Group' from the Resource dropdown list. Select 'Get Members' from the Operation dropdown list. Click on the gears icon next to the Group ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Bitwarden > Output Data > JSON > id. You can also add the following expression: {{$node[\"Bitwarden\"].json[\"id\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node retrieves the members in the group.","title":"Bitwarden"},{"location":"integrations/nodes/n8n-nodes-base.bitwarden/#bitwarden","text":"Bitwarden is an open-source password management solution for individuals, teams, and business organizations. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Bitwarden"},{"location":"integrations/nodes/n8n-nodes-base.bitwarden/#basic-operations","text":"Collection Delete Get Get All Update Event Get All Group Create Delete Get Get All Get Members Update Update Members Member Create Delete Get Get All Get Groups Update Update Groups","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.bitwarden/#example-usage","text":"This workflow allows you to create a group, add members to the group, and get the members of the group in Bitwarden. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Bitwarden The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.bitwarden/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.bitwarden/#2-bitwarden-node-create-group","text":"This node will create a new group called documentation in Bitwarden. First of all, you'll have to enter credentials for the Bitwarden node. You can find out how to do that here . Select 'Group' from the Resource dropdown list. Select 'Create' from the Operation dropdown list. Enter documentation in the Name field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new group in Bitwarden.","title":"2. Bitwarden node (create: group)"},{"location":"integrations/nodes/n8n-nodes-base.bitwarden/#3-bitwarden1-node-getall-member","text":"This node will get all the members from Bitwarden. Select the credentials that you entered in the previous node. Select 'Member' from the Resource dropdown list. Select 'Get All' from the Operation dropdown list. Toggle Return All to true . Click on Execute Node to run the node. In the screenshot below, you will notice that the node retrieves all the members from Bitwarden.","title":"3. Bitwarden1 node (getAll: member)"},{"location":"integrations/nodes/n8n-nodes-base.bitwarden/#4-bitwarden2-node-updatemembers-group","text":"This node will update all the members in the group that we created earlier. Select the credentials that you entered in the previous node. Select 'Group' from the Resource dropdown list. Select 'Update Members' from the Operation dropdown list. Click on the gears icon next to the Group ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Bitwarden > Output Data > JSON > id. You can also add the following expression: {{$node[\"Bitwarden\"].json[\"id\"]}} . Click on the gears icon next to the Member IDs field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > id. You can also add the following expression: {{$json[\"id\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node updates the members of the group.","title":"4. Bitwarden2 node (updateMembers: group)"},{"location":"integrations/nodes/n8n-nodes-base.bitwarden/#5-bitwarden3-node-getmembers-group","text":"This node will get all the members in the group that we created earlier. Select the credentials that you entered in the previous node. Select 'Group' from the Resource dropdown list. Select 'Get Members' from the Operation dropdown list. Click on the gears icon next to the Group ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Bitwarden > Output Data > JSON > id. You can also add the following expression: {{$node[\"Bitwarden\"].json[\"id\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node retrieves the members in the group.","title":"5. Bitwarden3 node (getMembers: group)"},{"location":"integrations/nodes/n8n-nodes-base.box/","text":"Box # Box is a cloud computing company which provides file sharing, collaborating, and other tools for working with files that are uploaded to its servers. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # File Copy a file Delete a file Download a file Get a file Search files Share a file Upload a file Folder Create a folder Get a folder Delete a folder Search files Share a folder Update folder Example Usage # This workflow allows you to create a folder on Box. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Box The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Box node # First of all, you'll have to enter credentials for the Box node. You can find out how to do that here . Select the 'Folder' option from the Resource dropdown list. Enter the name of the folder in the Name field. Click on Execute Node to run the workflow.","title":"Box"},{"location":"integrations/nodes/n8n-nodes-base.box/#box","text":"Box is a cloud computing company which provides file sharing, collaborating, and other tools for working with files that are uploaded to its servers. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Box"},{"location":"integrations/nodes/n8n-nodes-base.box/#basic-operations","text":"File Copy a file Delete a file Download a file Get a file Search files Share a file Upload a file Folder Create a folder Get a folder Delete a folder Search files Share a folder Update folder","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.box/#example-usage","text":"This workflow allows you to create a folder on Box. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Box The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.box/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.box/#2-box-node","text":"First of all, you'll have to enter credentials for the Box node. You can find out how to do that here . Select the 'Folder' option from the Resource dropdown list. Enter the name of the folder in the Name field. Click on Execute Node to run the workflow.","title":"2. Box node"},{"location":"integrations/nodes/n8n-nodes-base.bubble/","text":"Bubble # Bubble lets you create interactive, multi-user apps for desktop and mobile web browsers. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Object Create Delete Get Get All Update Example Usage # This workflow allows you to create, update, and get an object from Bubble. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Bubble The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Bubble node (create: object) # This node will create a new object of the type Doc in Bubble. If you want to create an object with a different type, use that type instead. First of all, you'll have to enter credentials for the Bubble node. You can find out how to do that here . Select 'Create' from the Operation dropdown list. Enter Doc in the Type Name field. Click on the Add Property button. Enter Name in the Key field. If you're using a different type, enter the field name present in the type. Enter Bubble in the Value field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new object of the type Doc in Bubble. 3. Bubble1 node (update: object) # This node will update the object that we created using the previous node. Select the credentials that you entered in the previous Bubble node. Select 'Update' from the Operation dropdown list. Click on the gears icon next to the Type Name field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Bubble > Parameters > typeName. You can also add the following expression: {{$node[\"Bubble\"].parameter[\"typeName\"]}} . Click on the gears icon next to the Object ID field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > id. You can also add the following expression: {{$json[\"id\"]}} . Click on the Add Property button. Enter Name in the Key field. If you're using a different type, enter the field name present in the type. Enter Bubble node in the Value field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node updates the information of the object that got created previously. 4. Bubble2 node (get: object) # This node will retrieve the information of the object that we created earlier. Select the credentials that you entered in the previous Bubble node. Click on the gears icon next to the Type Name field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Bubble > Parameters > typeName. You can also add the following expression: {{$node[\"Bubble\"].parameter[\"typeName\"]}} . Click on the gears icon next to the Object ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Bubble > Output Data > JSON > id. You can also add the following expression: {{$node[\"Bubble\"].json[\"id\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node retrieves the information of the object that we created earlier.","title":"Bubble"},{"location":"integrations/nodes/n8n-nodes-base.bubble/#bubble","text":"Bubble lets you create interactive, multi-user apps for desktop and mobile web browsers. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Bubble"},{"location":"integrations/nodes/n8n-nodes-base.bubble/#basic-operations","text":"Object Create Delete Get Get All Update","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.bubble/#example-usage","text":"This workflow allows you to create, update, and get an object from Bubble. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Bubble The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.bubble/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.bubble/#2-bubble-node-create-object","text":"This node will create a new object of the type Doc in Bubble. If you want to create an object with a different type, use that type instead. First of all, you'll have to enter credentials for the Bubble node. You can find out how to do that here . Select 'Create' from the Operation dropdown list. Enter Doc in the Type Name field. Click on the Add Property button. Enter Name in the Key field. If you're using a different type, enter the field name present in the type. Enter Bubble in the Value field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new object of the type Doc in Bubble.","title":"2. Bubble node (create: object)"},{"location":"integrations/nodes/n8n-nodes-base.bubble/#3-bubble1-node-update-object","text":"This node will update the object that we created using the previous node. Select the credentials that you entered in the previous Bubble node. Select 'Update' from the Operation dropdown list. Click on the gears icon next to the Type Name field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Bubble > Parameters > typeName. You can also add the following expression: {{$node[\"Bubble\"].parameter[\"typeName\"]}} . Click on the gears icon next to the Object ID field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > id. You can also add the following expression: {{$json[\"id\"]}} . Click on the Add Property button. Enter Name in the Key field. If you're using a different type, enter the field name present in the type. Enter Bubble node in the Value field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node updates the information of the object that got created previously.","title":"3. Bubble1 node (update: object)"},{"location":"integrations/nodes/n8n-nodes-base.bubble/#4-bubble2-node-get-object","text":"This node will retrieve the information of the object that we created earlier. Select the credentials that you entered in the previous Bubble node. Click on the gears icon next to the Type Name field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Bubble > Parameters > typeName. You can also add the following expression: {{$node[\"Bubble\"].parameter[\"typeName\"]}} . Click on the gears icon next to the Object ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Bubble > Output Data > JSON > id. You can also add the following expression: {{$node[\"Bubble\"].json[\"id\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node retrieves the information of the object that we created earlier.","title":"4. Bubble2 node (get: object)"},{"location":"integrations/nodes/n8n-nodes-base.chargebee/","text":"Chargebee # Chargebee is a billing platform for subscription based SaaS and eCommerce businesses. Chargebee integrates with payment gateways to let you automate recurring payment collection along with invoicing, taxes, accounting, email notifications, SaaS Metrics and customer management. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Customer Create a customer Invoice Return the invoices Get URL for the invoice PDF Subscription Cancel a subscription Delete a subscription Example Usage # This workflow allows you to create a new customer in Chargebee. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Chargebee The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Chargebee node # First of all, you'll have to enter credentials for the Chargebee node. You can find out how to do that here . Select the 'Customer' option from the Resource dropdown list. Under the Properties section, click on the Add Property button and select First Name . Enter the first name of the contact in the First Name field. Click on Add Property again and select Last Name . Enter the last name of the contact in the Last name field. Click on Execute Node to run the workflow.","title":"Chargebee"},{"location":"integrations/nodes/n8n-nodes-base.chargebee/#chargebee","text":"Chargebee is a billing platform for subscription based SaaS and eCommerce businesses. Chargebee integrates with payment gateways to let you automate recurring payment collection along with invoicing, taxes, accounting, email notifications, SaaS Metrics and customer management. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Chargebee"},{"location":"integrations/nodes/n8n-nodes-base.chargebee/#basic-operations","text":"Customer Create a customer Invoice Return the invoices Get URL for the invoice PDF Subscription Cancel a subscription Delete a subscription","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.chargebee/#example-usage","text":"This workflow allows you to create a new customer in Chargebee. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Chargebee The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.chargebee/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.chargebee/#2-chargebee-node","text":"First of all, you'll have to enter credentials for the Chargebee node. You can find out how to do that here . Select the 'Customer' option from the Resource dropdown list. Under the Properties section, click on the Add Property button and select First Name . Enter the first name of the contact in the First Name field. Click on Add Property again and select Last Name . Enter the last name of the contact in the Last name field. Click on Execute Node to run the workflow.","title":"2. Chargebee node"},{"location":"integrations/nodes/n8n-nodes-base.circleCi/","text":"CircleCI # CircleCI is a continuous integration and delivery platform helps teams release quality code, faster. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Pipeline Get a pipeline Get all pipelines Trigger a pipeline Example Usage # This workflow allows you to get a pipeline in CircleCI. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - CircleCI The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. CircleCI node # First of all, you'll have to enter credentials for the CircleCI node. You can find out how to do that here . Select the VCS provider from the dropdown in the Provider field. Enter the project slug in the Project Slug field. Enter the number of the pipeline in CircleCI that you want to get in the Pipeline Number field. Click on Execute Node to run the workflow.","title":"CircleCI"},{"location":"integrations/nodes/n8n-nodes-base.circleCi/#circleci","text":"CircleCI is a continuous integration and delivery platform helps teams release quality code, faster. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"CircleCI"},{"location":"integrations/nodes/n8n-nodes-base.circleCi/#basic-operations","text":"Pipeline Get a pipeline Get all pipelines Trigger a pipeline","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.circleCi/#example-usage","text":"This workflow allows you to get a pipeline in CircleCI. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - CircleCI The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.circleCi/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.circleCi/#2-circleci-node","text":"First of all, you'll have to enter credentials for the CircleCI node. You can find out how to do that here . Select the VCS provider from the dropdown in the Provider field. Enter the project slug in the Project Slug field. Enter the number of the pipeline in CircleCI that you want to get in the Pipeline Number field. Click on Execute Node to run the workflow.","title":"2. CircleCI node"},{"location":"integrations/nodes/n8n-nodes-base.ciscoWebex/","text":"Webex by Cisco # Webex by Cisco is a web conferencing and videoconferencing application. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic operations # Meeting Create Delete Get Get All Update Message Create Delete Get Get All Update Example usage # This workflow allows you to create a new meeting. This example usage workflow uses the following node: Webex by Cisco The final workflow should look like the following image. 1. Webex by Cisco node # First enter your credentials for node. You can find out how to do that here . Select 'Meeting' from the Resource dropdown list. Select 'Create' from the Operation dropdown list. Enter a Title for your new meeting. Select the Start and End times for the meeting. Optionally, use the Additional Fields menu to add further meeting details, for example an agenda, set the invitees, or a meeting recurrence. Click on Execute Node to run the workflow.","title":"Webex by Cisco"},{"location":"integrations/nodes/n8n-nodes-base.ciscoWebex/#webex-by-cisco","text":"Webex by Cisco is a web conferencing and videoconferencing application. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Webex by Cisco"},{"location":"integrations/nodes/n8n-nodes-base.ciscoWebex/#basic-operations","text":"Meeting Create Delete Get Get All Update Message Create Delete Get Get All Update","title":"Basic operations"},{"location":"integrations/nodes/n8n-nodes-base.ciscoWebex/#example-usage","text":"This workflow allows you to create a new meeting. This example usage workflow uses the following node: Webex by Cisco The final workflow should look like the following image.","title":"Example usage"},{"location":"integrations/nodes/n8n-nodes-base.ciscoWebex/#1-webex-by-cisco-node","text":"First enter your credentials for node. You can find out how to do that here . Select 'Meeting' from the Resource dropdown list. Select 'Create' from the Operation dropdown list. Enter a Title for your new meeting. Select the Start and End times for the meeting. Optionally, use the Additional Fields menu to add further meeting details, for example an agenda, set the invitees, or a meeting recurrence. Click on Execute Node to run the workflow.","title":"1. Webex by Cisco node"},{"location":"integrations/nodes/n8n-nodes-base.clearbit/","text":"Clearbit # Clearbit provides powerful products, and data APIs like contact enrichment, lead generation, financial compliance, and more to help businesses grow. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Company Auto-complete company names and retrieve logo and domain Look up person and company data based on an email or domain Person Look up a person and company data based on an email or domain Example Usage # This workflow allows you to look up a person using their email in Clearbit. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Clearbit The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Clearbit node # First of all, you'll have to enter credentials for the Clearbit node. You can find out how to do that here . Select the 'Person' option from the Resource dropdown list. Enter the email of the person you want to look up in the Email field. Click on Execute Node to run the workflow.","title":"Clearbit"},{"location":"integrations/nodes/n8n-nodes-base.clearbit/#clearbit","text":"Clearbit provides powerful products, and data APIs like contact enrichment, lead generation, financial compliance, and more to help businesses grow. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Clearbit"},{"location":"integrations/nodes/n8n-nodes-base.clearbit/#basic-operations","text":"Company Auto-complete company names and retrieve logo and domain Look up person and company data based on an email or domain Person Look up a person and company data based on an email or domain","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.clearbit/#example-usage","text":"This workflow allows you to look up a person using their email in Clearbit. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Clearbit The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.clearbit/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.clearbit/#2-clearbit-node","text":"First of all, you'll have to enter credentials for the Clearbit node. You can find out how to do that here . Select the 'Person' option from the Resource dropdown list. Enter the email of the person you want to look up in the Email field. Click on Execute Node to run the workflow.","title":"2. Clearbit node"},{"location":"integrations/nodes/n8n-nodes-base.clickUp/","text":"ClickUp # ClickUp is a cloud-based collaboration and project management tool suitable for businesses of all sizes and industries. Features include communication and collaboration tools, task assignments and statuses, alerts and a task toolbar. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Checklist Create a checklist Delete a checklist Update a checklist Checklist Item Create a checklist item Delete a checklist item Update a checklist item Comment Create a comment Delete a comment Get all comments Update a comment Folder Create a folder Delete a folder Get a folder Get all folders Update a folder Goal Create a goal Delete a goal Get a goal Get all goals Update a goal Goal Key Result Create a key result Delete a key result Update a key result List Create a list Retrieve list's custom fields Delete a list Get a list Get all lists Get list members Update a list Space Tag Create a space tag Delete a space tag Get all space tags Update a space tag Task Create a task Delete a task Get a task Get all tasks Get task members Set a custom field Update a task Task List Add a task to a list Remove a task from a list Task Tag Add a tag to a task Remove a tag from a task Task Dependency Create a task dependency Delete a task dependency Time Entry Create a time entry Delete a time entry Get a time entry Get all time entries Start a time entry Stop the current running timer Update a time Entry Time Entry Tag Add tag to time entry Get all time entry tags Remove tag from time entry Example Usage # This workflow allows you to create a task in ClickUp. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - ClickUp The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. ClickUp node # First of all, you'll have to enter credentials for the ClickUp node. You can find out how to do that here . Select your team ID from the Team ID dropdown list. Select your space ID from the Space ID dropdown list. Select your folder ID from the Folder ID dropdown list. Select your list ID from the List ID dropdown list. Enter the name of the task in the Name field. Click on Execute Node to run the workflow.","title":"ClickUp"},{"location":"integrations/nodes/n8n-nodes-base.clickUp/#clickup","text":"ClickUp is a cloud-based collaboration and project management tool suitable for businesses of all sizes and industries. Features include communication and collaboration tools, task assignments and statuses, alerts and a task toolbar. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"ClickUp"},{"location":"integrations/nodes/n8n-nodes-base.clickUp/#basic-operations","text":"Checklist Create a checklist Delete a checklist Update a checklist Checklist Item Create a checklist item Delete a checklist item Update a checklist item Comment Create a comment Delete a comment Get all comments Update a comment Folder Create a folder Delete a folder Get a folder Get all folders Update a folder Goal Create a goal Delete a goal Get a goal Get all goals Update a goal Goal Key Result Create a key result Delete a key result Update a key result List Create a list Retrieve list's custom fields Delete a list Get a list Get all lists Get list members Update a list Space Tag Create a space tag Delete a space tag Get all space tags Update a space tag Task Create a task Delete a task Get a task Get all tasks Get task members Set a custom field Update a task Task List Add a task to a list Remove a task from a list Task Tag Add a tag to a task Remove a tag from a task Task Dependency Create a task dependency Delete a task dependency Time Entry Create a time entry Delete a time entry Get a time entry Get all time entries Start a time entry Stop the current running timer Update a time Entry Time Entry Tag Add tag to time entry Get all time entry tags Remove tag from time entry","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.clickUp/#example-usage","text":"This workflow allows you to create a task in ClickUp. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - ClickUp The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.clickUp/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.clickUp/#2-clickup-node","text":"First of all, you'll have to enter credentials for the ClickUp node. You can find out how to do that here . Select your team ID from the Team ID dropdown list. Select your space ID from the Space ID dropdown list. Select your folder ID from the Folder ID dropdown list. Select your list ID from the List ID dropdown list. Enter the name of the task in the Name field. Click on Execute Node to run the workflow.","title":"2. ClickUp node"},{"location":"integrations/nodes/n8n-nodes-base.clockify/","text":"Clockify # Clockify is a free time tracker and timesheet app for tracking work hours across projects. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Project Create a project Delete a project Get a project Get all projects Update a project Tag Create a tag Delete a tag Get all tags Update a tag Task Create a task Delete a task Get a task Get all tasks Update a task Time Entry Create a time entry Delete a time entry Get time entrie Update a time entry Example Usage # This workflow allows you to create a project, tag, and time entry in Clockify. It also allows you to update the time entry in Clockify. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Clockify The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Clockify node (create: project) # This node will create a private project with a custom color. It will also add a note to the project in Clockify. First of all, you'll have to enter credentials for the Clockify node. You can find out how to do that here . Select the Workspace ID from the dropdown list. Enter the name of the project in the Project Name field. Click on Add Field and select 'Color' from the dropdown list. Select the color from the color-picker or enter the hexadecimal value of the color in the Color field. Click on Add Field and select 'Is Public' from the dropdown list. Toggle Is Public to false. Click on Add Field and select 'Note' from the dropdown list. Enter the note in the Note field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new private project called n8n-docs . This project has a custom color #0000FF and a note For n8n-docs . 3. Clockify1 node (create: tag) # This node will create a new tag in Clockify. Select the credentials that you entered in the previous node. Select 'Tag' from the Resource dropdown list. Select the Workspace ID from the dropdown list. Enter the name of the tag in the Name field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new tag called docs in the n8n workspace in Clockify. 4. Clockify2 node (create: timeEntry) # This node creates a new time entry in Clockify with a description. It also adds the tag that we created in the previous step to the time entry. Select the credentials that you entered in the previous node. Select 'Time Entry' from the Resource dropdown list. Select the Workspace ID from the dropdown list. Select a start date and time for the Start field. Click on Add Field and select 'Description' from the dropdown list. Enter a description in the Description field. Click on Add Field and select 'End' from the dropdown list. Select a end date and time for the End field. Click on Add Field and select 'Tag IDs' from the dropdown list. Select the tag that you created in the previous step from the Tag IDs dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new time entry with a description and adds the tag that was created in the previous node. 5. Clockify3 node (update: timeEntry) # This node will add the project to the time entry that was created by the Clockify node. Select the credentials that you entered in the previous node. Select 'Time Entry' from the Resource dropdown list. Select 'Update' from the Operation dropdown list. Select the Workspace ID from the dropdown list. Click on the gears icon next to the Time Entry ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Clockify2 > Output Data > JSON > id. You can also add the following expression: {{$node[\"Clockify2\"].json[\"id\"]}} . Click on Add Field and select 'Project ID' from the dropdown list. Click on the gears icon next to the Project ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Clockify > Output Data > JSON > id. You can also add the following expression: {{$node[\"Clockify\"].json[\"id\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node has updated the time entry by adding the project ID we created in the Clockify node.","title":"Clockify"},{"location":"integrations/nodes/n8n-nodes-base.clockify/#clockify","text":"Clockify is a free time tracker and timesheet app for tracking work hours across projects. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Clockify"},{"location":"integrations/nodes/n8n-nodes-base.clockify/#basic-operations","text":"Project Create a project Delete a project Get a project Get all projects Update a project Tag Create a tag Delete a tag Get all tags Update a tag Task Create a task Delete a task Get a task Get all tasks Update a task Time Entry Create a time entry Delete a time entry Get time entrie Update a time entry","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.clockify/#example-usage","text":"This workflow allows you to create a project, tag, and time entry in Clockify. It also allows you to update the time entry in Clockify. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Clockify The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.clockify/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.clockify/#2-clockify-node-create-project","text":"This node will create a private project with a custom color. It will also add a note to the project in Clockify. First of all, you'll have to enter credentials for the Clockify node. You can find out how to do that here . Select the Workspace ID from the dropdown list. Enter the name of the project in the Project Name field. Click on Add Field and select 'Color' from the dropdown list. Select the color from the color-picker or enter the hexadecimal value of the color in the Color field. Click on Add Field and select 'Is Public' from the dropdown list. Toggle Is Public to false. Click on Add Field and select 'Note' from the dropdown list. Enter the note in the Note field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new private project called n8n-docs . This project has a custom color #0000FF and a note For n8n-docs .","title":"2. Clockify node (create: project)"},{"location":"integrations/nodes/n8n-nodes-base.clockify/#3-clockify1-node-create-tag","text":"This node will create a new tag in Clockify. Select the credentials that you entered in the previous node. Select 'Tag' from the Resource dropdown list. Select the Workspace ID from the dropdown list. Enter the name of the tag in the Name field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new tag called docs in the n8n workspace in Clockify.","title":"3. Clockify1 node (create: tag)"},{"location":"integrations/nodes/n8n-nodes-base.clockify/#4-clockify2-node-create-timeentry","text":"This node creates a new time entry in Clockify with a description. It also adds the tag that we created in the previous step to the time entry. Select the credentials that you entered in the previous node. Select 'Time Entry' from the Resource dropdown list. Select the Workspace ID from the dropdown list. Select a start date and time for the Start field. Click on Add Field and select 'Description' from the dropdown list. Enter a description in the Description field. Click on Add Field and select 'End' from the dropdown list. Select a end date and time for the End field. Click on Add Field and select 'Tag IDs' from the dropdown list. Select the tag that you created in the previous step from the Tag IDs dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new time entry with a description and adds the tag that was created in the previous node.","title":"4. Clockify2 node (create: timeEntry)"},{"location":"integrations/nodes/n8n-nodes-base.clockify/#5-clockify3-node-update-timeentry","text":"This node will add the project to the time entry that was created by the Clockify node. Select the credentials that you entered in the previous node. Select 'Time Entry' from the Resource dropdown list. Select 'Update' from the Operation dropdown list. Select the Workspace ID from the dropdown list. Click on the gears icon next to the Time Entry ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Clockify2 > Output Data > JSON > id. You can also add the following expression: {{$node[\"Clockify2\"].json[\"id\"]}} . Click on Add Field and select 'Project ID' from the dropdown list. Click on the gears icon next to the Project ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Clockify > Output Data > JSON > id. You can also add the following expression: {{$node[\"Clockify\"].json[\"id\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node has updated the time entry by adding the project ID we created in the Clockify node.","title":"5. Clockify3 node (update: timeEntry)"},{"location":"integrations/nodes/n8n-nodes-base.cockpit/","text":"Cockpit # Cockpit is a headless CMS with an API-first approach that puts content first. It is designed to simplify the process of publication by separating content management from content consumption on the client side. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Collection Create a collection entry Get all collection entries Update a collection entry Form Store data from a form submission Singleton Get a singleton Example Usage # This workflow allows you to get entries from a collection in Cockpit. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Cockpit The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Cockpit node # First of all, you'll have to enter credentials for the Cockpit node. You can find out how to do that here . Select your collection from the Collection dropdown list. Click on Execute Node to run the workflow.","title":"Cockpit"},{"location":"integrations/nodes/n8n-nodes-base.cockpit/#cockpit","text":"Cockpit is a headless CMS with an API-first approach that puts content first. It is designed to simplify the process of publication by separating content management from content consumption on the client side. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Cockpit"},{"location":"integrations/nodes/n8n-nodes-base.cockpit/#basic-operations","text":"Collection Create a collection entry Get all collection entries Update a collection entry Form Store data from a form submission Singleton Get a singleton","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.cockpit/#example-usage","text":"This workflow allows you to get entries from a collection in Cockpit. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Cockpit The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.cockpit/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.cockpit/#2-cockpit-node","text":"First of all, you'll have to enter credentials for the Cockpit node. You can find out how to do that here . Select your collection from the Collection dropdown list. Click on Execute Node to run the workflow.","title":"2. Cockpit node"},{"location":"integrations/nodes/n8n-nodes-base.coda/","text":"Coda # Coda is a new type of document that blends the flexibility of documents, the power of spreadsheets, and the utility of applications into a single new canvas. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Control Get a control Get all controls Formula Get a formula Get all formulas Table Create/Insert a row Delete one or multiple rows Get all columns Get all the rows Get a column Get a row Pushes a button View Delete view row Get a view Get all views Get all views columns Get all views rows Update row Push view button Example Usage # This workflow allows you to insert data into a new row for a table in Coda. You can also find the workflow on the website. This example usage workflow would use the following three nodes. - Start - Set - Coda The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Set node # Click on the Add Value button and select 'String' from the dropdown list. Enter Column 1 in the Name field. Enter the value for the first column in the Value field. Repeat the first three steps of all the columns that you have in your Coda table. Note: Here, we've used the default table in Coda, which has three columns namely Column 1, Column 2, and Column 3. Please make sure that the column names in the Name field matches the names of the table columns in Coda. 3. Coda node # First of all, you'll have to enter credentials for the Coda node. You can find out how to do that here . Select the name of your document from the Doc dropdown list. Select the name of your table from the Table dropdown list. Click on Execute Node to run the workflow.","title":"Coda"},{"location":"integrations/nodes/n8n-nodes-base.coda/#coda","text":"Coda is a new type of document that blends the flexibility of documents, the power of spreadsheets, and the utility of applications into a single new canvas. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Coda"},{"location":"integrations/nodes/n8n-nodes-base.coda/#basic-operations","text":"Control Get a control Get all controls Formula Get a formula Get all formulas Table Create/Insert a row Delete one or multiple rows Get all columns Get all the rows Get a column Get a row Pushes a button View Delete view row Get a view Get all views Get all views columns Get all views rows Update row Push view button","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.coda/#example-usage","text":"This workflow allows you to insert data into a new row for a table in Coda. You can also find the workflow on the website. This example usage workflow would use the following three nodes. - Start - Set - Coda The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.coda/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.coda/#2-set-node","text":"Click on the Add Value button and select 'String' from the dropdown list. Enter Column 1 in the Name field. Enter the value for the first column in the Value field. Repeat the first three steps of all the columns that you have in your Coda table. Note: Here, we've used the default table in Coda, which has three columns namely Column 1, Column 2, and Column 3. Please make sure that the column names in the Name field matches the names of the table columns in Coda.","title":"2. Set node"},{"location":"integrations/nodes/n8n-nodes-base.coda/#3-coda-node","text":"First of all, you'll have to enter credentials for the Coda node. You can find out how to do that here . Select the name of your document from the Doc dropdown list. Select the name of your table from the Table dropdown list. Click on Execute Node to run the workflow.","title":"3. Coda node"},{"location":"integrations/nodes/n8n-nodes-base.coinGecko/","text":"CoinGecko # CoinGecko provides a fundamental analysis of the crypto market. In addition to tracking price, volume and market capitalization, CoinGecko tracks community growth, open-source code development, major events, and on-chain metrics. \ud83d\udd11 Credentials The CoinGecko node does not require authentication. Basic Operations # Coin Get a candlestick open-high-low-close chart for the selected currency Get current data for a coin Get all coins Get historical data (name, price, market, stats) at a given date for a coin Get prices and market related data for all trading pairs that match the selected currency Get historical market data include price, market cap, and 24h volume (granularity auto) Get the current price of any cryptocurrencies in any other supported currencies that you need Get coin tickers Event Get all events Example Usage # This workflow allows you to get the price of BTC in EUR using the CoinGecko node and send an SMS when the price is greater than or equal to \u20ac9000. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Cron - CoinGecko - IF - Twilio - No Operation, do nothing The final workflow should look like the following image. 1. Cron node # The Cron node will trigger the workflow every minute. Click on Add Cron Time . Select 'Every Minute' from the Mode dropdown list. Click on Execute Node to run the node. 2. CoinGecko node (price: coin) # This node will get the price of BTC in EUR using the CoinGecko API. Feel free to select a different Coin ID and Currency. 1. Select 'Price' from the Operation dropdown list. 2. Select 'BTC' from the Coin IDs dropdown list. 3. Select 'EUR' from the Currencies dropdown list. 4. Click on Execute Node to run the node. In the screenshot below, you will notice that the node fetches the price of 1 BTC in EUR. This information will be passed on to the next nodes in the workflow. 3. IF node # This node will compare the price that we got from the CoinGecko node. If the price is greater than or equal to 9000, it will return true otherwise false. Click on Add Condition and select 'Number' from the dropdown list. Click on the gears icon next to the Value 1 field and click on Add Expression . Select the following in the Variable Selector section: Nodes > CoinGecko > Output Data > JSON > bitcoin > eur. You can also add the following expression: {{$node[\"CoinGecko\"].json[\"bitcoin\"][\"eur\"]}} . Select 'Larger Equal' from the Operation dropdown list. Set Value 2 to 9000. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns an output for true when the price is greater than 9000. 4. Twilio node (send: sms) # This node sends an SMS to a number when the price is greater than or equal to 9000. Connect this node with the true output of the IF node. You'll have to enter credentials for the Twilio node. You can find out how to do that here . Enter the Twilio phone number in the From field. Enter the receiver's phone number in the To field. Click on the gears icon next to the Message field and click on Add Expression . Enter The price went up! The new price is \u20ac{{$node[\"CoinGecko\"].json[\"bitcoin\"][\"eur\"]}} in the Expression field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node sends an SMS with the price that we obtained from the CoinGecko node. 5. NoOp node # Adding this node here is optional, as the absence of this node won't make a difference to the functioning of the workflow. Connect this node with the false output of the IF node. Click on Execute Node to run the node.","title":"CoinGecko"},{"location":"integrations/nodes/n8n-nodes-base.coinGecko/#coingecko","text":"CoinGecko provides a fundamental analysis of the crypto market. In addition to tracking price, volume and market capitalization, CoinGecko tracks community growth, open-source code development, major events, and on-chain metrics. \ud83d\udd11 Credentials The CoinGecko node does not require authentication.","title":"CoinGecko"},{"location":"integrations/nodes/n8n-nodes-base.coinGecko/#basic-operations","text":"Coin Get a candlestick open-high-low-close chart for the selected currency Get current data for a coin Get all coins Get historical data (name, price, market, stats) at a given date for a coin Get prices and market related data for all trading pairs that match the selected currency Get historical market data include price, market cap, and 24h volume (granularity auto) Get the current price of any cryptocurrencies in any other supported currencies that you need Get coin tickers Event Get all events","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.coinGecko/#example-usage","text":"This workflow allows you to get the price of BTC in EUR using the CoinGecko node and send an SMS when the price is greater than or equal to \u20ac9000. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Cron - CoinGecko - IF - Twilio - No Operation, do nothing The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.coinGecko/#1-cron-node","text":"The Cron node will trigger the workflow every minute. Click on Add Cron Time . Select 'Every Minute' from the Mode dropdown list. Click on Execute Node to run the node.","title":"1. Cron node"},{"location":"integrations/nodes/n8n-nodes-base.coinGecko/#2-coingecko-node-price-coin","text":"This node will get the price of BTC in EUR using the CoinGecko API. Feel free to select a different Coin ID and Currency. 1. Select 'Price' from the Operation dropdown list. 2. Select 'BTC' from the Coin IDs dropdown list. 3. Select 'EUR' from the Currencies dropdown list. 4. Click on Execute Node to run the node. In the screenshot below, you will notice that the node fetches the price of 1 BTC in EUR. This information will be passed on to the next nodes in the workflow.","title":"2. CoinGecko node (price: coin)"},{"location":"integrations/nodes/n8n-nodes-base.coinGecko/#3-if-node","text":"This node will compare the price that we got from the CoinGecko node. If the price is greater than or equal to 9000, it will return true otherwise false. Click on Add Condition and select 'Number' from the dropdown list. Click on the gears icon next to the Value 1 field and click on Add Expression . Select the following in the Variable Selector section: Nodes > CoinGecko > Output Data > JSON > bitcoin > eur. You can also add the following expression: {{$node[\"CoinGecko\"].json[\"bitcoin\"][\"eur\"]}} . Select 'Larger Equal' from the Operation dropdown list. Set Value 2 to 9000. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns an output for true when the price is greater than 9000.","title":"3. IF node"},{"location":"integrations/nodes/n8n-nodes-base.coinGecko/#4-twilio-node-send-sms","text":"This node sends an SMS to a number when the price is greater than or equal to 9000. Connect this node with the true output of the IF node. You'll have to enter credentials for the Twilio node. You can find out how to do that here . Enter the Twilio phone number in the From field. Enter the receiver's phone number in the To field. Click on the gears icon next to the Message field and click on Add Expression . Enter The price went up! The new price is \u20ac{{$node[\"CoinGecko\"].json[\"bitcoin\"][\"eur\"]}} in the Expression field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node sends an SMS with the price that we obtained from the CoinGecko node.","title":"4. Twilio node (send: sms)"},{"location":"integrations/nodes/n8n-nodes-base.coinGecko/#5-noop-node","text":"Adding this node here is optional, as the absence of this node won't make a difference to the functioning of the workflow. Connect this node with the false output of the IF node. Click on Execute Node to run the node.","title":"5. NoOp node"},{"location":"integrations/nodes/n8n-nodes-base.contentful/","text":"Contentful # Contentful provides a content infrastructure for digital teams to power content in websites, apps, and devices. It offers a central hub for structured content, powerful management and delivery APIs, and a customizable web app. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Asset Get Get All Content Type Get Entry Get Get All Locale Get All Space Get Example Usage # This workflow allows you to get all the entries using the Delivery API of Contentful. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Contentful The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Contentful node # First of all, you'll have to enter credentials for the Contentful node. You can find out how to do that here . Select 'Get All' from the Operation dropdown list. Toggle Return All to true. Click on Execute Node to run the node.","title":"Contentful"},{"location":"integrations/nodes/n8n-nodes-base.contentful/#contentful","text":"Contentful provides a content infrastructure for digital teams to power content in websites, apps, and devices. It offers a central hub for structured content, powerful management and delivery APIs, and a customizable web app. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Contentful"},{"location":"integrations/nodes/n8n-nodes-base.contentful/#basic-operations","text":"Asset Get Get All Content Type Get Entry Get Get All Locale Get All Space Get","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.contentful/#example-usage","text":"This workflow allows you to get all the entries using the Delivery API of Contentful. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Contentful The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.contentful/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.contentful/#2-contentful-node","text":"First of all, you'll have to enter credentials for the Contentful node. You can find out how to do that here . Select 'Get All' from the Operation dropdown list. Toggle Return All to true. Click on Execute Node to run the node.","title":"2. Contentful node"},{"location":"integrations/nodes/n8n-nodes-base.convertKit/","text":"ConvertKit # ConvertKit is a fully-featured email marketing platform. ConvertKit can be used to build an email list, send email broadcasts, automate sequences, create segments, and build landing pages. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Custom Field Create a field Delete a field Get all fields Update a field Form Add a subscriber Get all forms List subscriptions to a form including subscriber data Sequence Add a subscriber Get all sequences Get all subscriptions to a sequence including subscriber data Tag Create a tag Get all tags Tag Subscriber Add a tag to a subscriber List subscriptions to a tag including subscriber data Delete a tag from a subscriber Example Usage # This workflow allows you to add a subscriber to a form, create a tag and add the subscriber to the tag using the ConvertKit node. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - ConvertKit The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. ConvertKit node (addSubscriber: form) # First of all, you'll have to enter credentials for the ConvertKit node. You can find out how to do that here . Select the form from the Form ID dropdown list. Enter the email address in the Email field. Click on Execute Node to run the node. 3. ConvertKit1 node (create: tag) # Select the credentials that you entered in the previous ConvertKit node. Select 'Tag' from the Resource dropdown list. Enter the tag name in the Name field. Click on Execute Node to run the node. 4. ConvertKit2 node (add: tagSubscriber) # Select the credentials that you entered in the previous ConvertKit node. Select 'Tag Subscriber' from the Resource dropdown list. Select 'Add' from the Operation dropdown list. Select the tag from the Tag ID dropdown list. Click on the gears icon next to the Email field and click on Add Expression . Select the following in the Variable Selector section: Nodes > ConvertKit > Output Data > JSON > subscriber > email_address. You can also add the following expression: {{$node[\"ConvertKit\"].json[\"subscriber\"][\"email_address\"]}} . Click on Execute Node to run the node.","title":"ConvertKit"},{"location":"integrations/nodes/n8n-nodes-base.convertKit/#convertkit","text":"ConvertKit is a fully-featured email marketing platform. ConvertKit can be used to build an email list, send email broadcasts, automate sequences, create segments, and build landing pages. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"ConvertKit"},{"location":"integrations/nodes/n8n-nodes-base.convertKit/#basic-operations","text":"Custom Field Create a field Delete a field Get all fields Update a field Form Add a subscriber Get all forms List subscriptions to a form including subscriber data Sequence Add a subscriber Get all sequences Get all subscriptions to a sequence including subscriber data Tag Create a tag Get all tags Tag Subscriber Add a tag to a subscriber List subscriptions to a tag including subscriber data Delete a tag from a subscriber","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.convertKit/#example-usage","text":"This workflow allows you to add a subscriber to a form, create a tag and add the subscriber to the tag using the ConvertKit node. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - ConvertKit The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.convertKit/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.convertKit/#2-convertkit-node-addsubscriber-form","text":"First of all, you'll have to enter credentials for the ConvertKit node. You can find out how to do that here . Select the form from the Form ID dropdown list. Enter the email address in the Email field. Click on Execute Node to run the node.","title":"2. ConvertKit node (addSubscriber: form)"},{"location":"integrations/nodes/n8n-nodes-base.convertKit/#3-convertkit1-node-create-tag","text":"Select the credentials that you entered in the previous ConvertKit node. Select 'Tag' from the Resource dropdown list. Enter the tag name in the Name field. Click on Execute Node to run the node.","title":"3. ConvertKit1 node (create: tag)"},{"location":"integrations/nodes/n8n-nodes-base.convertKit/#4-convertkit2-node-add-tagsubscriber","text":"Select the credentials that you entered in the previous ConvertKit node. Select 'Tag Subscriber' from the Resource dropdown list. Select 'Add' from the Operation dropdown list. Select the tag from the Tag ID dropdown list. Click on the gears icon next to the Email field and click on Add Expression . Select the following in the Variable Selector section: Nodes > ConvertKit > Output Data > JSON > subscriber > email_address. You can also add the following expression: {{$node[\"ConvertKit\"].json[\"subscriber\"][\"email_address\"]}} . Click on Execute Node to run the node.","title":"4. ConvertKit2 node (add: tagSubscriber)"},{"location":"integrations/nodes/n8n-nodes-base.copper/","text":"Copper # Copper is a CRM that focuses on strong integration with Google's G Suite, targeted towards small and medium-sized businesses. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Company Create Delete Get Get All Update Customer Source Get All Lead Create Delete Get Get All Update Opportunity Create Delete Get Get All Update Person Create Delete Get Get All Update Project Create Delete Get Get All Update Task Create Delete Get Get All Update User Get All Example Usage # This workflow allows you to create, update, and get a person from Copper. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Copper The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Copper node (create: person) # This node will create a new person in Copper. First of all, you'll have to enter credentials for the Copper node. You can find out how to do that here . Select 'Person' from the Resource dropdown list. Enter the name of the lead in the Name field. Click on the Add Field button and select 'Emails' from the dropdown list. Click on the Add Email button. Enter the email in the Email field. Enter the category of the email in the Category field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new person in Copper. 3. Copper1 node (update: person) # This node will update the information of the person that we created using the previous node. Select the credentials that you entered in the previous Copper node. Select 'Person' from the Resource dropdown list. Select 'Update' from the Operation dropdown list. Click on the gears icon next to the Person ID field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > id. You can also add the following expression: {{$json[\"id\"]}} . Click on the Add Field button and select 'Phone Numbers' from the dropdown list. Click on the Add Phone Number field. Enter the phone number in the Phone Number field. Enter the category in the Category field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node updates the information of the person that got created previously. 4. Copper2 node (get: person) # This node will retrieve the information of the person that we created earlier. Select the credentials that you entered in the previous Copper node. Select 'Person' from the Resource dropdown list. Select 'Update' from the Operation dropdown list. Click on the gears icon next to the Person ID field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > id. You can also add the following expression: {{$json[\"id\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node retrieves the information of the person that we created earlier.","title":"Copper"},{"location":"integrations/nodes/n8n-nodes-base.copper/#copper","text":"Copper is a CRM that focuses on strong integration with Google's G Suite, targeted towards small and medium-sized businesses. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Copper"},{"location":"integrations/nodes/n8n-nodes-base.copper/#basic-operations","text":"Company Create Delete Get Get All Update Customer Source Get All Lead Create Delete Get Get All Update Opportunity Create Delete Get Get All Update Person Create Delete Get Get All Update Project Create Delete Get Get All Update Task Create Delete Get Get All Update User Get All","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.copper/#example-usage","text":"This workflow allows you to create, update, and get a person from Copper. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Copper The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.copper/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.copper/#2-copper-node-create-person","text":"This node will create a new person in Copper. First of all, you'll have to enter credentials for the Copper node. You can find out how to do that here . Select 'Person' from the Resource dropdown list. Enter the name of the lead in the Name field. Click on the Add Field button and select 'Emails' from the dropdown list. Click on the Add Email button. Enter the email in the Email field. Enter the category of the email in the Category field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new person in Copper.","title":"2. Copper node (create: person)"},{"location":"integrations/nodes/n8n-nodes-base.copper/#3-copper1-node-update-person","text":"This node will update the information of the person that we created using the previous node. Select the credentials that you entered in the previous Copper node. Select 'Person' from the Resource dropdown list. Select 'Update' from the Operation dropdown list. Click on the gears icon next to the Person ID field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > id. You can also add the following expression: {{$json[\"id\"]}} . Click on the Add Field button and select 'Phone Numbers' from the dropdown list. Click on the Add Phone Number field. Enter the phone number in the Phone Number field. Enter the category in the Category field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node updates the information of the person that got created previously.","title":"3. Copper1 node (update: person)"},{"location":"integrations/nodes/n8n-nodes-base.copper/#4-copper2-node-get-person","text":"This node will retrieve the information of the person that we created earlier. Select the credentials that you entered in the previous Copper node. Select 'Person' from the Resource dropdown list. Select 'Update' from the Operation dropdown list. Click on the gears icon next to the Person ID field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > id. You can also add the following expression: {{$json[\"id\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node retrieves the information of the person that we created earlier.","title":"4. Copper2 node (get: person)"},{"location":"integrations/nodes/n8n-nodes-base.cortex/","text":"Cortex # Cortex offers a powerful observable (URL, file, IP, etc) analysis mechanism. It allows you to analyze collected observables using a single tool, respond to threats, and interact with the constituency and other teams. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Analyzer Execute Analyzer Job Get job details Get job report Responder Execute Responder Example Usage # This workflow allows you to analyze a URL and get the job details using the Cortex node. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Cortex The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Cortex node (analyzer: execute) # This node will analyze a URL. If you want to analyze a different observable type, select that instead. First of all, you'll have to enter credentials for the Cortex node. You can find out how to do that here . Select 'Abuse_Finder_3_0' from the Analyzer Type dropdown list. Select 'URL' from the Observable Type dropdown list. Enter the URL you want to analyze in the Observable Value field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node starts the analysis of the URL. 3. Cortex1 node (job: get) # This node will return the job details for the analysis that we executed in the previous node. Select the credentials that you entered in the previous node. Select 'Job' from the Resource dropdown list. Click on the gears icon next to the Job ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Cortex > Output Data > JSON > _id. You can also add the following expression: {{$node[\"Cortex\"].json[\"_id\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node starts the analysis of the URL.","title":"Cortex"},{"location":"integrations/nodes/n8n-nodes-base.cortex/#cortex","text":"Cortex offers a powerful observable (URL, file, IP, etc) analysis mechanism. It allows you to analyze collected observables using a single tool, respond to threats, and interact with the constituency and other teams. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Cortex"},{"location":"integrations/nodes/n8n-nodes-base.cortex/#basic-operations","text":"Analyzer Execute Analyzer Job Get job details Get job report Responder Execute Responder","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.cortex/#example-usage","text":"This workflow allows you to analyze a URL and get the job details using the Cortex node. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Cortex The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.cortex/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.cortex/#2-cortex-node-analyzer-execute","text":"This node will analyze a URL. If you want to analyze a different observable type, select that instead. First of all, you'll have to enter credentials for the Cortex node. You can find out how to do that here . Select 'Abuse_Finder_3_0' from the Analyzer Type dropdown list. Select 'URL' from the Observable Type dropdown list. Enter the URL you want to analyze in the Observable Value field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node starts the analysis of the URL.","title":"2. Cortex node (analyzer: execute)"},{"location":"integrations/nodes/n8n-nodes-base.cortex/#3-cortex1-node-job-get","text":"This node will return the job details for the analysis that we executed in the previous node. Select the credentials that you entered in the previous node. Select 'Job' from the Resource dropdown list. Click on the gears icon next to the Job ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Cortex > Output Data > JSON > _id. You can also add the following expression: {{$node[\"Cortex\"].json[\"_id\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node starts the analysis of the URL.","title":"3. Cortex1 node (job: get)"},{"location":"integrations/nodes/n8n-nodes-base.crateDb/","text":"CrateDB # CrateDB is an open-source distributed SQL database management system that integrates a fully searchable document-oriented data store based on a shared-nothing architecture, and is designed for high scalability. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Execute an SQL query Insert rows in database Update rows in database Example Usage # This workflow allows you to create a table and insert data into it in CrateDB. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Set - CrateDB The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. CrateDB node (Execute Query) # First of all, you'll have to enter credentials for the CrateDB node. You can find out how to do that here . Select 'Execute Query' from the Operation dropdown list. Enter the following SQL query in the Query field: CREATE TABLE test (id INT, name STRING); . Click on the Node tab and toggle Always Output Data to true. Click on Execute Node to run the node. 3. Set node # Click on the Add Value button and select 'Number' from the dropdown list. Enter id in the Name field. Click on the Add Value button and select 'String' from the dropdown list. Enter name in the Name field. Enter the value for the name in the Value field. Click on Execute Node to run the node. 4. CrateDB1 node (Insert) # Select the credentials that you entered in the previous CrateDB node. Enter test in the Table field. Enter id, name in the Columns field. Click on Execute Node to run the node. FAQs # How to specify the data type of a column? # To specify the data type of a column, append the column name with :type , where type is the data type of that column. For example, if you want to specify the type int for the column id and type text for the column name , you can use the following snippet in the Columns field: id:init,name:text .","title":"CrateDB"},{"location":"integrations/nodes/n8n-nodes-base.crateDb/#cratedb","text":"CrateDB is an open-source distributed SQL database management system that integrates a fully searchable document-oriented data store based on a shared-nothing architecture, and is designed for high scalability. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"CrateDB"},{"location":"integrations/nodes/n8n-nodes-base.crateDb/#basic-operations","text":"Execute an SQL query Insert rows in database Update rows in database","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.crateDb/#example-usage","text":"This workflow allows you to create a table and insert data into it in CrateDB. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Set - CrateDB The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.crateDb/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.crateDb/#2-cratedb-node-execute-query","text":"First of all, you'll have to enter credentials for the CrateDB node. You can find out how to do that here . Select 'Execute Query' from the Operation dropdown list. Enter the following SQL query in the Query field: CREATE TABLE test (id INT, name STRING); . Click on the Node tab and toggle Always Output Data to true. Click on Execute Node to run the node.","title":"2. CrateDB node (Execute Query)"},{"location":"integrations/nodes/n8n-nodes-base.crateDb/#3-set-node","text":"Click on the Add Value button and select 'Number' from the dropdown list. Enter id in the Name field. Click on the Add Value button and select 'String' from the dropdown list. Enter name in the Name field. Enter the value for the name in the Value field. Click on Execute Node to run the node.","title":"3. Set node"},{"location":"integrations/nodes/n8n-nodes-base.crateDb/#4-cratedb1-node-insert","text":"Select the credentials that you entered in the previous CrateDB node. Enter test in the Table field. Enter id, name in the Columns field. Click on Execute Node to run the node.","title":"4. CrateDB1 node (Insert)"},{"location":"integrations/nodes/n8n-nodes-base.crateDb/#faqs","text":"","title":"FAQs"},{"location":"integrations/nodes/n8n-nodes-base.crateDb/#how-to-specify-the-data-type-of-a-column","text":"To specify the data type of a column, append the column name with :type , where type is the data type of that column. For example, if you want to specify the type int for the column id and type text for the column name , you can use the following snippet in the Columns field: id:init,name:text .","title":"How to specify the data type of a column?"},{"location":"integrations/nodes/n8n-nodes-base.customerIo/","text":"Customer.io # Customer.io enables users to send newsletters to selected segments of customers using their website data. You can send targeted emails, push notifications, and SMS to lower churn, create stronger relationships, and drive subscriptions. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Customer Create/Update a customer. Delete a customer. Event Track a customer event. Track an anonymous event. Campaign Get Get All Get Metrics Segment Add Customer Remove Customer Example Usage # This workflow allows you to create a customer and add them to a segment in Customer.io. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Customer.io The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. CustomerIo node (upsert: customer) # First of all, you'll have to enter credentials for the Customer.io node. You can find out how to do that here . Enter a customer id in the ID field. Click on the Add Field button and select 'Custom Properties' from the dropdown list. Click on the Choose Option To Add button. Enter name in the Key field. Enter the name of the customer in the Value field. Click on Execute Node to run the node. 3. CustomerIo1 node (add: segment) # Select the credentials that you entered in the previous Customer.io node. Select 'Segment' from the Resource field. Click on the gears icon next to the Customer IDs field and click on Add Expression . Select the following in the Variable Selector section: Nodes > CustomerIo > Output Data > JSON > id. You can also add the following expression: {{$node[\"CustomerIo\"].json[\"id\"]}} . Click on Execute Node to run the node.","title":"Customer.io"},{"location":"integrations/nodes/n8n-nodes-base.customerIo/#customerio","text":"Customer.io enables users to send newsletters to selected segments of customers using their website data. You can send targeted emails, push notifications, and SMS to lower churn, create stronger relationships, and drive subscriptions. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Customer.io"},{"location":"integrations/nodes/n8n-nodes-base.customerIo/#basic-operations","text":"Customer Create/Update a customer. Delete a customer. Event Track a customer event. Track an anonymous event. Campaign Get Get All Get Metrics Segment Add Customer Remove Customer","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.customerIo/#example-usage","text":"This workflow allows you to create a customer and add them to a segment in Customer.io. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Customer.io The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.customerIo/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.customerIo/#2-customerio-node-upsert-customer","text":"First of all, you'll have to enter credentials for the Customer.io node. You can find out how to do that here . Enter a customer id in the ID field. Click on the Add Field button and select 'Custom Properties' from the dropdown list. Click on the Choose Option To Add button. Enter name in the Key field. Enter the name of the customer in the Value field. Click on Execute Node to run the node.","title":"2. CustomerIo node (upsert: customer)"},{"location":"integrations/nodes/n8n-nodes-base.customerIo/#3-customerio1-node-add-segment","text":"Select the credentials that you entered in the previous Customer.io node. Select 'Segment' from the Resource field. Click on the gears icon next to the Customer IDs field and click on Add Expression . Select the following in the Variable Selector section: Nodes > CustomerIo > Output Data > JSON > id. You can also add the following expression: {{$node[\"CustomerIo\"].json[\"id\"]}} . Click on Execute Node to run the node.","title":"3. CustomerIo1 node (add: segment)"},{"location":"integrations/nodes/n8n-nodes-base.deepL/","text":"DeepL # DeepL is a machine translation service that allows you to translate text to different languages. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Language Translate data Example Usage # This workflow allows you to translate cocktail instructions to French. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - HTTP Request - DeepL The final workflow should look like the following image. 1. Start node # The Start node exists by default when you create a new workflow. 2. HTTP Request node (GET) # This node will make a GET request to the API https://www.thecocktaildb.com/api/json/v1/1/random.php to fetch a random cocktail. This information gets passed on to the next node in the workflow. Enter https://www.thecocktaildb.com/api/json/v1/1/random.php in the URL field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node makes a GET request to the API and returns information about a random cocktail. 3. DeepL node (translate: language) # This node will translate the cocktail instructions that we got from the previous node to French. To translate the instructions in your language, select your language instead. First of all, you'll have to enter credentials for the DeepL node. You can find out how to do that here . Click on the gears icon next to the Text field and click on Add Expression . Select the following in the Variable Selector section: Current Nodes > Input Data > JSON > drinks > [item: 0] > strInstructions. You can also add the following expression: {{$json[\"drinks\"][0][\"strInstructions\"]}} . Select 'French' from the Target Language dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node translates the instructions of the cocktail to French.","title":"DeepL"},{"location":"integrations/nodes/n8n-nodes-base.deepL/#deepl","text":"DeepL is a machine translation service that allows you to translate text to different languages. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"DeepL"},{"location":"integrations/nodes/n8n-nodes-base.deepL/#basic-operations","text":"Language Translate data","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.deepL/#example-usage","text":"This workflow allows you to translate cocktail instructions to French. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - HTTP Request - DeepL The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.deepL/#1-start-node","text":"The Start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.deepL/#2-http-request-node-get","text":"This node will make a GET request to the API https://www.thecocktaildb.com/api/json/v1/1/random.php to fetch a random cocktail. This information gets passed on to the next node in the workflow. Enter https://www.thecocktaildb.com/api/json/v1/1/random.php in the URL field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node makes a GET request to the API and returns information about a random cocktail.","title":"2. HTTP Request node (GET)"},{"location":"integrations/nodes/n8n-nodes-base.deepL/#3-deepl-node-translate-language","text":"This node will translate the cocktail instructions that we got from the previous node to French. To translate the instructions in your language, select your language instead. First of all, you'll have to enter credentials for the DeepL node. You can find out how to do that here . Click on the gears icon next to the Text field and click on Add Expression . Select the following in the Variable Selector section: Current Nodes > Input Data > JSON > drinks > [item: 0] > strInstructions. You can also add the following expression: {{$json[\"drinks\"][0][\"strInstructions\"]}} . Select 'French' from the Target Language dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node translates the instructions of the cocktail to French.","title":"3. DeepL node (translate: language)"},{"location":"integrations/nodes/n8n-nodes-base.demio/","text":"Demio # Demio provides a simple, no-download webinar experience and all the marketing tools you need to generate better results. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Event Get an event Get all events Register someone to an event Report Get an event report Example Usage # This workflow allows you to register your audience to an event on Demio via a Typeform submission. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Typeform Trigger - Demio The final workflow should look like the following image. 1. Typeform Trigger node # This node will trigger the workflow when a form response is submitted. This example workflow uses a Typeform to collect name and email address. Create a form exactly like this for the example workflow. Below are the questions and their question types for the form. Question Type Let's start with your name. Short Text What's your email address? Email First of all, you'll have to enter credentials for the Typeform Trigger node. You can find out how to do that here . Select your form from the Form dropdown list. Click on Execute Node to run the workflow. In the screenshot below, you will notice that the Typeform Trigger node triggers the workflow and returns the response submitted by a user. 2. Demio node (register: event) # This node will use the information from the previous node to register the user for an event on Demio. If you don't have an event on Demio, make sure to create one. First of all, you'll have to enter credentials for the Demio node. You can find out how to enter credentials for this node here . Select 'Register' from the Operation dropdown list. Select the event from the Event ID dropdown list. Click on the gears icon next to the First Name field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > Let's start with your name. You can also add the following expression: {{$json[\"Let's start with your name.\"]}} . Click on the gears icon next to the Email field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > What's your email address? You can also add the following expression: {{$json[\"What's your email address?\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node registers the user for an event on Demio. Activate workflow for production This example workflow uses the Typeform Trigger node. You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered when a new form is submitted.","title":"Demio"},{"location":"integrations/nodes/n8n-nodes-base.demio/#demio","text":"Demio provides a simple, no-download webinar experience and all the marketing tools you need to generate better results. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Demio"},{"location":"integrations/nodes/n8n-nodes-base.demio/#basic-operations","text":"Event Get an event Get all events Register someone to an event Report Get an event report","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.demio/#example-usage","text":"This workflow allows you to register your audience to an event on Demio via a Typeform submission. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Typeform Trigger - Demio The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.demio/#1-typeform-trigger-node","text":"This node will trigger the workflow when a form response is submitted. This example workflow uses a Typeform to collect name and email address. Create a form exactly like this for the example workflow. Below are the questions and their question types for the form. Question Type Let's start with your name. Short Text What's your email address? Email First of all, you'll have to enter credentials for the Typeform Trigger node. You can find out how to do that here . Select your form from the Form dropdown list. Click on Execute Node to run the workflow. In the screenshot below, you will notice that the Typeform Trigger node triggers the workflow and returns the response submitted by a user.","title":"1. Typeform Trigger node"},{"location":"integrations/nodes/n8n-nodes-base.demio/#2-demio-node-register-event","text":"This node will use the information from the previous node to register the user for an event on Demio. If you don't have an event on Demio, make sure to create one. First of all, you'll have to enter credentials for the Demio node. You can find out how to enter credentials for this node here . Select 'Register' from the Operation dropdown list. Select the event from the Event ID dropdown list. Click on the gears icon next to the First Name field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > Let's start with your name. You can also add the following expression: {{$json[\"Let's start with your name.\"]}} . Click on the gears icon next to the Email field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > What's your email address? You can also add the following expression: {{$json[\"What's your email address?\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node registers the user for an event on Demio. Activate workflow for production This example workflow uses the Typeform Trigger node. You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered when a new form is submitted.","title":"2. Demio node (register: event)"},{"location":"integrations/nodes/n8n-nodes-base.dhl/","text":"DHL # The DHL Shipment Tracking provides shipment status reports for services provided by DPDHL under these brand names: Post & Parcel Germany DHL Global Forwarding DHL Freight DHL Express DHL Supply Chain DHL eCommerce Solutions (Asia-Pacific, US, Canada, EU) \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Shipment Get Tracking Details","title":"DHL"},{"location":"integrations/nodes/n8n-nodes-base.dhl/#dhl","text":"The DHL Shipment Tracking provides shipment status reports for services provided by DPDHL under these brand names: Post & Parcel Germany DHL Global Forwarding DHL Freight DHL Express DHL Supply Chain DHL eCommerce Solutions (Asia-Pacific, US, Canada, EU) \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"DHL"},{"location":"integrations/nodes/n8n-nodes-base.dhl/#basic-operations","text":"Shipment Get Tracking Details","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.discord/","text":"Discord # Discord is a voice, video, and text communications platform for groups. Discord allows users to programmatically send messages using webhooks. \ud83d\udd11 Credentials The Discord node does not require authentication, but you must have access to a channel's settings to use webhooks. You can find out how to create a webhook in Discord here . Basic Operations # Send messages in a Discord Channel Example Usage # This workflow allows you to send a message to a Discord channel using webhooks. You can also find the workflow on this website. This example usage workflow would use the following two nodes. - Start - Discord The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Discord node # First of all, you'll have to create a webhook for the Discord node. You can find out how to do that here . Paste your webhook into the Webhook URL field. Enter your message in the Text field. Click on Execute Node to run the workflow.","title":"Discord"},{"location":"integrations/nodes/n8n-nodes-base.discord/#discord","text":"Discord is a voice, video, and text communications platform for groups. Discord allows users to programmatically send messages using webhooks. \ud83d\udd11 Credentials The Discord node does not require authentication, but you must have access to a channel's settings to use webhooks. You can find out how to create a webhook in Discord here .","title":"Discord"},{"location":"integrations/nodes/n8n-nodes-base.discord/#basic-operations","text":"Send messages in a Discord Channel","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.discord/#example-usage","text":"This workflow allows you to send a message to a Discord channel using webhooks. You can also find the workflow on this website. This example usage workflow would use the following two nodes. - Start - Discord The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.discord/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.discord/#2-discord-node","text":"First of all, you'll have to create a webhook for the Discord node. You can find out how to do that here . Paste your webhook into the Webhook URL field. Enter your message in the Text field. Click on Execute Node to run the workflow.","title":"2. Discord node"},{"location":"integrations/nodes/n8n-nodes-base.discourse/","text":"Discourse # Discourse is an open-source discussion platform that can be used as a mailing list, discussion forum, long-form chat room, and more. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Category Create a category Get all categories Update a category Group Create a group Get a group Get all groups Update a group Post Create a post Get a post Get all posts Update a post User Create a user Get a user Get all users User Group Create a user to group Remove user from group Example Usage # This workflow allows you to create, update, and get a post using the Discourse node. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Discourse The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Discourse node (create: post) # This node will create a post under the Lounge category. If you want to create a post under a different category, select that category instead. First of all, you'll have to enter credentials for the Discourse node. You can find out how to do that here . Enter a title for the post in the Title field. Enter the content of the post in the Content field. Click on Add Field and select 'Category ID' from the dropdown list. Select 'Lounge' from the Category ID dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new topic under the category Lounge . 3. Discourse1 node (update: post) # This node will update the content of the post that we created in the previous node. Select the credentials that you entered in the previous node. Select 'Update' from the Operations dropdown list. Click on the gears icon next to the Post ID field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > id. You can also add the following expression: {{$json[\"id\"]}} . Enter the updated content in the Content field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node updates the content of the post that we created in the previous node. 4. Discourse2 node (get: post) # This node will retrieve the post that we updated previously. Select the credentials that you entered in the previous node. Select 'Get' from the Operation dropdown list. Click on the gears icon next to the Post ID field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > id. You can also add the following expression: {{$json[\"id\"]}} . Click on Execute Node to run the node. In the screenshot below, you notice that the node retrieves the post that we created earlier.","title":"Discourse"},{"location":"integrations/nodes/n8n-nodes-base.discourse/#discourse","text":"Discourse is an open-source discussion platform that can be used as a mailing list, discussion forum, long-form chat room, and more. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Discourse"},{"location":"integrations/nodes/n8n-nodes-base.discourse/#basic-operations","text":"Category Create a category Get all categories Update a category Group Create a group Get a group Get all groups Update a group Post Create a post Get a post Get all posts Update a post User Create a user Get a user Get all users User Group Create a user to group Remove user from group","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.discourse/#example-usage","text":"This workflow allows you to create, update, and get a post using the Discourse node. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Discourse The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.discourse/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.discourse/#2-discourse-node-create-post","text":"This node will create a post under the Lounge category. If you want to create a post under a different category, select that category instead. First of all, you'll have to enter credentials for the Discourse node. You can find out how to do that here . Enter a title for the post in the Title field. Enter the content of the post in the Content field. Click on Add Field and select 'Category ID' from the dropdown list. Select 'Lounge' from the Category ID dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new topic under the category Lounge .","title":"2. Discourse node (create: post)"},{"location":"integrations/nodes/n8n-nodes-base.discourse/#3-discourse1-node-update-post","text":"This node will update the content of the post that we created in the previous node. Select the credentials that you entered in the previous node. Select 'Update' from the Operations dropdown list. Click on the gears icon next to the Post ID field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > id. You can also add the following expression: {{$json[\"id\"]}} . Enter the updated content in the Content field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node updates the content of the post that we created in the previous node.","title":"3. Discourse1 node (update: post)"},{"location":"integrations/nodes/n8n-nodes-base.discourse/#4-discourse2-node-get-post","text":"This node will retrieve the post that we updated previously. Select the credentials that you entered in the previous node. Select 'Get' from the Operation dropdown list. Click on the gears icon next to the Post ID field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > id. You can also add the following expression: {{$json[\"id\"]}} . Click on Execute Node to run the node. In the screenshot below, you notice that the node retrieves the post that we created earlier.","title":"4. Discourse2 node (get: post)"},{"location":"integrations/nodes/n8n-nodes-base.disqus/","text":"Disqus # Disqus is a worldwide blog comment hosting service for web sites and online communities that use a networked platform. The company's platform includes various features, such as social integration, social networking, user profiles, spam and moderation tools, analytics, email notifications, and mobile commenting. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Forum Return forum details Return a list of categories within a forum Return a list of threads within a forum Return a list of posts within a forum Example Usage # This workflow allows you to get details of a forum in Disqus. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Disqus The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Disqus node # First of all, you'll have to enter credentials for the Disqus node. You can find out how to do that here . Enter the name of the forum in the Forum name field. For example, I entered hackernoon . Click on Execute Node to run the workflow.","title":"Disqus"},{"location":"integrations/nodes/n8n-nodes-base.disqus/#disqus","text":"Disqus is a worldwide blog comment hosting service for web sites and online communities that use a networked platform. The company's platform includes various features, such as social integration, social networking, user profiles, spam and moderation tools, analytics, email notifications, and mobile commenting. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Disqus"},{"location":"integrations/nodes/n8n-nodes-base.disqus/#basic-operations","text":"Forum Return forum details Return a list of categories within a forum Return a list of threads within a forum Return a list of posts within a forum","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.disqus/#example-usage","text":"This workflow allows you to get details of a forum in Disqus. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Disqus The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.disqus/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.disqus/#2-disqus-node","text":"First of all, you'll have to enter credentials for the Disqus node. You can find out how to do that here . Enter the name of the forum in the Forum name field. For example, I entered hackernoon . Click on Execute Node to run the workflow.","title":"2. Disqus node"},{"location":"integrations/nodes/n8n-nodes-base.drift/","text":"Drift # Drift is a tool for managing conversations, engaging with customers, and collaborating with teammates. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Contact Create a contact Get custom attributes Delete a contact Get a contact Update a contact Example Usage # This workflow allows you to create a contact in Drift. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Drift The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Drift node # First of all, you'll have to enter credentials for the Drift node. You can find out how to do that here . Enter the email of the contact in the Email field. Click on Execute Node to run the workflow.","title":"Drift"},{"location":"integrations/nodes/n8n-nodes-base.drift/#drift","text":"Drift is a tool for managing conversations, engaging with customers, and collaborating with teammates. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Drift"},{"location":"integrations/nodes/n8n-nodes-base.drift/#basic-operations","text":"Contact Create a contact Get custom attributes Delete a contact Get a contact Update a contact","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.drift/#example-usage","text":"This workflow allows you to create a contact in Drift. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Drift The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.drift/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.drift/#2-drift-node","text":"First of all, you'll have to enter credentials for the Drift node. You can find out how to do that here . Enter the email of the contact in the Email field. Click on Execute Node to run the workflow.","title":"2. Drift node"},{"location":"integrations/nodes/n8n-nodes-base.dropbox/","text":"Dropbox # Dropbox is a cloud-based file storage and sharing service, accessible through multiple devices. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # File Copy a file Delete a file Download a file Move a file Upload a file Folder Copy a folder Create a folder Delete a folder Return the files and folders in a given folder Move a folder Search Query Example Usage # This workflow allows you to create a folder in Dropbox, upload a file into that folder, and list the contents of the folder. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - Dropbox - HTTP Request The final workflow should look like the following image. 1. Start node # The Start node exists by default when you create a new workflow. 2. Dropbox node (create: folder) # First of all, you'll have to enter credentials for the Dropbox node. You can find out how to do that here . Select 'Folder' from the Resource dropdown list. Enter the name of the new folder in the Folder field. Click on Execute Node to run the workflow. 3. HTTP Request node (GET) # Enter https://n8n.io/n8n-logo.png in the URL field. Select 'File' from the Response Format dropdown list. Click on Execute Node to run the workflow. 4. Dropbox1 node (upload: file) # Select the credentials that you entered in the Dropbox node. Enter the path of the Dropbox folder you created in the previous steps along with a file name in the File Path field. Set the Binary Data toggle to true. Click on Execute Node to run the node. 5. Dropbox2 node (list: folder) # Select the credentials that you entered in the Dropbox node. Select 'Folder' from the Resource dropdown list. Select 'List' from the Operation dropdown list. Enter the path of the Dropbox folder you created in the previous steps in the Folder Path field. Click on Execute Node to run the node.","title":"Dropbox"},{"location":"integrations/nodes/n8n-nodes-base.dropbox/#dropbox","text":"Dropbox is a cloud-based file storage and sharing service, accessible through multiple devices. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Dropbox"},{"location":"integrations/nodes/n8n-nodes-base.dropbox/#basic-operations","text":"File Copy a file Delete a file Download a file Move a file Upload a file Folder Copy a folder Create a folder Delete a folder Return the files and folders in a given folder Move a folder Search Query","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.dropbox/#example-usage","text":"This workflow allows you to create a folder in Dropbox, upload a file into that folder, and list the contents of the folder. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - Dropbox - HTTP Request The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.dropbox/#1-start-node","text":"The Start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.dropbox/#2-dropbox-node-create-folder","text":"First of all, you'll have to enter credentials for the Dropbox node. You can find out how to do that here . Select 'Folder' from the Resource dropdown list. Enter the name of the new folder in the Folder field. Click on Execute Node to run the workflow.","title":"2. Dropbox node (create: folder)"},{"location":"integrations/nodes/n8n-nodes-base.dropbox/#3-http-request-node-get","text":"Enter https://n8n.io/n8n-logo.png in the URL field. Select 'File' from the Response Format dropdown list. Click on Execute Node to run the workflow.","title":"3. HTTP Request node (GET)"},{"location":"integrations/nodes/n8n-nodes-base.dropbox/#4-dropbox1-node-upload-file","text":"Select the credentials that you entered in the Dropbox node. Enter the path of the Dropbox folder you created in the previous steps along with a file name in the File Path field. Set the Binary Data toggle to true. Click on Execute Node to run the node.","title":"4. Dropbox1 node (upload: file)"},{"location":"integrations/nodes/n8n-nodes-base.dropbox/#5-dropbox2-node-list-folder","text":"Select the credentials that you entered in the Dropbox node. Select 'Folder' from the Resource dropdown list. Select 'List' from the Operation dropdown list. Enter the path of the Dropbox folder you created in the previous steps in the Folder Path field. Click on Execute Node to run the node.","title":"5. Dropbox2 node (list: folder)"},{"location":"integrations/nodes/n8n-nodes-base.dropcontact/","text":"Dropcontact # Dropcontact is an email finder platform that allows you to automatically find, verify and validate nominative emails and enrich your contacts with all efficient information to contact him. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Contact - Enrich - Fetch Request Example Usage # This workflow allows you to find email and enrich your contact from a Google Sheet and add them to Lemlist. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Google Sheets node - Dropcontact node - Lemlist node 1. Start Node # The start node exists by default when you create a new workflow. 2. Google Sheet node # This node will list all the records from Google Sheet. Create a sheet like this in your Google Drive. First of all, you'll have to enter credentials for the Google Sheet node. You can find out how to do that here . Select the 'Sheet' option from the Ressource dropdown list. Select the 'Read' option from the Operation dropdown list. Enter the Sheet ID in the Sheet ID field. Your Google Sheet ID is available in the URL https://docs.google.com/spreadsheets/d/{spreadsheetId}/edit In the Range field, enter A:K . Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the information of the leads. 3. Dropontact node # This node will find the verified email address and enrich the contact. First of all, you'll have to enter credentials for the Dropcontact node. You can find out how to do that here . Select 'Contact' from the Resource dropdown list. Select 'Enrich' from the Operation dropdown list. Click on Add Field and select 'Company Name'. Click on the gears icon next to the Company Name field and click on Add Expression . Select the following in the Variable Selector section: Node > Input Data > JSON > fields > companyName . You can also add the following expression: {{$json[\"fields\"][\"companyName\"]}} . Click on Add Field and select 'First Name'. Click on the gears icon next to the First Name field and click on Add Expression . Select the following in the Variable Selector section: Node > Input Data > JSON > fields > firstName . You can also add the following expression: {{$json[\"fields\"][\"firstName\"]}} . Click on Add Field and select 'Full Name'. Click on the gears icon next to the Full Name field and click on Add Expression . Select the following in the Variable Selector section: Node > Input Data > JSON > fields > fullName . You can also add the following expression: {{$json[\"fields\"][\"fullName\"]}} . Click on Add Field and select 'Last Name'. Click on the gears icon next to the Last Name field and click on Add Expression . Select the following in the Variable Selector section: Node > Input Data > JSON > fields > lastName . You can also add the following expression: {{$json[\"fields\"][\"lastName\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the Dropcontact node has enriched your data. 4. Lemlist node # This node will create new leads for a campaign in Lemlist. First of all, you'll have to enter credentials for the Lemlist node. You can find out how to do that here . Select 'Lead' from the Resource dropdown list. Select a campaign from the Campaign ID dropdown list. Click on the gears icon next to the Email field and click on 'Add Expression'. Select the following in the Variable Selector section: Dropcontact > Input Data > JSON > fields > email > [Item: 0] > email. You can also add the following expression: {{$json[\"email\"][0][\"email\"]}} Click on the Add Field button and select 'First Name'. Click on the gears icon next to the First Name field and click on Add Expression . Select the following in the Variable Selector section: Node > Input Data > JSON > fields > first_name . You can also add the following expression: {{$json[\"fields\"][\"first_name\"]}} . Click on the Add Field button and select 'Last Name'. Click on the gears icon next to the Last Name field and click on Add Expression . Select the following in the Variable Selector section: Node > Input Data > JSON > fields > last_name . You can also add the following expression: {{$json[\"fields\"][\"last_name\"]}} . Click on the Add Field button and select 'Company Name'. Click on the gears icon next to the Company Name field and click on Add Expression . Select the following in the Variable Selector section: Node > Input Data > JSON > fields > company_name . You can also add the following expression: {{$json[\"fields\"][\"company_name\"]}} . Click on the Add Field button and select 'Deduplicate'. Toggle Deduplicate to true . Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates new enriched leads in Lemlist.","title":"Dropcontact"},{"location":"integrations/nodes/n8n-nodes-base.dropcontact/#dropcontact","text":"Dropcontact is an email finder platform that allows you to automatically find, verify and validate nominative emails and enrich your contacts with all efficient information to contact him. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Dropcontact"},{"location":"integrations/nodes/n8n-nodes-base.dropcontact/#basic-operations","text":"Contact - Enrich - Fetch Request","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.dropcontact/#example-usage","text":"This workflow allows you to find email and enrich your contact from a Google Sheet and add them to Lemlist. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Google Sheets node - Dropcontact node - Lemlist node","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.dropcontact/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start Node"},{"location":"integrations/nodes/n8n-nodes-base.dropcontact/#2-google-sheet-node","text":"This node will list all the records from Google Sheet. Create a sheet like this in your Google Drive. First of all, you'll have to enter credentials for the Google Sheet node. You can find out how to do that here . Select the 'Sheet' option from the Ressource dropdown list. Select the 'Read' option from the Operation dropdown list. Enter the Sheet ID in the Sheet ID field. Your Google Sheet ID is available in the URL https://docs.google.com/spreadsheets/d/{spreadsheetId}/edit In the Range field, enter A:K . Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the information of the leads.","title":"2. Google Sheet node"},{"location":"integrations/nodes/n8n-nodes-base.dropcontact/#3-dropontact-node","text":"This node will find the verified email address and enrich the contact. First of all, you'll have to enter credentials for the Dropcontact node. You can find out how to do that here . Select 'Contact' from the Resource dropdown list. Select 'Enrich' from the Operation dropdown list. Click on Add Field and select 'Company Name'. Click on the gears icon next to the Company Name field and click on Add Expression . Select the following in the Variable Selector section: Node > Input Data > JSON > fields > companyName . You can also add the following expression: {{$json[\"fields\"][\"companyName\"]}} . Click on Add Field and select 'First Name'. Click on the gears icon next to the First Name field and click on Add Expression . Select the following in the Variable Selector section: Node > Input Data > JSON > fields > firstName . You can also add the following expression: {{$json[\"fields\"][\"firstName\"]}} . Click on Add Field and select 'Full Name'. Click on the gears icon next to the Full Name field and click on Add Expression . Select the following in the Variable Selector section: Node > Input Data > JSON > fields > fullName . You can also add the following expression: {{$json[\"fields\"][\"fullName\"]}} . Click on Add Field and select 'Last Name'. Click on the gears icon next to the Last Name field and click on Add Expression . Select the following in the Variable Selector section: Node > Input Data > JSON > fields > lastName . You can also add the following expression: {{$json[\"fields\"][\"lastName\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the Dropcontact node has enriched your data.","title":"3. Dropontact node"},{"location":"integrations/nodes/n8n-nodes-base.dropcontact/#4-lemlist-node","text":"This node will create new leads for a campaign in Lemlist. First of all, you'll have to enter credentials for the Lemlist node. You can find out how to do that here . Select 'Lead' from the Resource dropdown list. Select a campaign from the Campaign ID dropdown list. Click on the gears icon next to the Email field and click on 'Add Expression'. Select the following in the Variable Selector section: Dropcontact > Input Data > JSON > fields > email > [Item: 0] > email. You can also add the following expression: {{$json[\"email\"][0][\"email\"]}} Click on the Add Field button and select 'First Name'. Click on the gears icon next to the First Name field and click on Add Expression . Select the following in the Variable Selector section: Node > Input Data > JSON > fields > first_name . You can also add the following expression: {{$json[\"fields\"][\"first_name\"]}} . Click on the Add Field button and select 'Last Name'. Click on the gears icon next to the Last Name field and click on Add Expression . Select the following in the Variable Selector section: Node > Input Data > JSON > fields > last_name . You can also add the following expression: {{$json[\"fields\"][\"last_name\"]}} . Click on the Add Field button and select 'Company Name'. Click on the gears icon next to the Company Name field and click on Add Expression . Select the following in the Variable Selector section: Node > Input Data > JSON > fields > company_name . You can also add the following expression: {{$json[\"fields\"][\"company_name\"]}} . Click on the Add Field button and select 'Deduplicate'. Toggle Deduplicate to true . Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates new enriched leads in Lemlist.","title":"4. Lemlist node"},{"location":"integrations/nodes/n8n-nodes-base.egoi/","text":"E-goi # E-goi is an omnichannel marketing automation platform. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Contact - Create a member - Get a member - Get all members - Update a member Example Usage # This workflow allows you to create, update, and get a contact using the E-goi node. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - E-goi The final workflow should look like the following image. 1. Start node # The Start node exists by default when you create a new workflow. 2. E-goi node (create: contact) # This node will create a new contact in E-goi. We will add the first name of the contact along with their email. First of all, you'll have to enter credentials for the E-goi node. You can find out how to do that here . Select a list from the List ID field. Enter the email address in the Email field. Click on the Add Field button and select 'First Name' from the dropdown list. Enter the name of the contact in the First Name field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new contact with their first name and email. 3. E-goi1 node (update: contact) # This node will update the information of the contact that we created in the previous node. We will update the first name of the contact using this node. Select the credentials that you entered in the previous node. Select 'Update' from the Operation dropdown list. Click on the gears icon next to the List ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > E-goi > Parameters > list. You can also add the following expression: {{$node[\"E-goi\"].parameter[\"list\"]}} . Click on the gears icon next to the Contact ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > E-goi > Output Data > JSON > base > contact_id. You can also add the following expression: {{$node[\"E-goi\"].json[\"base\"][\"contact_id\"]}} . Click on the Add Field button and select 'First Name' from the dropdown list. Enter the first name of the contact in the First Name field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node updates the information of the contact that we created in the previous node. Here, the node has updated the first name of the contact. 3. E-goi2 node (get: contact) # This node will return the information of the contact that we created using the E-goi node. Select the credentials that you entered in the previous node. Select 'Get' from the Operation dropdown list. Click on the gears icon next to the List ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > E-goi1 > Parameters > list. You can also add the following expression: {{$node[\"E-goi1\"].parameter[\"list\"]}} . Click on the gears icon next to the Contact ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > E-goi1 > Output Data > JSON > base > contact_id. You can also add the following expression: {{$node[\"E-goi\"].json[\"base\"][\"contact_id\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the information of the contact that we created using the E-goi node.","title":"E-goi"},{"location":"integrations/nodes/n8n-nodes-base.egoi/#e-goi","text":"E-goi is an omnichannel marketing automation platform. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"E-goi"},{"location":"integrations/nodes/n8n-nodes-base.egoi/#basic-operations","text":"Contact - Create a member - Get a member - Get all members - Update a member","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.egoi/#example-usage","text":"This workflow allows you to create, update, and get a contact using the E-goi node. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - E-goi The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.egoi/#1-start-node","text":"The Start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.egoi/#2-e-goi-node-create-contact","text":"This node will create a new contact in E-goi. We will add the first name of the contact along with their email. First of all, you'll have to enter credentials for the E-goi node. You can find out how to do that here . Select a list from the List ID field. Enter the email address in the Email field. Click on the Add Field button and select 'First Name' from the dropdown list. Enter the name of the contact in the First Name field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new contact with their first name and email.","title":"2. E-goi node (create: contact)"},{"location":"integrations/nodes/n8n-nodes-base.egoi/#3-e-goi1-node-update-contact","text":"This node will update the information of the contact that we created in the previous node. We will update the first name of the contact using this node. Select the credentials that you entered in the previous node. Select 'Update' from the Operation dropdown list. Click on the gears icon next to the List ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > E-goi > Parameters > list. You can also add the following expression: {{$node[\"E-goi\"].parameter[\"list\"]}} . Click on the gears icon next to the Contact ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > E-goi > Output Data > JSON > base > contact_id. You can also add the following expression: {{$node[\"E-goi\"].json[\"base\"][\"contact_id\"]}} . Click on the Add Field button and select 'First Name' from the dropdown list. Enter the first name of the contact in the First Name field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node updates the information of the contact that we created in the previous node. Here, the node has updated the first name of the contact.","title":"3. E-goi1 node (update: contact)"},{"location":"integrations/nodes/n8n-nodes-base.egoi/#3-e-goi2-node-get-contact","text":"This node will return the information of the contact that we created using the E-goi node. Select the credentials that you entered in the previous node. Select 'Get' from the Operation dropdown list. Click on the gears icon next to the List ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > E-goi1 > Parameters > list. You can also add the following expression: {{$node[\"E-goi1\"].parameter[\"list\"]}} . Click on the gears icon next to the Contact ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > E-goi1 > Output Data > JSON > base > contact_id. You can also add the following expression: {{$node[\"E-goi\"].json[\"base\"][\"contact_id\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the information of the contact that we created using the E-goi node.","title":"3. E-goi2 node (get: contact)"},{"location":"integrations/nodes/n8n-nodes-base.elasticSecurity/","text":"Elastic Security # Elastic Security helps security teams stop threats and at cloud scale, assisting with prevention, detection, and response. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic operations # Case Create a case Delete a case Get a case Retrieve all cases Retrieve a summary of all case activity Update a case Case Comment Add a comment to a case Get a case comment Retrieve all case comments Remove a comment from a case Update a comment in a case Case Tag Add a tag to a case Remove a tag from a case Connector Create a connector","title":"Elastic Security"},{"location":"integrations/nodes/n8n-nodes-base.elasticSecurity/#elastic-security","text":"Elastic Security helps security teams stop threats and at cloud scale, assisting with prevention, detection, and response. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Elastic Security"},{"location":"integrations/nodes/n8n-nodes-base.elasticSecurity/#basic-operations","text":"Case Create a case Delete a case Get a case Retrieve all cases Retrieve a summary of all case activity Update a case Case Comment Add a comment to a case Get a case comment Retrieve all case comments Remove a comment from a case Update a comment in a case Case Tag Add a tag to a case Remove a tag from a case Connector Create a connector","title":"Basic operations"},{"location":"integrations/nodes/n8n-nodes-base.elasticsearch/","text":"Elasticsearch # Elasticsearch is a distributed, free and open search and analytics engine for all types of data, including textual, numerical, geospatial, structured, and unstructured. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic operations # Document Create a document Delete a document Get a document Get all documents Update a document Index Create Delete Get Get All Example usage # This workflow allows you to get all documents for a selected index. This example usage workflow uses the following nodes. - Start - Elasticsearch The final workflow should look like the following image. 1. Start node # The Start node exists by default when you create a new workflow. 2. Elasticsearch node # First enter credentials for the Elasticsearch node. You can find out how to do that here . Select Document from the Resource dropdown. Select Get All from the Operation dropdown. Enter the ID of your desired index in the Index ID field. Click on Execute Node to run the node.","title":"Elasticsearch"},{"location":"integrations/nodes/n8n-nodes-base.elasticsearch/#elasticsearch","text":"Elasticsearch is a distributed, free and open search and analytics engine for all types of data, including textual, numerical, geospatial, structured, and unstructured. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Elasticsearch"},{"location":"integrations/nodes/n8n-nodes-base.elasticsearch/#basic-operations","text":"Document Create a document Delete a document Get a document Get all documents Update a document Index Create Delete Get Get All","title":"Basic operations"},{"location":"integrations/nodes/n8n-nodes-base.elasticsearch/#example-usage","text":"This workflow allows you to get all documents for a selected index. This example usage workflow uses the following nodes. - Start - Elasticsearch The final workflow should look like the following image.","title":"Example usage"},{"location":"integrations/nodes/n8n-nodes-base.elasticsearch/#1-start-node","text":"The Start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.elasticsearch/#2-elasticsearch-node","text":"First enter credentials for the Elasticsearch node. You can find out how to do that here . Select Document from the Resource dropdown. Select Get All from the Operation dropdown. Enter the ID of your desired index in the Index ID field. Click on Execute Node to run the node.","title":"2. Elasticsearch node"},{"location":"integrations/nodes/n8n-nodes-base.emelia/","text":"Emelia # Emelia is a cold-mailing tool. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Campaign Add Contact Create Get Get All Pause Start Contact List Add Get All Example Usage # This workflow allows you to create a campaign, add a contact, and get the campaign from Emelia. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - Emelia The final workflow should look like the following image. 1. Start node # The Start node exists by default when you create a new workflow. 2. Emelia node (campaign: create) # This node will create a new campaign in Emelia. First of all, you'll have to enter credentials for the Emelia node. You can find out how to do that here . Select 'Create' from the Operation dropdown list. Enter the campaign name in the Campaign Name field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new campaign. 3. Emelia1 node (campaign: addContact) # This node will add a contact to the campaign that we created in the previous node. Select the credentials that you entered in the previous node. Select 'Add Contact' from the Operation dropdown list. Select the campaign from the Campaign ID dropdown list. Enter the contact's email address in the Contact Email field. Click on the Add Field button and select 'First Name'. Enter the first name in the First Name field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node adds the contact to the campaign that we created in the previous node. 4. Emelia2 node (campaign: get) # This node will get the information about the campaign that we created earlier. Select the credentials that you entered in the previous node. Select 'Get' from the Operation dropdown list. Click on the gears icon next to the Campaign ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Emelia > Output Data > JSON > _id. You can also add the following expression: {{$node[\"Emelia\"].json[\"_id\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the information of the campaign.","title":"Emelia"},{"location":"integrations/nodes/n8n-nodes-base.emelia/#emelia","text":"Emelia is a cold-mailing tool. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Emelia"},{"location":"integrations/nodes/n8n-nodes-base.emelia/#basic-operations","text":"Campaign Add Contact Create Get Get All Pause Start Contact List Add Get All","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.emelia/#example-usage","text":"This workflow allows you to create a campaign, add a contact, and get the campaign from Emelia. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - Emelia The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.emelia/#1-start-node","text":"The Start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.emelia/#2-emelia-node-campaign-create","text":"This node will create a new campaign in Emelia. First of all, you'll have to enter credentials for the Emelia node. You can find out how to do that here . Select 'Create' from the Operation dropdown list. Enter the campaign name in the Campaign Name field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new campaign.","title":"2. Emelia node (campaign: create)"},{"location":"integrations/nodes/n8n-nodes-base.emelia/#3-emelia1-node-campaign-addcontact","text":"This node will add a contact to the campaign that we created in the previous node. Select the credentials that you entered in the previous node. Select 'Add Contact' from the Operation dropdown list. Select the campaign from the Campaign ID dropdown list. Enter the contact's email address in the Contact Email field. Click on the Add Field button and select 'First Name'. Enter the first name in the First Name field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node adds the contact to the campaign that we created in the previous node.","title":"3. Emelia1 node (campaign: addContact)"},{"location":"integrations/nodes/n8n-nodes-base.emelia/#4-emelia2-node-campaign-get","text":"This node will get the information about the campaign that we created earlier. Select the credentials that you entered in the previous node. Select 'Get' from the Operation dropdown list. Click on the gears icon next to the Campaign ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Emelia > Output Data > JSON > _id. You can also add the following expression: {{$node[\"Emelia\"].json[\"_id\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the information of the campaign.","title":"4. Emelia2 node (campaign: get)"},{"location":"integrations/nodes/n8n-nodes-base.erpNext/","text":"ERPNext # ERPNext is an open-source integrated Enterprise Resource Planning software. It is a generic ERP software used by manufacturers, distributors, and services companies. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Document - Create a document - Delete a document - Retrieve a document - Retrieve all documents - Update a document Example Usage # This workflow allows you to create, update, and retrieve a document from ERPNext. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - ERPNext The final workflow should look like the following image. 1. Start node # The Start node exists by default when you create a new workflow. 2. ERPNext node (document: create) # This node will create a new document in ERPNext. First of all, you'll have to enter credentials for the ERPNext node. You can find out how to do that here . Select 'Item' from the DocType dropdown list. Click on the Add Property button. Select 'Item Name' from the Field dropdown list. Enter item 1 in the Value field. Click on the Add Property button. Select 'Item Code' from the Field dropdown list. Enter item-1 in the Value field. Click on the Add Property button. Select 'Item Group' from the Field dropdown list. Enter Products in the Value field. Note: Make sure that the item group exists in your ERPNext account. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new item with the name item 1 . 3. ERPNext1 node (document: addContact) # This node will add the Item Tax property to the item that we created in the previous node. Select the credentials that you entered in the previous node. Select 'Update' from the Operation dropdown list. Select 'Item' from the DocType dropdown list. Click on the gears icon next to the Item Name field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > name. You can also add the following expression: {{$json[\"name\"]}} . Click on the Add Property button. Select 'Item Tax' from the Field dropdown list. Enter 5 in the Value field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node adds the Item Tax property to the item that we created in the previous node. 4. ERPNext2 node (document: get) # This node will get the information about the item that we created earlier. Select the credentials that you entered in the previous node. Select 'Get' from the Operation dropdown list. Select 'Item' from the DocType dropdown list. Click on the gears icon next to the Item Name field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > name. You can also add the following expression: {{$json[\"name\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the information of the item.","title":"ERPNext"},{"location":"integrations/nodes/n8n-nodes-base.erpNext/#erpnext","text":"ERPNext is an open-source integrated Enterprise Resource Planning software. It is a generic ERP software used by manufacturers, distributors, and services companies. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"ERPNext"},{"location":"integrations/nodes/n8n-nodes-base.erpNext/#basic-operations","text":"Document - Create a document - Delete a document - Retrieve a document - Retrieve all documents - Update a document","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.erpNext/#example-usage","text":"This workflow allows you to create, update, and retrieve a document from ERPNext. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - ERPNext The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.erpNext/#1-start-node","text":"The Start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.erpNext/#2-erpnext-node-document-create","text":"This node will create a new document in ERPNext. First of all, you'll have to enter credentials for the ERPNext node. You can find out how to do that here . Select 'Item' from the DocType dropdown list. Click on the Add Property button. Select 'Item Name' from the Field dropdown list. Enter item 1 in the Value field. Click on the Add Property button. Select 'Item Code' from the Field dropdown list. Enter item-1 in the Value field. Click on the Add Property button. Select 'Item Group' from the Field dropdown list. Enter Products in the Value field. Note: Make sure that the item group exists in your ERPNext account. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new item with the name item 1 .","title":"2. ERPNext node (document: create)"},{"location":"integrations/nodes/n8n-nodes-base.erpNext/#3-erpnext1-node-document-addcontact","text":"This node will add the Item Tax property to the item that we created in the previous node. Select the credentials that you entered in the previous node. Select 'Update' from the Operation dropdown list. Select 'Item' from the DocType dropdown list. Click on the gears icon next to the Item Name field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > name. You can also add the following expression: {{$json[\"name\"]}} . Click on the Add Property button. Select 'Item Tax' from the Field dropdown list. Enter 5 in the Value field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node adds the Item Tax property to the item that we created in the previous node.","title":"3. ERPNext1 node (document: addContact)"},{"location":"integrations/nodes/n8n-nodes-base.erpNext/#4-erpnext2-node-document-get","text":"This node will get the information about the item that we created earlier. Select the credentials that you entered in the previous node. Select 'Get' from the Operation dropdown list. Select 'Item' from the DocType dropdown list. Click on the gears icon next to the Item Name field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > name. You can also add the following expression: {{$json[\"name\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the information of the item.","title":"4. ERPNext2 node (document: get)"},{"location":"integrations/nodes/n8n-nodes-base.facebookGraphAPI/","text":"Facebook Graph API # Facebook is a social networking site that makes it easy to connect and share with family and friends online. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic operations # Default - GET - POST - DELETE Video Uploads - GET - POST - DELETE Parameters # Host URL : The host URL for the request. The following options are available: Default : Requests are passed to the graph.facebook.com host URL. Used for the majority of requests. Video : Requests are passed to the graph-video.facebook.com host URL. Used for video upload requests only. HTTP Request Method : The method to be used for this request, from the following options: GET POST DELETE Graph API Version : The version of the Facebook Graph API to be used for this request. Node : The node on which to operate, for example /<page-id>/feed . Read more about it in the official Facebook Developer documentation . Edge : Edge of the node on which to operate. Edges represent collections of objects which are attached to the node. Ignore SSL Issues : Toggle to still download the response even if SSL certificate validation is not possible. Send Binary Data : Available for POST operations. If enabled binary data is sent as the body. Requires setting the following: Binary Property : Name of the binary property which contains the data for the file to be uploaded. Example usage # This workflow allows you to retrieve the first and last name of a profile on Facebook. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Facebook Graph API The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Facebook Graph API node # First of all, you'll have to enter credentials for the Facebook Graph API node. You can find out how to do that here . Enter me in the Node field. Click on the Add Option button and select 'Fields' from the dropdown list. Click on the Add Field button and enter first_name in the Name field. Click on the Add Field button and enter last_name in the Name field. Click on Execute Node to run the workflow.","title":"Facebook Graph API"},{"location":"integrations/nodes/n8n-nodes-base.facebookGraphAPI/#facebook-graph-api","text":"Facebook is a social networking site that makes it easy to connect and share with family and friends online. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Facebook Graph API"},{"location":"integrations/nodes/n8n-nodes-base.facebookGraphAPI/#basic-operations","text":"Default - GET - POST - DELETE Video Uploads - GET - POST - DELETE","title":"Basic operations"},{"location":"integrations/nodes/n8n-nodes-base.facebookGraphAPI/#parameters","text":"Host URL : The host URL for the request. The following options are available: Default : Requests are passed to the graph.facebook.com host URL. Used for the majority of requests. Video : Requests are passed to the graph-video.facebook.com host URL. Used for video upload requests only. HTTP Request Method : The method to be used for this request, from the following options: GET POST DELETE Graph API Version : The version of the Facebook Graph API to be used for this request. Node : The node on which to operate, for example /<page-id>/feed . Read more about it in the official Facebook Developer documentation . Edge : Edge of the node on which to operate. Edges represent collections of objects which are attached to the node. Ignore SSL Issues : Toggle to still download the response even if SSL certificate validation is not possible. Send Binary Data : Available for POST operations. If enabled binary data is sent as the body. Requires setting the following: Binary Property : Name of the binary property which contains the data for the file to be uploaded.","title":"Parameters"},{"location":"integrations/nodes/n8n-nodes-base.facebookGraphAPI/#example-usage","text":"This workflow allows you to retrieve the first and last name of a profile on Facebook. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Facebook Graph API The final workflow should look like the following image.","title":"Example usage"},{"location":"integrations/nodes/n8n-nodes-base.facebookGraphAPI/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.facebookGraphAPI/#2-facebook-graph-api-node","text":"First of all, you'll have to enter credentials for the Facebook Graph API node. You can find out how to do that here . Enter me in the Node field. Click on the Add Option button and select 'Fields' from the dropdown list. Click on the Add Field button and enter first_name in the Name field. Click on the Add Field button and enter last_name in the Name field. Click on Execute Node to run the workflow.","title":"2. Facebook Graph API node"},{"location":"integrations/nodes/n8n-nodes-base.filemaker/","text":"FileMaker # FileMaker is an integrated Enterprise Resource Planning software. It is a generic ERP software used by manufacturers, distributors, and service companies. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Find Records Get Records Get Records by Id Perform Script Create Record Edit Record Duplicate Record Delete Record Example Usage # This workflow allows you to create, update, and retrieve a record from FileMaker. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - FileMaker The final workflow should look like the following image. 1. Start node # The Start node exists by default when you create a new workflow. 2. FileMaker node # This node will create a new record in FileMaker. First of all, you'll have to enter credentials for the FileMaker node. You can find out how to do that here . Select 'Create Record' from the Action dropdown list. Select a layout from the Layout dropdown list. Click on the Add Field button. Select a field from the Field dropdown list. Enter a value in the Value field. Click on the Add field button. Select a field from the Field dropdown list. Enter a value in the Value field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new record in FileMaker. 3. FileMaker1 node # This node will add a new field to the record that we created in the previous node. Select the credentials that you entered in the previous node. Select 'Edit Record' from the Action dropdown list. Select a layout from the Layout dropdown list. Click on the gears icon next to the Record Id field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > response > recordId. You can also add the following expression: {{$json[\"response\"][\"recordId\"]}} . Click on the gears icon next to the Mod Id field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > response > modId. You can also add the following expression: {{$json[\"response\"][\"modId\"]}} . Click on the Add field button. Select a field from the Field dropdown list. Enter a value in the Value field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node adds the address_country field to the record that we created in the previous node. 4. FileMaker2 node # This node will get the information about the record that we created earlier. Select the credentials that you entered in the previous node. Select 'Get Records by Id' from the Action dropdown list. Select a layout from the Layout dropdown list. Click on the gears icon next to the Record Id field and click on Add Expression . Select the following in the Variable Selector section: Nodes > FileMaker > Output Data > JSON > response > recordId. You can also add the following expression: {{$node[\"FileMaker\"].json[\"response\"][\"recordId\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the information of the record.","title":"FileMaker"},{"location":"integrations/nodes/n8n-nodes-base.filemaker/#filemaker","text":"FileMaker is an integrated Enterprise Resource Planning software. It is a generic ERP software used by manufacturers, distributors, and service companies. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"FileMaker"},{"location":"integrations/nodes/n8n-nodes-base.filemaker/#basic-operations","text":"Find Records Get Records Get Records by Id Perform Script Create Record Edit Record Duplicate Record Delete Record","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.filemaker/#example-usage","text":"This workflow allows you to create, update, and retrieve a record from FileMaker. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - FileMaker The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.filemaker/#1-start-node","text":"The Start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.filemaker/#2-filemaker-node","text":"This node will create a new record in FileMaker. First of all, you'll have to enter credentials for the FileMaker node. You can find out how to do that here . Select 'Create Record' from the Action dropdown list. Select a layout from the Layout dropdown list. Click on the Add Field button. Select a field from the Field dropdown list. Enter a value in the Value field. Click on the Add field button. Select a field from the Field dropdown list. Enter a value in the Value field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new record in FileMaker.","title":"2. FileMaker node"},{"location":"integrations/nodes/n8n-nodes-base.filemaker/#3-filemaker1-node","text":"This node will add a new field to the record that we created in the previous node. Select the credentials that you entered in the previous node. Select 'Edit Record' from the Action dropdown list. Select a layout from the Layout dropdown list. Click on the gears icon next to the Record Id field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > response > recordId. You can also add the following expression: {{$json[\"response\"][\"recordId\"]}} . Click on the gears icon next to the Mod Id field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > response > modId. You can also add the following expression: {{$json[\"response\"][\"modId\"]}} . Click on the Add field button. Select a field from the Field dropdown list. Enter a value in the Value field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node adds the address_country field to the record that we created in the previous node.","title":"3. FileMaker1 node"},{"location":"integrations/nodes/n8n-nodes-base.filemaker/#4-filemaker2-node","text":"This node will get the information about the record that we created earlier. Select the credentials that you entered in the previous node. Select 'Get Records by Id' from the Action dropdown list. Select a layout from the Layout dropdown list. Click on the gears icon next to the Record Id field and click on Add Expression . Select the following in the Variable Selector section: Nodes > FileMaker > Output Data > JSON > response > recordId. You can also add the following expression: {{$node[\"FileMaker\"].json[\"response\"][\"recordId\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the information of the record.","title":"4. FileMaker2 node"},{"location":"integrations/nodes/n8n-nodes-base.flow/","text":"Flow # Flow is modern task and project management software for teams. It brings together tasks, projects, timelines, and conversations, and integrates with a lot of tools. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Task Create a new task Update a task Get a task Get all the tasks Example Usage # This workflow allows you to get all the tasks in Flow. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Flow The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Flow node # First of all, you'll have to enter credentials for the Flow node. You can find out how to do that here . Select the 'Get All' option from the Operation dropdown list. Toggle the Return All slider to true. Click on Execute Node to run the workflow.","title":"Flow"},{"location":"integrations/nodes/n8n-nodes-base.flow/#flow","text":"Flow is modern task and project management software for teams. It brings together tasks, projects, timelines, and conversations, and integrates with a lot of tools. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Flow"},{"location":"integrations/nodes/n8n-nodes-base.flow/#basic-operations","text":"Task Create a new task Update a task Get a task Get all the tasks","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.flow/#example-usage","text":"This workflow allows you to get all the tasks in Flow. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Flow The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.flow/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.flow/#2-flow-node","text":"First of all, you'll have to enter credentials for the Flow node. You can find out how to do that here . Select the 'Get All' option from the Operation dropdown list. Toggle the Return All slider to true. Click on Execute Node to run the workflow.","title":"2. Flow node"},{"location":"integrations/nodes/n8n-nodes-base.freshdesk/","text":"Freshdesk # Freshdesk is a customer support software also classified as a ticketing software or a helpdesk that allows companies to effectively manage their customer care and support function. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Contact Create a new contact Delete a contact Get a contact Get all contacts Update a contact Ticket Create a new ticket Delete a ticket Get a ticket Get all tickets Update a ticket Example Usage # This workflow allows you to create a ticket on Freshdesk. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Freshdesk The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Freshdesk node # First of all, you'll have to enter credentials for the Freshdesk node. You can find out how to do that here . Select 'Email' from the Requester Identification dropdown. Enter the requester email in the Value field. Select 'Open' from the Status Dropdown. Click on Execute Node to run the workflow.","title":"Freshdesk"},{"location":"integrations/nodes/n8n-nodes-base.freshdesk/#freshdesk","text":"Freshdesk is a customer support software also classified as a ticketing software or a helpdesk that allows companies to effectively manage their customer care and support function. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Freshdesk"},{"location":"integrations/nodes/n8n-nodes-base.freshdesk/#basic-operations","text":"Contact Create a new contact Delete a contact Get a contact Get all contacts Update a contact Ticket Create a new ticket Delete a ticket Get a ticket Get all tickets Update a ticket","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.freshdesk/#example-usage","text":"This workflow allows you to create a ticket on Freshdesk. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Freshdesk The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.freshdesk/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.freshdesk/#2-freshdesk-node","text":"First of all, you'll have to enter credentials for the Freshdesk node. You can find out how to do that here . Select 'Email' from the Requester Identification dropdown. Enter the requester email in the Value field. Select 'Open' from the Status Dropdown. Click on Execute Node to run the workflow.","title":"2. Freshdesk node"},{"location":"integrations/nodes/n8n-nodes-base.freshservice/","text":"Freshservice # Freshservice is a cloud-based IT Service Management solution. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic operations # Agent Create an agent Delete an agent Retrieve an agent Retrieve all agents Update an agent Agent Group Create an agent group Delete an agent group Retrieve an agent group Retrieve all agent groups Update an agent group Agent Role Retrieve an agent role Retrieve all agent roles Announcement Create an announcement Delete an announcement Retrieve an announcement Retrieve all announcements Update an announcement Asset Type Create an asset type Delete an asset type Retrieve an asset type Retrieve all asset types Update an asset type Change Create a change Delete a change Retrieve a change Retrieve all changes Update a change Department Create a department Delete a department Retrieve a department Retrieve all departments Update a department Location Create a location Delete a location Retrieve a location Retrieve all locations Update a location Problem Create a problem Delete a problem Retrieve a problem Retrieve all problems Update a problem Product Create a product Delete a product Retrieve a product Retrieve all products Update a product Release Create a release Delete a release Retrieve a release Retrieve all releases Update a release Requester Create a requester Delete a requester Retrieve a requester Retrieve all requesters Update a requester Requester Group Create a requester group Delete a requester group Retrieve a requester group Retrieve all requester groups Update a requester group Software Create a software application Delete a software application Retrieve a software application Retrieve all software applications Update a software application Ticket Create a ticket Delete a ticket Retrieve a ticket Retrieve all tickets Update a ticket Example usage # This workflow allows you to fetch all Tickets with an Urgent status in Freshservice. This example usage workflow would use the following two nodes: Start Freshservice The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Freshservice node # First enter your credentials for the Freshservice node. You can find out how to do that here . Select Ticket from the Resource dropdown. Select Get All from the Operation dropdown. Enable the Return All toggle. From the Add Filter dropdown select Priority . From the new Priority dropdown select Urgent . Click on Execute Node to run the workflow.","title":"Freshservice"},{"location":"integrations/nodes/n8n-nodes-base.freshservice/#freshservice","text":"Freshservice is a cloud-based IT Service Management solution. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Freshservice"},{"location":"integrations/nodes/n8n-nodes-base.freshservice/#basic-operations","text":"Agent Create an agent Delete an agent Retrieve an agent Retrieve all agents Update an agent Agent Group Create an agent group Delete an agent group Retrieve an agent group Retrieve all agent groups Update an agent group Agent Role Retrieve an agent role Retrieve all agent roles Announcement Create an announcement Delete an announcement Retrieve an announcement Retrieve all announcements Update an announcement Asset Type Create an asset type Delete an asset type Retrieve an asset type Retrieve all asset types Update an asset type Change Create a change Delete a change Retrieve a change Retrieve all changes Update a change Department Create a department Delete a department Retrieve a department Retrieve all departments Update a department Location Create a location Delete a location Retrieve a location Retrieve all locations Update a location Problem Create a problem Delete a problem Retrieve a problem Retrieve all problems Update a problem Product Create a product Delete a product Retrieve a product Retrieve all products Update a product Release Create a release Delete a release Retrieve a release Retrieve all releases Update a release Requester Create a requester Delete a requester Retrieve a requester Retrieve all requesters Update a requester Requester Group Create a requester group Delete a requester group Retrieve a requester group Retrieve all requester groups Update a requester group Software Create a software application Delete a software application Retrieve a software application Retrieve all software applications Update a software application Ticket Create a ticket Delete a ticket Retrieve a ticket Retrieve all tickets Update a ticket","title":"Basic operations"},{"location":"integrations/nodes/n8n-nodes-base.freshservice/#example-usage","text":"This workflow allows you to fetch all Tickets with an Urgent status in Freshservice. This example usage workflow would use the following two nodes: Start Freshservice The final workflow should look like the following image.","title":"Example usage"},{"location":"integrations/nodes/n8n-nodes-base.freshservice/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.freshservice/#2-freshservice-node","text":"First enter your credentials for the Freshservice node. You can find out how to do that here . Select Ticket from the Resource dropdown. Select Get All from the Operation dropdown. Enable the Return All toggle. From the Add Filter dropdown select Priority . From the new Priority dropdown select Urgent . Click on Execute Node to run the workflow.","title":"2. Freshservice node"},{"location":"integrations/nodes/n8n-nodes-base.freshworksCrm/","text":"Freshworks CRM # Freshworks CRM is a cloud-based customer relationship management (CRM) solution that helps businesses manage their interactions with existing and potential customers. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic operations # Account Create an account Delete an account Retrieve an account Retrieve all accounts Update an account Appointment Create an appointment Delete an appointment Retrieve an appointment Retrieve all appointments Update an appointment Contact Create a contact Delete a contact Retrieve a contact Retrieve all contacts Update a contact Deal Create a deal Delete a deal Retrieve a deal Retrieve all deals Update a deal Note Create a note Delete a note Update a note Sales Activity Retrieve a sales activity Retrieve all sales activities Task Create a task Delete a task Retrieve a task Retrieve all tasks Update a task Example usage # This workflow allows you to fetch all Contacts in Freshworks CRM that you have yet to contact. This example usage workflow would use the following two nodes: Start Freshworks CRM The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Freshworks CRM node # First enter your credentials for the Freshworks CRM node. You can find out how to do that here . Select Contact from the Resource dropdown. Select Get All from the Operation dropdown. Select Never Contacted from the View dropdown. Click on Execute Node to run the workflow.","title":"Freshworks CRM"},{"location":"integrations/nodes/n8n-nodes-base.freshworksCrm/#freshworks-crm","text":"Freshworks CRM is a cloud-based customer relationship management (CRM) solution that helps businesses manage their interactions with existing and potential customers. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Freshworks CRM"},{"location":"integrations/nodes/n8n-nodes-base.freshworksCrm/#basic-operations","text":"Account Create an account Delete an account Retrieve an account Retrieve all accounts Update an account Appointment Create an appointment Delete an appointment Retrieve an appointment Retrieve all appointments Update an appointment Contact Create a contact Delete a contact Retrieve a contact Retrieve all contacts Update a contact Deal Create a deal Delete a deal Retrieve a deal Retrieve all deals Update a deal Note Create a note Delete a note Update a note Sales Activity Retrieve a sales activity Retrieve all sales activities Task Create a task Delete a task Retrieve a task Retrieve all tasks Update a task","title":"Basic operations"},{"location":"integrations/nodes/n8n-nodes-base.freshworksCrm/#example-usage","text":"This workflow allows you to fetch all Contacts in Freshworks CRM that you have yet to contact. This example usage workflow would use the following two nodes: Start Freshworks CRM The final workflow should look like the following image.","title":"Example usage"},{"location":"integrations/nodes/n8n-nodes-base.freshworksCrm/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.freshworksCrm/#2-freshworks-crm-node","text":"First enter your credentials for the Freshworks CRM node. You can find out how to do that here . Select Contact from the Resource dropdown. Select Get All from the Operation dropdown. Select Never Contacted from the View dropdown. Click on Execute Node to run the workflow.","title":"2. Freshworks CRM node"},{"location":"integrations/nodes/n8n-nodes-base.gSuiteAdmin/","text":"G Suite Admin # G Suite Admin helps you administer domain and app resources, create reports, and manage subscriptions and alerts for your G Suite organization. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Group Create a group Delete a group Get a group Get all groups Update a group User Create a user Delete a user Get a user Get all users Update a user Example Usage # This workflow allows you to create, update, and get a user using the G Suite Admin node. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - G Suite Admin The final workflow should look like the following image. 1. Start node # The Start node exists by default when you create a new workflow. 2. G Suite Admin node (create: user) # This node will create a user in G Suite with the following information: first name, last name, password, domain, and username. First of all, you'll have to enter credentials for the G Suite Admin node. You can find out how to do that here . Enter the first name of the user in the First Name field. Enter the last name of the user in the Last Name field. Enter a password for the user in the Password field. Select the domain from the Domain dropdown list. Enter the username for the user in the Username field. Click on Execute Node to run the workflow. In the screenshot below, you will observe that the node has created a new user with the first name Nathan , last name Nat , domain n8n.io , username nat , and a password, in G Suite. 3. G Suite Admin1 node (update: user) # This node will get the User ID from the previous node and update the user's last name to Nate . Select the credentials that you entered in the previous G Suite Admin node. Select 'Update' from the Operation dropdown list. Click on the gears icon next to the User ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > G Suite Admin > Output Data > JSON > id. You can also add the following expression: {{$node[\"G Suite Admin\"].json[\"id\"]}} . Click on the Add Field button and select 'Last Name' from the dropdown list. Enter the last name in the Last Name field. Click on Execute Node to run the workflow. In the screenshot below, you will notice that the node has updated the last name of the user that we created in the previous node. 4. G Suite Admin2 (get: user) # This node will get the information of the user we created in the G Suite Admin node. Select the credentials that you entered in the previous G Suite Admin node. Select 'Get' from the Operation dropdown list. Click on the gears icon next to the User ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > G Suite Admin > Output Data > JSON > id. You can also add the following expression: {{$node[\"G Suite Admin\"].json[\"id\"]}} . Click on Execute Node to run the workflow. In the screenshot below, you will notice that the node returns the information of the user we created in the G Suite Admin node. FAQs # What are the different ways to project a user's information? # There are three different ways to project a user's information: Basic: Does not include any custom fields. Custom: Includes the custom fields from schemas in customField. Full: Include all the fields associated with the user. You can include custom fields by following the steps mentioned below. 1. Select 'Custom' from the Projection dropdown list. 2. Click on the Add Options button and select 'Custom Schemas' from the dropdown list. 3. Select the schema names you want to include from the Custom Schemas dropdown list.","title":"G Suite Admin"},{"location":"integrations/nodes/n8n-nodes-base.gSuiteAdmin/#g-suite-admin","text":"G Suite Admin helps you administer domain and app resources, create reports, and manage subscriptions and alerts for your G Suite organization. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"G Suite Admin"},{"location":"integrations/nodes/n8n-nodes-base.gSuiteAdmin/#basic-operations","text":"Group Create a group Delete a group Get a group Get all groups Update a group User Create a user Delete a user Get a user Get all users Update a user","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.gSuiteAdmin/#example-usage","text":"This workflow allows you to create, update, and get a user using the G Suite Admin node. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - G Suite Admin The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.gSuiteAdmin/#1-start-node","text":"The Start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.gSuiteAdmin/#2-g-suite-admin-node-create-user","text":"This node will create a user in G Suite with the following information: first name, last name, password, domain, and username. First of all, you'll have to enter credentials for the G Suite Admin node. You can find out how to do that here . Enter the first name of the user in the First Name field. Enter the last name of the user in the Last Name field. Enter a password for the user in the Password field. Select the domain from the Domain dropdown list. Enter the username for the user in the Username field. Click on Execute Node to run the workflow. In the screenshot below, you will observe that the node has created a new user with the first name Nathan , last name Nat , domain n8n.io , username nat , and a password, in G Suite.","title":"2. G Suite Admin node (create: user)"},{"location":"integrations/nodes/n8n-nodes-base.gSuiteAdmin/#3-g-suite-admin1-node-update-user","text":"This node will get the User ID from the previous node and update the user's last name to Nate . Select the credentials that you entered in the previous G Suite Admin node. Select 'Update' from the Operation dropdown list. Click on the gears icon next to the User ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > G Suite Admin > Output Data > JSON > id. You can also add the following expression: {{$node[\"G Suite Admin\"].json[\"id\"]}} . Click on the Add Field button and select 'Last Name' from the dropdown list. Enter the last name in the Last Name field. Click on Execute Node to run the workflow. In the screenshot below, you will notice that the node has updated the last name of the user that we created in the previous node.","title":"3. G Suite Admin1 node (update: user)"},{"location":"integrations/nodes/n8n-nodes-base.gSuiteAdmin/#4-g-suite-admin2-get-user","text":"This node will get the information of the user we created in the G Suite Admin node. Select the credentials that you entered in the previous G Suite Admin node. Select 'Get' from the Operation dropdown list. Click on the gears icon next to the User ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > G Suite Admin > Output Data > JSON > id. You can also add the following expression: {{$node[\"G Suite Admin\"].json[\"id\"]}} . Click on Execute Node to run the workflow. In the screenshot below, you will notice that the node returns the information of the user we created in the G Suite Admin node.","title":"4. G Suite Admin2 (get: user)"},{"location":"integrations/nodes/n8n-nodes-base.gSuiteAdmin/#faqs","text":"","title":"FAQs"},{"location":"integrations/nodes/n8n-nodes-base.gSuiteAdmin/#what-are-the-different-ways-to-project-a-users-information","text":"There are three different ways to project a user's information: Basic: Does not include any custom fields. Custom: Includes the custom fields from schemas in customField. Full: Include all the fields associated with the user. You can include custom fields by following the steps mentioned below. 1. Select 'Custom' from the Projection dropdown list. 2. Click on the Add Options button and select 'Custom Schemas' from the dropdown list. 3. Select the schema names you want to include from the Custom Schemas dropdown list.","title":"What are the different ways to project a user's information?"},{"location":"integrations/nodes/n8n-nodes-base.getResponse/","text":"GetResponse # GetResponse is an online platform that offers email marketing software, landing page creator, webinar hosting, and much more. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Contact Create a new contact Delete a contact Get a contact Get all contacts Update contact properties Example Usage # This workflow allows you to get all the contacts from GetResponse and check if they belong to a specific campaign. If they don't belong to the specified campaign, the workflow updates the campaign ID of the contacts using the GetResponse node. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - GetResponse - IF - No Operation, do nothing The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. GetResponse node (getAll: contact) # This node will retrieve all the contacts from GetResponse. First of all, you'll have to enter credentials for the GetResponse node. You can find out how to do that here . Select 'GetAll' from the Operation dropdown list. Toggle Return All to true. Click on Execute Node to run the node. In the screenshot below, you will notice that the node retrieves all the contacts from GetResponse. 3. IF node # This node will check if a contact belongs to the n8n campaign or not. If a contact does not belong to the n8n campaign, it will return true otherwise false. Create a campaign in GetResponse if you don't already have one. Click on Add Condition and select 'String'. Click on the gears icon next to the Value 1 field and click on Add Expression . Select the following in the Variable Selector section: Nodes > GetResponse > Output Data > JSON > campaign > name. You can also add the following expression: {{$node[\"GetResponse\"].json[\"campaign\"][\"name\"]}} . Select 'Not Equal' from the Operation dropdown list. Enter n8n in the Value 2 field. If you have a campaign with a different name, use that name instead. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns all the contacts that do not belong to the n8n campaign. 4. GetResponse1 node (update: contact) # This node will update the campaign ID of all the contacts that we get from the true branch of the previous node. Create a GetResponse node connected to the 'true' output of the IF node. Select the credentials that you entered in the previous GetResponse node. Select 'Update' from the Operation dropdown list. Click on the gears icon next to the Contact ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > IF > Output Data > JSON > contactId. You can also add the following expression: {{$node[\"IF\"].json[\"contactId\"]}} . Click on Add Field and select 'Campaign ID' from the dropdown list. Select n8n from the Campaign ID dropdown list. If you have a campaign with a different name, select that instead. Click on Execute Node to run the node. In the screenshot below, you notice that the node updates the campaign ID of all the contacts that do not belong to the n8n campaign. 5. NoOp node # Adding this node here is optional, as the absence of this node won't make a difference to the functioning of the workflow. Create a NoOp node connected to the 'false' output of the IF node. Click on Execute Node to run the node.","title":"GetResponse"},{"location":"integrations/nodes/n8n-nodes-base.getResponse/#getresponse","text":"GetResponse is an online platform that offers email marketing software, landing page creator, webinar hosting, and much more. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"GetResponse"},{"location":"integrations/nodes/n8n-nodes-base.getResponse/#basic-operations","text":"Contact Create a new contact Delete a contact Get a contact Get all contacts Update contact properties","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.getResponse/#example-usage","text":"This workflow allows you to get all the contacts from GetResponse and check if they belong to a specific campaign. If they don't belong to the specified campaign, the workflow updates the campaign ID of the contacts using the GetResponse node. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - GetResponse - IF - No Operation, do nothing The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.getResponse/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.getResponse/#2-getresponse-node-getall-contact","text":"This node will retrieve all the contacts from GetResponse. First of all, you'll have to enter credentials for the GetResponse node. You can find out how to do that here . Select 'GetAll' from the Operation dropdown list. Toggle Return All to true. Click on Execute Node to run the node. In the screenshot below, you will notice that the node retrieves all the contacts from GetResponse.","title":"2. GetResponse node (getAll: contact)"},{"location":"integrations/nodes/n8n-nodes-base.getResponse/#3-if-node","text":"This node will check if a contact belongs to the n8n campaign or not. If a contact does not belong to the n8n campaign, it will return true otherwise false. Create a campaign in GetResponse if you don't already have one. Click on Add Condition and select 'String'. Click on the gears icon next to the Value 1 field and click on Add Expression . Select the following in the Variable Selector section: Nodes > GetResponse > Output Data > JSON > campaign > name. You can also add the following expression: {{$node[\"GetResponse\"].json[\"campaign\"][\"name\"]}} . Select 'Not Equal' from the Operation dropdown list. Enter n8n in the Value 2 field. If you have a campaign with a different name, use that name instead. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns all the contacts that do not belong to the n8n campaign.","title":"3. IF node"},{"location":"integrations/nodes/n8n-nodes-base.getResponse/#4-getresponse1-node-update-contact","text":"This node will update the campaign ID of all the contacts that we get from the true branch of the previous node. Create a GetResponse node connected to the 'true' output of the IF node. Select the credentials that you entered in the previous GetResponse node. Select 'Update' from the Operation dropdown list. Click on the gears icon next to the Contact ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > IF > Output Data > JSON > contactId. You can also add the following expression: {{$node[\"IF\"].json[\"contactId\"]}} . Click on Add Field and select 'Campaign ID' from the dropdown list. Select n8n from the Campaign ID dropdown list. If you have a campaign with a different name, select that instead. Click on Execute Node to run the node. In the screenshot below, you notice that the node updates the campaign ID of all the contacts that do not belong to the n8n campaign.","title":"4. GetResponse1 node (update: contact)"},{"location":"integrations/nodes/n8n-nodes-base.getResponse/#5-noop-node","text":"Adding this node here is optional, as the absence of this node won't make a difference to the functioning of the workflow. Create a NoOp node connected to the 'false' output of the IF node. Click on Execute Node to run the node.","title":"5. NoOp node"},{"location":"integrations/nodes/n8n-nodes-base.ghost/","text":"Ghost # Ghost is an open-source, professional publishing platform built on a Node.js technology stack. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Admin API # Post - Create a post - Delete a post - Get a post - Get all posts - Update a post Content API # Post - Get a post - Get all posts Example Usage # This workflow allows you to create, update, and get a post in Ghost. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Ghost The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Ghost node (create: post) # This node will create a new post with the title Running ghost with n8n! . If you want to create a post with a different title, use that instead. Select 'Admin API' from the Source dropdown list. You'll have to enter credentials for the Ghost node. You can find out how to do that here . Select 'Create' from the Operation dropdown list. Enter Running ghost with n8n! in the Title field. Enter the HTML content in the Content field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new post. 3. Ghost1 node (update: post) # This node will update the status of the post that we created in the previous node. We will change the status of the post to Published . Select 'Admin API' from the Source dropdown list. Select the credentials that you entered in the previous node. Select 'Update' from the Operation dropdown list. Click on the gears icon next to the Post ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Ghost > Output Data > JSON > id. You can also add the following expression: {{$node[\"Ghost\"].json[\"id\"]}} . Click on Add Field and select 'Status'. Select 'Published' from the Status dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node updates the status of the post that we created in the previous node. 4. Ghost2 node (get: post) # This node returns information about the post that we created using the Ghost node. In this node, we are using the Admin API . You can also use the Content API to get the information about the post. Select 'Admin API' from the Source dropdown list. Select the credentials that you entered in the previous node. Select 'ID' from the By dropdown list. Click on the gears icon next to the Identifier field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Ghost > Output Data > JSON > id. You can also add the following expression: {{$node[\"Ghost\"].json[\"id\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns information about the post that we specified.","title":"Ghost"},{"location":"integrations/nodes/n8n-nodes-base.ghost/#ghost","text":"Ghost is an open-source, professional publishing platform built on a Node.js technology stack. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Ghost"},{"location":"integrations/nodes/n8n-nodes-base.ghost/#basic-operations","text":"","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.ghost/#admin-api","text":"Post - Create a post - Delete a post - Get a post - Get all posts - Update a post","title":"Admin API"},{"location":"integrations/nodes/n8n-nodes-base.ghost/#content-api","text":"Post - Get a post - Get all posts","title":"Content API"},{"location":"integrations/nodes/n8n-nodes-base.ghost/#example-usage","text":"This workflow allows you to create, update, and get a post in Ghost. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Ghost The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.ghost/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.ghost/#2-ghost-node-create-post","text":"This node will create a new post with the title Running ghost with n8n! . If you want to create a post with a different title, use that instead. Select 'Admin API' from the Source dropdown list. You'll have to enter credentials for the Ghost node. You can find out how to do that here . Select 'Create' from the Operation dropdown list. Enter Running ghost with n8n! in the Title field. Enter the HTML content in the Content field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new post.","title":"2. Ghost node (create: post)"},{"location":"integrations/nodes/n8n-nodes-base.ghost/#3-ghost1-node-update-post","text":"This node will update the status of the post that we created in the previous node. We will change the status of the post to Published . Select 'Admin API' from the Source dropdown list. Select the credentials that you entered in the previous node. Select 'Update' from the Operation dropdown list. Click on the gears icon next to the Post ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Ghost > Output Data > JSON > id. You can also add the following expression: {{$node[\"Ghost\"].json[\"id\"]}} . Click on Add Field and select 'Status'. Select 'Published' from the Status dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node updates the status of the post that we created in the previous node.","title":"3. Ghost1 node (update: post)"},{"location":"integrations/nodes/n8n-nodes-base.ghost/#4-ghost2-node-get-post","text":"This node returns information about the post that we created using the Ghost node. In this node, we are using the Admin API . You can also use the Content API to get the information about the post. Select 'Admin API' from the Source dropdown list. Select the credentials that you entered in the previous node. Select 'ID' from the By dropdown list. Click on the gears icon next to the Identifier field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Ghost > Output Data > JSON > id. You can also add the following expression: {{$node[\"Ghost\"].json[\"id\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns information about the post that we specified.","title":"4. Ghost2 node (get: post)"},{"location":"integrations/nodes/n8n-nodes-base.github/","text":"GitHub # GitHub provides hosting for software development and version control using Git. It offers the distributed version control and source code management (SCM) functionality of Git, access control and several collaboration features such as bug tracking, feature requests, task management, and wikis for every project. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # File Create a new file in repository. Delete a file in repository. Edit a file in repository. Get the data of a single file. List contents of a folder. Issue Create a new issue. Create a new comment on an issue. Edit an issue. Get the data of a single issue. Lock an issue. Repository Get the data of a single repository. Returns the contents of the repository's license file, if one is detected. Returns issues of a repository. Get the community profile of a repository with metrics, health score, description, license, etc. Get the top 10 popular content paths over the last 14 days. Get the top 10 referrering domains over the last 14 days. Release Creates a new release. Get a release. Get all repository releases. Delete a release. Update a release. Review Creates a new review. Get a review for a pull request. Get all reviews for a pull request. Update a review. User Returns the repositories of a user. Invites a user to an organization. Example Usage # This workflow allows you to get the community profile of a GitHub repository. You can also find the workflow on the website. This example usage workflow uses the following two nodes. - Start - GitHub The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. GitHub node # First of all, you'll have to enter credentials for the GitHub node. You can find out how to do that here . Select the 'Repository' option under the Resource field. Select the 'Get Profile' option under the Operation field. Enter the repository owner in the Repository Owner field. Enter the repository name in the Repository Name field. Click on Execute Node to run the workflow.","title":"GitHub"},{"location":"integrations/nodes/n8n-nodes-base.github/#github","text":"GitHub provides hosting for software development and version control using Git. It offers the distributed version control and source code management (SCM) functionality of Git, access control and several collaboration features such as bug tracking, feature requests, task management, and wikis for every project. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"GitHub"},{"location":"integrations/nodes/n8n-nodes-base.github/#basic-operations","text":"File Create a new file in repository. Delete a file in repository. Edit a file in repository. Get the data of a single file. List contents of a folder. Issue Create a new issue. Create a new comment on an issue. Edit an issue. Get the data of a single issue. Lock an issue. Repository Get the data of a single repository. Returns the contents of the repository's license file, if one is detected. Returns issues of a repository. Get the community profile of a repository with metrics, health score, description, license, etc. Get the top 10 popular content paths over the last 14 days. Get the top 10 referrering domains over the last 14 days. Release Creates a new release. Get a release. Get all repository releases. Delete a release. Update a release. Review Creates a new review. Get a review for a pull request. Get all reviews for a pull request. Update a review. User Returns the repositories of a user. Invites a user to an organization.","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.github/#example-usage","text":"This workflow allows you to get the community profile of a GitHub repository. You can also find the workflow on the website. This example usage workflow uses the following two nodes. - Start - GitHub The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.github/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.github/#2-github-node","text":"First of all, you'll have to enter credentials for the GitHub node. You can find out how to do that here . Select the 'Repository' option under the Resource field. Select the 'Get Profile' option under the Operation field. Enter the repository owner in the Repository Owner field. Enter the repository name in the Repository Name field. Click on Execute Node to run the workflow.","title":"2. GitHub node"},{"location":"integrations/nodes/n8n-nodes-base.gitlab/","text":"GitLab # GitLab is a web-based DevOps lifecycle tool that provides a Git-repository manager providing wiki, issue-tracking, and continuous integration/continuous installation pipeline features. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Issue Create a new issue Create a new comment on an issue Edit an issue Get the data of a single issue Lock an issue Repository Get the data of a single repository Returns issues of a repository Release Create a new release Delete a new release Get a new release Get all releases Update a new release User Returns the repositories of a user Example Usage # This workflow allows you to get the details of a GitLab repository. You can also find the workflow on the website. This example usage workflow uses the following two nodes. - Start - GitLab The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. GitLab node # First of all, you'll have to enter credentials for the GitLab node. You can find out how to do that here . Select the 'Repository' option from the Resource dropdown list. Select the 'Get' option under the Operation field. Enter the project owner in the Project Owner field. Enter the project name in the Project Name field. Click on Execute Node to run the workflow.","title":"GitLab"},{"location":"integrations/nodes/n8n-nodes-base.gitlab/#gitlab","text":"GitLab is a web-based DevOps lifecycle tool that provides a Git-repository manager providing wiki, issue-tracking, and continuous integration/continuous installation pipeline features. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"GitLab"},{"location":"integrations/nodes/n8n-nodes-base.gitlab/#basic-operations","text":"Issue Create a new issue Create a new comment on an issue Edit an issue Get the data of a single issue Lock an issue Repository Get the data of a single repository Returns issues of a repository Release Create a new release Delete a new release Get a new release Get all releases Update a new release User Returns the repositories of a user","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.gitlab/#example-usage","text":"This workflow allows you to get the details of a GitLab repository. You can also find the workflow on the website. This example usage workflow uses the following two nodes. - Start - GitLab The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.gitlab/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.gitlab/#2-gitlab-node","text":"First of all, you'll have to enter credentials for the GitLab node. You can find out how to do that here . Select the 'Repository' option from the Resource dropdown list. Select the 'Get' option under the Operation field. Enter the project owner in the Project Owner field. Enter the project name in the Project Name field. Click on Execute Node to run the workflow.","title":"2. GitLab node"},{"location":"integrations/nodes/n8n-nodes-base.gmail/","text":"Gmail # Gmail is an email service developed by Google. Users can access Gmail on the web and using third-party programs that synchronize email content through POP or IMAP protocols. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Draft Create a new email draft Delete a draft Get a draft Get all drafts Label Create a new label Delete a label Get a label Get all labels Message Send an email Delete a message Get a message Get all messages Reply to an email Message Label Add a label to a message Remove a label from a message Example Usage # This workflow allows you to get all messages with a certain label, remove the label from the messages, and add a new label to the messages. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Gmail The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Gmail node (getAll: message) # This node will return ten messages with the label n8n from Gmail. If you want to return all the messages toggle Return All to true . First of all, you'll have to enter credentials for the Gmail node. You can find out how to do that here . Select 'Message' from the Resource dropdown list. Select 'Get All' from the Operation dropdown list. Click on the Add Field button and select 'Format' from the dropdown list. Select 'Full' from Format dropdown menu. This option will return the full email message data with the body content parsed in the payload field. Click on the Add Field button and select 'Label IDs' from the dropdown list. Select the label from the Label IDs dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns ten email messages with the label n8n . 3. Gmail1 node (remove: messageLabel) # This node will remove the label n8n from all the messages that you received in the previous node. If you want to remove a different label, select that label instead. Select the credentials that you entered in the previous Gmail node. Select 'Message Label' from the Resource dropdown list. Select 'Remove' from the Operation dropdown list. Click on the gears icon next to the Message ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Gmail > Output Data > JSON > id. You can also add the following expression: {{$node[\"Gmail\"].json[\"id\"]}} . Select the label from the Label IDs dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node removes the n8n label from the messages that we received from the previous node. 4. Gmail2 node (add: messageLabel) # This node will add a new label nodemation to the messages that we received from the Gmail node. If you want to add a different label, select that label instead. Select the credentials that you entered in the previous Gmail node. Select 'Message Label' from the Resource dropdown list. Click on the gears icon next to the Message ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Gmail > Output Data > JSON > id. You can also add the following expression: {{$node[\"Gmail\"].json[\"id\"]}} . Select the label from the Label IDs dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node adds a new label nodemation to the messages that we received from the Gmail node. FAQs # How to return all the messages with a particular label? # To return all the messages with a particular label, follow the steps mentioned below. Select 'Message' from the Resource dropdown list. Select 'Get All' from the Operation dropdown list. If you want to all return all the messages with a particular, toggle Return All to true . Click on Add Field and select 'Query'. Enter label:LABEL_NAME in the Query field. Replace LABEL_NAME with your label name. Click on Execute Node to run the node. Refer to Search operators you can use with Gmail to learn more about filtering your search results.","title":"Gmail"},{"location":"integrations/nodes/n8n-nodes-base.gmail/#gmail","text":"Gmail is an email service developed by Google. Users can access Gmail on the web and using third-party programs that synchronize email content through POP or IMAP protocols. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Gmail"},{"location":"integrations/nodes/n8n-nodes-base.gmail/#basic-operations","text":"Draft Create a new email draft Delete a draft Get a draft Get all drafts Label Create a new label Delete a label Get a label Get all labels Message Send an email Delete a message Get a message Get all messages Reply to an email Message Label Add a label to a message Remove a label from a message","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.gmail/#example-usage","text":"This workflow allows you to get all messages with a certain label, remove the label from the messages, and add a new label to the messages. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Gmail The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.gmail/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.gmail/#2-gmail-node-getall-message","text":"This node will return ten messages with the label n8n from Gmail. If you want to return all the messages toggle Return All to true . First of all, you'll have to enter credentials for the Gmail node. You can find out how to do that here . Select 'Message' from the Resource dropdown list. Select 'Get All' from the Operation dropdown list. Click on the Add Field button and select 'Format' from the dropdown list. Select 'Full' from Format dropdown menu. This option will return the full email message data with the body content parsed in the payload field. Click on the Add Field button and select 'Label IDs' from the dropdown list. Select the label from the Label IDs dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns ten email messages with the label n8n .","title":"2. Gmail node (getAll: message)"},{"location":"integrations/nodes/n8n-nodes-base.gmail/#3-gmail1-node-remove-messagelabel","text":"This node will remove the label n8n from all the messages that you received in the previous node. If you want to remove a different label, select that label instead. Select the credentials that you entered in the previous Gmail node. Select 'Message Label' from the Resource dropdown list. Select 'Remove' from the Operation dropdown list. Click on the gears icon next to the Message ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Gmail > Output Data > JSON > id. You can also add the following expression: {{$node[\"Gmail\"].json[\"id\"]}} . Select the label from the Label IDs dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node removes the n8n label from the messages that we received from the previous node.","title":"3. Gmail1 node (remove: messageLabel)"},{"location":"integrations/nodes/n8n-nodes-base.gmail/#4-gmail2-node-add-messagelabel","text":"This node will add a new label nodemation to the messages that we received from the Gmail node. If you want to add a different label, select that label instead. Select the credentials that you entered in the previous Gmail node. Select 'Message Label' from the Resource dropdown list. Click on the gears icon next to the Message ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Gmail > Output Data > JSON > id. You can also add the following expression: {{$node[\"Gmail\"].json[\"id\"]}} . Select the label from the Label IDs dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node adds a new label nodemation to the messages that we received from the Gmail node.","title":"4. Gmail2 node (add: messageLabel)"},{"location":"integrations/nodes/n8n-nodes-base.gmail/#faqs","text":"","title":"FAQs"},{"location":"integrations/nodes/n8n-nodes-base.gmail/#how-to-return-all-the-messages-with-a-particular-label","text":"To return all the messages with a particular label, follow the steps mentioned below. Select 'Message' from the Resource dropdown list. Select 'Get All' from the Operation dropdown list. If you want to all return all the messages with a particular, toggle Return All to true . Click on Add Field and select 'Query'. Enter label:LABEL_NAME in the Query field. Replace LABEL_NAME with your label name. Click on Execute Node to run the node. Refer to Search operators you can use with Gmail to learn more about filtering your search results.","title":"How to return all the messages with a particular label?"},{"location":"integrations/nodes/n8n-nodes-base.goToWebinar/","text":"GoToWebinar # GoToWebinar is a platform that helps you create and deliver online video conferences. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Attendee Get Get All Get Details Co-Organizer Create Delete Get All Reinvite Panelist Create Delete Get All Reinvite Registrant Create Delete Get Get All Session Get Get All Get Details Webinar Create Get Get All Update Example Usage # This workflow allows you to create, update, and get a webinar. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - GoToWebinar The final workflow should look like the following image. 1. Start node # The Start node exists by default when you create a new workflow. 2. GoToWebinar node (create: webinar) # This node will create a new webinar in GoToWebinar. First of all, you'll have to enter credentials for the GoToWebinar node. You can find out how to do that here . Select 'Webinar' from the Resource dropdown list. Select 'Create' from the Operation dropdown list. Enter a subject in the Subject field. Click on the Add Time Range button. Set the start time in the Start Time field. Set the end time in the End Time field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new webinar. 3. GoToWebinar1 node (update: webinar) # This node will update the description of the webinar that we created in the previous node. Select the credentials that you entered in the previous node. Select 'Webinar' from the Resource dropdown list. Select 'Update' from the Operation dropdown list. Click on the gears icon next to the Webinar Key field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > webinarKey. You can also add the following expression: {{$json[\"webinarKey\"]}} . Click on the Add Field button and select 'Description' from the dropdown list. Enter a description in the Description field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node updates the description of the webinar that we created in the previous node. 4. GoToWebinar2 node (get: webinar) # This node will get the information about the webinar that we created earlier. Select the credentials that you entered in the previous node. Select 'Webinar' from the Resource dropdown list. Select 'Get' from the Operation dropdown list. Click on the gears icon next to the Webinar Key field and click on Add Expression . Select the following in the Variable Selector section: Nodes > GoToWebinar > Output Data > JSON > webinarKey. You can also add the following expression: {{$node[\"GoToWebinar\"].json[\"webinarKey\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the information about the webinar.","title":"GoToWebinar"},{"location":"integrations/nodes/n8n-nodes-base.goToWebinar/#gotowebinar","text":"GoToWebinar is a platform that helps you create and deliver online video conferences. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"GoToWebinar"},{"location":"integrations/nodes/n8n-nodes-base.goToWebinar/#basic-operations","text":"Attendee Get Get All Get Details Co-Organizer Create Delete Get All Reinvite Panelist Create Delete Get All Reinvite Registrant Create Delete Get Get All Session Get Get All Get Details Webinar Create Get Get All Update","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.goToWebinar/#example-usage","text":"This workflow allows you to create, update, and get a webinar. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - GoToWebinar The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.goToWebinar/#1-start-node","text":"The Start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.goToWebinar/#2-gotowebinar-node-create-webinar","text":"This node will create a new webinar in GoToWebinar. First of all, you'll have to enter credentials for the GoToWebinar node. You can find out how to do that here . Select 'Webinar' from the Resource dropdown list. Select 'Create' from the Operation dropdown list. Enter a subject in the Subject field. Click on the Add Time Range button. Set the start time in the Start Time field. Set the end time in the End Time field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new webinar.","title":"2. GoToWebinar node (create: webinar)"},{"location":"integrations/nodes/n8n-nodes-base.goToWebinar/#3-gotowebinar1-node-update-webinar","text":"This node will update the description of the webinar that we created in the previous node. Select the credentials that you entered in the previous node. Select 'Webinar' from the Resource dropdown list. Select 'Update' from the Operation dropdown list. Click on the gears icon next to the Webinar Key field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > webinarKey. You can also add the following expression: {{$json[\"webinarKey\"]}} . Click on the Add Field button and select 'Description' from the dropdown list. Enter a description in the Description field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node updates the description of the webinar that we created in the previous node.","title":"3. GoToWebinar1 node (update: webinar)"},{"location":"integrations/nodes/n8n-nodes-base.goToWebinar/#4-gotowebinar2-node-get-webinar","text":"This node will get the information about the webinar that we created earlier. Select the credentials that you entered in the previous node. Select 'Webinar' from the Resource dropdown list. Select 'Get' from the Operation dropdown list. Click on the gears icon next to the Webinar Key field and click on Add Expression . Select the following in the Variable Selector section: Nodes > GoToWebinar > Output Data > JSON > webinarKey. You can also add the following expression: {{$node[\"GoToWebinar\"].json[\"webinarKey\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the information about the webinar.","title":"4. GoToWebinar2 node (get: webinar)"},{"location":"integrations/nodes/n8n-nodes-base.googleAnalytics/","text":"Google Analytics # Google Analytics is a web analytics service offered by Google that lets you measure your advertising ROI as well as track your Flash, video, and social networking sites and applications. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Report Return the analytics data User Activity Return user activity data. Example Usage # This workflow allows you to get analytical metrics of your website using the Goole Analytics node and store it in Airtable. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - Google Analytics - Set - [Airtable]/integrations/nodes/n8n-nodes-base.airtable/) The final workflow should look like the following image. 1. Start node # The Start node exists by default when you create a new workflow. 2. Google Analytics node (get: report) # This node will retrieve the session metrics grouped by country for a given date range. You can select a different dimension, metric, and date range. First of all, you'll have to enter credentials for the Google Analytics node. You can find out how to do that here . Select a view from the View ID dropdown list. Click on Add Field and select 'Dimensions'. Click on the Add Dimension button. Select 'Country' from the Name field. Click on Add Field and select 'Date Ranges'. Click on the Add Date Range button. Select a start date in the Start Date field. Select an end date in the End Date field. Click on Add Field and select 'Metrics'. Click on the Add Metrics button. Enter Session in the Alias field. Enter ga:sessions in the Expression field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the information about the sessions grouped by country. 3. Set node # We will use the Set node to set the values for the country and metrics. This data gets passed on to the next nodes in the workflow. Click on the Add Value button and select 'string' from the dropdown list. Enter Country in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Current Nodes > Input Data > JSON > country. You can also add the following expression: {{$json[\"ga:country\"]}} . Click on Add Value and select 'Number' from the dropdown list. Enter Metric in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Current Nodes > Input Data > JSON > total. You can also add the following expression: {{$json[\"total\"]}} . Toggle Keep Only Set to true . We set this option to true to ensure that only the data that we have set in this node get passed on to the next nodes in the workflow. Click on Execute Node to run the node. In the screenshot below, you will notice that the node sets the value for Country and Metric . 4. Airtable node (Append) # This node will append the data that we set in the previous node to a table. Create a table like this in your Airtable base. First of all, you'll have to enter credentials for the Airtable node. You can find out how to do that here . Select 'Append' from the Operation dropdown list. Enter the Base ID in the Base ID field. For obtaining the Base ID, head over to their API page and select the correct base. You\u2019ll find the Base ID there. Enter the name of your table in the Table field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node appends the data that we had set in the previous node.","title":"Google Analytics"},{"location":"integrations/nodes/n8n-nodes-base.googleAnalytics/#google-analytics","text":"Google Analytics is a web analytics service offered by Google that lets you measure your advertising ROI as well as track your Flash, video, and social networking sites and applications. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Google Analytics"},{"location":"integrations/nodes/n8n-nodes-base.googleAnalytics/#basic-operations","text":"Report Return the analytics data User Activity Return user activity data.","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.googleAnalytics/#example-usage","text":"This workflow allows you to get analytical metrics of your website using the Goole Analytics node and store it in Airtable. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - Google Analytics - Set - [Airtable]/integrations/nodes/n8n-nodes-base.airtable/) The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.googleAnalytics/#1-start-node","text":"The Start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.googleAnalytics/#2-google-analytics-node-get-report","text":"This node will retrieve the session metrics grouped by country for a given date range. You can select a different dimension, metric, and date range. First of all, you'll have to enter credentials for the Google Analytics node. You can find out how to do that here . Select a view from the View ID dropdown list. Click on Add Field and select 'Dimensions'. Click on the Add Dimension button. Select 'Country' from the Name field. Click on Add Field and select 'Date Ranges'. Click on the Add Date Range button. Select a start date in the Start Date field. Select an end date in the End Date field. Click on Add Field and select 'Metrics'. Click on the Add Metrics button. Enter Session in the Alias field. Enter ga:sessions in the Expression field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the information about the sessions grouped by country.","title":"2. Google Analytics node (get: report)"},{"location":"integrations/nodes/n8n-nodes-base.googleAnalytics/#3-set-node","text":"We will use the Set node to set the values for the country and metrics. This data gets passed on to the next nodes in the workflow. Click on the Add Value button and select 'string' from the dropdown list. Enter Country in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Current Nodes > Input Data > JSON > country. You can also add the following expression: {{$json[\"ga:country\"]}} . Click on Add Value and select 'Number' from the dropdown list. Enter Metric in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Current Nodes > Input Data > JSON > total. You can also add the following expression: {{$json[\"total\"]}} . Toggle Keep Only Set to true . We set this option to true to ensure that only the data that we have set in this node get passed on to the next nodes in the workflow. Click on Execute Node to run the node. In the screenshot below, you will notice that the node sets the value for Country and Metric .","title":"3. Set node"},{"location":"integrations/nodes/n8n-nodes-base.googleAnalytics/#4-airtable-node-append","text":"This node will append the data that we set in the previous node to a table. Create a table like this in your Airtable base. First of all, you'll have to enter credentials for the Airtable node. You can find out how to do that here . Select 'Append' from the Operation dropdown list. Enter the Base ID in the Base ID field. For obtaining the Base ID, head over to their API page and select the correct base. You\u2019ll find the Base ID there. Enter the name of your table in the Table field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node appends the data that we had set in the previous node.","title":"4. Airtable node (Append)"},{"location":"integrations/nodes/n8n-nodes-base.googleBigQuery/","text":"Google BigQuery # Google BigQuery is a fully-managed, serverless data warehouse that enables scalable analysis over petabytes of data. It is a Platform as a Service that supports querying using ANSI SQL. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Record Create a new record Retrieve all records Example Usage # This workflow allows you to send position updates of the ISS every minute to a table in Google BigQuery. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Cron - HTTP Request - Set - Google BigQuery The final workflow should look like the following image. 1. Cron node # The Cron node will trigger the workflow every minute. Click on Add Cron Time . Select 'Every Minute' from the Mode dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the Cron node is configured to trigger the workflow every minute. 2. HTTP Request node (GET) # This node will make a GET request to the API https://api.wheretheiss.at/v1/satellites/25544/positions to fetch the position of the ISS. This information gets passed on to the next node in the workflow. Enter https://api.wheretheiss.at/v1/satellites/25544/positions in the URL field. Click on the Add Parameter button in the Query Parameters section. Enter timestamps in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Enter the following expression: {{Date.now()}} . This expression will return the current timestamp. Click on Execute Node to run the node. In the screenshot below, you will notice that the node makes a GET request to the API and returns the information about the location of the ISS. 3. Set node # We will use the Set node to ensure that only the data that we set in this node gets passed on to the next nodes in the workflow. Click on Add Value and select 'String' from the dropdown list. Enter name in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > 0 > name. You can also add the following expression: {{$json[\"0\"][\"name\"]}} . Click on Add Value and select 'Number' from the dropdown list. Enter latitude in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Input Data > JSON > 0 > latitude. You can also add the following expression: {{$json[\"0\"][\"latitude\"]}} . Click on Add Value and select 'Number' from the dropdown list. Enter longitude in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Input Data > JSON > 0 > longitude. You can also add the following expression: {{$json[\"0\"][\"longitude\"]}} . Click on Add Value and select 'Number' from the dropdown list. Enter timestamp in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Input Data > JSON > 0 > timpestamp. You can also add the following expression: {{$json[\"0\"][\"timestamp\"]}} . Toggle Keep Only Set to true . We set this option to true to ensure that only the data that we have set in this node get passed on to the next nodes in the workflow. Click on Execute Node to run the node. In the screenshot below, you will notice that the node uses the data from the previous node and returns the data that we set for the workflow. 4. Google BigQuery node (create: record) # This node will send the data from the previous node to the position table in Google BigQuery. If you have created a table with a different name, use that table instead. First of all, you'll have to enter credentials for the Google BigQuery node. You can find out how to do that here . Select a project from the Project ID dropdown list. Select a dataset from the Dataset ID dropdown list. Select the table from position from the Table ID dropdown list. If you created a table with a different name, select that table instead. Enter name, latitude, longitude, timestamp in the Columns field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node sends the data from the previous node to the position table in Google BigQuery. Activate workflow for production This example workflow uses the Cron node, which is a Trigger node. You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Cron node.","title":"Google BigQuery"},{"location":"integrations/nodes/n8n-nodes-base.googleBigQuery/#google-bigquery","text":"Google BigQuery is a fully-managed, serverless data warehouse that enables scalable analysis over petabytes of data. It is a Platform as a Service that supports querying using ANSI SQL. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Google BigQuery"},{"location":"integrations/nodes/n8n-nodes-base.googleBigQuery/#basic-operations","text":"Record Create a new record Retrieve all records","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.googleBigQuery/#example-usage","text":"This workflow allows you to send position updates of the ISS every minute to a table in Google BigQuery. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Cron - HTTP Request - Set - Google BigQuery The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.googleBigQuery/#1-cron-node","text":"The Cron node will trigger the workflow every minute. Click on Add Cron Time . Select 'Every Minute' from the Mode dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the Cron node is configured to trigger the workflow every minute.","title":"1. Cron node"},{"location":"integrations/nodes/n8n-nodes-base.googleBigQuery/#2-http-request-node-get","text":"This node will make a GET request to the API https://api.wheretheiss.at/v1/satellites/25544/positions to fetch the position of the ISS. This information gets passed on to the next node in the workflow. Enter https://api.wheretheiss.at/v1/satellites/25544/positions in the URL field. Click on the Add Parameter button in the Query Parameters section. Enter timestamps in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Enter the following expression: {{Date.now()}} . This expression will return the current timestamp. Click on Execute Node to run the node. In the screenshot below, you will notice that the node makes a GET request to the API and returns the information about the location of the ISS.","title":"2. HTTP Request node (GET)"},{"location":"integrations/nodes/n8n-nodes-base.googleBigQuery/#3-set-node","text":"We will use the Set node to ensure that only the data that we set in this node gets passed on to the next nodes in the workflow. Click on Add Value and select 'String' from the dropdown list. Enter name in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > 0 > name. You can also add the following expression: {{$json[\"0\"][\"name\"]}} . Click on Add Value and select 'Number' from the dropdown list. Enter latitude in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Input Data > JSON > 0 > latitude. You can also add the following expression: {{$json[\"0\"][\"latitude\"]}} . Click on Add Value and select 'Number' from the dropdown list. Enter longitude in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Input Data > JSON > 0 > longitude. You can also add the following expression: {{$json[\"0\"][\"longitude\"]}} . Click on Add Value and select 'Number' from the dropdown list. Enter timestamp in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Input Data > JSON > 0 > timpestamp. You can also add the following expression: {{$json[\"0\"][\"timestamp\"]}} . Toggle Keep Only Set to true . We set this option to true to ensure that only the data that we have set in this node get passed on to the next nodes in the workflow. Click on Execute Node to run the node. In the screenshot below, you will notice that the node uses the data from the previous node and returns the data that we set for the workflow.","title":"3. Set node"},{"location":"integrations/nodes/n8n-nodes-base.googleBigQuery/#4-google-bigquery-node-create-record","text":"This node will send the data from the previous node to the position table in Google BigQuery. If you have created a table with a different name, use that table instead. First of all, you'll have to enter credentials for the Google BigQuery node. You can find out how to do that here . Select a project from the Project ID dropdown list. Select a dataset from the Dataset ID dropdown list. Select the table from position from the Table ID dropdown list. If you created a table with a different name, select that table instead. Enter name, latitude, longitude, timestamp in the Columns field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node sends the data from the previous node to the position table in Google BigQuery. Activate workflow for production This example workflow uses the Cron node, which is a Trigger node. You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Cron node.","title":"4. Google BigQuery node (create: record)"},{"location":"integrations/nodes/n8n-nodes-base.googleBooks/","text":"Google Books # Google Books is a service from Google to browse, buy, or borrow books online. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Bookshelf Retrieve a specific bookshelf resource for the specified user Get all public bookshelf resource for the specified user Bookshelf Volume Add a volume to a bookshelf Clears all volumes from a bookshelf Get all volumes in a specific bookshelf for the specified user Moves a volume within a bookshelf Removes a volume from a bookshelf Volume Get a volume resource based on ID Get all volumes filtered by query Example Usage # This workflow allows you to get a volume and add it to your bookshelf using the Google Books node. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - Google Books The final workflow should look like the following image. 1. Start node # The Start node exists by default when you create a new workflow. 2. Google Books node (get: volume) # This node will retrieve a volume from Google Books. Select 'OAuth2' from the Authentication dropdown list. Enter credentials for the Google Books node. You can find out how to enter credentials for this node here . Enter the ID of a volume in the Volume ID field. Click on Execute Node to run the workflow. In the screenshot below, you will observe that the node retrieves the information of the volume that we specify. 3. Google Books1 node (add: bookshelfVolume) # This node will add the volume that we got from the previous node to a bookshelf in Google Books. Select 'OAuth2' in the Authentication field. Select the credentials that you entered in the previous Google Books node. Select 'Bookshelf Volume' from the Resource dropdown list. Select 'Add' from the Operation dropdown list. Enter a bookshelf id in the ID field. Click on the gears icon next to the Volume ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Google Books > Output Data > JSON > id. You can also add the following expression: {{$node[\"Google Books\"].json[\"id\"]}} . Click on Execute Node to run the workflow. In the screenshot below, you will notice that this node adds the volume that we got from the previous node to a bookshelf that we specified. 4. Google Books2 node (getAll: bookshelfVolume) # This node will return all the volumes in a bookshelf. Select 'OAuth2' in the Authentication field. Select the credentials that you entered in the previous Google Books node. Select 'Bookshelf Volume' from the Resource dropdown list. Select 'Get All' from the Operation dropdown list. Toggle My Library to true. This will return the information for your account. Click on the gears icon next to the Bookshelf ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Google Books1 > Parameters > shelfId. You can also add the following expression: {{$node[\"Google Books1\"].parameter[\"shelfId\"]}} . Click on Execute Node to run the workflow. In the screenshot below, you will notice that this node returns all the volumes in the bookshelf that we specified.","title":"Google Books"},{"location":"integrations/nodes/n8n-nodes-base.googleBooks/#google-books","text":"Google Books is a service from Google to browse, buy, or borrow books online. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Google Books"},{"location":"integrations/nodes/n8n-nodes-base.googleBooks/#basic-operations","text":"Bookshelf Retrieve a specific bookshelf resource for the specified user Get all public bookshelf resource for the specified user Bookshelf Volume Add a volume to a bookshelf Clears all volumes from a bookshelf Get all volumes in a specific bookshelf for the specified user Moves a volume within a bookshelf Removes a volume from a bookshelf Volume Get a volume resource based on ID Get all volumes filtered by query","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.googleBooks/#example-usage","text":"This workflow allows you to get a volume and add it to your bookshelf using the Google Books node. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - Google Books The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.googleBooks/#1-start-node","text":"The Start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.googleBooks/#2-google-books-node-get-volume","text":"This node will retrieve a volume from Google Books. Select 'OAuth2' from the Authentication dropdown list. Enter credentials for the Google Books node. You can find out how to enter credentials for this node here . Enter the ID of a volume in the Volume ID field. Click on Execute Node to run the workflow. In the screenshot below, you will observe that the node retrieves the information of the volume that we specify.","title":"2. Google Books node (get: volume)"},{"location":"integrations/nodes/n8n-nodes-base.googleBooks/#3-google-books1-node-add-bookshelfvolume","text":"This node will add the volume that we got from the previous node to a bookshelf in Google Books. Select 'OAuth2' in the Authentication field. Select the credentials that you entered in the previous Google Books node. Select 'Bookshelf Volume' from the Resource dropdown list. Select 'Add' from the Operation dropdown list. Enter a bookshelf id in the ID field. Click on the gears icon next to the Volume ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Google Books > Output Data > JSON > id. You can also add the following expression: {{$node[\"Google Books\"].json[\"id\"]}} . Click on Execute Node to run the workflow. In the screenshot below, you will notice that this node adds the volume that we got from the previous node to a bookshelf that we specified.","title":"3. Google Books1 node (add: bookshelfVolume)"},{"location":"integrations/nodes/n8n-nodes-base.googleBooks/#4-google-books2-node-getall-bookshelfvolume","text":"This node will return all the volumes in a bookshelf. Select 'OAuth2' in the Authentication field. Select the credentials that you entered in the previous Google Books node. Select 'Bookshelf Volume' from the Resource dropdown list. Select 'Get All' from the Operation dropdown list. Toggle My Library to true. This will return the information for your account. Click on the gears icon next to the Bookshelf ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Google Books1 > Parameters > shelfId. You can also add the following expression: {{$node[\"Google Books1\"].parameter[\"shelfId\"]}} . Click on Execute Node to run the workflow. In the screenshot below, you will notice that this node returns all the volumes in the bookshelf that we specified.","title":"4. Google Books2 node (getAll: bookshelfVolume)"},{"location":"integrations/nodes/n8n-nodes-base.googleCalendar/","text":"Google Calendar # Google Calendar is a time-management and scheduling calendar service developed by Google. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Calendar If a time-slot is available in a calendar Event Add a event to calendar Delete an event Retrieve an event Retrieve all events from a calendar Update an event Example Usage # This workflow allows you to add an event to Google Calendar. You can also find the workflow on the website. This example usage workflow uses the following two nodes. - Start - Google Calendar The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Google Calendar node # First of all, you'll have to enter credentials for the Google Calendar node. You can find out how to do that here . Select the Calendar from the dropdown list of the user's calendar list. Enter the start date of your event in the Start field. Enter the end date of your event in the End field. Click on Execute Node to run the workflow.","title":"Google Calendar"},{"location":"integrations/nodes/n8n-nodes-base.googleCalendar/#google-calendar","text":"Google Calendar is a time-management and scheduling calendar service developed by Google. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Google Calendar"},{"location":"integrations/nodes/n8n-nodes-base.googleCalendar/#basic-operations","text":"Calendar If a time-slot is available in a calendar Event Add a event to calendar Delete an event Retrieve an event Retrieve all events from a calendar Update an event","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.googleCalendar/#example-usage","text":"This workflow allows you to add an event to Google Calendar. You can also find the workflow on the website. This example usage workflow uses the following two nodes. - Start - Google Calendar The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.googleCalendar/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.googleCalendar/#2-google-calendar-node","text":"First of all, you'll have to enter credentials for the Google Calendar node. You can find out how to do that here . Select the Calendar from the dropdown list of the user's calendar list. Enter the start date of your event in the Start field. Enter the end date of your event in the End field. Click on Execute Node to run the workflow.","title":"2. Google Calendar node"},{"location":"integrations/nodes/n8n-nodes-base.googleChat/","text":"Google Chat # Google Chat is a messaging platform. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Member Get a membership Get all memberships in a space Message Create a message Delete a message Get a message Update a message Space Get a space Get all spaces the caller is a member of","title":"Google Chat"},{"location":"integrations/nodes/n8n-nodes-base.googleChat/#google-chat","text":"Google Chat is a messaging platform. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Google Chat"},{"location":"integrations/nodes/n8n-nodes-base.googleChat/#basic-operations","text":"Member Get a membership Get all memberships in a space Message Create a message Delete a message Get a message Update a message Space Get a space Get all spaces the caller is a member of","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.googleCloudFirestore/","text":"Google Cloud Firestore # Google Cloud Firestore is a flexible, scalable database for mobile, web, and server development from Firebase and Google Cloud. It keeps your data in-sync across client apps through real-time listeners and offers offline support for mobile and web. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Document Create a document Create/Update a document Delete a document Get a document Get all documents from a collection Runs a query against your documents Collection Get all root collections Example Usage # This workflow allows you to create, update, and get a document in the Google Cloud Firestore. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - Set - Google Cloud Firestore The final workflow should look like the following image. 1. Start node # The Start node exists by default when you create a new workflow. 2. Set node # We will use the Set node to set the name and id. Click on Add Value and select 'String' from the dropdown list. Enter name in the Name field. Enter n8n in the Value field. Click on Add Value and select 'Number' from the dropdown list. Enter id in the Name field. Enter 1 in the Value field. Click on Execute Node to run the node. In the screenshot below, you will notice that node sets the value for name and id. 3. Google Cloud Firestore node (document: create) # This node will create a new document in a collection in Google Cloud Firestore with the data from the previous node. First of all, you'll have to enter credentials for the Google Cloud Firestore node. You can find out how to do that here . Select 'Create' from the Operation dropdown list. Select a project from the Project ID dropdown list. Enter the name of your collection in the Collection field. Enter id, name in the Columns / attributes field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new document using the data from the previous node. 4. Set node # We will use the Set node to ensure that only the data that we set in this node gets passed on to the next nodes in the workflow. We will set a new value for name . Click on Add Value and select 'String' from the dropdown list. Enter name in the Name field. Enter nodemation in the Value field. Click on Add Value and select 'String' from the dropdown list. Enter document_id in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Google Cloud Firestore > Output Data > JSON > _id. You can also add the following expression: {{$node[\"Google Cloud Firestore\"].json[\"_id\"]}} . Toggle Keep Only Set to true . We set this option to true to ensure that only the data that we have set in this node get passed on to the next nodes in the workflow. Click on Execute Node to run the node. In the screenshot below, you will notice that the node sets the values of name and document_id . These values are passed to the next node in the workflow. 5. Google Cloud Firestore1 node (document: upsert) # This node will update the value of the name field in the document that we created using the Google Cloud Firestore node. Select the credentials that you entered in the previous Google Cloud Firestore node. Select 'Create/Update' from the Operation dropdown list. Click on the gears icon next to the Project ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Google Cloud Firestore > Parameters > projectId. You can also add the following expression: {{$node[\"Google Cloud Firestore\"].parameter[\"projectId\"]}} . Click on the gears icon next to the Collection field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Google Cloud Firestore > Parameters > collection. You can also add the following expression: {{$node[\"Google Cloud Firestore\"].parameter[\"collection\"]}} . Enter document_id in the Update Key field. Enter name in the Column /Attributes field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node updates the value of the name field in the document that we created using the Google Cloud Firestore node. 6. Google Cloud Firestore node (document: get) # This node will get the document that we created using the Google Cloud Firestore node. Select the credentials that you entered in the previous node. Click on the gears icon next to the Project ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Google Cloud Firestore > Parameters > projectId. You can also add the following expression: {{$node[\"Google Cloud Firestore\"].parameter[\"projectId\"]}} . Click on the gears icon next to the Collection field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Google Cloud Firestore > Parameters > collection. You can also add the following expression: {{$node[\"Google Cloud Firestore\"].parameter[\"collection\"]}} . Click on the gears icon next to the Document ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Set1 > Output Data > JSON > document_id. You can also add the following expression: {{$node[\"Set1\"].json[\"document_id\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the document that we created using the Google Cloud Firestore node.","title":"Google Cloud Firestore"},{"location":"integrations/nodes/n8n-nodes-base.googleCloudFirestore/#google-cloud-firestore","text":"Google Cloud Firestore is a flexible, scalable database for mobile, web, and server development from Firebase and Google Cloud. It keeps your data in-sync across client apps through real-time listeners and offers offline support for mobile and web. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Google Cloud Firestore"},{"location":"integrations/nodes/n8n-nodes-base.googleCloudFirestore/#basic-operations","text":"Document Create a document Create/Update a document Delete a document Get a document Get all documents from a collection Runs a query against your documents Collection Get all root collections","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.googleCloudFirestore/#example-usage","text":"This workflow allows you to create, update, and get a document in the Google Cloud Firestore. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - Set - Google Cloud Firestore The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.googleCloudFirestore/#1-start-node","text":"The Start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.googleCloudFirestore/#2-set-node","text":"We will use the Set node to set the name and id. Click on Add Value and select 'String' from the dropdown list. Enter name in the Name field. Enter n8n in the Value field. Click on Add Value and select 'Number' from the dropdown list. Enter id in the Name field. Enter 1 in the Value field. Click on Execute Node to run the node. In the screenshot below, you will notice that node sets the value for name and id.","title":"2. Set node"},{"location":"integrations/nodes/n8n-nodes-base.googleCloudFirestore/#3-google-cloud-firestore-node-document-create","text":"This node will create a new document in a collection in Google Cloud Firestore with the data from the previous node. First of all, you'll have to enter credentials for the Google Cloud Firestore node. You can find out how to do that here . Select 'Create' from the Operation dropdown list. Select a project from the Project ID dropdown list. Enter the name of your collection in the Collection field. Enter id, name in the Columns / attributes field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new document using the data from the previous node.","title":"3. Google Cloud Firestore node (document: create)"},{"location":"integrations/nodes/n8n-nodes-base.googleCloudFirestore/#4-set-node","text":"We will use the Set node to ensure that only the data that we set in this node gets passed on to the next nodes in the workflow. We will set a new value for name . Click on Add Value and select 'String' from the dropdown list. Enter name in the Name field. Enter nodemation in the Value field. Click on Add Value and select 'String' from the dropdown list. Enter document_id in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Google Cloud Firestore > Output Data > JSON > _id. You can also add the following expression: {{$node[\"Google Cloud Firestore\"].json[\"_id\"]}} . Toggle Keep Only Set to true . We set this option to true to ensure that only the data that we have set in this node get passed on to the next nodes in the workflow. Click on Execute Node to run the node. In the screenshot below, you will notice that the node sets the values of name and document_id . These values are passed to the next node in the workflow.","title":"4. Set node"},{"location":"integrations/nodes/n8n-nodes-base.googleCloudFirestore/#5-google-cloud-firestore1-node-document-upsert","text":"This node will update the value of the name field in the document that we created using the Google Cloud Firestore node. Select the credentials that you entered in the previous Google Cloud Firestore node. Select 'Create/Update' from the Operation dropdown list. Click on the gears icon next to the Project ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Google Cloud Firestore > Parameters > projectId. You can also add the following expression: {{$node[\"Google Cloud Firestore\"].parameter[\"projectId\"]}} . Click on the gears icon next to the Collection field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Google Cloud Firestore > Parameters > collection. You can also add the following expression: {{$node[\"Google Cloud Firestore\"].parameter[\"collection\"]}} . Enter document_id in the Update Key field. Enter name in the Column /Attributes field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node updates the value of the name field in the document that we created using the Google Cloud Firestore node.","title":"5. Google Cloud Firestore1 node (document: upsert)"},{"location":"integrations/nodes/n8n-nodes-base.googleCloudFirestore/#6-google-cloud-firestore-node-document-get","text":"This node will get the document that we created using the Google Cloud Firestore node. Select the credentials that you entered in the previous node. Click on the gears icon next to the Project ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Google Cloud Firestore > Parameters > projectId. You can also add the following expression: {{$node[\"Google Cloud Firestore\"].parameter[\"projectId\"]}} . Click on the gears icon next to the Collection field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Google Cloud Firestore > Parameters > collection. You can also add the following expression: {{$node[\"Google Cloud Firestore\"].parameter[\"collection\"]}} . Click on the gears icon next to the Document ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Set1 > Output Data > JSON > document_id. You can also add the following expression: {{$node[\"Set1\"].json[\"document_id\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the document that we created using the Google Cloud Firestore node.","title":"6. Google Cloud Firestore node (document: get)"},{"location":"integrations/nodes/n8n-nodes-base.googleCloudNaturalLanguage/","text":"Google Cloud Natural Language # Google Cloud Natural Language uses machine learning to reveal the structure and meaning of text. You can extract information about people, places, and events, and better understand social media sentiment and customer conversations. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Document Analyze Sentiment Example Usage # This workflow allows you to analyze the sentiment of feedback received via a Typeform submission and send a message on Mattermost if that feedback is negative. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Typeform Trigger - Google Cloud Natural Language - IF - Mattermost - No Operation, do nothing The final workflow should look like the following image. 1. Typeform Trigger node # This node will trigger the workflow when a feedback form is submitted. Make sure to create a feedback form for your event. Select 'Access Token' from the Authentication dropdown list. Enter the credentials for the Typeform Trigger node. You can find out how to do that here . Select the event feedback form from the Form dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node triggers the workflow when feedback is submitted. We will pass this feedback to the next nodes in the workflow. 2. Google Cloud Natural Language node (analyzeSentiment: document) # This node will analyze the sentiment of the feedback that we got from the previous node. We will pass the analysis score to the next node in the workflow. First of all, you'll have to enter credentials for the Google Cloud Natural Language node. You can find out how to enter credentials for this node here . Click on the gears icon next to the Content field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Typeform Trigger > Output Data > JSON > What did you think about the event? You can also add the following expression: {{$node[\"Typeform Trigger\"].json[\"What did you think about the event?\"]}} . If you want to analyze the sentiment for a different question, select that question instead. Click on Execute Node to run the node. In the screenshot below, you will notice that the node analyzes the sentiment of the feedback and gives a score based on that. 3. IF node # This node will check if the score we got from the previous node is smaller than 0 . If the score is smaller than 0 , it will return true otherwise false. Click on Add Condition and select 'Number'. Click on the gears icon next to the Value 1 field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Google Cloud Natural Language > Output Data > JSON > documentSentiment > score. You can also add the following expression: {{$node[\"Google Cloud Natural Language\"].json[\"documentSentiment\"][\"score\"]}} . Select 'Smaller' from the Operation dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node checks if the score that we received from the previous node is smaller than 0 . 4. Mattermost node (post: message) # This node will send the feedback and the analysis score to the Feedback channel in Mattermost. If you have a different channel, use that instead. Create a Mattermost node connected to the 'true' output of the IF node. You'll have to enter credentials for the Mattermost node. You can find out how to enter credentials for this node here . Select a channel from the Channel ID dropdown list. Click on the gears icon next to the Message field click on Add Expression . Enter the following message in the Expression field: You got a new feedback with a score of {{$node[\"Google Cloud Natural Language\"].json[\"documentSentiment\"][\"score\"]}}. Here is what it says:{{$node[\"Typeform Trigger\"].json[\"What did you think about the event?\"]}} . Click on Execute Node to run the workflow. In the screenshot below, you will notice that the node sends the feedback and the analysis score to the Feedback channel in Mattermost. 5. NoOp node # Adding this node here is optional, as the absence of this node won't make a difference to the functioning of the workflow. Create a NoOp node connected to the 'false' output of the IF node. Click on Execute Node to run the node. Activate workflow for production This example workflow uses the Typeform Trigger node. You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered when a new form is submitted.","title":"Google Cloud Natural Language"},{"location":"integrations/nodes/n8n-nodes-base.googleCloudNaturalLanguage/#google-cloud-natural-language","text":"Google Cloud Natural Language uses machine learning to reveal the structure and meaning of text. You can extract information about people, places, and events, and better understand social media sentiment and customer conversations. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Google Cloud Natural Language"},{"location":"integrations/nodes/n8n-nodes-base.googleCloudNaturalLanguage/#basic-operations","text":"Document Analyze Sentiment","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.googleCloudNaturalLanguage/#example-usage","text":"This workflow allows you to analyze the sentiment of feedback received via a Typeform submission and send a message on Mattermost if that feedback is negative. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Typeform Trigger - Google Cloud Natural Language - IF - Mattermost - No Operation, do nothing The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.googleCloudNaturalLanguage/#1-typeform-trigger-node","text":"This node will trigger the workflow when a feedback form is submitted. Make sure to create a feedback form for your event. Select 'Access Token' from the Authentication dropdown list. Enter the credentials for the Typeform Trigger node. You can find out how to do that here . Select the event feedback form from the Form dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node triggers the workflow when feedback is submitted. We will pass this feedback to the next nodes in the workflow.","title":"1. Typeform Trigger node"},{"location":"integrations/nodes/n8n-nodes-base.googleCloudNaturalLanguage/#2-google-cloud-natural-language-node-analyzesentiment-document","text":"This node will analyze the sentiment of the feedback that we got from the previous node. We will pass the analysis score to the next node in the workflow. First of all, you'll have to enter credentials for the Google Cloud Natural Language node. You can find out how to enter credentials for this node here . Click on the gears icon next to the Content field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Typeform Trigger > Output Data > JSON > What did you think about the event? You can also add the following expression: {{$node[\"Typeform Trigger\"].json[\"What did you think about the event?\"]}} . If you want to analyze the sentiment for a different question, select that question instead. Click on Execute Node to run the node. In the screenshot below, you will notice that the node analyzes the sentiment of the feedback and gives a score based on that.","title":"2. Google Cloud Natural Language node (analyzeSentiment: document)"},{"location":"integrations/nodes/n8n-nodes-base.googleCloudNaturalLanguage/#3-if-node","text":"This node will check if the score we got from the previous node is smaller than 0 . If the score is smaller than 0 , it will return true otherwise false. Click on Add Condition and select 'Number'. Click on the gears icon next to the Value 1 field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Google Cloud Natural Language > Output Data > JSON > documentSentiment > score. You can also add the following expression: {{$node[\"Google Cloud Natural Language\"].json[\"documentSentiment\"][\"score\"]}} . Select 'Smaller' from the Operation dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node checks if the score that we received from the previous node is smaller than 0 .","title":"3. IF node"},{"location":"integrations/nodes/n8n-nodes-base.googleCloudNaturalLanguage/#4-mattermost-node-post-message","text":"This node will send the feedback and the analysis score to the Feedback channel in Mattermost. If you have a different channel, use that instead. Create a Mattermost node connected to the 'true' output of the IF node. You'll have to enter credentials for the Mattermost node. You can find out how to enter credentials for this node here . Select a channel from the Channel ID dropdown list. Click on the gears icon next to the Message field click on Add Expression . Enter the following message in the Expression field: You got a new feedback with a score of {{$node[\"Google Cloud Natural Language\"].json[\"documentSentiment\"][\"score\"]}}. Here is what it says:{{$node[\"Typeform Trigger\"].json[\"What did you think about the event?\"]}} . Click on Execute Node to run the workflow. In the screenshot below, you will notice that the node sends the feedback and the analysis score to the Feedback channel in Mattermost.","title":"4. Mattermost node (post: message)"},{"location":"integrations/nodes/n8n-nodes-base.googleCloudNaturalLanguage/#5-noop-node","text":"Adding this node here is optional, as the absence of this node won't make a difference to the functioning of the workflow. Create a NoOp node connected to the 'false' output of the IF node. Click on Execute Node to run the node. Activate workflow for production This example workflow uses the Typeform Trigger node. You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered when a new form is submitted.","title":"5. NoOp node"},{"location":"integrations/nodes/n8n-nodes-base.googleCloudRealtimeDatabase/","text":"Google Cloud Realtime Database # Google Cloud Realtime Database is a cloud-hosted database. Data is stored as JSON and synchronized in realtime to every connected client. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Write data to a database Delete data from a database Get a record from a database Append to a list of data Update item on a database Example Usage # This workflow allows you to receive updates of the position of the ISS every minute and push it to a database using the Google Cloud Realtime Database node. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Cron - HTTP Request - Set - Google Cloud Realtime Database The final workflow should look like the following image. 1. Cron node # The Cron node will trigger the workflow every minute. Click on Add Cron Time . Select 'Every Minute' from the Mode dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the Cron node is configured to trigger the workflow every minute. 2. HTTP Request node (GET) # This node will make a GET request to the API https://api.wheretheiss.at/v1/satellites/25544/positions to fetch the position of the ISS. This information gets passed on to the next node in the workflow. Enter https://api.wheretheiss.at/v1/satellites/25544/positions in the URL field. Click on the Add Parameter button in the Query Parameters section. Enter timestamps in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Enter the following expression: {{Date.now()}} . This expression will return the current timestamp. Click on Execute Node to run the node. In the screenshot below, you will notice that the node makes a GET request to the API and returns the information about the location of the ISS. 3. Set node # We will use the Set node to ensure that only the data that we set in this node gets passed on to the next nodes in the workflow. Click on Add Value and select 'String' from the dropdown list. Enter latitude in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > HTTP Request > Output Data > JSON > 0 > latitude. You can also add the following expression: {{$node[\"HTTP Request\"].json[\"0\"][\"latitude\"]}} . Click on Add Value and select 'String' from the dropdown list. Enter longitude in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > HTTP Request > Output Data > JSON > 0 > longitude. You can also add the following expression: {{$node[\"HTTP Request\"].json[\"0\"][\"longitude\"]}} . Click on Add Value and select 'String' from the dropdown list. Enter timestamp in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > HTTP Request > Output Data > JSON > 0 > timpestamp. You can also add the following expression: {{$node[\"HTTP Request\"].json[\"0\"][\"timestamp\"]}} . Toggle Keep Only Set to true . We set this option to true to ensure that only the data that we have set in this node get passed on to the next nodes in the workflow. Click on Execute Node to run the node. In the screenshot below, you will notice that the node uses the data from the previous node and returns the data that we set for the workflow. 4. Google Cloud Realtime Database node (push) # This node will push the data from the previous node to the iss path in Google Cloud Realtime Database. If you have created a path with a different name, you can use that path instead. First of all, you'll have to enter credentials for the Google Cloud Realtime Database node. You can find out how to do that here . Select a project from the Project ID dropdown list. Select 'Push' from the Operation dropdown list. Enter a path in the Object Path field. Enter latitude, longitude, timestamp in the Columns / Attributes field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node pushes the data from the previous node to the iss path in Google Cloud Realtime Database. Activate workflow for production This example workflow uses the Cron node, which is a Trigger node. You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Cron node.","title":"Google Cloud Realtime Database"},{"location":"integrations/nodes/n8n-nodes-base.googleCloudRealtimeDatabase/#google-cloud-realtime-database","text":"Google Cloud Realtime Database is a cloud-hosted database. Data is stored as JSON and synchronized in realtime to every connected client. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Google Cloud Realtime Database"},{"location":"integrations/nodes/n8n-nodes-base.googleCloudRealtimeDatabase/#basic-operations","text":"Write data to a database Delete data from a database Get a record from a database Append to a list of data Update item on a database","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.googleCloudRealtimeDatabase/#example-usage","text":"This workflow allows you to receive updates of the position of the ISS every minute and push it to a database using the Google Cloud Realtime Database node. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Cron - HTTP Request - Set - Google Cloud Realtime Database The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.googleCloudRealtimeDatabase/#1-cron-node","text":"The Cron node will trigger the workflow every minute. Click on Add Cron Time . Select 'Every Minute' from the Mode dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the Cron node is configured to trigger the workflow every minute.","title":"1. Cron node"},{"location":"integrations/nodes/n8n-nodes-base.googleCloudRealtimeDatabase/#2-http-request-node-get","text":"This node will make a GET request to the API https://api.wheretheiss.at/v1/satellites/25544/positions to fetch the position of the ISS. This information gets passed on to the next node in the workflow. Enter https://api.wheretheiss.at/v1/satellites/25544/positions in the URL field. Click on the Add Parameter button in the Query Parameters section. Enter timestamps in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Enter the following expression: {{Date.now()}} . This expression will return the current timestamp. Click on Execute Node to run the node. In the screenshot below, you will notice that the node makes a GET request to the API and returns the information about the location of the ISS.","title":"2. HTTP Request node (GET)"},{"location":"integrations/nodes/n8n-nodes-base.googleCloudRealtimeDatabase/#3-set-node","text":"We will use the Set node to ensure that only the data that we set in this node gets passed on to the next nodes in the workflow. Click on Add Value and select 'String' from the dropdown list. Enter latitude in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > HTTP Request > Output Data > JSON > 0 > latitude. You can also add the following expression: {{$node[\"HTTP Request\"].json[\"0\"][\"latitude\"]}} . Click on Add Value and select 'String' from the dropdown list. Enter longitude in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > HTTP Request > Output Data > JSON > 0 > longitude. You can also add the following expression: {{$node[\"HTTP Request\"].json[\"0\"][\"longitude\"]}} . Click on Add Value and select 'String' from the dropdown list. Enter timestamp in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > HTTP Request > Output Data > JSON > 0 > timpestamp. You can also add the following expression: {{$node[\"HTTP Request\"].json[\"0\"][\"timestamp\"]}} . Toggle Keep Only Set to true . We set this option to true to ensure that only the data that we have set in this node get passed on to the next nodes in the workflow. Click on Execute Node to run the node. In the screenshot below, you will notice that the node uses the data from the previous node and returns the data that we set for the workflow.","title":"3. Set node"},{"location":"integrations/nodes/n8n-nodes-base.googleCloudRealtimeDatabase/#4-google-cloud-realtime-database-node-push","text":"This node will push the data from the previous node to the iss path in Google Cloud Realtime Database. If you have created a path with a different name, you can use that path instead. First of all, you'll have to enter credentials for the Google Cloud Realtime Database node. You can find out how to do that here . Select a project from the Project ID dropdown list. Select 'Push' from the Operation dropdown list. Enter a path in the Object Path field. Enter latitude, longitude, timestamp in the Columns / Attributes field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node pushes the data from the previous node to the iss path in Google Cloud Realtime Database. Activate workflow for production This example workflow uses the Cron node, which is a Trigger node. You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Cron node.","title":"4. Google Cloud Realtime Database node (push)"},{"location":"integrations/nodes/n8n-nodes-base.googleContacts/","text":"Google Contacts # Google Contacts is Google's contact management tool that is available in its free email service Gmail, as a standalone service, and as a part of Google's business-oriented suite of web apps Google Apps. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Contact Create a contact Delete a contact Get a contact Retrieve all contacts Update a contact Example Usage # This workflow allows you to create, update, and get a contact from Google Contacts. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Google Contacts The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Google Contacts node (create: contact) # First of all, you'll have to enter credentials for the Google Contacts node. You can find out how to do that here . Enter the family name in the Family Name field. Enter the given name in the Given Name field. Click on Execute Node to run the node. 3. Google Contacts1 node (update: contact) # Select the credentials that you entered in the previous node. Select 'Update' from the Operation dropdown list. Click on the gears icon next to the Contact ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Google Contacts > Output Data > JSON > contactId. You can also add the following expression: {{$node[\"Google Contacts\"].json[\"contactId\"]}} . Select * from the Fields dropdown list. Click on the Add Field button and select Company . Click on the Add Company button. Toggle the value to true for the Current field. Enter the company's domain in the Domain field. Enter the company's name in the Name field. Enter the title in the Title field. Click on Execute Node to run the node. 4. Google Contacts2 node (get: contact) # Select the credentials that you entered in the previous node. Select 'Get' from the Operation dropdown list. Click on the gears icon next to the Contact ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Google Contacts > Output Data > JSON > contactId. You can also add the following expression: {{$node[\"Google Contacts\"].json[\"contactId\"]}} . Select 'Organizations' from the Fields dropdown list. Click on Execute Node to run the node.","title":"Google Contacts"},{"location":"integrations/nodes/n8n-nodes-base.googleContacts/#google-contacts","text":"Google Contacts is Google's contact management tool that is available in its free email service Gmail, as a standalone service, and as a part of Google's business-oriented suite of web apps Google Apps. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Google Contacts"},{"location":"integrations/nodes/n8n-nodes-base.googleContacts/#basic-operations","text":"Contact Create a contact Delete a contact Get a contact Retrieve all contacts Update a contact","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.googleContacts/#example-usage","text":"This workflow allows you to create, update, and get a contact from Google Contacts. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Google Contacts The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.googleContacts/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.googleContacts/#2-google-contacts-node-create-contact","text":"First of all, you'll have to enter credentials for the Google Contacts node. You can find out how to do that here . Enter the family name in the Family Name field. Enter the given name in the Given Name field. Click on Execute Node to run the node.","title":"2. Google Contacts node (create: contact)"},{"location":"integrations/nodes/n8n-nodes-base.googleContacts/#3-google-contacts1-node-update-contact","text":"Select the credentials that you entered in the previous node. Select 'Update' from the Operation dropdown list. Click on the gears icon next to the Contact ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Google Contacts > Output Data > JSON > contactId. You can also add the following expression: {{$node[\"Google Contacts\"].json[\"contactId\"]}} . Select * from the Fields dropdown list. Click on the Add Field button and select Company . Click on the Add Company button. Toggle the value to true for the Current field. Enter the company's domain in the Domain field. Enter the company's name in the Name field. Enter the title in the Title field. Click on Execute Node to run the node.","title":"3. Google Contacts1 node (update: contact)"},{"location":"integrations/nodes/n8n-nodes-base.googleContacts/#4-google-contacts2-node-get-contact","text":"Select the credentials that you entered in the previous node. Select 'Get' from the Operation dropdown list. Click on the gears icon next to the Contact ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Google Contacts > Output Data > JSON > contactId. You can also add the following expression: {{$node[\"Google Contacts\"].json[\"contactId\"]}} . Select 'Organizations' from the Fields dropdown list. Click on Execute Node to run the node.","title":"4. Google Contacts2 node (get: contact)"},{"location":"integrations/nodes/n8n-nodes-base.googleDocs/","text":"Google Docs # Google Docs is a web-based word processor that is part of Google's office software suite within its Google Drive service. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic operations # Document Create Get Update Example usage # This workflow allows you to create a new Google Doc and add your desired text to it. This example usage workflow uses the following nodes. - Start - Google Docs The final workflow should look like the following image. 1. Start node # The Start node exists by default when you create a new workflow. 2. Google Docs node - create # The Document resource is selected by default. Configure the remaining parameters as follows: From the Authentication dropdown select your desired method and the corresponding Credentials . From the Operation dropdown select Create . From the Drive dropdown select which of your drives this file will be created in. My Drive is selected by default. From the Folder dropdown select which of you drive folders this file will be created in. The root folder ( / ) is selected by default. In the Title field enter the name of your new Google Doc. 3. Google Docs node - update # The Document resource is selected by default. Configure the remaining parameters as follows: From the Operation dropdown select Update . In the Doc ID or URL field, enter the document ID or URL of the file created by the previous node. From Actions , configure the fields as follows: Object: Select the object of the action. Here we use 'Text'. Action: Select the action to be performed on the object. Here we use 'Insert'. Insert Segment: Select where in the document the action should be performed. Here we use 'Body'. Insert Location: Select the location within the selected Segment. Here we use 'At end of specific location'. Text: Enter the text to be inserted.","title":"Google Docs"},{"location":"integrations/nodes/n8n-nodes-base.googleDocs/#google-docs","text":"Google Docs is a web-based word processor that is part of Google's office software suite within its Google Drive service. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Google Docs"},{"location":"integrations/nodes/n8n-nodes-base.googleDocs/#basic-operations","text":"Document Create Get Update","title":"Basic operations"},{"location":"integrations/nodes/n8n-nodes-base.googleDocs/#example-usage","text":"This workflow allows you to create a new Google Doc and add your desired text to it. This example usage workflow uses the following nodes. - Start - Google Docs The final workflow should look like the following image.","title":"Example usage"},{"location":"integrations/nodes/n8n-nodes-base.googleDocs/#1-start-node","text":"The Start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.googleDocs/#2-google-docs-node-create","text":"The Document resource is selected by default. Configure the remaining parameters as follows: From the Authentication dropdown select your desired method and the corresponding Credentials . From the Operation dropdown select Create . From the Drive dropdown select which of your drives this file will be created in. My Drive is selected by default. From the Folder dropdown select which of you drive folders this file will be created in. The root folder ( / ) is selected by default. In the Title field enter the name of your new Google Doc.","title":"2. Google Docs node - create"},{"location":"integrations/nodes/n8n-nodes-base.googleDocs/#3-google-docs-node-update","text":"The Document resource is selected by default. Configure the remaining parameters as follows: From the Operation dropdown select Update . In the Doc ID or URL field, enter the document ID or URL of the file created by the previous node. From Actions , configure the fields as follows: Object: Select the object of the action. Here we use 'Text'. Action: Select the action to be performed on the object. Here we use 'Insert'. Insert Segment: Select where in the document the action should be performed. Here we use 'Body'. Insert Location: Select the location within the selected Segment. Here we use 'At end of specific location'. Text: Enter the text to be inserted.","title":"3. Google Docs node - update"},{"location":"integrations/nodes/n8n-nodes-base.googleDrive/","text":"Google Drive # Google Drive is a file storage and synchronization service developed by Google. It allows users to store files on their servers, synchronize files across devices, and share files. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Drive Create a drive Delete a drive Get a drive List all drives Update a drive File Copy a file Delete a file Download a file List files and folders Share a file Update a file Upload a file Folder Create a folder Delete a folder Share a folder Example Usage # This workflow allows you to download a file from Google Drive. You can also find the workflow on the website. This example usage workflow uses the following two nodes. - Start - Google Drive - Write Binary File The final workflow should look like the following image. 1. Start node # The Start node exists by default when you create a new workflow. 2. Google Sheets node # First of all, you'll have to enter credentials for the Google Drive node. You can find out how to do that here , in the section 'Google Drive / Sheets API'. Select the authentication method you plan to use from the Authentication dropdown list. Select 'Download' from the Operation dropdown list. Copy the string of characters located between /d/ and /edit in your Google Drive URL. Paste that string in the File ID field. 3. Write Binary File node # Enter the destination file path in the File Name field. Click on Execute Node to run the workflow. FAQs # How do I list all files/folders within a folder? # To list all the files and folders within a folder, follow the steps mentioned below. Toggle Use Query String to true . Copy the string of characters located after https://drive.google.com/drive/u/0/folders/ . This string is the folder ID. Enter 'FOLDER_ID' in parents in the Query String field. Replace FOLDER_ID with the folder ID you copied in the previous step. There are several additional options available to fine grain the listed results. Refer to Search for files and folders: Querystring for more information.","title":"Google Drive"},{"location":"integrations/nodes/n8n-nodes-base.googleDrive/#google-drive","text":"Google Drive is a file storage and synchronization service developed by Google. It allows users to store files on their servers, synchronize files across devices, and share files. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Google Drive"},{"location":"integrations/nodes/n8n-nodes-base.googleDrive/#basic-operations","text":"Drive Create a drive Delete a drive Get a drive List all drives Update a drive File Copy a file Delete a file Download a file List files and folders Share a file Update a file Upload a file Folder Create a folder Delete a folder Share a folder","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.googleDrive/#example-usage","text":"This workflow allows you to download a file from Google Drive. You can also find the workflow on the website. This example usage workflow uses the following two nodes. - Start - Google Drive - Write Binary File The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.googleDrive/#1-start-node","text":"The Start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.googleDrive/#2-google-sheets-node","text":"First of all, you'll have to enter credentials for the Google Drive node. You can find out how to do that here , in the section 'Google Drive / Sheets API'. Select the authentication method you plan to use from the Authentication dropdown list. Select 'Download' from the Operation dropdown list. Copy the string of characters located between /d/ and /edit in your Google Drive URL. Paste that string in the File ID field.","title":"2. Google Sheets node"},{"location":"integrations/nodes/n8n-nodes-base.googleDrive/#3-write-binary-file-node","text":"Enter the destination file path in the File Name field. Click on Execute Node to run the workflow.","title":"3. Write Binary File node"},{"location":"integrations/nodes/n8n-nodes-base.googleDrive/#faqs","text":"","title":"FAQs"},{"location":"integrations/nodes/n8n-nodes-base.googleDrive/#how-do-i-list-all-filesfolders-within-a-folder","text":"To list all the files and folders within a folder, follow the steps mentioned below. Toggle Use Query String to true . Copy the string of characters located after https://drive.google.com/drive/u/0/folders/ . This string is the folder ID. Enter 'FOLDER_ID' in parents in the Query String field. Replace FOLDER_ID with the folder ID you copied in the previous step. There are several additional options available to fine grain the listed results. Refer to Search for files and folders: Querystring for more information.","title":"How do I list all files/folders within a folder?"},{"location":"integrations/nodes/n8n-nodes-base.googlePerspective/","text":"Google Perspective # Google Perspective is a free API that uses machine learning to identify \"toxic\" comments, making it easier to host better conversations online. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic operations # Analyze Comment Example usage # This workflow allows you to analyze a comment for profanity. This example usage workflow uses the following nodes. - Start - Google Perspective The final workflow should look like the following image. 1. Start node # The Start node exists by default when you create a new workflow. 2. Google Perspective node # First enter credentials for the Google Perspective node. You can find out how to enter credentials for this node here . The Analyze Comment Operation is selected by default. In the Text field enter the comment to be analyzed. From the Properties section click Add Attribute . For Attribute Name select Profanity . For Score Threshold leave the 0.00 default setting to return all scores. Click on Execute Node to run the workflow.","title":"Google Perspective"},{"location":"integrations/nodes/n8n-nodes-base.googlePerspective/#google-perspective","text":"Google Perspective is a free API that uses machine learning to identify \"toxic\" comments, making it easier to host better conversations online. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Google Perspective"},{"location":"integrations/nodes/n8n-nodes-base.googlePerspective/#basic-operations","text":"Analyze Comment","title":"Basic operations"},{"location":"integrations/nodes/n8n-nodes-base.googlePerspective/#example-usage","text":"This workflow allows you to analyze a comment for profanity. This example usage workflow uses the following nodes. - Start - Google Perspective The final workflow should look like the following image.","title":"Example usage"},{"location":"integrations/nodes/n8n-nodes-base.googlePerspective/#1-start-node","text":"The Start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.googlePerspective/#2-google-perspective-node","text":"First enter credentials for the Google Perspective node. You can find out how to enter credentials for this node here . The Analyze Comment Operation is selected by default. In the Text field enter the comment to be analyzed. From the Properties section click Add Attribute . For Attribute Name select Profanity . For Score Threshold leave the 0.00 default setting to return all scores. Click on Execute Node to run the workflow.","title":"2. Google Perspective node"},{"location":"integrations/nodes/n8n-nodes-base.googleSheets/","text":"Google Sheets # Google Sheets is a web-based spreadsheet program that is part of Google's office software suite within its Google Drive service. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Spreadsheet Create a spreadsheet Sheet Append data to a sheet Clear data from a sheet Create a new sheet Delete columns and rows from a sheet Look up a specific column value and return the matching row Read data from a sheet Remove a sheet Update rows in a sheet Example Usage # This workflow allows you to append, lookup, update, and read data from Google Sheets. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - Set - Google Sheets The final workflow should look like the following image. 1. Start node # The Start node exists by default when you create a new workflow. 2. Set node # This example workflow uses the Set node to generate data that we want to add to Google Sheets. You can also use other nodes, for example, the HTTP Request node, to get the data you want to add to the Google Sheets. Click on the Add Value button and select 'String' from the dropdown list. Enter Name in the Name field. Enter the name for a house in the Value field. Click on the Add Value button and select 'String' from the dropdown list. Enter Rent in the Name field. Enter the rent of the house along with the currency in the Value field. For example, $1000 . Click on the Add Value button and select 'String' from the dropdown list. Enter City in the Name field. Enter the name of the city in the Value field. Click on the Add Value button and select 'Number' from the dropdown list. Enter ID in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Paste the following expression: {{Math.floor(Math.random()*1000)}} . This expression will generate a three-digit random number. Click on Execute Node to run the node. In the screenshot below, you will notice that the Set node has created data that will be passed to the next nodes in the workflow. Also, the output shows a random three-digit number as the ID, created by the expression. 3. Google Sheets node (Append) # Creating a Google Sheets spreadsheet # Create a new Google Sheets spreadsheet. In your spreadsheet, enter ID , Name , Rent , and City in the cells A1, B1, C1, and D1, respectively. Copy the string of characters located between /d/ and /edit in your spreadsheet URL. This string is the Spreadsheet ID, which we will use in the Google Sheets node. Configure the Google Sheets node # This Google Sheets node will add the data from the Set node in a new row to the Google Sheets that we will specify using the Spreadsheet ID. Select 'OAuth2' from the Authentication dropdown list. First of all, you'll have to enter credentials for the Google Sheets node. You can find out how to enter credentials for this node here . Select 'Append' from the Operation dropdown list. Paste the Spreadsheet ID you copied in the previous step, in the Spreadsheet ID field. In the Range field, enter the range of columns to append the data to your spreadsheet. Make sure that your range includes enough columns for all the data in the Set node. For this workflow, enter A:D in the Range field. Click on the Add Option button and select 'Value Input Mode' from the dropdown list. Select 'User Entered' from the Value Input Mode dropdown list. Refer to the FAQs for more information on why we used this option. Click on Execute Node to run the workflow. In the screenshot below, you will observe that the node adds the data from the Set node to the Google Sheets. You will also notice that the values get added in the format they are set. 4. Google Sheets1 node (Lookup) # This node will return the entries from the Google Sheets that have Berlin as the City. Feel free to change the city name to something else but make sure you have at least one record with the city name you look for in your Google Sheets spreadsheet. Select 'OAuth2' from the Authentication dropdown list. Select the credentials that you entered in the previous Google Sheets node. Select 'Lookup' from the Operation dropdown list. In the Spreadsheet ID field, enter the same string used in the previous Google Sheets node. Enter City in the Lookup Column field. Enter Berlin in the Lookup Value field. Click on the Add Option button and select 'Return All Matches' from the dropdown list. Toggle Return All Matches to true. This option returns all the entries that contain Berlin as the City. Refer to the FAQs for more information. Click on the Add Option button and select 'Value Render Mode' from the dropdown list. This option determines how the values should render in the output. The 'Unformatted Value' option returns the data without formatting it. Refer to the FAQs for more information on why we used this option. Click on Execute Node to run the workflow. In the screenshot below, you will notice that the node returns all the entries that contain Berlin as the City. The output is unformatted and is passed on to the next nodes in the workflow. 5. Set1 node # We will use expressions to get the data from the previous node and increase the rent by $100 for the houses in Berlin. Click on the Add Value button and select 'String' from the dropdown list. Enter Name in the Name field. Click on the gears icon next to the Value field click on Add Expression . Select the following in the Variable Selector section: Nodes > Google Sheets1 > Output Data > JSON > Name. You can also add the following expression: {{$node[\"Google Sheets1\"].json[\"Name\"]}} . Click on the Add Value button and select 'String' from the dropdown list. Enter City in the Name field. Click on the gears icon next to the Value field click on Add Expression . Select the following in the Variable Selector section: Nodes > Google Sheets1 > Output Data > JSON > City. You can also add the following expression: {{$node[\"Google Sheets1\"].json[\"City\"]}} . Click on the Add Value button and select 'Number' from the dropdown list. Click on the gears icon next to the Value field click on Add Expression . Paste the following expression: {{$node[\"Google Sheets1\"].json[\"Rent\"]+100}} . This expression will increase the rent by $100. Click on the Add Value button and select 'Number' from the dropdown list. Enter ID in the Name field. Click on the gears icon next to the Value field click on Add Expression . Select the following in the Variable Selector section: Nodes > Google Sheets1 > Output Data > JSON > ID. You can also add the following expression: {{$node[\"Google Sheets1\"].json[\"ID\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node uses an expression to get the data from the previous node and increases the rent of the houses by $100. This new data will be passed to the next nodes in the workflow. 6. Google Sheets2 node (Update) # This node will update the rent for the houses in Berlin with the new rent set in the previous node. Select 'OAuth2' in the Authentication field. Select the credentials that you entered in the previous Google Sheets node. Select 'Update' from the Operation dropdown list. In the Spreadsheet ID field, enter the same string used in the previous Google Sheets node. In the Range field, enter the same range used in the previous Google Sheets node. Enter ID in the Key field. Click on the Add Option button and select 'Value Input Mode' from the dropdown list. Select 'User Entered' from the Value Input Mode dropdown list. Refer to the FAQs for more information on why we used this option. Click on Execute Node to run the workflow. In the screenshot below, you will notice that this node updates the rent values of the houses in Berlin based on the ID in the Google Sheets. You will also see that the updated values are in the correct format. 7. Google Sheets3 node (Read) # This node will read the data from Google Sheets. Select 'OAuth2' in the Authentication field. Select the credentials that you entered in the previous Google Sheets node. Select 'Read' from the Operation dropdown list. In the Spreadsheet ID field, enter the same string used in the previous Google Sheets node. In the Range field, enter the same range used in the previous Google Sheets node. Click on the Add Option button and select 'Value Render Mode' from the dropdown list. Select 'Formatted Value' from the Value Render Mode dropdown list. Refer to the FAQs for more information on why we used this option. Click on Execute Node to run the workflow. In the screenshot below, you will notice that this node returns all the values from the Google Sheets in the appropriate format. FAQs # What are the various formats to read the data from the Google Sheets? # There are three different formats to read the data from the Google Sheets. Unformatted Value: In this mode, the node calculates the values, but doesn't format them. For example, if cell A1 is 1.23, and cell A2 is =A1, and the format of these cells is currency, then values returned will be of the format number. For cell A1 and A2, the values returned will be 1.23. Formula: In this mode, the node will return the formula. The node does not calculate the values. For example, if cell A1 is 1.23, and cell A2 is =A1, and the format of these cells is currency, then the value returned will be of the format number. The value returned for cell A2 will be =A1. Formatted Value: In this mode, the node calculates the values and returns the values with the cells' format. For example, if cell A1 is 1.23, and cell A2 is =A1, and the format of these cells is currency, then the values returned will be $1.23. To change the format, click on Add Option and select 'Value Render Mode' from the dropdown list. Select the appropriate option you want your output to be returned to from the Value Render Mode dropdown list. How to enter values in the correct format? # There are two different formats you can use to add/update data in Google Sheets. Raw: This is the default format. In this format, the values are stored as-is and not parsed. For example, the node stores the text 2020-10-01 as a string in the Google Sheets. User Entered: In this format, the node parse the values. It follows the rules that are applied when entering text into the cell via the Google Sheet UI. For example, the node stores the text 2020-10-01 as a date in the Google Sheets. To change the format, click on Add Option and select 'Value Input Mode' from the dropdown list. Select the appropriate option you want your data to be stored in, from the Value Input Mode dropdown list. How to append an array in the Google Sheets? # To insert the data in Google Sheets, you have to first convert the data in a valid JSON (key, value) format. You can use the Function node to convert the array into JSON format. How to return all the values with the Lookup operation? # By default, the Lookup operation returns only the first value that it matches. To return all the values that match, click on Add Option and select 'Return All Matches'. Toggle Return All Matches to true. How to specify a sheet? # By default, the Google Sheets node will operate on the default sheet, Sheet 1 . If you rename the sheet or want to use a different sheet, you have to specify the name of the sheet. You can do that in the Range field. For example, if you need to use a sheet named n8n for the range A to H , enter n8n!A:H in the Range field.","title":"Google Sheets"},{"location":"integrations/nodes/n8n-nodes-base.googleSheets/#google-sheets","text":"Google Sheets is a web-based spreadsheet program that is part of Google's office software suite within its Google Drive service. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Google Sheets"},{"location":"integrations/nodes/n8n-nodes-base.googleSheets/#basic-operations","text":"Spreadsheet Create a spreadsheet Sheet Append data to a sheet Clear data from a sheet Create a new sheet Delete columns and rows from a sheet Look up a specific column value and return the matching row Read data from a sheet Remove a sheet Update rows in a sheet","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.googleSheets/#example-usage","text":"This workflow allows you to append, lookup, update, and read data from Google Sheets. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - Set - Google Sheets The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.googleSheets/#1-start-node","text":"The Start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.googleSheets/#2-set-node","text":"This example workflow uses the Set node to generate data that we want to add to Google Sheets. You can also use other nodes, for example, the HTTP Request node, to get the data you want to add to the Google Sheets. Click on the Add Value button and select 'String' from the dropdown list. Enter Name in the Name field. Enter the name for a house in the Value field. Click on the Add Value button and select 'String' from the dropdown list. Enter Rent in the Name field. Enter the rent of the house along with the currency in the Value field. For example, $1000 . Click on the Add Value button and select 'String' from the dropdown list. Enter City in the Name field. Enter the name of the city in the Value field. Click on the Add Value button and select 'Number' from the dropdown list. Enter ID in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Paste the following expression: {{Math.floor(Math.random()*1000)}} . This expression will generate a three-digit random number. Click on Execute Node to run the node. In the screenshot below, you will notice that the Set node has created data that will be passed to the next nodes in the workflow. Also, the output shows a random three-digit number as the ID, created by the expression.","title":"2. Set node"},{"location":"integrations/nodes/n8n-nodes-base.googleSheets/#3-google-sheets-node-append","text":"","title":"3. Google Sheets node (Append)"},{"location":"integrations/nodes/n8n-nodes-base.googleSheets/#creating-a-google-sheets-spreadsheet","text":"Create a new Google Sheets spreadsheet. In your spreadsheet, enter ID , Name , Rent , and City in the cells A1, B1, C1, and D1, respectively. Copy the string of characters located between /d/ and /edit in your spreadsheet URL. This string is the Spreadsheet ID, which we will use in the Google Sheets node.","title":"Creating a Google Sheets spreadsheet"},{"location":"integrations/nodes/n8n-nodes-base.googleSheets/#configure-the-google-sheets-node","text":"This Google Sheets node will add the data from the Set node in a new row to the Google Sheets that we will specify using the Spreadsheet ID. Select 'OAuth2' from the Authentication dropdown list. First of all, you'll have to enter credentials for the Google Sheets node. You can find out how to enter credentials for this node here . Select 'Append' from the Operation dropdown list. Paste the Spreadsheet ID you copied in the previous step, in the Spreadsheet ID field. In the Range field, enter the range of columns to append the data to your spreadsheet. Make sure that your range includes enough columns for all the data in the Set node. For this workflow, enter A:D in the Range field. Click on the Add Option button and select 'Value Input Mode' from the dropdown list. Select 'User Entered' from the Value Input Mode dropdown list. Refer to the FAQs for more information on why we used this option. Click on Execute Node to run the workflow. In the screenshot below, you will observe that the node adds the data from the Set node to the Google Sheets. You will also notice that the values get added in the format they are set.","title":"Configure the Google Sheets node"},{"location":"integrations/nodes/n8n-nodes-base.googleSheets/#4-google-sheets1-node-lookup","text":"This node will return the entries from the Google Sheets that have Berlin as the City. Feel free to change the city name to something else but make sure you have at least one record with the city name you look for in your Google Sheets spreadsheet. Select 'OAuth2' from the Authentication dropdown list. Select the credentials that you entered in the previous Google Sheets node. Select 'Lookup' from the Operation dropdown list. In the Spreadsheet ID field, enter the same string used in the previous Google Sheets node. Enter City in the Lookup Column field. Enter Berlin in the Lookup Value field. Click on the Add Option button and select 'Return All Matches' from the dropdown list. Toggle Return All Matches to true. This option returns all the entries that contain Berlin as the City. Refer to the FAQs for more information. Click on the Add Option button and select 'Value Render Mode' from the dropdown list. This option determines how the values should render in the output. The 'Unformatted Value' option returns the data without formatting it. Refer to the FAQs for more information on why we used this option. Click on Execute Node to run the workflow. In the screenshot below, you will notice that the node returns all the entries that contain Berlin as the City. The output is unformatted and is passed on to the next nodes in the workflow.","title":"4. Google Sheets1 node (Lookup)"},{"location":"integrations/nodes/n8n-nodes-base.googleSheets/#5-set1-node","text":"We will use expressions to get the data from the previous node and increase the rent by $100 for the houses in Berlin. Click on the Add Value button and select 'String' from the dropdown list. Enter Name in the Name field. Click on the gears icon next to the Value field click on Add Expression . Select the following in the Variable Selector section: Nodes > Google Sheets1 > Output Data > JSON > Name. You can also add the following expression: {{$node[\"Google Sheets1\"].json[\"Name\"]}} . Click on the Add Value button and select 'String' from the dropdown list. Enter City in the Name field. Click on the gears icon next to the Value field click on Add Expression . Select the following in the Variable Selector section: Nodes > Google Sheets1 > Output Data > JSON > City. You can also add the following expression: {{$node[\"Google Sheets1\"].json[\"City\"]}} . Click on the Add Value button and select 'Number' from the dropdown list. Click on the gears icon next to the Value field click on Add Expression . Paste the following expression: {{$node[\"Google Sheets1\"].json[\"Rent\"]+100}} . This expression will increase the rent by $100. Click on the Add Value button and select 'Number' from the dropdown list. Enter ID in the Name field. Click on the gears icon next to the Value field click on Add Expression . Select the following in the Variable Selector section: Nodes > Google Sheets1 > Output Data > JSON > ID. You can also add the following expression: {{$node[\"Google Sheets1\"].json[\"ID\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node uses an expression to get the data from the previous node and increases the rent of the houses by $100. This new data will be passed to the next nodes in the workflow.","title":"5. Set1 node"},{"location":"integrations/nodes/n8n-nodes-base.googleSheets/#6-google-sheets2-node-update","text":"This node will update the rent for the houses in Berlin with the new rent set in the previous node. Select 'OAuth2' in the Authentication field. Select the credentials that you entered in the previous Google Sheets node. Select 'Update' from the Operation dropdown list. In the Spreadsheet ID field, enter the same string used in the previous Google Sheets node. In the Range field, enter the same range used in the previous Google Sheets node. Enter ID in the Key field. Click on the Add Option button and select 'Value Input Mode' from the dropdown list. Select 'User Entered' from the Value Input Mode dropdown list. Refer to the FAQs for more information on why we used this option. Click on Execute Node to run the workflow. In the screenshot below, you will notice that this node updates the rent values of the houses in Berlin based on the ID in the Google Sheets. You will also see that the updated values are in the correct format.","title":"6. Google Sheets2 node (Update)"},{"location":"integrations/nodes/n8n-nodes-base.googleSheets/#7-google-sheets3-node-read","text":"This node will read the data from Google Sheets. Select 'OAuth2' in the Authentication field. Select the credentials that you entered in the previous Google Sheets node. Select 'Read' from the Operation dropdown list. In the Spreadsheet ID field, enter the same string used in the previous Google Sheets node. In the Range field, enter the same range used in the previous Google Sheets node. Click on the Add Option button and select 'Value Render Mode' from the dropdown list. Select 'Formatted Value' from the Value Render Mode dropdown list. Refer to the FAQs for more information on why we used this option. Click on Execute Node to run the workflow. In the screenshot below, you will notice that this node returns all the values from the Google Sheets in the appropriate format.","title":"7. Google Sheets3 node (Read)"},{"location":"integrations/nodes/n8n-nodes-base.googleSheets/#faqs","text":"","title":"FAQs"},{"location":"integrations/nodes/n8n-nodes-base.googleSheets/#what-are-the-various-formats-to-read-the-data-from-the-google-sheets","text":"There are three different formats to read the data from the Google Sheets. Unformatted Value: In this mode, the node calculates the values, but doesn't format them. For example, if cell A1 is 1.23, and cell A2 is =A1, and the format of these cells is currency, then values returned will be of the format number. For cell A1 and A2, the values returned will be 1.23. Formula: In this mode, the node will return the formula. The node does not calculate the values. For example, if cell A1 is 1.23, and cell A2 is =A1, and the format of these cells is currency, then the value returned will be of the format number. The value returned for cell A2 will be =A1. Formatted Value: In this mode, the node calculates the values and returns the values with the cells' format. For example, if cell A1 is 1.23, and cell A2 is =A1, and the format of these cells is currency, then the values returned will be $1.23. To change the format, click on Add Option and select 'Value Render Mode' from the dropdown list. Select the appropriate option you want your output to be returned to from the Value Render Mode dropdown list.","title":"What are the various formats to read the data from the Google Sheets?"},{"location":"integrations/nodes/n8n-nodes-base.googleSheets/#how-to-enter-values-in-the-correct-format","text":"There are two different formats you can use to add/update data in Google Sheets. Raw: This is the default format. In this format, the values are stored as-is and not parsed. For example, the node stores the text 2020-10-01 as a string in the Google Sheets. User Entered: In this format, the node parse the values. It follows the rules that are applied when entering text into the cell via the Google Sheet UI. For example, the node stores the text 2020-10-01 as a date in the Google Sheets. To change the format, click on Add Option and select 'Value Input Mode' from the dropdown list. Select the appropriate option you want your data to be stored in, from the Value Input Mode dropdown list.","title":"How to enter values in the correct format?"},{"location":"integrations/nodes/n8n-nodes-base.googleSheets/#how-to-append-an-array-in-the-google-sheets","text":"To insert the data in Google Sheets, you have to first convert the data in a valid JSON (key, value) format. You can use the Function node to convert the array into JSON format.","title":"How to append an array in the Google Sheets?"},{"location":"integrations/nodes/n8n-nodes-base.googleSheets/#how-to-return-all-the-values-with-the-lookup-operation","text":"By default, the Lookup operation returns only the first value that it matches. To return all the values that match, click on Add Option and select 'Return All Matches'. Toggle Return All Matches to true.","title":"How to return all the values with the Lookup operation?"},{"location":"integrations/nodes/n8n-nodes-base.googleSheets/#how-to-specify-a-sheet","text":"By default, the Google Sheets node will operate on the default sheet, Sheet 1 . If you rename the sheet or want to use a different sheet, you have to specify the name of the sheet. You can do that in the Range field. For example, if you need to use a sheet named n8n for the range A to H , enter n8n!A:H in the Range field.","title":"How to specify a sheet?"},{"location":"integrations/nodes/n8n-nodes-base.googleSlides/","text":"Google Slides # Google Slides is a web-based presentation program that is part of Google's office software suite within its Google Drive service. It allows you to create, edit, and collaborate. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Page Get a page Get a thumbnail Presentation Create a presentation Get a presentation Get presentation slides Replace text in a presentation Example Usage # This workflow allows you to get all the slides from a presentation and get the thumbnails for the pages. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - Google Slides The final workflow should look like the following image. 1. Start node # The Start node exists by default when you create a new workflow. 2. Google Slides node (getSlides: presentation) # Get Presentation ID # Open a Google Slides presentation. Copy the string of characters located between /d/ and /edit in your presentation URL. This string is the Presentation ID, which we will use in the Google Slides node. Configure the Google Slides node # This Google Slides node will get all the slides from a presentation. Select 'OAuth2' from the Authentication dropdown list. First of all, you'll have to enter credentials for the Google Slides node. You can find out how to enter credentials for this node here . Select 'Get Slides' from the Operation dropdown list. Paste the Presentation ID you copied in the previous step, in the Presentation ID field. Toggle Return All to true . Click on Execute Node to run the workflow. In the screenshot below, you will notice that the node returns all the slides from the presentation. 3. Google Slides1 node (getThumbnail: page) # This node will return thumbnails of the pages that were returned by the previous node. Select 'OAuth2' from the Authentication dropdown list. Select the credentials that you entered in the previous Google Slides node. Select 'Page' from the Resource dropdown list. Select 'Get Thumbnail' from the Operation dropdown list. Click on the gears icon next to the Presentation ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Google Slides > Parameters > presentationId. You can also add the following expression: {{$node[\"Google Slides\"].parameter[\"presentationId\"]}} . Click on the gears icon next to the Page Object ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Google Slides > Output Data > JSON > objectId. You can also add the following expression: {{$json[\"objectId\"]}} . Toggle Download to true . Click on Execute Node to run the workflow. In the screenshot below, you will notice that the node returns thumbnails of the pages that were returned by the previous node.","title":"Google Slides"},{"location":"integrations/nodes/n8n-nodes-base.googleSlides/#google-slides","text":"Google Slides is a web-based presentation program that is part of Google's office software suite within its Google Drive service. It allows you to create, edit, and collaborate. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Google Slides"},{"location":"integrations/nodes/n8n-nodes-base.googleSlides/#basic-operations","text":"Page Get a page Get a thumbnail Presentation Create a presentation Get a presentation Get presentation slides Replace text in a presentation","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.googleSlides/#example-usage","text":"This workflow allows you to get all the slides from a presentation and get the thumbnails for the pages. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - Google Slides The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.googleSlides/#1-start-node","text":"The Start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.googleSlides/#2-google-slides-node-getslides-presentation","text":"","title":"2. Google Slides node (getSlides: presentation)"},{"location":"integrations/nodes/n8n-nodes-base.googleSlides/#get-presentation-id","text":"Open a Google Slides presentation. Copy the string of characters located between /d/ and /edit in your presentation URL. This string is the Presentation ID, which we will use in the Google Slides node.","title":"Get Presentation ID"},{"location":"integrations/nodes/n8n-nodes-base.googleSlides/#configure-the-google-slides-node","text":"This Google Slides node will get all the slides from a presentation. Select 'OAuth2' from the Authentication dropdown list. First of all, you'll have to enter credentials for the Google Slides node. You can find out how to enter credentials for this node here . Select 'Get Slides' from the Operation dropdown list. Paste the Presentation ID you copied in the previous step, in the Presentation ID field. Toggle Return All to true . Click on Execute Node to run the workflow. In the screenshot below, you will notice that the node returns all the slides from the presentation.","title":"Configure the Google Slides node"},{"location":"integrations/nodes/n8n-nodes-base.googleSlides/#3-google-slides1-node-getthumbnail-page","text":"This node will return thumbnails of the pages that were returned by the previous node. Select 'OAuth2' from the Authentication dropdown list. Select the credentials that you entered in the previous Google Slides node. Select 'Page' from the Resource dropdown list. Select 'Get Thumbnail' from the Operation dropdown list. Click on the gears icon next to the Presentation ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Google Slides > Parameters > presentationId. You can also add the following expression: {{$node[\"Google Slides\"].parameter[\"presentationId\"]}} . Click on the gears icon next to the Page Object ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Google Slides > Output Data > JSON > objectId. You can also add the following expression: {{$json[\"objectId\"]}} . Toggle Download to true . Click on Execute Node to run the workflow. In the screenshot below, you will notice that the node returns thumbnails of the pages that were returned by the previous node.","title":"3. Google Slides1 node (getThumbnail: page)"},{"location":"integrations/nodes/n8n-nodes-base.googleTasks/","text":"Google Tasks # Google Tasks is a task management service developed by Google. It keeps track of your daily tasks, organize multiple lists, and track important deadlines. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Task Add a task to tasklist Delete a task Retrieve a task Retrieve all tasks from a tasklist Update a task Example Usage # This workflow allows you to add a task to Google Tasks. You can also find the workflow on the website. This example usage workflow uses the following two nodes. - Start - Google Tasks The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Google Tasks node # First of all, you'll have to enter credentials for the Google Tasks node. You can find out how to do that here . Select the TaskList from the dropdown list of the user's task-lists where a new task needs to be added. Enter a title for the task in the Title field. Click on Execute Node to run the workflow.","title":"Google Tasks"},{"location":"integrations/nodes/n8n-nodes-base.googleTasks/#google-tasks","text":"Google Tasks is a task management service developed by Google. It keeps track of your daily tasks, organize multiple lists, and track important deadlines. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Google Tasks"},{"location":"integrations/nodes/n8n-nodes-base.googleTasks/#basic-operations","text":"Task Add a task to tasklist Delete a task Retrieve a task Retrieve all tasks from a tasklist Update a task","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.googleTasks/#example-usage","text":"This workflow allows you to add a task to Google Tasks. You can also find the workflow on the website. This example usage workflow uses the following two nodes. - Start - Google Tasks The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.googleTasks/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.googleTasks/#2-google-tasks-node","text":"First of all, you'll have to enter credentials for the Google Tasks node. You can find out how to do that here . Select the TaskList from the dropdown list of the user's task-lists where a new task needs to be added. Enter a title for the task in the Title field. Click on Execute Node to run the workflow.","title":"2. Google Tasks node"},{"location":"integrations/nodes/n8n-nodes-base.googleTranslate/","text":"Google Translate # Google Translate is a free multilingual translation service developed by Google to translate text and websites from one language into another. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Language Translate data Example Usage # This workflow allows you to translate text from English to German using the Google Translate node. You can also find the workflow on the website. This example usage workflow uses the following nodes. - Start - Google Translate The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Google Translate node (translate:language) # This node will translate the text Hello from n8n! to German. You can enter a different text as well as select another language to translate the text to. Select 'OAuth2' from the Authentication dropdown list. Next, you'll have to enter credentials for the Google Translate node. You can find out how to enter credentials for this node here . Enter the text Hello from n8n! in the Text field. Select 'DE' from the Translate To dropdown list. DE is the language code for German. You can refer to Language Support to view the list of all supported languages and their corresponding language codes. Click on Execute Node to run the node. In the screenshot below, you will notice that the node translates the text Hello from n8n! to German.","title":"Google Translate"},{"location":"integrations/nodes/n8n-nodes-base.googleTranslate/#google-translate","text":"Google Translate is a free multilingual translation service developed by Google to translate text and websites from one language into another. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Google Translate"},{"location":"integrations/nodes/n8n-nodes-base.googleTranslate/#basic-operations","text":"Language Translate data","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.googleTranslate/#example-usage","text":"This workflow allows you to translate text from English to German using the Google Translate node. You can also find the workflow on the website. This example usage workflow uses the following nodes. - Start - Google Translate The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.googleTranslate/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.googleTranslate/#2-google-translate-node-translatelanguage","text":"This node will translate the text Hello from n8n! to German. You can enter a different text as well as select another language to translate the text to. Select 'OAuth2' from the Authentication dropdown list. Next, you'll have to enter credentials for the Google Translate node. You can find out how to enter credentials for this node here . Enter the text Hello from n8n! in the Text field. Select 'DE' from the Translate To dropdown list. DE is the language code for German. You can refer to Language Support to view the list of all supported languages and their corresponding language codes. Click on Execute Node to run the node. In the screenshot below, you will notice that the node translates the text Hello from n8n! to German.","title":"2. Google Translate node (translate:language)"},{"location":"integrations/nodes/n8n-nodes-base.gotify/","text":"Gotify # Gotify is a server for sending and receiving messages. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Message Create Delete Get All Example Usage # This workflow allows you to send daily weather updates via a message using the Gotify node. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Cron - OpenWeatherMap - Gotify The final workflow should look like the following image. 1. Cron node # The Cron node will trigger the workflow daily at 9 AM. Click on Add Cron Time . Set hours to 9 in the Hour field. Click on Execute Node to run the node. In the screenshot below, you will notice that the Cron node is configured to trigger the workflow every day at 9 AM. 2. OpenWeatherMap node (Current Weather) # This node will return data about the current weather in Berlin. To get the weather updates for your city, you can enter the name of your city instead. First of all, you'll have to enter credentials for the OpenWeatherMap node. You can find out how to do that here . Enter berlin in the City field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns data about the current weather in Berlin. 3. Gotify node (create: message) # This node will send a message with the weather update. First of all, you'll have to enter credentials for the Gotify node. You can find out how to do that here . Click on the gears icon next to the Message field and click on Add Expression . Enter the following message in the Expression field: Hey! The temperature outside is {{$node[\"OpenWeatherMap\"].json[\"main\"][\"temp\"]}}\u00b0C. . Click on Add Field and select 'Title' from the dropdown list. Enter Today's Weather Update in the Title field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node sends a message with the weather update. Activate workflow for production This example workflow uses the Cron node, which is a Trigger node. You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Cron node.","title":"Gotify"},{"location":"integrations/nodes/n8n-nodes-base.gotify/#gotify","text":"Gotify is a server for sending and receiving messages. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Gotify"},{"location":"integrations/nodes/n8n-nodes-base.gotify/#basic-operations","text":"Message Create Delete Get All","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.gotify/#example-usage","text":"This workflow allows you to send daily weather updates via a message using the Gotify node. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Cron - OpenWeatherMap - Gotify The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.gotify/#1-cron-node","text":"The Cron node will trigger the workflow daily at 9 AM. Click on Add Cron Time . Set hours to 9 in the Hour field. Click on Execute Node to run the node. In the screenshot below, you will notice that the Cron node is configured to trigger the workflow every day at 9 AM.","title":"1. Cron node"},{"location":"integrations/nodes/n8n-nodes-base.gotify/#2-openweathermap-node-current-weather","text":"This node will return data about the current weather in Berlin. To get the weather updates for your city, you can enter the name of your city instead. First of all, you'll have to enter credentials for the OpenWeatherMap node. You can find out how to do that here . Enter berlin in the City field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns data about the current weather in Berlin.","title":"2. OpenWeatherMap node (Current Weather)"},{"location":"integrations/nodes/n8n-nodes-base.gotify/#3-gotify-node-create-message","text":"This node will send a message with the weather update. First of all, you'll have to enter credentials for the Gotify node. You can find out how to do that here . Click on the gears icon next to the Message field and click on Add Expression . Enter the following message in the Expression field: Hey! The temperature outside is {{$node[\"OpenWeatherMap\"].json[\"main\"][\"temp\"]}}\u00b0C. . Click on Add Field and select 'Title' from the dropdown list. Enter Today's Weather Update in the Title field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node sends a message with the weather update. Activate workflow for production This example workflow uses the Cron node, which is a Trigger node. You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Cron node.","title":"3. Gotify node (create: message)"},{"location":"integrations/nodes/n8n-nodes-base.grafana/","text":"Grafana # Grafana is a multi-platform open source analytics and interactive visualization web application. It provides charts, graphs, and alerts for the web when connected to supported data sources. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Dashboard Create a dashboard Delete a dashboard Get a dashboard Get all dashboards Update a dashboard Team Create a team Delete a team Get a team Retrieve all teams Update a team Team Member Add a member to a team Retrieve all team members Remove a member from a team User Delete a user from the current organization Retrieve all users in the current organization Update a user in the current organization","title":"Grafana"},{"location":"integrations/nodes/n8n-nodes-base.grafana/#grafana","text":"Grafana is a multi-platform open source analytics and interactive visualization web application. It provides charts, graphs, and alerts for the web when connected to supported data sources. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Grafana"},{"location":"integrations/nodes/n8n-nodes-base.grafana/#basic-operations","text":"Dashboard Create a dashboard Delete a dashboard Get a dashboard Get all dashboards Update a dashboard Team Create a team Delete a team Get a team Retrieve all teams Update a team Team Member Add a member to a team Retrieve all team members Remove a member from a team User Delete a user from the current organization Retrieve all users in the current organization Update a user in the current organization","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.grist/","text":"Grist # Grist combines the flexibility of a spreadsheet with the robustness of a database to organize your data, your way. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic operations # Create rows in a table Delete rows from a table Read rows from a table Update rows in a table Example usage # This workflow allows you to insert and update data from a table in Grist. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes: Start Grist The final workflow should look like the following: 1. Start node # The start node exists by default when you create a new workflow. 2. Grist node (Create) # This workflow assumes there is a document with a table in your Grist workspace. This node will create a new record in a table. First enter your credentials for the Grist node. You can find out how to do that here . Select 'Create' from the Operation dropdown list. Enter that ID of your document into the Document ID field. Enter the ID of your table in the Table ID field. Under Fields to Send click the Add Field button twice. For the first field, choose Name from the Field ID dropdown, and type a name in the Field Value . For the second field, choose Link from the Field ID dropdown, and enter a URL in the Field Value . Click on Execute Node to run the node. Here is an example of how the configuration should look: And here's the result of adding the record to the Grist table: 3. Grist1 node (Get All) # This node will list all the records with a particular Name value. Select the credentials that you entered in the previous node. Select the 'Get All' option from the Operation dropdown list. Click on the gears icon next to the Document ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Grist > Parameters > docId . Click on the gears icon next to the Table field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Grist > Parameters > tableId . Click on Add Option and select 'Filter' from the dropdown list. Click the Add Filter button. Select Name from the Column dropdown. Type a name in the Values field. Click on Execute Node to run the node. In the screenshot below, the node only returned the record with the name 'Grist': 4. Grist2 node (Update) # This node will update the Name field of the record that we received from the previous Grist node. Select the Grist1 node in your workflow and click 'Duplicate Node'. Now you won't need to specify the credentials, Document ID, and Table ID again. Double click the newly duplicated node (Grist2) to edit it. Select 'Update' from the Operation dropdown list. Click on the gears icon next to the Row ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Grist1 > Output Data > JSON > id . Under Fields to Send click the Add Field button. Choose Name from the Field ID dropdown, and type a name in the Field Value . Click on Execute Node to run the node. Here is an example of how the configuration should look: The result is that the Name in the first record changed from 'Grist' to 'Grist Labs': FAQs # How to get the Row ID? # To update or delete a particular record, you need the Row ID. There are two ways to get the Row ID. Create a Row ID column in Grist Create a new column in your Grist table with the formula $id . Use the Get All operation The Get All operation returns the Row ID of each record along with the fields. You can obtain it with the expression {{$node[\"GristNodeName\"].json[\"id\"]}} . How to filter records when using the Get All operation? # Click on Add Option and select 'Filter' from the dropdown list. You can add filters for any number of columns. The result will only include records which match all the columns. For each column, you can enter any number of values separated by commas. The result will include records which match any of the values for that column.","title":"Grist"},{"location":"integrations/nodes/n8n-nodes-base.grist/#grist","text":"Grist combines the flexibility of a spreadsheet with the robustness of a database to organize your data, your way. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Grist"},{"location":"integrations/nodes/n8n-nodes-base.grist/#basic-operations","text":"Create rows in a table Delete rows from a table Read rows from a table Update rows in a table","title":"Basic operations"},{"location":"integrations/nodes/n8n-nodes-base.grist/#example-usage","text":"This workflow allows you to insert and update data from a table in Grist. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes: Start Grist The final workflow should look like the following:","title":"Example usage"},{"location":"integrations/nodes/n8n-nodes-base.grist/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.grist/#2-grist-node-create","text":"This workflow assumes there is a document with a table in your Grist workspace. This node will create a new record in a table. First enter your credentials for the Grist node. You can find out how to do that here . Select 'Create' from the Operation dropdown list. Enter that ID of your document into the Document ID field. Enter the ID of your table in the Table ID field. Under Fields to Send click the Add Field button twice. For the first field, choose Name from the Field ID dropdown, and type a name in the Field Value . For the second field, choose Link from the Field ID dropdown, and enter a URL in the Field Value . Click on Execute Node to run the node. Here is an example of how the configuration should look: And here's the result of adding the record to the Grist table:","title":"2. Grist node (Create)"},{"location":"integrations/nodes/n8n-nodes-base.grist/#3-grist1-node-get-all","text":"This node will list all the records with a particular Name value. Select the credentials that you entered in the previous node. Select the 'Get All' option from the Operation dropdown list. Click on the gears icon next to the Document ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Grist > Parameters > docId . Click on the gears icon next to the Table field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Grist > Parameters > tableId . Click on Add Option and select 'Filter' from the dropdown list. Click the Add Filter button. Select Name from the Column dropdown. Type a name in the Values field. Click on Execute Node to run the node. In the screenshot below, the node only returned the record with the name 'Grist':","title":"3. Grist1 node (Get All)"},{"location":"integrations/nodes/n8n-nodes-base.grist/#4-grist2-node-update","text":"This node will update the Name field of the record that we received from the previous Grist node. Select the Grist1 node in your workflow and click 'Duplicate Node'. Now you won't need to specify the credentials, Document ID, and Table ID again. Double click the newly duplicated node (Grist2) to edit it. Select 'Update' from the Operation dropdown list. Click on the gears icon next to the Row ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Grist1 > Output Data > JSON > id . Under Fields to Send click the Add Field button. Choose Name from the Field ID dropdown, and type a name in the Field Value . Click on Execute Node to run the node. Here is an example of how the configuration should look: The result is that the Name in the first record changed from 'Grist' to 'Grist Labs':","title":"4. Grist2 node (Update)"},{"location":"integrations/nodes/n8n-nodes-base.grist/#faqs","text":"","title":"FAQs"},{"location":"integrations/nodes/n8n-nodes-base.grist/#how-to-get-the-row-id","text":"To update or delete a particular record, you need the Row ID. There are two ways to get the Row ID. Create a Row ID column in Grist Create a new column in your Grist table with the formula $id . Use the Get All operation The Get All operation returns the Row ID of each record along with the fields. You can obtain it with the expression {{$node[\"GristNodeName\"].json[\"id\"]}} .","title":"How to get the Row ID?"},{"location":"integrations/nodes/n8n-nodes-base.grist/#how-to-filter-records-when-using-the-get-all-operation","text":"Click on Add Option and select 'Filter' from the dropdown list. You can add filters for any number of columns. The result will only include records which match all the columns. For each column, you can enter any number of values separated by commas. The result will include records which match any of the values for that column.","title":"How to filter records when using the Get All operation?"},{"location":"integrations/nodes/n8n-nodes-base.hackerNews/","text":"Hacker News # Hacker News is a social news website focusing on computer science and entrepreneurship. \ud83d\udd11 Credentials The Hacker News node does not require authentication. Basic Operations # All Get all items Article Get a Hacker News article User Get a Hacker News user Example Usage # This workflow allows you to get articles from Hacker News. You can also find the workflow on this website. This example usage workflow would use the following two nodes. - Start - Hacker News The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Hacker News node # Select the 'All' option from the Resource dropdown list. Click on Execute Node to run the workflow.","title":"Hacker News"},{"location":"integrations/nodes/n8n-nodes-base.hackerNews/#hacker-news","text":"Hacker News is a social news website focusing on computer science and entrepreneurship. \ud83d\udd11 Credentials The Hacker News node does not require authentication.","title":"Hacker News"},{"location":"integrations/nodes/n8n-nodes-base.hackerNews/#basic-operations","text":"All Get all items Article Get a Hacker News article User Get a Hacker News user","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.hackerNews/#example-usage","text":"This workflow allows you to get articles from Hacker News. You can also find the workflow on this website. This example usage workflow would use the following two nodes. - Start - Hacker News The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.hackerNews/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.hackerNews/#2-hacker-news-node","text":"Select the 'All' option from the Resource dropdown list. Click on Execute Node to run the workflow.","title":"2. Hacker News node"},{"location":"integrations/nodes/n8n-nodes-base.haloPSA/","text":"HaloPSA # HaloPSA is a intuitive PSA software. Standardise your processes and keep your customers at the center of every conversation. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Client Create a client Delete a client Get a client Get all clients Update a client Site Create a site Delete a site Get a site Get all sites Update a site Ticket Create a ticket Delete a ticket Get a ticket Get all tickets Update a ticket User Create a user Delete a user Get a user Get all users Update a user Example Usage # This workflow allows you to create a client in HaloPSA. This example workflow uses the following nodes. - Start - HaloPSA 1. Start node # The start node exists by default when you create a new workflow. 2. HaloPSA node (resource: client) # This node will create a new client in HaloPSA. First of all, you'll have to enter credentials for the HaloPSA node. You can find out how to do that here . Select 'Client' in the Resource field. Select 'Create' in the Operation field. Enter the client name in the Name field. Add additional fields such as VIP or Website by clicking Add Field . In the below screenshot you can see how the node creates a new client in HaloPSA.","title":"HaloPSA"},{"location":"integrations/nodes/n8n-nodes-base.haloPSA/#halopsa","text":"HaloPSA is a intuitive PSA software. Standardise your processes and keep your customers at the center of every conversation. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"HaloPSA"},{"location":"integrations/nodes/n8n-nodes-base.haloPSA/#basic-operations","text":"Client Create a client Delete a client Get a client Get all clients Update a client Site Create a site Delete a site Get a site Get all sites Update a site Ticket Create a ticket Delete a ticket Get a ticket Get all tickets Update a ticket User Create a user Delete a user Get a user Get all users Update a user","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.haloPSA/#example-usage","text":"This workflow allows you to create a client in HaloPSA. This example workflow uses the following nodes. - Start - HaloPSA","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.haloPSA/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.haloPSA/#2-halopsa-node-resource-client","text":"This node will create a new client in HaloPSA. First of all, you'll have to enter credentials for the HaloPSA node. You can find out how to do that here . Select 'Client' in the Resource field. Select 'Create' in the Operation field. Enter the client name in the Name field. Add additional fields such as VIP or Website by clicking Add Field . In the below screenshot you can see how the node creates a new client in HaloPSA.","title":"2. HaloPSA node (resource: client)"},{"location":"integrations/nodes/n8n-nodes-base.harvest/","text":"Harvest # Harvest is a web-based time tracking tool that helps with its simple time tracking, fast online invoicing, and powerful reporting software. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Client Create a client Delete a client Get data of a client Get data of all clients Update a client Company Retrieves the company for the currently authenticated user Contact Create a contact Delete a contact Get data of a contact Get data of all contacts Update a contact Estimate Create an estimate Delete an estimate Get data of an estimate Get data of all estimates Update an estimate Expense Get data of an expense Get data of all expenses Create an expense Update an expense Delete an expense Invoice Get data of an invoice Get data of all invoices Create an invoice Update an invoice Delete an invoice Project Create a project Delete a project Get data of a project Get data of all projects Update a project Task Create a task Delete a task Get data of a task Get data of all tasks Update a task Time Entries Create a time entry via duration Create a time entry via start and end time Delete a time entry Delete a time entry\u2019s external reference. Get data of a time entry Get data of all time entries Restart a time entry Stop a time entry Update a time entry User Create a user Delete a user Get data of a user Get data of all users Get data of authenticated user Update a user Example Usage # This workflow allows you to create a client in Harvest. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Harvest The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Harvest node # First of all, you'll have to enter credentials for the Harvest node. You can find out how to do that here . Select the 'Client' option from the Resource dropdown list. Select the 'Create' option from the Operation dropdown list. Enter the name of the client in the Name field. Click on Execute Node to run the workflow.","title":"Harvest"},{"location":"integrations/nodes/n8n-nodes-base.harvest/#harvest","text":"Harvest is a web-based time tracking tool that helps with its simple time tracking, fast online invoicing, and powerful reporting software. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Harvest"},{"location":"integrations/nodes/n8n-nodes-base.harvest/#basic-operations","text":"Client Create a client Delete a client Get data of a client Get data of all clients Update a client Company Retrieves the company for the currently authenticated user Contact Create a contact Delete a contact Get data of a contact Get data of all contacts Update a contact Estimate Create an estimate Delete an estimate Get data of an estimate Get data of all estimates Update an estimate Expense Get data of an expense Get data of all expenses Create an expense Update an expense Delete an expense Invoice Get data of an invoice Get data of all invoices Create an invoice Update an invoice Delete an invoice Project Create a project Delete a project Get data of a project Get data of all projects Update a project Task Create a task Delete a task Get data of a task Get data of all tasks Update a task Time Entries Create a time entry via duration Create a time entry via start and end time Delete a time entry Delete a time entry\u2019s external reference. Get data of a time entry Get data of all time entries Restart a time entry Stop a time entry Update a time entry User Create a user Delete a user Get data of a user Get data of all users Get data of authenticated user Update a user","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.harvest/#example-usage","text":"This workflow allows you to create a client in Harvest. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Harvest The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.harvest/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.harvest/#2-harvest-node","text":"First of all, you'll have to enter credentials for the Harvest node. You can find out how to do that here . Select the 'Client' option from the Resource dropdown list. Select the 'Create' option from the Operation dropdown list. Enter the name of the client in the Name field. Click on Execute Node to run the workflow.","title":"2. Harvest node"},{"location":"integrations/nodes/n8n-nodes-base.helpScout/","text":"Help Scout # Help Scout is a help desk software that provides an email-based customer support platform, knowledge base tool, and an embeddable search/contact widget for customer service professionals. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Conversation Create a new conversation Delete a conversation Get a conversation Get all conversations Customer Create a new customer Get a customer Get all customers Get customer property definitions Update a customer Mailbox Get data of a mailbox Get all mailboxes Thread Create a new chat thread Get all chat threads Example Usage # This workflow allows you to get all mailboxes from Help Scout. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Help Scout The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Help Scout node # First of all, you'll have to enter credentials for the Help Scout node. You can find out how to do that here . Select the 'Mailbox' option from the Resource dropdown list. Select the 'Get All' option from the Operation dropdown list. Click on Execute Node to run the workflow.","title":"Help Scout"},{"location":"integrations/nodes/n8n-nodes-base.helpScout/#help-scout","text":"Help Scout is a help desk software that provides an email-based customer support platform, knowledge base tool, and an embeddable search/contact widget for customer service professionals. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Help Scout"},{"location":"integrations/nodes/n8n-nodes-base.helpScout/#basic-operations","text":"Conversation Create a new conversation Delete a conversation Get a conversation Get all conversations Customer Create a new customer Get a customer Get all customers Get customer property definitions Update a customer Mailbox Get data of a mailbox Get all mailboxes Thread Create a new chat thread Get all chat threads","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.helpScout/#example-usage","text":"This workflow allows you to get all mailboxes from Help Scout. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Help Scout The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.helpScout/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.helpScout/#2-help-scout-node","text":"First of all, you'll have to enter credentials for the Help Scout node. You can find out how to do that here . Select the 'Mailbox' option from the Resource dropdown list. Select the 'Get All' option from the Operation dropdown list. Click on Execute Node to run the workflow.","title":"2. Help Scout node"},{"location":"integrations/nodes/n8n-nodes-base.homeAssistant/","text":"Home Assistant # Home Assistant is a free and open-source software for home automation that is designed to be the central control system for smart home devices with focus on local control and privacy. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic operations # Camera Proxy Get the camera screenshot Config Get the configuration Check the configuration Event Create an event Get all events Log Get a log for a specific entity Get all logs Service Call a service within a specific domain Get all services State Create a new record, or update the current one if it already exists (upsert) Get a state for a specific entity Get all states Template Create a template Example # This workflow allows you to retrieve your current Home Assistant configuration details. This example usage workflow would use the following two nodes. - Start - Home Assistant The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Home Assistant node # First select your credentials for the Home Assistant node. You can find out how to create credentials here . From the Resource dropdown select Config . From the Operation dropdown select Get . Click on Execute Node to run the workflow.","title":"Home Assistant"},{"location":"integrations/nodes/n8n-nodes-base.homeAssistant/#home-assistant","text":"Home Assistant is a free and open-source software for home automation that is designed to be the central control system for smart home devices with focus on local control and privacy. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Home Assistant"},{"location":"integrations/nodes/n8n-nodes-base.homeAssistant/#basic-operations","text":"Camera Proxy Get the camera screenshot Config Get the configuration Check the configuration Event Create an event Get all events Log Get a log for a specific entity Get all logs Service Call a service within a specific domain Get all services State Create a new record, or update the current one if it already exists (upsert) Get a state for a specific entity Get all states Template Create a template","title":"Basic operations"},{"location":"integrations/nodes/n8n-nodes-base.homeAssistant/#example","text":"This workflow allows you to retrieve your current Home Assistant configuration details. This example usage workflow would use the following two nodes. - Start - Home Assistant The final workflow should look like the following image.","title":"Example"},{"location":"integrations/nodes/n8n-nodes-base.homeAssistant/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.homeAssistant/#2-home-assistant-node","text":"First select your credentials for the Home Assistant node. You can find out how to create credentials here . From the Resource dropdown select Config . From the Operation dropdown select Get . Click on Execute Node to run the workflow.","title":"2. Home Assistant node"},{"location":"integrations/nodes/n8n-nodes-base.hubspot/","text":"HubSpot # HubSpot provides tools for social media marketing, content management, web analytics, landing pages, customer support, and search engine optimization. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Contact Create/Update a contact Delete a contact Get a contact Get all contacts Get recently created/updated contacts Search contacts Contact List Add contact to a list Remove a contact from a list Company Create a company Delete a company Get a company Get all companies Get recently created companies Get recently modified companies Search companies by domain Update a company Deal Create a deal Delete a deal Get a deal Get all deals Get recently created deals Get recently modified deals Search deals Update a deal Engagement Create an engagement Delete an engagement Get an engagement Get all engagements Form Get all fields from a form Submit data to a form Ticket Create a ticket Delete a ticket Get a ticket Get all tickets Update a ticket Example Usage # This workflow allows you to retrieve a contact from HubSpot. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - HubSpot The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. HubSpot node # First of all, you'll have to enter credentials for the HubSpot node. You can find out how to do that here . Select the 'Contact' option under the Resource field. Select the 'Get' option under the Operation field. Enter the contact ID under the Contact ID field. Click on Execute Node to run the workflow.","title":"HubSpot"},{"location":"integrations/nodes/n8n-nodes-base.hubspot/#hubspot","text":"HubSpot provides tools for social media marketing, content management, web analytics, landing pages, customer support, and search engine optimization. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"HubSpot"},{"location":"integrations/nodes/n8n-nodes-base.hubspot/#basic-operations","text":"Contact Create/Update a contact Delete a contact Get a contact Get all contacts Get recently created/updated contacts Search contacts Contact List Add contact to a list Remove a contact from a list Company Create a company Delete a company Get a company Get all companies Get recently created companies Get recently modified companies Search companies by domain Update a company Deal Create a deal Delete a deal Get a deal Get all deals Get recently created deals Get recently modified deals Search deals Update a deal Engagement Create an engagement Delete an engagement Get an engagement Get all engagements Form Get all fields from a form Submit data to a form Ticket Create a ticket Delete a ticket Get a ticket Get all tickets Update a ticket","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.hubspot/#example-usage","text":"This workflow allows you to retrieve a contact from HubSpot. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - HubSpot The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.hubspot/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.hubspot/#2-hubspot-node","text":"First of all, you'll have to enter credentials for the HubSpot node. You can find out how to do that here . Select the 'Contact' option under the Resource field. Select the 'Get' option under the Operation field. Enter the contact ID under the Contact ID field. Click on Execute Node to run the workflow.","title":"2. HubSpot node"},{"location":"integrations/nodes/n8n-nodes-base.humanticAi/","text":"Humantic AI # Humantic AI provides AI-driven behavior and personality assessment of a candidate. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Profile Create a profile Retrieve a profile Update a profile Example Usage # This workflow allows you to create, update, and get a profile using the Humantic AI node. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - HTTP Request - Humantic AI The final workflow should look like the following image. 1. Start node # The Start node exists by default when you create a new workflow. 2. Humantic AI node (create: profile) # This node will create a new profile for a candidate in Humantic AI. We will create a new profile using the LinkedIn URL of a candidate. First of all, you'll have to enter credentials for the Humantic AI node. You can find out how to do that here . Enter the LinkedIn URL of the candidate in the User ID field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new profile using the LinkedIn URL of the candidate. 3. HTTP Request node (GET) # This node will fetch the resume of the candidate from a URL that we specify. We will pass on this resume to the next node in the workflow. Enter the URL of the candidate's resume in the URL field. Select 'File' from the Response Format dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node fetches the resume of the candidate from the URL we specified. 4. Humantic AI1 node (update: profile) # This node will update the information of the candidate that we created using the Humantic AI node. We will add the candidate's resume that we fetched in the previous node. Select the credentials that you entered in the previous Humantic AI node. Select 'Update' from the Operation dropdown list. Click on the gears icon next to the User ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Humantic AI > Output Data > JSON > results > userid. You can also add the following expression: {{$node[\"Humantic AI\"].json[\"results\"][\"userid\"]}} . Toggle Send Resume to true . Click on Execute Node to run the node. In the screenshot below, you will notice that the node updates the information of the candidate that we created using the Humantic AI node. Here, the node has added the resume of the candidate. 5. Humantic AI2 node (get: profile) # This node will return the Hiring persona for the candidate that we created using the Humantic AI node. Select the credentials that you entered in the previous node. Click on the gears icon next to the User ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Humantic AI > Output Data > JSON > results > userid. You can also add the following expression: {{$node[\"Humantic AI\"].json[\"results\"][\"userid\"]}} . Click on the Add Option button. Select 'Hiring' from the Persona dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the Hiring persona for the candidate that we created using the Humantic AI node (column headers are not visible in the screenshot since we've scrolled down to show the data).","title":"Humantic AI"},{"location":"integrations/nodes/n8n-nodes-base.humanticAi/#humantic-ai","text":"Humantic AI provides AI-driven behavior and personality assessment of a candidate. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Humantic AI"},{"location":"integrations/nodes/n8n-nodes-base.humanticAi/#basic-operations","text":"Profile Create a profile Retrieve a profile Update a profile","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.humanticAi/#example-usage","text":"This workflow allows you to create, update, and get a profile using the Humantic AI node. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - HTTP Request - Humantic AI The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.humanticAi/#1-start-node","text":"The Start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.humanticAi/#2-humantic-ai-node-create-profile","text":"This node will create a new profile for a candidate in Humantic AI. We will create a new profile using the LinkedIn URL of a candidate. First of all, you'll have to enter credentials for the Humantic AI node. You can find out how to do that here . Enter the LinkedIn URL of the candidate in the User ID field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new profile using the LinkedIn URL of the candidate.","title":"2. Humantic AI node (create: profile)"},{"location":"integrations/nodes/n8n-nodes-base.humanticAi/#3-http-request-node-get","text":"This node will fetch the resume of the candidate from a URL that we specify. We will pass on this resume to the next node in the workflow. Enter the URL of the candidate's resume in the URL field. Select 'File' from the Response Format dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node fetches the resume of the candidate from the URL we specified.","title":"3. HTTP Request node (GET)"},{"location":"integrations/nodes/n8n-nodes-base.humanticAi/#4-humantic-ai1-node-update-profile","text":"This node will update the information of the candidate that we created using the Humantic AI node. We will add the candidate's resume that we fetched in the previous node. Select the credentials that you entered in the previous Humantic AI node. Select 'Update' from the Operation dropdown list. Click on the gears icon next to the User ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Humantic AI > Output Data > JSON > results > userid. You can also add the following expression: {{$node[\"Humantic AI\"].json[\"results\"][\"userid\"]}} . Toggle Send Resume to true . Click on Execute Node to run the node. In the screenshot below, you will notice that the node updates the information of the candidate that we created using the Humantic AI node. Here, the node has added the resume of the candidate.","title":"4. Humantic AI1 node (update: profile)"},{"location":"integrations/nodes/n8n-nodes-base.humanticAi/#5-humantic-ai2-node-get-profile","text":"This node will return the Hiring persona for the candidate that we created using the Humantic AI node. Select the credentials that you entered in the previous node. Click on the gears icon next to the User ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Humantic AI > Output Data > JSON > results > userid. You can also add the following expression: {{$node[\"Humantic AI\"].json[\"results\"][\"userid\"]}} . Click on the Add Option button. Select 'Hiring' from the Persona dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the Hiring persona for the candidate that we created using the Humantic AI node (column headers are not visible in the screenshot since we've scrolled down to show the data).","title":"5. Humantic AI2 node (get: profile)"},{"location":"integrations/nodes/n8n-nodes-base.hunter/","text":"Hunter # Hunter is a company that produces a platform that helps find and verify professional email addresses. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Get every email address found on the internet using a given domain name, with sources Generate or retrieve the most likely email address from a domain name, a first name and a last name Verify the deliverability of an email address Example Usage # This workflow allows you to verify the deliverability of an email address using Hunter. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Hunter The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Hunter node # First of all, you'll have to enter credentials for the Hunter node. You can find out how to do that here . Select 'Email Verifier' from the Operation dropdown list. Enter the email in the Email field. Click on Execute Node to run the workflow.","title":"Hunter"},{"location":"integrations/nodes/n8n-nodes-base.hunter/#hunter","text":"Hunter is a company that produces a platform that helps find and verify professional email addresses. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Hunter"},{"location":"integrations/nodes/n8n-nodes-base.hunter/#basic-operations","text":"Get every email address found on the internet using a given domain name, with sources Generate or retrieve the most likely email address from a domain name, a first name and a last name Verify the deliverability of an email address","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.hunter/#example-usage","text":"This workflow allows you to verify the deliverability of an email address using Hunter. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Hunter The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.hunter/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.hunter/#2-hunter-node","text":"First of all, you'll have to enter credentials for the Hunter node. You can find out how to do that here . Select 'Email Verifier' from the Operation dropdown list. Enter the email in the Email field. Click on Execute Node to run the workflow.","title":"2. Hunter node"},{"location":"integrations/nodes/n8n-nodes-base.intercom/","text":"Intercom # Intercom is a company that produces a messaging platform which allows businesses to communicate with prospective and existing customers within their app, on their website, through social media, or via email. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Company Create a new company Get data of a company Get data of all companies Update a company List company's users Lead Create a new lead Delete a lead Get data of a lead Get data of all leads Update new lead User Create a new user Delete a user Get data of a user Get data of all users Update a user Example Usage # This workflow allows you to create a new user in Intercom. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Intercom The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Intercom node # First of all, you'll have to enter credentials for the Intercom node. You can find out how to do that here . Select 'Email' from the dropdown list for the Identifier Type field. Enter the email in the Value field. Click on Execute Node to run the workflow.","title":"Intercom"},{"location":"integrations/nodes/n8n-nodes-base.intercom/#intercom","text":"Intercom is a company that produces a messaging platform which allows businesses to communicate with prospective and existing customers within their app, on their website, through social media, or via email. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Intercom"},{"location":"integrations/nodes/n8n-nodes-base.intercom/#basic-operations","text":"Company Create a new company Get data of a company Get data of all companies Update a company List company's users Lead Create a new lead Delete a lead Get data of a lead Get data of all leads Update new lead User Create a new user Delete a user Get data of a user Get data of all users Update a user","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.intercom/#example-usage","text":"This workflow allows you to create a new user in Intercom. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Intercom The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.intercom/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.intercom/#2-intercom-node","text":"First of all, you'll have to enter credentials for the Intercom node. You can find out how to do that here . Select 'Email' from the dropdown list for the Identifier Type field. Enter the email in the Value field. Click on Execute Node to run the workflow.","title":"2. Intercom node"},{"location":"integrations/nodes/n8n-nodes-base.invoiceNinja/","text":"Invoice Ninja # Invoice Ninja is a free open-source online invoicing app for freelancers & businesses. It offers invoicing, payments, expense tracking, & time-tasks. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Client Create a new client Delete a client Get data of a client Get data of all clients Expense Create a new expense Delete an expense Get data of an expense Get data of all expenses Invoice Create a new invoice Delete a invoice Email an invoice Get data of a invoice Get data of all invoices Payment Create a new payment Delete a payment Get data of a payment Get data of all payments Quote Create a new quote Delete a quote Email an quote Get data of a quote Get data of all quotes Task Create a new task Delete a task Get data of a task Get data of all tasks Example Usage # This workflow allows you to get multiple clients' data from Invoice Ninja. You can also find the workflow on this website. This example usage workflow uses the following two nodes. Start Invoice Ninja The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Invoice Ninja node # First of all, you'll have to enter credentials for the Invoice Ninja node. You can find out how to do that here . Select the 'Get All' option from the Operation dropdown list. Click on Execute Node to run the workflow.","title":"Invoice Ninja"},{"location":"integrations/nodes/n8n-nodes-base.invoiceNinja/#invoice-ninja","text":"Invoice Ninja is a free open-source online invoicing app for freelancers & businesses. It offers invoicing, payments, expense tracking, & time-tasks. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Invoice Ninja"},{"location":"integrations/nodes/n8n-nodes-base.invoiceNinja/#basic-operations","text":"Client Create a new client Delete a client Get data of a client Get data of all clients Expense Create a new expense Delete an expense Get data of an expense Get data of all expenses Invoice Create a new invoice Delete a invoice Email an invoice Get data of a invoice Get data of all invoices Payment Create a new payment Delete a payment Get data of a payment Get data of all payments Quote Create a new quote Delete a quote Email an quote Get data of a quote Get data of all quotes Task Create a new task Delete a task Get data of a task Get data of all tasks","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.invoiceNinja/#example-usage","text":"This workflow allows you to get multiple clients' data from Invoice Ninja. You can also find the workflow on this website. This example usage workflow uses the following two nodes. Start Invoice Ninja The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.invoiceNinja/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.invoiceNinja/#2-invoice-ninja-node","text":"First of all, you'll have to enter credentials for the Invoice Ninja node. You can find out how to do that here . Select the 'Get All' option from the Operation dropdown list. Click on Execute Node to run the workflow.","title":"2. Invoice Ninja node"},{"location":"integrations/nodes/n8n-nodes-base.iterable/","text":"Iterable # Iterable is a cross-channel platform that allows marketers to create, optimize, and measure every interaction throughout the customer journey. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Event Record the actions a user perform User Create/Update a user Delete a user Get a user User List Add user to list Remove a user from a list Example Usage # This workflow allows you to create, update, and get a user from Iterable. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Iterable The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Iterable node (upsert: user) # This node will create a new user in Iterable. First of all, you'll have to enter credentials for the Iterable node. You can find out how to do that here . Select 'Email' in the Identifier field. Enter the email address in the Value field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new user in Iterable. 3. Iterable1 node (upsert: user) # This node will update the information of the user that we created in the previous node. Select the credentials that you entered in the previous node. Select 'Email' in the Identifier field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Iterable > Parameters > value. You can also add the following expression: {{$node[\"Iterable\"].parameter[\"value\"]}} . Click on the Add Field button and select Data Fields . Click on the Add Data Field button. Enter Name in the Key field. Enter the name of the user in the Value field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node updates the information of the user that we created in the previous node. 4. Iterable2 node (get: user) # This node will get the information of the user that we created using the Iterable node. Select the credentials that you entered in the previous node. Select 'Get' from the Operation dropdown list. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Iterable > Parameters > value. You can also add the following expression: {{$node[\"Iterable\"].parameter[\"value\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node gets the information of the user that we created using the Iterable node.","title":"Iterable"},{"location":"integrations/nodes/n8n-nodes-base.iterable/#iterable","text":"Iterable is a cross-channel platform that allows marketers to create, optimize, and measure every interaction throughout the customer journey. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Iterable"},{"location":"integrations/nodes/n8n-nodes-base.iterable/#basic-operations","text":"Event Record the actions a user perform User Create/Update a user Delete a user Get a user User List Add user to list Remove a user from a list","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.iterable/#example-usage","text":"This workflow allows you to create, update, and get a user from Iterable. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Iterable The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.iterable/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.iterable/#2-iterable-node-upsert-user","text":"This node will create a new user in Iterable. First of all, you'll have to enter credentials for the Iterable node. You can find out how to do that here . Select 'Email' in the Identifier field. Enter the email address in the Value field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new user in Iterable.","title":"2. Iterable node (upsert: user)"},{"location":"integrations/nodes/n8n-nodes-base.iterable/#3-iterable1-node-upsert-user","text":"This node will update the information of the user that we created in the previous node. Select the credentials that you entered in the previous node. Select 'Email' in the Identifier field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Iterable > Parameters > value. You can also add the following expression: {{$node[\"Iterable\"].parameter[\"value\"]}} . Click on the Add Field button and select Data Fields . Click on the Add Data Field button. Enter Name in the Key field. Enter the name of the user in the Value field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node updates the information of the user that we created in the previous node.","title":"3. Iterable1 node (upsert: user)"},{"location":"integrations/nodes/n8n-nodes-base.iterable/#4-iterable2-node-get-user","text":"This node will get the information of the user that we created using the Iterable node. Select the credentials that you entered in the previous node. Select 'Get' from the Operation dropdown list. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Iterable > Parameters > value. You can also add the following expression: {{$node[\"Iterable\"].parameter[\"value\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node gets the information of the user that we created using the Iterable node.","title":"4. Iterable2 node (get: user)"},{"location":"integrations/nodes/n8n-nodes-base.jenkins/","text":"Jenkins # Jenkins is an open source automation server that provides hundreds of plugins to support building, deploying and automating any project. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Build List Builds Instance Cancel quiet down state Put Jenkins in quiet mode, no builds can be started, Jenkins is ready for shutdown Restart Jenkins immediately on environments where it is possible Restart Jenkins once no jobs are running on environments where it is possible Shutdown once no jobs are running Shutdown Jenkins immediately Job Copy a specific job Create a new job Trigger a specific job Trigger a specific job Example Usage # This workflow allows you to get list of builds in Jenkins. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Jenkins The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. CircleCI node # First of all, you'll have to enter credentials for the Jenkins node. You can find out how to do that here . Select the Build from the dropdown in the Resources field. Get All Builds is not selected in Operations dropdown. Adjust the depth or add optional parameter by clickin Add Field button Click on Execute Node to run the workflow.","title":"Jenkins"},{"location":"integrations/nodes/n8n-nodes-base.jenkins/#jenkins","text":"Jenkins is an open source automation server that provides hundreds of plugins to support building, deploying and automating any project. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Jenkins"},{"location":"integrations/nodes/n8n-nodes-base.jenkins/#basic-operations","text":"Build List Builds Instance Cancel quiet down state Put Jenkins in quiet mode, no builds can be started, Jenkins is ready for shutdown Restart Jenkins immediately on environments where it is possible Restart Jenkins once no jobs are running on environments where it is possible Shutdown once no jobs are running Shutdown Jenkins immediately Job Copy a specific job Create a new job Trigger a specific job Trigger a specific job","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.jenkins/#example-usage","text":"This workflow allows you to get list of builds in Jenkins. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Jenkins The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.jenkins/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.jenkins/#2-circleci-node","text":"First of all, you'll have to enter credentials for the Jenkins node. You can find out how to do that here . Select the Build from the dropdown in the Resources field. Get All Builds is not selected in Operations dropdown. Adjust the depth or add optional parameter by clickin Add Field button Click on Execute Node to run the workflow.","title":"2. CircleCI node"},{"location":"integrations/nodes/n8n-nodes-base.jira/","text":"Jira # Jira is a proprietary issue tracking product developed by Atlassian that allows bug tracking and agile project management. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Issue Get issue changelog Create a new issue Delete an issue Get an issue Get all issues Create an email notification for an issue and add it to the mail queue Return either all transitions or a transition that can be performed by the user on an issue, based on the issue's status Update an issue Issue Attachment Add attachment to issue Get an attachment Get all attachments Remove an attachment Issue Comment Add comment to issue Get a comment Get all comments Remove a comment Update a comment User Create a new user. Delete a user. Retrieve a user. Example Usage # This workflow allows you to create a new issue in Jira. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Jira The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Jira node # First of all, you'll have to enter credentials for the Jira node. You can find out how to do that here . Select your project from the dropdown list for the Project field. Select an issue type from the dropdown list for the Issue Type field. Enter the summary of the issue in the Summary field. Click on Execute Node to run the workflow. FAQs # How to fetch issues for a specific project? # The 'Get All' operation returns all the issues from Jira. To fetch issues for a particular project, you need to use JQL (Jira Query Language). For example, if you want to receive all the issues of a project named n8n , follow the steps mentioned below. - Select 'Get All' from the Operation dropdown list. - Toggle Return All to true. - Click on Add Option and select 'JQL'. - Enter project=n8n in the JQL field. This query will fetch all the issues in the project named n8n . Enter the name of your project instead of n8n to fetch all the issues for your project. You can refer to the official documentation about JQL to learn more about it.","title":"Jira"},{"location":"integrations/nodes/n8n-nodes-base.jira/#jira","text":"Jira is a proprietary issue tracking product developed by Atlassian that allows bug tracking and agile project management. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Jira"},{"location":"integrations/nodes/n8n-nodes-base.jira/#basic-operations","text":"Issue Get issue changelog Create a new issue Delete an issue Get an issue Get all issues Create an email notification for an issue and add it to the mail queue Return either all transitions or a transition that can be performed by the user on an issue, based on the issue's status Update an issue Issue Attachment Add attachment to issue Get an attachment Get all attachments Remove an attachment Issue Comment Add comment to issue Get a comment Get all comments Remove a comment Update a comment User Create a new user. Delete a user. Retrieve a user.","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.jira/#example-usage","text":"This workflow allows you to create a new issue in Jira. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Jira The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.jira/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.jira/#2-jira-node","text":"First of all, you'll have to enter credentials for the Jira node. You can find out how to do that here . Select your project from the dropdown list for the Project field. Select an issue type from the dropdown list for the Issue Type field. Enter the summary of the issue in the Summary field. Click on Execute Node to run the workflow.","title":"2. Jira node"},{"location":"integrations/nodes/n8n-nodes-base.jira/#faqs","text":"","title":"FAQs"},{"location":"integrations/nodes/n8n-nodes-base.jira/#how-to-fetch-issues-for-a-specific-project","text":"The 'Get All' operation returns all the issues from Jira. To fetch issues for a particular project, you need to use JQL (Jira Query Language). For example, if you want to receive all the issues of a project named n8n , follow the steps mentioned below. - Select 'Get All' from the Operation dropdown list. - Toggle Return All to true. - Click on Add Option and select 'JQL'. - Enter project=n8n in the JQL field. This query will fetch all the issues in the project named n8n . Enter the name of your project instead of n8n to fetch all the issues for your project. You can refer to the official documentation about JQL to learn more about it.","title":"How to fetch issues for a specific project?"},{"location":"integrations/nodes/n8n-nodes-base.kafka/","text":"Kafka # Kafka is an open-source distributed event streaming platform that one can use for high-performance data pipelines, streaming analytics, data integration, and mission-critical applications. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Send message Example Usage # This workflow allows you to send updates about the position of the ISS every minute to a topic in Kafka using the Kafka node. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Cron - HTTP Request - Set - Kafka The final workflow should look like the following image. 1. Cron node # The Cron node will trigger the workflow every minute. Click on Add Cron Time . Select 'Every Minute' from the Mode dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the Cron node is configured to trigger the workflow every minute. 2. HTTP Request node (GET) # This node will make a GET request to the API https://api.wheretheiss.at/v1/satellites/25544/positions to fetch the position of the ISS. This information gets passed on to the next node in the workflow. Enter https://api.wheretheiss.at/v1/satellites/25544/positions in the URL field. Click on the Add Parameter button in the Query Parameters section. Enter timestamps in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Enter the following expression: {{Date.now()}} . This expression will return the current timestamp. Click on Execute Node to run the node. In the screenshot below, you will notice that the node makes a GET request to the API and returns the information about the location of the ISS. 3. Set node # We will use the Set node to ensure that only the data that we set in this node gets passed on to the next nodes in the workflow. Click on Add Value and select 'String' from the dropdown list. Enter Name in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > HTTP Request > Output Data > JSON > 0 > name. You can also add the following expression: {{$node[\"HTTP Request\"].json[\"0\"][\"name\"]}} . Click on Add Value and select 'String' from the dropdown list. Enter Latitude in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > HTTP Request > Output Data > JSON > 0 > latitude. You can also add the following expression: {{$node[\"HTTP Request\"].json[\"0\"][\"latitude\"]}} . Click on Add Value and select 'String' from the dropdown list. Enter Longitude in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > HTTP Request > Output Data > JSON > 0 > longitude. You can also add the following expression: {{$node[\"HTTP Request\"].json[\"0\"][\"longitude\"]}} . Click on Add Value and select 'String' from the dropdown list. Enter Timestamp in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > HTTP Request > Output Data > JSON > 0 > timpestamp. You can also add the following expression: {{$node[\"HTTP Request\"].json[\"0\"][\"timestamp\"]}} . Toggle Keep Only Set to true . We set this option to true to ensure that only the data that we have set in this node get passed on to the next nodes in the workflow. Click on Execute Node to run the node. In the screenshot below, you will notice that the node uses the data from the previous node and returns the data that we set for the workflow. 4. Kafka node # This node will send the data from the previous node to the iss-position topic in Kafka. If you have created a topic with a different name in Kafka, you can use that topic name instead. First of all, you'll have to enter credentials for the Kafka node. You can find out how to do that here . Enter the name of the topic in the Topic field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node sends the data from the previous node to the iss-position topic in Kafka. Activate workflow for production This example workflow uses the Cron node, which is a Trigger node. You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Cron node.","title":"Kafka"},{"location":"integrations/nodes/n8n-nodes-base.kafka/#kafka","text":"Kafka is an open-source distributed event streaming platform that one can use for high-performance data pipelines, streaming analytics, data integration, and mission-critical applications. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Kafka"},{"location":"integrations/nodes/n8n-nodes-base.kafka/#basic-operations","text":"Send message","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.kafka/#example-usage","text":"This workflow allows you to send updates about the position of the ISS every minute to a topic in Kafka using the Kafka node. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Cron - HTTP Request - Set - Kafka The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.kafka/#1-cron-node","text":"The Cron node will trigger the workflow every minute. Click on Add Cron Time . Select 'Every Minute' from the Mode dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the Cron node is configured to trigger the workflow every minute.","title":"1. Cron node"},{"location":"integrations/nodes/n8n-nodes-base.kafka/#2-http-request-node-get","text":"This node will make a GET request to the API https://api.wheretheiss.at/v1/satellites/25544/positions to fetch the position of the ISS. This information gets passed on to the next node in the workflow. Enter https://api.wheretheiss.at/v1/satellites/25544/positions in the URL field. Click on the Add Parameter button in the Query Parameters section. Enter timestamps in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Enter the following expression: {{Date.now()}} . This expression will return the current timestamp. Click on Execute Node to run the node. In the screenshot below, you will notice that the node makes a GET request to the API and returns the information about the location of the ISS.","title":"2. HTTP Request node (GET)"},{"location":"integrations/nodes/n8n-nodes-base.kafka/#3-set-node","text":"We will use the Set node to ensure that only the data that we set in this node gets passed on to the next nodes in the workflow. Click on Add Value and select 'String' from the dropdown list. Enter Name in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > HTTP Request > Output Data > JSON > 0 > name. You can also add the following expression: {{$node[\"HTTP Request\"].json[\"0\"][\"name\"]}} . Click on Add Value and select 'String' from the dropdown list. Enter Latitude in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > HTTP Request > Output Data > JSON > 0 > latitude. You can also add the following expression: {{$node[\"HTTP Request\"].json[\"0\"][\"latitude\"]}} . Click on Add Value and select 'String' from the dropdown list. Enter Longitude in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > HTTP Request > Output Data > JSON > 0 > longitude. You can also add the following expression: {{$node[\"HTTP Request\"].json[\"0\"][\"longitude\"]}} . Click on Add Value and select 'String' from the dropdown list. Enter Timestamp in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > HTTP Request > Output Data > JSON > 0 > timpestamp. You can also add the following expression: {{$node[\"HTTP Request\"].json[\"0\"][\"timestamp\"]}} . Toggle Keep Only Set to true . We set this option to true to ensure that only the data that we have set in this node get passed on to the next nodes in the workflow. Click on Execute Node to run the node. In the screenshot below, you will notice that the node uses the data from the previous node and returns the data that we set for the workflow.","title":"3. Set node"},{"location":"integrations/nodes/n8n-nodes-base.kafka/#4-kafka-node","text":"This node will send the data from the previous node to the iss-position topic in Kafka. If you have created a topic with a different name in Kafka, you can use that topic name instead. First of all, you'll have to enter credentials for the Kafka node. You can find out how to do that here . Enter the name of the topic in the Topic field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node sends the data from the previous node to the iss-position topic in Kafka. Activate workflow for production This example workflow uses the Cron node, which is a Trigger node. You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Cron node.","title":"4. Kafka node"},{"location":"integrations/nodes/n8n-nodes-base.keap/","text":"Keap # Keap is an e-mail marketing and sales platform for small businesses, including products to manage and optimize the customer lifecycle, customer relationship management, marketing automation, lead capture, and e-commerce. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Company Create a company Retrieve all companies Contact Create/update a contact Delete an contact Retrieve an contact Retrieve all contacts Contact Note Create a note Delete a note Get a notes Retrieve all notes Update a note Contact Tag Add a list of tags to a contact Delete a contact's tag Retrieve all contact's tags Ecommerce Order Create an ecommerce order Get an ecommerce order Delete an ecommerce order Retrieve all ecommerce orders Ecommerce Product Create an ecommerce product Delete an ecommerce product Get an ecommerce product Retrieve all ecommerce product Email Create a record of an email sent to a contact Retrieve all sent emails Send Email File Delete a file Retrieve all files Upload a file Example Usage # This workflow allows you to get all contacts from Keap. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Keap The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Keap node # First of all, you'll have to enter credentials for the Keap node. You can find out how to do that here . Select the 'Contact' option from the Resource dropdown list. Select the 'Get All' option from the Operation dropdown list. Click on Execute Node to run the workflow.","title":"Keap"},{"location":"integrations/nodes/n8n-nodes-base.keap/#keap","text":"Keap is an e-mail marketing and sales platform for small businesses, including products to manage and optimize the customer lifecycle, customer relationship management, marketing automation, lead capture, and e-commerce. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Keap"},{"location":"integrations/nodes/n8n-nodes-base.keap/#basic-operations","text":"Company Create a company Retrieve all companies Contact Create/update a contact Delete an contact Retrieve an contact Retrieve all contacts Contact Note Create a note Delete a note Get a notes Retrieve all notes Update a note Contact Tag Add a list of tags to a contact Delete a contact's tag Retrieve all contact's tags Ecommerce Order Create an ecommerce order Get an ecommerce order Delete an ecommerce order Retrieve all ecommerce orders Ecommerce Product Create an ecommerce product Delete an ecommerce product Get an ecommerce product Retrieve all ecommerce product Email Create a record of an email sent to a contact Retrieve all sent emails Send Email File Delete a file Retrieve all files Upload a file","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.keap/#example-usage","text":"This workflow allows you to get all contacts from Keap. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Keap The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.keap/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.keap/#2-keap-node","text":"First of all, you'll have to enter credentials for the Keap node. You can find out how to do that here . Select the 'Contact' option from the Resource dropdown list. Select the 'Get All' option from the Operation dropdown list. Click on Execute Node to run the workflow.","title":"2. Keap node"},{"location":"integrations/nodes/n8n-nodes-base.kitemaker/","text":"Kitemaker # Kitemaker is a collaboration tool built for designers, engineers, and product managers in remote software development teams. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Organization Retrieve data on the logged-in user's organization. Space Retrieve data on all the spaces in the logged-in user's organization. User Retrieve data on all the users in the logged-in user's organization. Work Item Create Get Get All Update Example Usage # This workflow allows you to create, update, and get a work item from Kitemaker. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Kitemaker The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Kitemaker node (workItem: create) # This node will create a work item in Kitemaker. First of all, you'll have to enter credentials for the Kitemaker node. You can find out how to do that here . Select 'Create' from the Operation dropdown list. Enter a title in the Title field. Select 'In progress' from the Status ID dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new work item in Kitemaker. 3. Kitemaker1 node (workItem: update) # This node will update the status of the item that we created using the previous node. Select the credentials that you entered in the previous Kitemaker node. Select 'Update' from the Operation dropdown list. Click on the gears icon next to the Work Item ID field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > id. You can also add the following expression: {{$json[\"id\"]}} . Click on the Add Field button and select 'Status ID' from the dropdown list. Select 'Done' from the Status ID dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node updates the status of the item that got created previously. 4. Kitemaker2 node (workItem: get) # This node will retrieve the information about the item that we created earlier. Select the credentials that you entered in the previous Kitemaker node. Click on the gears icon next to the Work Item ID field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > id. You can also add the following expression: {{$json[\"id\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node retrieves the information of the work item that we created earlier.","title":"Kitemaker"},{"location":"integrations/nodes/n8n-nodes-base.kitemaker/#kitemaker","text":"Kitemaker is a collaboration tool built for designers, engineers, and product managers in remote software development teams. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Kitemaker"},{"location":"integrations/nodes/n8n-nodes-base.kitemaker/#basic-operations","text":"Organization Retrieve data on the logged-in user's organization. Space Retrieve data on all the spaces in the logged-in user's organization. User Retrieve data on all the users in the logged-in user's organization. Work Item Create Get Get All Update","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.kitemaker/#example-usage","text":"This workflow allows you to create, update, and get a work item from Kitemaker. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Kitemaker The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.kitemaker/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.kitemaker/#2-kitemaker-node-workitem-create","text":"This node will create a work item in Kitemaker. First of all, you'll have to enter credentials for the Kitemaker node. You can find out how to do that here . Select 'Create' from the Operation dropdown list. Enter a title in the Title field. Select 'In progress' from the Status ID dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new work item in Kitemaker.","title":"2. Kitemaker node (workItem: create)"},{"location":"integrations/nodes/n8n-nodes-base.kitemaker/#3-kitemaker1-node-workitem-update","text":"This node will update the status of the item that we created using the previous node. Select the credentials that you entered in the previous Kitemaker node. Select 'Update' from the Operation dropdown list. Click on the gears icon next to the Work Item ID field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > id. You can also add the following expression: {{$json[\"id\"]}} . Click on the Add Field button and select 'Status ID' from the dropdown list. Select 'Done' from the Status ID dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node updates the status of the item that got created previously.","title":"3. Kitemaker1 node (workItem: update)"},{"location":"integrations/nodes/n8n-nodes-base.kitemaker/#4-kitemaker2-node-workitem-get","text":"This node will retrieve the information about the item that we created earlier. Select the credentials that you entered in the previous Kitemaker node. Click on the gears icon next to the Work Item ID field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > id. You can also add the following expression: {{$json[\"id\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node retrieves the information of the work item that we created earlier.","title":"4. Kitemaker2 node (workItem: get)"},{"location":"integrations/nodes/n8n-nodes-base.lemlist/","text":"Lemlist # Lemlist is an email outreach platform that allows you to automatically generate personalized images and videos and send personalized cold emails. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Activity Get All Campaign Get All Lead Create Delete Get Unsubscribe Team Get Unsubscribes Add Delete Get All Example Usage # This workflow allows you to list emails from Airtable and create corresponding leads in Lemlist. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - [Airtable]/integrations/nodes/n8n-nodes-base.airtable/) - Lemlist The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Airtable node (List) # This node will list all the records from Airtable. Create a table like this in your Airtable base. First of all, you'll have to enter credentials for the Airtable node. You can find out how to do that here . Select the 'List' option from the Operation dropdown list. Enter the Base ID in the Base ID field. For obtaining the Base ID, head over to their API page and select the correct base. You\u2019ll find the Base ID there. Enter the name of your table in the Table field. Click on the gears icon next to the Table field and click on Add Expression . Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the information of the leads. 3. Lemlist node (create: lead) # This node will create new leads for a campaign in Lemlist. First of all, you'll have to enter credentials for the Lemlist node. You can find out how to do that here . Select 'Lead' from the Resource dropdown list. Select a campaign from the Campaign ID dropdown list. Click on the gears icon next to the Email field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > fields > Email. You can also add the following expression: {{$json[\"fields\"][\"Email\"]}} . Click on the Add Field button and select 'First Name'. Click on the gears icon next to the First Name field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > fields > Name. You can also add the following expression: {{$json[\"fields\"][\"Name\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates new leads in Lemlist. 4. Lemlist node (get: lead) # This node will return the information of the leads that we created in the previous node. Select the credentials that you entered in the previous node. Select 'Lead' from the Resource dropdown list. Select 'Get' from the Operation dropdown list. Click on the gears icon next to the Email field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Airtable > Output Data > JSON > fields > Email. You can also add the following expression: {{$node[\"Airtable\"].json[\"fields\"][\"Email\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the information about the leads we created in the previous node.","title":"Lemlist"},{"location":"integrations/nodes/n8n-nodes-base.lemlist/#lemlist","text":"Lemlist is an email outreach platform that allows you to automatically generate personalized images and videos and send personalized cold emails. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Lemlist"},{"location":"integrations/nodes/n8n-nodes-base.lemlist/#basic-operations","text":"Activity Get All Campaign Get All Lead Create Delete Get Unsubscribe Team Get Unsubscribes Add Delete Get All","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.lemlist/#example-usage","text":"This workflow allows you to list emails from Airtable and create corresponding leads in Lemlist. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - [Airtable]/integrations/nodes/n8n-nodes-base.airtable/) - Lemlist The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.lemlist/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.lemlist/#2-airtable-node-list","text":"This node will list all the records from Airtable. Create a table like this in your Airtable base. First of all, you'll have to enter credentials for the Airtable node. You can find out how to do that here . Select the 'List' option from the Operation dropdown list. Enter the Base ID in the Base ID field. For obtaining the Base ID, head over to their API page and select the correct base. You\u2019ll find the Base ID there. Enter the name of your table in the Table field. Click on the gears icon next to the Table field and click on Add Expression . Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the information of the leads.","title":"2. Airtable node (List)"},{"location":"integrations/nodes/n8n-nodes-base.lemlist/#3-lemlist-node-create-lead","text":"This node will create new leads for a campaign in Lemlist. First of all, you'll have to enter credentials for the Lemlist node. You can find out how to do that here . Select 'Lead' from the Resource dropdown list. Select a campaign from the Campaign ID dropdown list. Click on the gears icon next to the Email field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > fields > Email. You can also add the following expression: {{$json[\"fields\"][\"Email\"]}} . Click on the Add Field button and select 'First Name'. Click on the gears icon next to the First Name field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > fields > Name. You can also add the following expression: {{$json[\"fields\"][\"Name\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates new leads in Lemlist.","title":"3. Lemlist node (create: lead)"},{"location":"integrations/nodes/n8n-nodes-base.lemlist/#4-lemlist-node-get-lead","text":"This node will return the information of the leads that we created in the previous node. Select the credentials that you entered in the previous node. Select 'Lead' from the Resource dropdown list. Select 'Get' from the Operation dropdown list. Click on the gears icon next to the Email field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Airtable > Output Data > JSON > fields > Email. You can also add the following expression: {{$node[\"Airtable\"].json[\"fields\"][\"Email\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the information about the leads we created in the previous node.","title":"4. Lemlist node (get: lead)"},{"location":"integrations/nodes/n8n-nodes-base.line/","text":"Line # Line is a mobile messenger app that allows you to make free voice calls and send messages. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Notification Sends notifications to users or groups Example Usage # This workflow allows you to send daily weather updates via a notification using the Line node. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Cron - OpenWeatherMap - Line The final workflow should look like the following image. 1. Cron node # The Cron node will trigger the workflow daily at 9 AM. Click on Add Cron Time . Set hours to 9 in the Hour field. Click on Execute Node to run the node. In the screenshot below, you will notice that the Cron node is configured to trigger the workflow every day at 9 AM. 2. OpenWeatherMap node (Current Weather) # This node will return data about the current weather in Berlin. To get the weather updates for your city, you can enter the name of your city instead. First of all, you'll have to enter credentials for the OpenWeatherMap node. You can find out how to do that here . Enter berlin in the City field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns data about the current weather in Berlin. 3. Line node (send: notification) # This node will send a notification with the weather update. First of all, you'll have to enter credentials for the Line node. You can find out how to do that here . Click on the gears icon next to the Message field and click on Add Expression . Enter the following message in the Expression field: Hey! The temperature outside is {{$node[\"OpenWeatherMap\"].json[\"main\"][\"temp\"]}}\u00b0C. . Click on Execute Node to run the node. In the screenshot below, you will notice that the node sends a notification with the weather update. Activate workflow for production This example workflow uses the Cron node, which is a Trigger node. You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Cron node.","title":"Line"},{"location":"integrations/nodes/n8n-nodes-base.line/#line","text":"Line is a mobile messenger app that allows you to make free voice calls and send messages. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Line"},{"location":"integrations/nodes/n8n-nodes-base.line/#basic-operations","text":"Notification Sends notifications to users or groups","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.line/#example-usage","text":"This workflow allows you to send daily weather updates via a notification using the Line node. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Cron - OpenWeatherMap - Line The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.line/#1-cron-node","text":"The Cron node will trigger the workflow daily at 9 AM. Click on Add Cron Time . Set hours to 9 in the Hour field. Click on Execute Node to run the node. In the screenshot below, you will notice that the Cron node is configured to trigger the workflow every day at 9 AM.","title":"1. Cron node"},{"location":"integrations/nodes/n8n-nodes-base.line/#2-openweathermap-node-current-weather","text":"This node will return data about the current weather in Berlin. To get the weather updates for your city, you can enter the name of your city instead. First of all, you'll have to enter credentials for the OpenWeatherMap node. You can find out how to do that here . Enter berlin in the City field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns data about the current weather in Berlin.","title":"2. OpenWeatherMap node (Current Weather)"},{"location":"integrations/nodes/n8n-nodes-base.line/#3-line-node-send-notification","text":"This node will send a notification with the weather update. First of all, you'll have to enter credentials for the Line node. You can find out how to do that here . Click on the gears icon next to the Message field and click on Add Expression . Enter the following message in the Expression field: Hey! The temperature outside is {{$node[\"OpenWeatherMap\"].json[\"main\"][\"temp\"]}}\u00b0C. . Click on Execute Node to run the node. In the screenshot below, you will notice that the node sends a notification with the weather update. Activate workflow for production This example workflow uses the Cron node, which is a Trigger node. You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Cron node.","title":"3. Line node (send: notification)"},{"location":"integrations/nodes/n8n-nodes-base.lingvaNex/","text":"LingvaNex # LingvaNex is a service that translates text, web pages, text on images, documents between English and over 112 other languages. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Translate data Example Usage # This workflow allows you to translate cocktail instructions to Italian. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - HTTP Request - LingvaNex The final workflow should look like the following image. 1. Start node # The Start node exists by default when you create a new workflow. 2. HTTP Request node (GET) # This node will make a GET request to the API https://www.thecocktaildb.com/api/json/v1/1/random.php to fetch a random cocktail. This information gets passed on to the next node in the workflow. Enter https://www.thecocktaildb.com/api/json/v1/1/random.php in the URL field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node makes a GET request to the API and returns information about a random cocktail. 3. LingvaNex node # This node will translate the cocktail instructions that we got from the previous node to Italian. To translate the instructions in your language, select your language instead. First of all, you'll have to enter credentials for the LingvaNex node. You can find out how to do that here . Click on the gears icon next to the Text field and click on Add Expression . Select the following in the Variable Selector section: Nodes > HTTP Request > Output Data > JSON > drinks > [item: 0] > strInstructions. You can also add the following expression: {{$node[\"HTTP Request\"].json[\"drinks\"][0][\"strInstructions\"]}} . Select 'Italian' from the Translate To dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node translates the instructions of the cocktail to Italian.","title":"LingvaNex"},{"location":"integrations/nodes/n8n-nodes-base.lingvaNex/#lingvanex","text":"LingvaNex is a service that translates text, web pages, text on images, documents between English and over 112 other languages. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"LingvaNex"},{"location":"integrations/nodes/n8n-nodes-base.lingvaNex/#basic-operations","text":"Translate data","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.lingvaNex/#example-usage","text":"This workflow allows you to translate cocktail instructions to Italian. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - HTTP Request - LingvaNex The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.lingvaNex/#1-start-node","text":"The Start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.lingvaNex/#2-http-request-node-get","text":"This node will make a GET request to the API https://www.thecocktaildb.com/api/json/v1/1/random.php to fetch a random cocktail. This information gets passed on to the next node in the workflow. Enter https://www.thecocktaildb.com/api/json/v1/1/random.php in the URL field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node makes a GET request to the API and returns information about a random cocktail.","title":"2. HTTP Request node (GET)"},{"location":"integrations/nodes/n8n-nodes-base.lingvaNex/#3-lingvanex-node","text":"This node will translate the cocktail instructions that we got from the previous node to Italian. To translate the instructions in your language, select your language instead. First of all, you'll have to enter credentials for the LingvaNex node. You can find out how to do that here . Click on the gears icon next to the Text field and click on Add Expression . Select the following in the Variable Selector section: Nodes > HTTP Request > Output Data > JSON > drinks > [item: 0] > strInstructions. You can also add the following expression: {{$node[\"HTTP Request\"].json[\"drinks\"][0][\"strInstructions\"]}} . Select 'Italian' from the Translate To dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node translates the instructions of the cocktail to Italian.","title":"3. LingvaNex node"},{"location":"integrations/nodes/n8n-nodes-base.linkedIn/","text":"LinkedIn # LinkedIn is an employment-oriented online service. It is mainly used for professional networking, including employers posting jobs and job seekers posting their CVs. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Post Create a new post Keep in mind If posting as an Organization enter only the organization number in the URN field. For example, 03262013 not urn:li:company:03262013 . Example Usage # This workflow allows you to get an image from a URL and post it on LinkedIn. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - HTTP Request - LinkedIn The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. HTTP Request node # Enter the URL of the image you want to download in the URL field. Select File from the Response Format dropdown list. Click on Execute Node to run the node. 3. LinkedIn node # First of all, you'll have to enter credentials for the LinkedIn node. You can find out how to do that here . Select 'Person' from the Post As dropdown list. Select the person you want to post as from the Person dropdown list. Enter a message in the Text field. Select 'Image' from the Media Category dropdown list. Click on Execute Node to run the node.","title":"LinkedIn"},{"location":"integrations/nodes/n8n-nodes-base.linkedIn/#linkedin","text":"LinkedIn is an employment-oriented online service. It is mainly used for professional networking, including employers posting jobs and job seekers posting their CVs. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"LinkedIn"},{"location":"integrations/nodes/n8n-nodes-base.linkedIn/#basic-operations","text":"Post Create a new post Keep in mind If posting as an Organization enter only the organization number in the URN field. For example, 03262013 not urn:li:company:03262013 .","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.linkedIn/#example-usage","text":"This workflow allows you to get an image from a URL and post it on LinkedIn. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - HTTP Request - LinkedIn The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.linkedIn/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.linkedIn/#2-http-request-node","text":"Enter the URL of the image you want to download in the URL field. Select File from the Response Format dropdown list. Click on Execute Node to run the node.","title":"2. HTTP Request node"},{"location":"integrations/nodes/n8n-nodes-base.linkedIn/#3-linkedin-node","text":"First of all, you'll have to enter credentials for the LinkedIn node. You can find out how to do that here . Select 'Person' from the Post As dropdown list. Select the person you want to post as from the Person dropdown list. Enter a message in the Text field. Select 'Image' from the Media Category dropdown list. Click on Execute Node to run the node.","title":"3. LinkedIn node"},{"location":"integrations/nodes/n8n-nodes-base.magento2/","text":"Magento 2 # Magento is an e-commerce platform enabling retailers and brands to build engaging online shopping experiences. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Customer Create a new customer Delete a customer Get a customer Get all customers Update a customer Invoice Create an invoice Order Cancel an order Get an order Get all orders Ship an order Product Create a product Delete a product Get a product Get all producs Update a product","title":"Magento 2"},{"location":"integrations/nodes/n8n-nodes-base.magento2/#magento-2","text":"Magento is an e-commerce platform enabling retailers and brands to build engaging online shopping experiences. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Magento 2"},{"location":"integrations/nodes/n8n-nodes-base.magento2/#basic-operations","text":"Customer Create a new customer Delete a customer Get a customer Get all customers Update a customer Invoice Create an invoice Order Cancel an order Get an order Get all orders Ship an order Product Create a product Delete a product Get a product Get all producs Update a product","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.mailcheck/","text":"Mailcheck # Mailcheck is an application that allows you to clean your subscription list from bounces and enrich data with customers. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Email Check Example Usage # This workflow allows you to validate emails stored in Airtable using the Mailcheck node. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - [Airtable]/integrations/nodes/n8n-nodes-base.airtable/) - Mailcheck - Set The final workflow should look like the following image. 1. Start node # The Start node exists by default when you create a new workflow. 2. Airtable node (List) # Create a table like this in your Airtable base. The Airtable node will list all the records from a table. First of all, you'll have to enter credentials for the Airtable node. You can find out how to do that here . Select the 'List' option from the Operation dropdown list. Enter the Base ID in the Base ID field. For obtaining the Base ID, head over to their API page and select the correct base. You\u2019ll find the Base ID there. Enter the name of your table in the Table field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns all the records from the table. 2. Mailcheck node (check: email) # This node will check the emails that got returned by the previous node. First of all, you'll have to enter credentials for the Mailcheck node. You can find out how to do that here . Click on the gears icon next to the Email field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > fields > email. You can also add the following expression: {{$json[\"fields\"][\"Email\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node checks the email that got returned by the previous node. 3. Set node # We will use the Set node to ensure that only the data that we set in this node gets passed on to the next nodes in the workflow. Click on the Add Value button and select 'Boolean' from the dropdown list. Enter Valid in the Name field. Click on the gears icon next to the Value field. Select the following in the Variable Selector section: Current Node > Input Data > JSON > mxExists. You can also add the following expression: {{$json[\"mxExists\"]}} . Click on the Add Value button and select 'String' from the dropdown list. Enter ID in the Name field. Click on the gears icon next to the Value field. Select the following in the Variable Selector section: Nodes > Airtable > Output Data > JSON > id. You can also add the following expression: {{$node[\"Airtable\"].json[\"id\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node sets the value for Valid and ID . 4. Airtable (Update) # This node will update the Valid field in the table. Select the credentials that you entered in the previous Airtable node. Select 'Update' from the Operation dropdown list. Click on the gears icon next to the Base ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Airtable > Parameters > application. You can also add the following expression: {{$node[\"Airtable\"].parameter[\"application\"]}} . Click on the gears icon next to the Table field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Airtable > Parameters > table. You can also add the following expression: {{$node[\"Airtable\"].parameter[\"table\"]}} . Click on the gears icon next to the Id field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > ID. You can also add the following expression: {{$json[\"ID\"]}} . Toggle Update All Fields to false . This option will update only the fields that we specify. Click on the Add Field button. Enter Valid in the Name field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node updates the Valid field in the table.","title":"Mailcheck"},{"location":"integrations/nodes/n8n-nodes-base.mailcheck/#mailcheck","text":"Mailcheck is an application that allows you to clean your subscription list from bounces and enrich data with customers. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Mailcheck"},{"location":"integrations/nodes/n8n-nodes-base.mailcheck/#basic-operations","text":"Email Check","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.mailcheck/#example-usage","text":"This workflow allows you to validate emails stored in Airtable using the Mailcheck node. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - [Airtable]/integrations/nodes/n8n-nodes-base.airtable/) - Mailcheck - Set The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.mailcheck/#1-start-node","text":"The Start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.mailcheck/#2-airtable-node-list","text":"Create a table like this in your Airtable base. The Airtable node will list all the records from a table. First of all, you'll have to enter credentials for the Airtable node. You can find out how to do that here . Select the 'List' option from the Operation dropdown list. Enter the Base ID in the Base ID field. For obtaining the Base ID, head over to their API page and select the correct base. You\u2019ll find the Base ID there. Enter the name of your table in the Table field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns all the records from the table.","title":"2. Airtable node (List)"},{"location":"integrations/nodes/n8n-nodes-base.mailcheck/#2-mailcheck-node-check-email","text":"This node will check the emails that got returned by the previous node. First of all, you'll have to enter credentials for the Mailcheck node. You can find out how to do that here . Click on the gears icon next to the Email field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > fields > email. You can also add the following expression: {{$json[\"fields\"][\"Email\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node checks the email that got returned by the previous node.","title":"2. Mailcheck node (check: email)"},{"location":"integrations/nodes/n8n-nodes-base.mailcheck/#3-set-node","text":"We will use the Set node to ensure that only the data that we set in this node gets passed on to the next nodes in the workflow. Click on the Add Value button and select 'Boolean' from the dropdown list. Enter Valid in the Name field. Click on the gears icon next to the Value field. Select the following in the Variable Selector section: Current Node > Input Data > JSON > mxExists. You can also add the following expression: {{$json[\"mxExists\"]}} . Click on the Add Value button and select 'String' from the dropdown list. Enter ID in the Name field. Click on the gears icon next to the Value field. Select the following in the Variable Selector section: Nodes > Airtable > Output Data > JSON > id. You can also add the following expression: {{$node[\"Airtable\"].json[\"id\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node sets the value for Valid and ID .","title":"3. Set node"},{"location":"integrations/nodes/n8n-nodes-base.mailcheck/#4-airtable-update","text":"This node will update the Valid field in the table. Select the credentials that you entered in the previous Airtable node. Select 'Update' from the Operation dropdown list. Click on the gears icon next to the Base ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Airtable > Parameters > application. You can also add the following expression: {{$node[\"Airtable\"].parameter[\"application\"]}} . Click on the gears icon next to the Table field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Airtable > Parameters > table. You can also add the following expression: {{$node[\"Airtable\"].parameter[\"table\"]}} . Click on the gears icon next to the Id field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > ID. You can also add the following expression: {{$json[\"ID\"]}} . Toggle Update All Fields to false . This option will update only the fields that we specify. Click on the Add Field button. Enter Valid in the Name field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node updates the Valid field in the table.","title":"4. Airtable (Update)"},{"location":"integrations/nodes/n8n-nodes-base.mailchimp/","text":"Mailchimp # Mailchimp is an integrated marketing platform that allows business owners to automate their email campaigns and track user engagement. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Campaign Delete a campaign Get a campaign Get all the campaigns Replicate a campaign Creates a Resend to Non-Openers version of this campaign Send a campaign List Group Get all groups Member Create a new member on list Delete a member on list Get a member on list Get all members on list Update a new member on list Member Tag Add tags from a list member Remove tags from a list member Example Usage # This workflow allows you to add a new member to a list in Mailchimp. You can also find the workflow on this website. This example usage workflow uses the following two nodes. Start Mailchimp The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Mailchimp node # First of all, you'll have to enter credentials for the Mailchimp node. You can find out how to do that here . Select the Mailchimp list from the List dropdown list. Enter the email address in the Email field. Select the status from the Status dropdown list. Click on Execute Node to run the workflow.","title":"Mailchimp"},{"location":"integrations/nodes/n8n-nodes-base.mailchimp/#mailchimp","text":"Mailchimp is an integrated marketing platform that allows business owners to automate their email campaigns and track user engagement. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Mailchimp"},{"location":"integrations/nodes/n8n-nodes-base.mailchimp/#basic-operations","text":"Campaign Delete a campaign Get a campaign Get all the campaigns Replicate a campaign Creates a Resend to Non-Openers version of this campaign Send a campaign List Group Get all groups Member Create a new member on list Delete a member on list Get a member on list Get all members on list Update a new member on list Member Tag Add tags from a list member Remove tags from a list member","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.mailchimp/#example-usage","text":"This workflow allows you to add a new member to a list in Mailchimp. You can also find the workflow on this website. This example usage workflow uses the following two nodes. Start Mailchimp The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.mailchimp/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.mailchimp/#2-mailchimp-node","text":"First of all, you'll have to enter credentials for the Mailchimp node. You can find out how to do that here . Select the Mailchimp list from the List dropdown list. Enter the email address in the Email field. Select the status from the Status dropdown list. Click on Execute Node to run the workflow.","title":"2. Mailchimp node"},{"location":"integrations/nodes/n8n-nodes-base.mailerLite/","text":"MailerLite # MailerLite is an email marketing solution that provides you with a user-friendly content editor, simplified subscriber management, and campaign reports with the most important statistics. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Subscriber Create a new subscriber Get an subscriber Get all subscribers Update an subscriber Example Usage # This workflow allows you to create, update, and get a subscriber using the MailerLite node. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - MailerLite The final workflow should look like the following image. 1. Start node # The Start node exists by default when you create a new workflow. 2. MailerLite node (create: subscriber) # This node will create a new subscriber in MailerLite. We will add the name of the subscriber along with their email. First of all, you'll have to enter credentials for the MailerLite node. You can find out how to do that here . Enter the email address in the Email field. Click on the Add Field button and select 'Name' from the dropdown list. Enter the name of the subscriber in the Name field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new subscriber with their name and email. 3. MailerLite1 node (update: subscriber) # This node will update the information of the subscriber that we created in the previous node. We will add the information about the city of the subscriber using this node. Select the credentials that you entered in the previous node. Select 'Update' from the Operation dropdown list. Click on the gears icon next to the Subscriber Email field and click on Add Expression . Select the following in the Variable Selector section: Nodes > MailerLite > Output Data > JSON > email. You can also add the following expression: {{$node[\"MailerLite\"].json[\"email\"]}} . Click on the Add Field button and select 'Custom Fields' from the dropdown list. Click on the Add Custom Field button. Select 'city' from the Field ID dropdown list. Enter the name of the city in the Value field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node updates the information of the subscriber that we created in the previous node. Here, the node has added information about the city of the subscriber. 3. MailerLite2 node (get: subscriber) # This node will return the information of the subscriber that we created using the MailerLite node. Select the credentials that you entered in the previous node. Select 'Get' from the Operation dropdown list. Click on the gears icon next to the Subscriber Email field and click on Add Expression . Select the following in the Variable Selector section: Nodes > MailerLite > Output Data > JSON > email. You can also add the following expression: {{$node[\"MailerLite\"].json[\"email\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the information of the subscriber that we created using the MailerLite node.","title":"MailerLite"},{"location":"integrations/nodes/n8n-nodes-base.mailerLite/#mailerlite","text":"MailerLite is an email marketing solution that provides you with a user-friendly content editor, simplified subscriber management, and campaign reports with the most important statistics. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"MailerLite"},{"location":"integrations/nodes/n8n-nodes-base.mailerLite/#basic-operations","text":"Subscriber Create a new subscriber Get an subscriber Get all subscribers Update an subscriber","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.mailerLite/#example-usage","text":"This workflow allows you to create, update, and get a subscriber using the MailerLite node. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - MailerLite The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.mailerLite/#1-start-node","text":"The Start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.mailerLite/#2-mailerlite-node-create-subscriber","text":"This node will create a new subscriber in MailerLite. We will add the name of the subscriber along with their email. First of all, you'll have to enter credentials for the MailerLite node. You can find out how to do that here . Enter the email address in the Email field. Click on the Add Field button and select 'Name' from the dropdown list. Enter the name of the subscriber in the Name field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new subscriber with their name and email.","title":"2. MailerLite node (create: subscriber)"},{"location":"integrations/nodes/n8n-nodes-base.mailerLite/#3-mailerlite1-node-update-subscriber","text":"This node will update the information of the subscriber that we created in the previous node. We will add the information about the city of the subscriber using this node. Select the credentials that you entered in the previous node. Select 'Update' from the Operation dropdown list. Click on the gears icon next to the Subscriber Email field and click on Add Expression . Select the following in the Variable Selector section: Nodes > MailerLite > Output Data > JSON > email. You can also add the following expression: {{$node[\"MailerLite\"].json[\"email\"]}} . Click on the Add Field button and select 'Custom Fields' from the dropdown list. Click on the Add Custom Field button. Select 'city' from the Field ID dropdown list. Enter the name of the city in the Value field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node updates the information of the subscriber that we created in the previous node. Here, the node has added information about the city of the subscriber.","title":"3. MailerLite1 node (update: subscriber)"},{"location":"integrations/nodes/n8n-nodes-base.mailerLite/#3-mailerlite2-node-get-subscriber","text":"This node will return the information of the subscriber that we created using the MailerLite node. Select the credentials that you entered in the previous node. Select 'Get' from the Operation dropdown list. Click on the gears icon next to the Subscriber Email field and click on Add Expression . Select the following in the Variable Selector section: Nodes > MailerLite > Output Data > JSON > email. You can also add the following expression: {{$node[\"MailerLite\"].json[\"email\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the information of the subscriber that we created using the MailerLite node.","title":"3. MailerLite2 node (get: subscriber)"},{"location":"integrations/nodes/n8n-nodes-base.mailgun/","text":"Mailgun # Mailgun is a developer-friendly email sending platform that provides API-based email services that are easy to use. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Send an email Example Usage # This workflow allows you to send an email using Mailgun. You can also find the workflow on this website. This example usage workflow uses the following two nodes. Start Mailgun The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Mailgun node # First of all, you'll have to enter credentials for the Mailgun node. You can find out how to do that here . Enter the email address from which you want to send the email in the From Email field. Enter the recipient email in the To Email field. Enter the subject for the email in the Subject field. Enter the content of the email in the Text field. Click on Execute Node to run the workflow.","title":"Mailgun"},{"location":"integrations/nodes/n8n-nodes-base.mailgun/#mailgun","text":"Mailgun is a developer-friendly email sending platform that provides API-based email services that are easy to use. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Mailgun"},{"location":"integrations/nodes/n8n-nodes-base.mailgun/#basic-operations","text":"Send an email","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.mailgun/#example-usage","text":"This workflow allows you to send an email using Mailgun. You can also find the workflow on this website. This example usage workflow uses the following two nodes. Start Mailgun The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.mailgun/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.mailgun/#2-mailgun-node","text":"First of all, you'll have to enter credentials for the Mailgun node. You can find out how to do that here . Enter the email address from which you want to send the email in the From Email field. Enter the recipient email in the To Email field. Enter the subject for the email in the Subject field. Enter the content of the email in the Text field. Click on Execute Node to run the workflow.","title":"2. Mailgun node"},{"location":"integrations/nodes/n8n-nodes-base.mailjet/","text":"Mailjet # Mailjet is a cloud-based email sending and tracking system. The platform allows professionals to send both marketing emails and transactional emails. It includes tools for designing emails, sending massive volumes and tracking these messages. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Email Send a email Send a email template SMS Send a sms Example Usage # This workflow allows you to send an email using Mailjet. You can also find the workflow on this website. This example usage workflow uses the following two nodes. Start Mailjet The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Mailjet node # First of all, you'll have to enter credentials for the Mailjet node. You can find out how to do that here . Enter the email address from which you want to send the email in the From Email field. Enter the recipient email address in the To Email field. Enter the subject for the email in the Subject field. Enter the content of the email in the Text field. Click on Execute Node to run the workflow.","title":"Mailjet"},{"location":"integrations/nodes/n8n-nodes-base.mailjet/#mailjet","text":"Mailjet is a cloud-based email sending and tracking system. The platform allows professionals to send both marketing emails and transactional emails. It includes tools for designing emails, sending massive volumes and tracking these messages. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Mailjet"},{"location":"integrations/nodes/n8n-nodes-base.mailjet/#basic-operations","text":"Email Send a email Send a email template SMS Send a sms","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.mailjet/#example-usage","text":"This workflow allows you to send an email using Mailjet. You can also find the workflow on this website. This example usage workflow uses the following two nodes. Start Mailjet The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.mailjet/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.mailjet/#2-mailjet-node","text":"First of all, you'll have to enter credentials for the Mailjet node. You can find out how to do that here . Enter the email address from which you want to send the email in the From Email field. Enter the recipient email address in the To Email field. Enter the subject for the email in the Subject field. Enter the content of the email in the Text field. Click on Execute Node to run the workflow.","title":"2. Mailjet node"},{"location":"integrations/nodes/n8n-nodes-base.mandrill/","text":"Mandrill # Mandrill is a transactional email service developed by MailChimp. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Message Send message based on template. Send message based on HTML. Example Usage # This workflow allows you to send an email using a template via Mandrill. You can also find the workflow on this website. This example usage workflow uses the following two nodes. Start Mandrill The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Mandrill node # First of all, you'll have to enter credentials for the Mandrill node. You can find out how to do that here . Select the template you would like to use from the Template dropdown list. Enter the email address from which you want to send the email in the From Email field. Enter the recipient email address in the To Email field. Click on Execute Node to run the workflow.","title":"Mandrill"},{"location":"integrations/nodes/n8n-nodes-base.mandrill/#mandrill","text":"Mandrill is a transactional email service developed by MailChimp. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Mandrill"},{"location":"integrations/nodes/n8n-nodes-base.mandrill/#basic-operations","text":"Message Send message based on template. Send message based on HTML.","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.mandrill/#example-usage","text":"This workflow allows you to send an email using a template via Mandrill. You can also find the workflow on this website. This example usage workflow uses the following two nodes. Start Mandrill The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.mandrill/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.mandrill/#2-mandrill-node","text":"First of all, you'll have to enter credentials for the Mandrill node. You can find out how to do that here . Select the template you would like to use from the Template dropdown list. Enter the email address from which you want to send the email in the From Email field. Enter the recipient email address in the To Email field. Click on Execute Node to run the workflow.","title":"2. Mandrill node"},{"location":"integrations/nodes/n8n-nodes-base.marketstack/","text":"Marketstack # Marketstack is a REST API that provides stock market data in JSON format. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic operations # End-of-Day Data Get All Exchange Get Ticker Get Example usage # This workflow allows you to get the past week's end of day data for a desired stock symbol. This example usage workflow uses the following two nodes. Start Marketstack The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Marketstack node # First enter your credentials for the Marketstack node. You can find out how to do that here . Select End-of-Day Data from the Resource dropdown. The Get All Operation is selected by default. Enter your desired ticker symbol, AI in our example. Click the Add Filter button and select Timeframe Start Date > A Week Ago . Click the Add Filter button and select Timeframe End Date > Today . Click on Execute Node to run the workflow.","title":"Marketstack"},{"location":"integrations/nodes/n8n-nodes-base.marketstack/#marketstack","text":"Marketstack is a REST API that provides stock market data in JSON format. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Marketstack"},{"location":"integrations/nodes/n8n-nodes-base.marketstack/#basic-operations","text":"End-of-Day Data Get All Exchange Get Ticker Get","title":"Basic operations"},{"location":"integrations/nodes/n8n-nodes-base.marketstack/#example-usage","text":"This workflow allows you to get the past week's end of day data for a desired stock symbol. This example usage workflow uses the following two nodes. Start Marketstack The final workflow should look like the following image.","title":"Example usage"},{"location":"integrations/nodes/n8n-nodes-base.marketstack/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.marketstack/#2-marketstack-node","text":"First enter your credentials for the Marketstack node. You can find out how to do that here . Select End-of-Day Data from the Resource dropdown. The Get All Operation is selected by default. Enter your desired ticker symbol, AI in our example. Click the Add Filter button and select Timeframe Start Date > A Week Ago . Click the Add Filter button and select Timeframe End Date > Today . Click on Execute Node to run the workflow.","title":"2. Marketstack node"},{"location":"integrations/nodes/n8n-nodes-base.matrix/","text":"Matrix # Matrix is an open standard for interoperable, decentralized, real-time communication over IP. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Account Get current user's account information Event Get single event by ID Media Send media to a chat room Message Send a message to a room Gets all messages from a room Room New chat room with defined settings Invite a user to a room Join a new room Kick a user from a room Leave a room Room Member Get all members Example Usage # This workflow allows you to create a room, invite members from a different room, and send a message to the room that we created using the Matrix node. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - Matrix - IF - No Operation, do nothing The final workflow should look like the following image. 1. Start node # The Start node exists by default when you create a new workflow. 2. Matrix node (create: room) # This node will create a new room called n8n on the Matrix server. First of all, you'll have to enter credentials for the Matrix node. You can find out how to do that here . Select 'Room' from the Resource dropdown list. Enter n8n in the Room Name field. You can also enter a different name for the room. Enter an alias for the room in the Room Alias field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a room n8n with an alias #discussion-n8n:matrix.org . 3. Matrix1 node (me: account) # This node will get your account information from the Matrix server. We are doing this because Matrix will send an invite to all members of the room, including you. Since you are already a member of the room, you will get an error. We will use the data from this node later on to make sure that you don't send an invite to yourself. Select the credentials that you entered in the previous node. Select 'Account' from the Resource dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns your user ID. 3. Matrix2 node (getAll: roomMember) # This node will return the information of all the members in a room. Select the credentials that you entered in the previous node. Select 'Room Member' from the Resource dropdown list. Select a room from the Room ID dropdown list. We will invite the members of this room later on in the workflow. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the information of all the members in the room that we specified. The output of this node will be passed on to the next nodes in the workflow. 4. IF node # This node will compare your user ID with the user ID of other members. If the user IDs are not equal, the output will be true. Click on Add Condition and select 'String'. Click on the gears icon next to the Value 1 field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Matrix1 > Output Data > JSON > user_id. You can also add the following expression: {{$node[\"Matrix1\"].json[\"user_id\"]}} . Select 'Not Equal' from the Operation dropdown list. Click on the gears icon next to the Value 2 field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Matrix2 > Output Data > JSON > user_id. You can also add the following expression: {{$node[\"Matrix2\"].json[\"user_id\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the information of all the members of the room except your own. 4. Matrix3 node (invite: room) # This node will send an invitation to the members returned by the previous node to join the room that we created using the Matrix node. Connect the node to the 'true' output of the IF node Select the credentials that you entered in the previous node. Select 'Room' from the Resource dropdown list. Select 'Invite' from the Operation dropdown list. Click on the gears icon next to the Room ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Matrix > Output Data > JSON > room_id. You can also add the following expression: {{$node[\"Matrix\"].json[\"room_id\"]}} . Click on the gears icon next to the User ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > IF > Output Data > JSON > user_id. You can also add the following expression: {{$node[\"IF\"].json[\"user_id\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node sends an invite to join the n8n room to the members of the other room. 5. Matrix4 node (create: message) # This node will send a message to the new room that we created using the Matrix node. Select the credentials that you entered in the previous node. Click on the gears icon next to the Room ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Matrix > Output Data > JSON > room_id. You can also add the following expression: {{$node[\"Matrix\"].json[\"room_id\"]}} . Enter a message in the Text field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node sends a message to the room that we created with the Matrix node. 6. NoOp node # Adding this node here is optional, as the absence of this node won't make a difference to the functioning of the workflow. We've added this as it can sometimes help others with a better understanding of the workflow, visually. Create a NoOp node connected to the 'false' output of the IF node. Click on Execute Node to run the node.","title":"Matrix"},{"location":"integrations/nodes/n8n-nodes-base.matrix/#matrix","text":"Matrix is an open standard for interoperable, decentralized, real-time communication over IP. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Matrix"},{"location":"integrations/nodes/n8n-nodes-base.matrix/#basic-operations","text":"Account Get current user's account information Event Get single event by ID Media Send media to a chat room Message Send a message to a room Gets all messages from a room Room New chat room with defined settings Invite a user to a room Join a new room Kick a user from a room Leave a room Room Member Get all members","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.matrix/#example-usage","text":"This workflow allows you to create a room, invite members from a different room, and send a message to the room that we created using the Matrix node. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - Matrix - IF - No Operation, do nothing The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.matrix/#1-start-node","text":"The Start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.matrix/#2-matrix-node-create-room","text":"This node will create a new room called n8n on the Matrix server. First of all, you'll have to enter credentials for the Matrix node. You can find out how to do that here . Select 'Room' from the Resource dropdown list. Enter n8n in the Room Name field. You can also enter a different name for the room. Enter an alias for the room in the Room Alias field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a room n8n with an alias #discussion-n8n:matrix.org .","title":"2. Matrix node (create: room)"},{"location":"integrations/nodes/n8n-nodes-base.matrix/#3-matrix1-node-me-account","text":"This node will get your account information from the Matrix server. We are doing this because Matrix will send an invite to all members of the room, including you. Since you are already a member of the room, you will get an error. We will use the data from this node later on to make sure that you don't send an invite to yourself. Select the credentials that you entered in the previous node. Select 'Account' from the Resource dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns your user ID.","title":"3. Matrix1 node (me: account)"},{"location":"integrations/nodes/n8n-nodes-base.matrix/#3-matrix2-node-getall-roommember","text":"This node will return the information of all the members in a room. Select the credentials that you entered in the previous node. Select 'Room Member' from the Resource dropdown list. Select a room from the Room ID dropdown list. We will invite the members of this room later on in the workflow. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the information of all the members in the room that we specified. The output of this node will be passed on to the next nodes in the workflow.","title":"3. Matrix2 node (getAll: roomMember)"},{"location":"integrations/nodes/n8n-nodes-base.matrix/#4-if-node","text":"This node will compare your user ID with the user ID of other members. If the user IDs are not equal, the output will be true. Click on Add Condition and select 'String'. Click on the gears icon next to the Value 1 field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Matrix1 > Output Data > JSON > user_id. You can also add the following expression: {{$node[\"Matrix1\"].json[\"user_id\"]}} . Select 'Not Equal' from the Operation dropdown list. Click on the gears icon next to the Value 2 field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Matrix2 > Output Data > JSON > user_id. You can also add the following expression: {{$node[\"Matrix2\"].json[\"user_id\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the information of all the members of the room except your own.","title":"4. IF node"},{"location":"integrations/nodes/n8n-nodes-base.matrix/#4-matrix3-node-invite-room","text":"This node will send an invitation to the members returned by the previous node to join the room that we created using the Matrix node. Connect the node to the 'true' output of the IF node Select the credentials that you entered in the previous node. Select 'Room' from the Resource dropdown list. Select 'Invite' from the Operation dropdown list. Click on the gears icon next to the Room ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Matrix > Output Data > JSON > room_id. You can also add the following expression: {{$node[\"Matrix\"].json[\"room_id\"]}} . Click on the gears icon next to the User ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > IF > Output Data > JSON > user_id. You can also add the following expression: {{$node[\"IF\"].json[\"user_id\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node sends an invite to join the n8n room to the members of the other room.","title":"4. Matrix3 node (invite: room)"},{"location":"integrations/nodes/n8n-nodes-base.matrix/#5-matrix4-node-create-message","text":"This node will send a message to the new room that we created using the Matrix node. Select the credentials that you entered in the previous node. Click on the gears icon next to the Room ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Matrix > Output Data > JSON > room_id. You can also add the following expression: {{$node[\"Matrix\"].json[\"room_id\"]}} . Enter a message in the Text field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node sends a message to the room that we created with the Matrix node.","title":"5. Matrix4 node (create: message)"},{"location":"integrations/nodes/n8n-nodes-base.matrix/#6-noop-node","text":"Adding this node here is optional, as the absence of this node won't make a difference to the functioning of the workflow. We've added this as it can sometimes help others with a better understanding of the workflow, visually. Create a NoOp node connected to the 'false' output of the IF node. Click on Execute Node to run the node.","title":"6. NoOp node"},{"location":"integrations/nodes/n8n-nodes-base.mattermost/","text":"Mattermost # Mattermost is an open-source, self-hostable online chat service with file sharing, search, and integrations. It is designed as an internal chat for organisations and companies. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Channel Add a user to a channel Create a new channel Soft delete a channel Get a page of members for a channel Restores a soft deleted channel Search for a channel Get statistics for a channel Message Soft delete a post, by marking the post as deleted in the database Post a message into a channel Post an ephemeral message into a channel Reaction Add a reaction to a post. Remove a reaction from a post Get all the reactions to one or more posts User Create a new user Deactivates the user and revokes all its sessions by archiving its user object. Retrieve all users Get a user by email Get a user by ID Invite user to team Example Usage # This workflow allows you to create a channel, add a member, and post a message to the channel on Mattermost. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - Mattermost The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Mattermost node (create: channel) # This node will create a new channel named docs in Mattermost. If you want to create a channel with a different name, enter that name instead. First of all, you'll have to enter credentials for the Mattermost node. You can find out how to do that here . Select 'Channel' from the Resource dropdown list. Select a team from the Team ID dropdown list. Enter Docs in the Display Name field. Enter docs in the Name field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new channel named docs in Mattermost. 3. Mattermost1 node (addUser: channel) # This node will add a member to the channel that we created in the previous node. Select the credentials that you entered in the previous node. Select 'Channel' from the Resource dropdown list. Select 'Add User' from the Operation dropdown list. Click on the gears icon next to the Channel ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Mattermost > Output Data > JSON > id. You can also add the following expression: {{$node[\"Mattermost\"].json[\"id\"]}} . Select a user from the User ID dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node adds a user to the channel that we created in the previous node. 4. Mattermost2 node (post: message) # This node will post a message to the channel that we created using the Mattermost node. Select the credentials that you entered in the previous node. Click on the gears icon next to the Channel ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Mattermost > Output Data > JSON > id. You can also add the following expression: {{$node[\"Mattermost\"].json[\"id\"]}} . Enter a message in the Message field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node posts a message to the channel that we created in the Mattermost node. FAQs # How do I resolve the error for the Channel ID field? # If you're not the System Administrator, you might get an error there was a problem loading the parameter options from server: \"Mattermost error response: You do not have the appropriate permissions.\" next to the Channel ID field. If the system administrator has granted you the post:channel permissions, you will be able to execute the node successfully even with the error. How do I find the Channel ID? # To find the Channel ID in Mattermost, follow the steps mentioned below. Select the channel from the left sidebar. Click on the channel name on the top and select 'View Info' from the dropdown list. Use the displayed ID in n8n.","title":"Mattermost"},{"location":"integrations/nodes/n8n-nodes-base.mattermost/#mattermost","text":"Mattermost is an open-source, self-hostable online chat service with file sharing, search, and integrations. It is designed as an internal chat for organisations and companies. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Mattermost"},{"location":"integrations/nodes/n8n-nodes-base.mattermost/#basic-operations","text":"Channel Add a user to a channel Create a new channel Soft delete a channel Get a page of members for a channel Restores a soft deleted channel Search for a channel Get statistics for a channel Message Soft delete a post, by marking the post as deleted in the database Post a message into a channel Post an ephemeral message into a channel Reaction Add a reaction to a post. Remove a reaction from a post Get all the reactions to one or more posts User Create a new user Deactivates the user and revokes all its sessions by archiving its user object. Retrieve all users Get a user by email Get a user by ID Invite user to team","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.mattermost/#example-usage","text":"This workflow allows you to create a channel, add a member, and post a message to the channel on Mattermost. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - Mattermost The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.mattermost/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.mattermost/#2-mattermost-node-create-channel","text":"This node will create a new channel named docs in Mattermost. If you want to create a channel with a different name, enter that name instead. First of all, you'll have to enter credentials for the Mattermost node. You can find out how to do that here . Select 'Channel' from the Resource dropdown list. Select a team from the Team ID dropdown list. Enter Docs in the Display Name field. Enter docs in the Name field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new channel named docs in Mattermost.","title":"2. Mattermost node (create: channel)"},{"location":"integrations/nodes/n8n-nodes-base.mattermost/#3-mattermost1-node-adduser-channel","text":"This node will add a member to the channel that we created in the previous node. Select the credentials that you entered in the previous node. Select 'Channel' from the Resource dropdown list. Select 'Add User' from the Operation dropdown list. Click on the gears icon next to the Channel ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Mattermost > Output Data > JSON > id. You can also add the following expression: {{$node[\"Mattermost\"].json[\"id\"]}} . Select a user from the User ID dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node adds a user to the channel that we created in the previous node.","title":"3. Mattermost1 node (addUser: channel)"},{"location":"integrations/nodes/n8n-nodes-base.mattermost/#4-mattermost2-node-post-message","text":"This node will post a message to the channel that we created using the Mattermost node. Select the credentials that you entered in the previous node. Click on the gears icon next to the Channel ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Mattermost > Output Data > JSON > id. You can also add the following expression: {{$node[\"Mattermost\"].json[\"id\"]}} . Enter a message in the Message field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node posts a message to the channel that we created in the Mattermost node.","title":"4. Mattermost2 node (post: message)"},{"location":"integrations/nodes/n8n-nodes-base.mattermost/#faqs","text":"","title":"FAQs"},{"location":"integrations/nodes/n8n-nodes-base.mattermost/#how-do-i-resolve-the-error-for-the-channel-id-field","text":"If you're not the System Administrator, you might get an error there was a problem loading the parameter options from server: \"Mattermost error response: You do not have the appropriate permissions.\" next to the Channel ID field. If the system administrator has granted you the post:channel permissions, you will be able to execute the node successfully even with the error.","title":"How do I resolve the error for the Channel ID field?"},{"location":"integrations/nodes/n8n-nodes-base.mattermost/#how-do-i-find-the-channel-id","text":"To find the Channel ID in Mattermost, follow the steps mentioned below. Select the channel from the left sidebar. Click on the channel name on the top and select 'View Info' from the dropdown list. Use the displayed ID in n8n.","title":"How do I find the Channel ID?"},{"location":"integrations/nodes/n8n-nodes-base.mautic/","text":"Mautic # Mautic is an open-source marketing automation software that helps online businesses automate their repetitive marketing tasks such as lead generation, contact scoring, contact segmentation, and marketing campaigns. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Campaign Contact Add contact to a campaign Remove contact from a campaign Company Create a new company Delete a company Get data of a company Get data of all companies Update a company Company Contact Add contact to a company Remove a contact from a company Contact Create a new contact Delete a contact Edit contact's points Add/remove contacts from/to the do not contact list Get data of a contact Get data of all contacts Send email to contact Update a contact Contact Segment Add contact to a segment Remove contact from a segment Segment Email Send Example Usage # This workflow allows you to get all contacts from Mautic. You can also find the workflow on the website. This example usage workflow uses the following two nodes. Start Mautic The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Mautic node # First of all, you'll have to enter credentials for the Mautic node. You can find out how to do that here . Select 'Get All' from the Operation dropdown list. Click on Execute Node to run the workflow.","title":"Mautic"},{"location":"integrations/nodes/n8n-nodes-base.mautic/#mautic","text":"Mautic is an open-source marketing automation software that helps online businesses automate their repetitive marketing tasks such as lead generation, contact scoring, contact segmentation, and marketing campaigns. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Mautic"},{"location":"integrations/nodes/n8n-nodes-base.mautic/#basic-operations","text":"Campaign Contact Add contact to a campaign Remove contact from a campaign Company Create a new company Delete a company Get data of a company Get data of all companies Update a company Company Contact Add contact to a company Remove a contact from a company Contact Create a new contact Delete a contact Edit contact's points Add/remove contacts from/to the do not contact list Get data of a contact Get data of all contacts Send email to contact Update a contact Contact Segment Add contact to a segment Remove contact from a segment Segment Email Send","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.mautic/#example-usage","text":"This workflow allows you to get all contacts from Mautic. You can also find the workflow on the website. This example usage workflow uses the following two nodes. Start Mautic The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.mautic/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.mautic/#2-mautic-node","text":"First of all, you'll have to enter credentials for the Mautic node. You can find out how to do that here . Select 'Get All' from the Operation dropdown list. Click on Execute Node to run the workflow.","title":"2. Mautic node"},{"location":"integrations/nodes/n8n-nodes-base.medium/","text":"Medium # Medium is an online publishing platform and home to a diverse array of stories, ideas, and perspectives. It empowers writers to share their work and ideas with the readers. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Post Create a post Publication Get all publications Example Usage # This workflow allows you to post an article to a publication on Medium. You can also find the workflow on the website. This example usage workflow uses the following two nodes. Start Medium The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Medium node # First of all, you'll have to enter credentials for the Medium node. You can find out how to do that here . Toggle Publication to true. Select the publication from the Publication ID dropdown list. Enter the title in the Title field. Select the format from the Content Format dropdown list. Enter conent of the post in the Content field. Click on Execute Node to run the workflow.","title":"Medium"},{"location":"integrations/nodes/n8n-nodes-base.medium/#medium","text":"Medium is an online publishing platform and home to a diverse array of stories, ideas, and perspectives. It empowers writers to share their work and ideas with the readers. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Medium"},{"location":"integrations/nodes/n8n-nodes-base.medium/#basic-operations","text":"Post Create a post Publication Get all publications","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.medium/#example-usage","text":"This workflow allows you to post an article to a publication on Medium. You can also find the workflow on the website. This example usage workflow uses the following two nodes. Start Medium The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.medium/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.medium/#2-medium-node","text":"First of all, you'll have to enter credentials for the Medium node. You can find out how to do that here . Toggle Publication to true. Select the publication from the Publication ID dropdown list. Enter the title in the Title field. Select the format from the Content Format dropdown list. Enter conent of the post in the Content field. Click on Execute Node to run the workflow.","title":"2. Medium node"},{"location":"integrations/nodes/n8n-nodes-base.messageBird/","text":"MessageBird # MessageBird is a cloud communications platform that connects enterprises to their global customers. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # SMS Send text messages (SMS) Balance Get the balance Example Usage # This workflow allows you to send an SMS with MessageBird. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - MessageBird The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. MessageBird node # First of all, you'll have to enter credentials for the MessageBird node. You can find out how to do that here . Enter the phone number from which you'll be sending the message in the From field. Enter the phone number to which you'll be sending the message in the To field. Enter you message in the Message field. Click on Execute Node to run the workflow.","title":"MessageBird"},{"location":"integrations/nodes/n8n-nodes-base.messageBird/#messagebird","text":"MessageBird is a cloud communications platform that connects enterprises to their global customers. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"MessageBird"},{"location":"integrations/nodes/n8n-nodes-base.messageBird/#basic-operations","text":"SMS Send text messages (SMS) Balance Get the balance","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.messageBird/#example-usage","text":"This workflow allows you to send an SMS with MessageBird. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - MessageBird The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.messageBird/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.messageBird/#2-messagebird-node","text":"First of all, you'll have to enter credentials for the MessageBird node. You can find out how to do that here . Enter the phone number from which you'll be sending the message in the From field. Enter the phone number to which you'll be sending the message in the To field. Enter you message in the Message field. Click on Execute Node to run the workflow.","title":"2. MessageBird node"},{"location":"integrations/nodes/n8n-nodes-base.microsoftDynamicsCrm/","text":"Microsoft Dynamics CRM # Microsoft Dynamics CRM is a is a customer relationship management application developed by Microsoft. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Account Create Delete Get Get All Update","title":"Microsoft Dynamics CRM"},{"location":"integrations/nodes/n8n-nodes-base.microsoftDynamicsCrm/#microsoft-dynamics-crm","text":"Microsoft Dynamics CRM is a is a customer relationship management application developed by Microsoft. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Microsoft Dynamics CRM"},{"location":"integrations/nodes/n8n-nodes-base.microsoftDynamicsCrm/#basic-operations","text":"Account Create Delete Get Get All Update","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.microsoftExcel/","text":"Microsoft Excel # Microsoft Excel is a spreadsheet developed by Microsoft. It features calculation, graphing tools, pivot tables, and a macro programming language called Visual Basic for Applications. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Table Adds rows to the end of the table Retrieve a list of tablecolumns Retrieve a list of tablerows Looks for a specific column value and then returns the matching row Workbook Adds a new worksheet to the workbook. Get data of all workbooks Worksheet Get all worksheets Get worksheet content Example Usage # This workflow allows you to get information about all workbooks from Microsoft Excel. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Microsoft Excel The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Microsoft Excel node # First of all, you'll have to enter credentials for the Microsoft Excel node. You can find out how to do that here . Select the 'Get All' option from the Operation dropdown list. Click on Execute Node to run the workflow.","title":"Microsoft Excel"},{"location":"integrations/nodes/n8n-nodes-base.microsoftExcel/#microsoft-excel","text":"Microsoft Excel is a spreadsheet developed by Microsoft. It features calculation, graphing tools, pivot tables, and a macro programming language called Visual Basic for Applications. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Microsoft Excel"},{"location":"integrations/nodes/n8n-nodes-base.microsoftExcel/#basic-operations","text":"Table Adds rows to the end of the table Retrieve a list of tablecolumns Retrieve a list of tablerows Looks for a specific column value and then returns the matching row Workbook Adds a new worksheet to the workbook. Get data of all workbooks Worksheet Get all worksheets Get worksheet content","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.microsoftExcel/#example-usage","text":"This workflow allows you to get information about all workbooks from Microsoft Excel. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Microsoft Excel The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.microsoftExcel/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.microsoftExcel/#2-microsoft-excel-node","text":"First of all, you'll have to enter credentials for the Microsoft Excel node. You can find out how to do that here . Select the 'Get All' option from the Operation dropdown list. Click on Execute Node to run the workflow.","title":"2. Microsoft Excel node"},{"location":"integrations/nodes/n8n-nodes-base.microsoftGraphSecurity/","text":"Microsoft Graph Security # The Microsoft Graph Security API allows connecting to Microsoft security products, services, and partners to streamline security operations and improve threat protection, detection, and response capabilities. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Secure Score Get Get All Secure Score Control Profile Get Get All Update","title":"Microsoft Graph Security"},{"location":"integrations/nodes/n8n-nodes-base.microsoftGraphSecurity/#microsoft-graph-security","text":"The Microsoft Graph Security API allows connecting to Microsoft security products, services, and partners to streamline security operations and improve threat protection, detection, and response capabilities. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Microsoft Graph Security"},{"location":"integrations/nodes/n8n-nodes-base.microsoftGraphSecurity/#basic-operations","text":"Secure Score Get Get All Secure Score Control Profile Get Get All Update","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.microsoftOneDrive/","text":"Microsoft OneDrive # Microsoft OneDrive is a file hosting service and synchronization service operated by Microsoft. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # File Copy a file Delete a file Download a file Get a file Search a file Share a file Upload a file up to 4MB in size Folder Create a folder Delete a folder Get items inside a folder Search a folder Share a folder Example Usage # This workflow allows you to create a folder in Microsoft OneDrive. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Microsoft OneDrive The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Microsoft OneDrive node # First of all, you'll have to enter credentials for the Microsoft OneDrive node. You can find out how to do that here . Select the 'Folder' option from the Resource dropdown list. Select the 'Create' option from the Operation dropdown list. Enter the folder name in the Name field. Click on Execute Node to run the workflow.","title":"Microsoft OneDrive"},{"location":"integrations/nodes/n8n-nodes-base.microsoftOneDrive/#microsoft-onedrive","text":"Microsoft OneDrive is a file hosting service and synchronization service operated by Microsoft. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Microsoft OneDrive"},{"location":"integrations/nodes/n8n-nodes-base.microsoftOneDrive/#basic-operations","text":"File Copy a file Delete a file Download a file Get a file Search a file Share a file Upload a file up to 4MB in size Folder Create a folder Delete a folder Get items inside a folder Search a folder Share a folder","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.microsoftOneDrive/#example-usage","text":"This workflow allows you to create a folder in Microsoft OneDrive. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Microsoft OneDrive The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.microsoftOneDrive/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.microsoftOneDrive/#2-microsoft-onedrive-node","text":"First of all, you'll have to enter credentials for the Microsoft OneDrive node. You can find out how to do that here . Select the 'Folder' option from the Resource dropdown list. Select the 'Create' option from the Operation dropdown list. Enter the folder name in the Name field. Click on Execute Node to run the workflow.","title":"2. Microsoft OneDrive node"},{"location":"integrations/nodes/n8n-nodes-base.microsoftOutlook/","text":"Microsoft Outlook # Microsoft Outlook is a personal information manager software system from Microsoft. Microsoft Outlook is an email client that includes calendaring, task managing, contact managing, note-taking, journal logging, and web browsing. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Draft Create a new email draft Delete a draft Get a single draft Send an existing draft message Update a draft Folder Create a new mail folder in the root folder of the user's mailbox Delete a folder Get a single folder details Get all folders under the root folder of the signed-in user Lists all child folders under the folder Folder Message Get all the messages in a folder Message Delete a message Get a single message Get all messages in the signed-in user's mailbox Get MIME content of a message Move a message Create reply to a message Send a message Update a message Message Attachment Add an attachment to a message Download attachment content Get an attachment from a message Get all the message's attachments Example Usage # This workflow allows you to create, add an attachment, and send a draft using the Microsoft Outlook node. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - Microsoft Outlook - HTTP Request The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Microsoft Outlook node (create: draft) # This node will create a draft message that we will send using the Microsoft Outlook node later in the workflow. First of all, you'll have to enter credentials for the Microsoft Outlook node. You can find out how to do that here . Select 'Draft' from the Resource dropdown list. Enter the subject in the Subject field. Enter the following content in the Body Content field. 1 2 3 4 < h1 > Hello from n8n! </ h1 > < p > We are sending this email using the Microsoft Outlook node in < a href = \"https://n8n.io\" > n8n </ a ></ p > < p > Best, </ p > < p > Sender </ p > Click on Add Field and select 'Body Content Type' from the dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new draft with the subject Hello from n8n! and HTML body content. 3. HTTP Request node (GET) # This node will fetch the logo of n8n from a URL. We will attach this file to our draft message that we created earlier. If you want to attach a different file, enter the URL of that file instead. Enter https://n8n.io/n8n-logo.png in the URL field. Select 'File' from the Response Format dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the n8n logo. We will attach this file to the draft message that we created using the previous node. 4. Microsoft Outlook1 node (add: messageAttachment) # This node will attach the file that we received from the previous node to the drat message we created using the Microsoft Outlook node. Select the credentials that you entered in the previous Microsoft Outlook node. Select 'Message Attachment' from the Resource dropdown list. Click on the gears icon next to the Message ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Microsoft Outlook > Output Data > JSON > id. You can also add the following expression: {{$node[\"Microsoft Outlook\"].json[\"id\"]}} . Click on the Add Field button. Enter n8n.png in the File Name field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node attaches the file to the draft message that we created using the Microsoft Outlook node. 5. Microsoft Outlook2 node (send: draft) # This node will send the draft message that we created using the Microsoft Outlook node to a recipient. Select the credentials that you entered in the previous node. Select 'Draft' from the Resource dropdown list. Select 'Send' from the Operation dropdown list. Click on the gears icon next to the Message ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Microsoft Outlook > Output Data > JSON > id. You can also add the following expression: {{$node[\"Microsoft Outlook\"].json[\"id\"]}} . Click on the Add Field button. Enter the recipient's email address in the Recipients field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node sends the draft message that we created using the Microsoft Outlook node to a recipient.","title":"Microsoft Outlook"},{"location":"integrations/nodes/n8n-nodes-base.microsoftOutlook/#microsoft-outlook","text":"Microsoft Outlook is a personal information manager software system from Microsoft. Microsoft Outlook is an email client that includes calendaring, task managing, contact managing, note-taking, journal logging, and web browsing. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Microsoft Outlook"},{"location":"integrations/nodes/n8n-nodes-base.microsoftOutlook/#basic-operations","text":"Draft Create a new email draft Delete a draft Get a single draft Send an existing draft message Update a draft Folder Create a new mail folder in the root folder of the user's mailbox Delete a folder Get a single folder details Get all folders under the root folder of the signed-in user Lists all child folders under the folder Folder Message Get all the messages in a folder Message Delete a message Get a single message Get all messages in the signed-in user's mailbox Get MIME content of a message Move a message Create reply to a message Send a message Update a message Message Attachment Add an attachment to a message Download attachment content Get an attachment from a message Get all the message's attachments","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.microsoftOutlook/#example-usage","text":"This workflow allows you to create, add an attachment, and send a draft using the Microsoft Outlook node. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - Microsoft Outlook - HTTP Request The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.microsoftOutlook/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.microsoftOutlook/#2-microsoft-outlook-node-create-draft","text":"This node will create a draft message that we will send using the Microsoft Outlook node later in the workflow. First of all, you'll have to enter credentials for the Microsoft Outlook node. You can find out how to do that here . Select 'Draft' from the Resource dropdown list. Enter the subject in the Subject field. Enter the following content in the Body Content field. 1 2 3 4 < h1 > Hello from n8n! </ h1 > < p > We are sending this email using the Microsoft Outlook node in < a href = \"https://n8n.io\" > n8n </ a ></ p > < p > Best, </ p > < p > Sender </ p > Click on Add Field and select 'Body Content Type' from the dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new draft with the subject Hello from n8n! and HTML body content.","title":"2. Microsoft Outlook node (create: draft)"},{"location":"integrations/nodes/n8n-nodes-base.microsoftOutlook/#3-http-request-node-get","text":"This node will fetch the logo of n8n from a URL. We will attach this file to our draft message that we created earlier. If you want to attach a different file, enter the URL of that file instead. Enter https://n8n.io/n8n-logo.png in the URL field. Select 'File' from the Response Format dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the n8n logo. We will attach this file to the draft message that we created using the previous node.","title":"3. HTTP Request node (GET)"},{"location":"integrations/nodes/n8n-nodes-base.microsoftOutlook/#4-microsoft-outlook1-node-add-messageattachment","text":"This node will attach the file that we received from the previous node to the drat message we created using the Microsoft Outlook node. Select the credentials that you entered in the previous Microsoft Outlook node. Select 'Message Attachment' from the Resource dropdown list. Click on the gears icon next to the Message ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Microsoft Outlook > Output Data > JSON > id. You can also add the following expression: {{$node[\"Microsoft Outlook\"].json[\"id\"]}} . Click on the Add Field button. Enter n8n.png in the File Name field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node attaches the file to the draft message that we created using the Microsoft Outlook node.","title":"4. Microsoft Outlook1 node (add: messageAttachment)"},{"location":"integrations/nodes/n8n-nodes-base.microsoftOutlook/#5-microsoft-outlook2-node-send-draft","text":"This node will send the draft message that we created using the Microsoft Outlook node to a recipient. Select the credentials that you entered in the previous node. Select 'Draft' from the Resource dropdown list. Select 'Send' from the Operation dropdown list. Click on the gears icon next to the Message ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Microsoft Outlook > Output Data > JSON > id. You can also add the following expression: {{$node[\"Microsoft Outlook\"].json[\"id\"]}} . Click on the Add Field button. Enter the recipient's email address in the Recipients field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node sends the draft message that we created using the Microsoft Outlook node to a recipient.","title":"5. Microsoft Outlook2 node (send: draft)"},{"location":"integrations/nodes/n8n-nodes-base.microsoftSql/","text":"Microsoft SQL # Microsoft SQL is a relational database management system. As a database server, it is a software product with the primary function of storing and retrieving data as requested by other software applications\u2014which may run either on the same computer or on another computer across a network. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Execute an SQL query Insert rows in database Update rows in database Delete rows in database Example Usage # This workflow allows you to execute an SQL query in Microsoft SQL. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Microsoft SQL The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Microsoft SQL node # First of all, you'll have to enter credentials for the Microsoft SQL node. You can find out how to do that here . Select 'Execute Query' from the Operation dropdown list. Enter your SQL query in the Query field. Click on Execute Node to run the workflow.","title":"Microsoft SQL"},{"location":"integrations/nodes/n8n-nodes-base.microsoftSql/#microsoft-sql","text":"Microsoft SQL is a relational database management system. As a database server, it is a software product with the primary function of storing and retrieving data as requested by other software applications\u2014which may run either on the same computer or on another computer across a network. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Microsoft SQL"},{"location":"integrations/nodes/n8n-nodes-base.microsoftSql/#basic-operations","text":"Execute an SQL query Insert rows in database Update rows in database Delete rows in database","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.microsoftSql/#example-usage","text":"This workflow allows you to execute an SQL query in Microsoft SQL. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Microsoft SQL The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.microsoftSql/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.microsoftSql/#2-microsoft-sql-node","text":"First of all, you'll have to enter credentials for the Microsoft SQL node. You can find out how to do that here . Select 'Execute Query' from the Operation dropdown list. Enter your SQL query in the Query field. Click on Execute Node to run the workflow.","title":"2. Microsoft SQL node"},{"location":"integrations/nodes/n8n-nodes-base.microsoftTeams/","text":"Microsoft Teams # Microsoft Teams is a business-oriented communication and collaboration platform that combines workplace chat, video meetings, file storage , and application integration. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Channel Create a channel Delete a channel Get a channel Get all channels Update a channel Channel Message (Beta) Create a message Get all messages Task Create a task Delete a task Get a task Get all tasks Update a task Example Usage # This workflow allows you to create, update and send a message to a channel in Microsoft Teams. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Microsoft Teams The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Microsoft Teams node (create: channel) # First of all, you'll have to enter credentials for the Microsoft Teams node. You can find out how to do that here . Select the team that you want to use from the Team ID dropdown list. Enter a name for the channel in the Name field. Click on Execute Node to run the node. 3. Microsoft Teams1 node (update: channel) # Select the credentials that you entered in the previous node. Select 'Update' from the Operation dropdown list. Click on the gears icon next to the Team ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Microsoft Teams > Parameters > teamId. You can also add the following expression: {{$node[\"Microsoft Teams\"].parameter[\"teamId\"]}} Click on the gears icon next to the Channel ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Microsoft Teams > Output > JSON > id. You can also add the following expression: {{$node[\"Microsoft Teams\"].json[\"id\"]}} Click on the Add Field button and select 'Name' from the dropdown list. Enter a new channel name in the Name field. Click on Execute Node to run the node. 4. Microsoft Teams2 node (create: channelMessage) # Select the credentials that you entered in the previous node. Select 'Channel Message (Beta)' from the Resource dropdown list. Click on the gears icon next to the Team ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Microsoft Teams > Parameters > teamId. You can also add the following expression: {{$node[\"Microsoft Teams\"].parameter[\"teamId\"]}} Click on the gears icon next to the Channel ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Microsoft Teams > Output > JSON > id. You can also add the following expression: {{$node[\"Microsoft Teams\"].json[\"id\"]}} Select 'Text' from the Message Type dropdown list. Enter a message in the Message field. Click on Execute Node to run the node.","title":"Microsoft Teams"},{"location":"integrations/nodes/n8n-nodes-base.microsoftTeams/#microsoft-teams","text":"Microsoft Teams is a business-oriented communication and collaboration platform that combines workplace chat, video meetings, file storage , and application integration. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Microsoft Teams"},{"location":"integrations/nodes/n8n-nodes-base.microsoftTeams/#basic-operations","text":"Channel Create a channel Delete a channel Get a channel Get all channels Update a channel Channel Message (Beta) Create a message Get all messages Task Create a task Delete a task Get a task Get all tasks Update a task","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.microsoftTeams/#example-usage","text":"This workflow allows you to create, update and send a message to a channel in Microsoft Teams. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Microsoft Teams The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.microsoftTeams/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.microsoftTeams/#2-microsoft-teams-node-create-channel","text":"First of all, you'll have to enter credentials for the Microsoft Teams node. You can find out how to do that here . Select the team that you want to use from the Team ID dropdown list. Enter a name for the channel in the Name field. Click on Execute Node to run the node.","title":"2. Microsoft Teams node (create: channel)"},{"location":"integrations/nodes/n8n-nodes-base.microsoftTeams/#3-microsoft-teams1-node-update-channel","text":"Select the credentials that you entered in the previous node. Select 'Update' from the Operation dropdown list. Click on the gears icon next to the Team ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Microsoft Teams > Parameters > teamId. You can also add the following expression: {{$node[\"Microsoft Teams\"].parameter[\"teamId\"]}} Click on the gears icon next to the Channel ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Microsoft Teams > Output > JSON > id. You can also add the following expression: {{$node[\"Microsoft Teams\"].json[\"id\"]}} Click on the Add Field button and select 'Name' from the dropdown list. Enter a new channel name in the Name field. Click on Execute Node to run the node.","title":"3. Microsoft Teams1 node (update: channel)"},{"location":"integrations/nodes/n8n-nodes-base.microsoftTeams/#4-microsoft-teams2-node-create-channelmessage","text":"Select the credentials that you entered in the previous node. Select 'Channel Message (Beta)' from the Resource dropdown list. Click on the gears icon next to the Team ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Microsoft Teams > Parameters > teamId. You can also add the following expression: {{$node[\"Microsoft Teams\"].parameter[\"teamId\"]}} Click on the gears icon next to the Channel ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Microsoft Teams > Output > JSON > id. You can also add the following expression: {{$node[\"Microsoft Teams\"].json[\"id\"]}} Select 'Text' from the Message Type dropdown list. Enter a message in the Message field. Click on Execute Node to run the node.","title":"4. Microsoft Teams2 node (create: channelMessage)"},{"location":"integrations/nodes/n8n-nodes-base.microsoftToDo/","text":"Microsoft To Do # Microsoft To Do is a cloud-based task management application. It allows users to manage their tasks from a smartphone, tablet, and computer. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Linked Resource Create Delete Get Get All Update List Create Delete Get Get All Update Task Create Delete Get Get All Update Example Usage # This workflow allows you to create, update and get a task in Microsoft To Do. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Microsoft To Do The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Microsoft To Do node (create: task) # This node will create a task with the importance level High in the Tasks list. You can select a different list and the importance level. First of all, you'll have to enter credentials for the Microsoft To Do node. You can find out how to do that here . Select 'Create' from the Operation dropdown list. Select a list from the List ID dropdown list. Enter a subject in the Subject field. Click on Add Field and select 'Importance' from the dropdown list. Select 'High' from the Importance dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new task in Microsoft To Do. 3. Microsoft To Do1 node (update: task) # This node will update the status of the task that we created in the previous node. Select the credentials that you entered in the previous node. Select 'Update' from the Operation dropdown list. Click on the gears icon next to the List ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Microsoft To Do > Parameters > taskListId. You can also add the following expression: {{$node[\"Microsoft To Do\"].parameter[\"taskListId\"]}} . Click on the gears icon next to the Task ID field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input > JSON > id. You can also add the following expression: {{$json[\"id\"]}} . Click on the Add Field button and select 'Status' from the dropdown list. Select 'In progress' from the Status dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node updates the status of the task that we created in the previous node. 4. Microsoft To Do2 node (get: task) # This node will get the task that we created earlier. Select the credentials that you entered in the previous node. Click on the gears icon next to the List ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Microsoft To Do > Parameters > taskListId. You can also add the following expression: {{$node[\"Microsoft To Do\"].parameter[\"taskListId\"]}} . Click on the gears icon next to the Task ID field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input > JSON > id. You can also add the following expression: {{$json[\"id\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node fetches the information of the task that we created earlier.","title":"Microsoft To Do"},{"location":"integrations/nodes/n8n-nodes-base.microsoftToDo/#microsoft-to-do","text":"Microsoft To Do is a cloud-based task management application. It allows users to manage their tasks from a smartphone, tablet, and computer. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Microsoft To Do"},{"location":"integrations/nodes/n8n-nodes-base.microsoftToDo/#basic-operations","text":"Linked Resource Create Delete Get Get All Update List Create Delete Get Get All Update Task Create Delete Get Get All Update","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.microsoftToDo/#example-usage","text":"This workflow allows you to create, update and get a task in Microsoft To Do. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Microsoft To Do The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.microsoftToDo/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.microsoftToDo/#2-microsoft-to-do-node-create-task","text":"This node will create a task with the importance level High in the Tasks list. You can select a different list and the importance level. First of all, you'll have to enter credentials for the Microsoft To Do node. You can find out how to do that here . Select 'Create' from the Operation dropdown list. Select a list from the List ID dropdown list. Enter a subject in the Subject field. Click on Add Field and select 'Importance' from the dropdown list. Select 'High' from the Importance dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new task in Microsoft To Do.","title":"2. Microsoft To Do node (create: task)"},{"location":"integrations/nodes/n8n-nodes-base.microsoftToDo/#3-microsoft-to-do1-node-update-task","text":"This node will update the status of the task that we created in the previous node. Select the credentials that you entered in the previous node. Select 'Update' from the Operation dropdown list. Click on the gears icon next to the List ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Microsoft To Do > Parameters > taskListId. You can also add the following expression: {{$node[\"Microsoft To Do\"].parameter[\"taskListId\"]}} . Click on the gears icon next to the Task ID field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input > JSON > id. You can also add the following expression: {{$json[\"id\"]}} . Click on the Add Field button and select 'Status' from the dropdown list. Select 'In progress' from the Status dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node updates the status of the task that we created in the previous node.","title":"3. Microsoft To Do1 node (update: task)"},{"location":"integrations/nodes/n8n-nodes-base.microsoftToDo/#4-microsoft-to-do2-node-get-task","text":"This node will get the task that we created earlier. Select the credentials that you entered in the previous node. Click on the gears icon next to the List ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Microsoft To Do > Parameters > taskListId. You can also add the following expression: {{$node[\"Microsoft To Do\"].parameter[\"taskListId\"]}} . Click on the gears icon next to the Task ID field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input > JSON > id. You can also add the following expression: {{$json[\"id\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node fetches the information of the task that we created earlier.","title":"4. Microsoft To Do2 node (get: task)"},{"location":"integrations/nodes/n8n-nodes-base.mindee/","text":"Mindee # Mindee develops API-based products for instantly extracting information from any kind of image and transforming it into usable data. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Invoice - Predict Receipt - Predict Example Usage # This workflow allows you to extract information from an image of a receipt using the Mindee node. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - HTTP Request - Mindee The final workflow should look like the following image. 1. Start node # The Start node exists by default when you create a new workflow. 2. HTTP Request (GET) # This example workflow uses the HTTP Request node to make a GET request to download the image of a receipt. You can also use other nodes, for example, the Box node, to get the images of the receipts you want to use. Enter the URL of the image in the URL field. For example, https://miro.medium.com/max/1400/0*1T9GkAb93w5NSMsf . Select 'File' from the Response Format dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the HTTP Request node downloads the image from the URL. This image (binary data) can now be used by the other nodes in the workflow. 3. Mindee node (predict: receipt) # This node will get the image of the receipt (binary data) from the HTTP Request node and extract the information from it. 1. Select 'Receipt' from the Resource dropdown list. 2. You'll have to enter credentials for the Mindee node. You can find out how to do that here . 3. Click on Execute Node to run the workflow. In the screenshot below, you will notice that the node extracts the information from the image that it got from the HTTP Request node.","title":"Mindee"},{"location":"integrations/nodes/n8n-nodes-base.mindee/#mindee","text":"Mindee develops API-based products for instantly extracting information from any kind of image and transforming it into usable data. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Mindee"},{"location":"integrations/nodes/n8n-nodes-base.mindee/#basic-operations","text":"Invoice - Predict Receipt - Predict","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.mindee/#example-usage","text":"This workflow allows you to extract information from an image of a receipt using the Mindee node. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - HTTP Request - Mindee The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.mindee/#1-start-node","text":"The Start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.mindee/#2-http-request-get","text":"This example workflow uses the HTTP Request node to make a GET request to download the image of a receipt. You can also use other nodes, for example, the Box node, to get the images of the receipts you want to use. Enter the URL of the image in the URL field. For example, https://miro.medium.com/max/1400/0*1T9GkAb93w5NSMsf . Select 'File' from the Response Format dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the HTTP Request node downloads the image from the URL. This image (binary data) can now be used by the other nodes in the workflow.","title":"2. HTTP Request (GET)"},{"location":"integrations/nodes/n8n-nodes-base.mindee/#3-mindee-node-predict-receipt","text":"This node will get the image of the receipt (binary data) from the HTTP Request node and extract the information from it. 1. Select 'Receipt' from the Resource dropdown list. 2. You'll have to enter credentials for the Mindee node. You can find out how to do that here . 3. Click on Execute Node to run the workflow. In the screenshot below, you will notice that the node extracts the information from the image that it got from the HTTP Request node.","title":"3. Mindee node (predict: receipt)"},{"location":"integrations/nodes/n8n-nodes-base.misp/","text":"MISP # MISP is an open source threat intelligence platform. The project develops utilities and documentation for more effective threat intelligence. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Attribute Create Delete Get Get All Update Event Create Delete Get Get All Publish Unpublish Update Event Tag Add Remove Feed Create Disable Enable Get Get All Update Galaxy Delete Get Get All Noticelist Get Get All Organisation Create Delete Get Get All Update Tag Create Delete Get All Update User Create Delete Get Get All Update Warninglist Get Get All","title":"MISP"},{"location":"integrations/nodes/n8n-nodes-base.misp/#misp","text":"MISP is an open source threat intelligence platform. The project develops utilities and documentation for more effective threat intelligence. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"MISP"},{"location":"integrations/nodes/n8n-nodes-base.misp/#basic-operations","text":"Attribute Create Delete Get Get All Update Event Create Delete Get Get All Publish Unpublish Update Event Tag Add Remove Feed Create Disable Enable Get Get All Update Galaxy Delete Get Get All Noticelist Get Get All Organisation Create Delete Get Get All Update Tag Create Delete Get All Update User Create Delete Get Get All Update Warninglist Get Get All","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.mocean/","text":"Mocean # Mocean makes sending and receiving SMS easy. It also has voice API which allows you to make outbound and inbound calls. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # SMS Send SMS/Voice message Voice Send SMS/Voice message Example Usage # This workflow allows you to send an SMS using the Mocean node. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Mocean The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Mocean node # First of all, you'll have to enter credentials for the Mocean node. You can find out how to do that here . Enter the sender ID in the From field. Enter the receivers' number in the To field. Enter the message in the Message field. Click on Execute Node to run the node.","title":"Mocean"},{"location":"integrations/nodes/n8n-nodes-base.mocean/#mocean","text":"Mocean makes sending and receiving SMS easy. It also has voice API which allows you to make outbound and inbound calls. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Mocean"},{"location":"integrations/nodes/n8n-nodes-base.mocean/#basic-operations","text":"SMS Send SMS/Voice message Voice Send SMS/Voice message","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.mocean/#example-usage","text":"This workflow allows you to send an SMS using the Mocean node. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Mocean The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.mocean/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.mocean/#2-mocean-node","text":"First of all, you'll have to enter credentials for the Mocean node. You can find out how to do that here . Enter the sender ID in the From field. Enter the receivers' number in the To field. Enter the message in the Message field. Click on Execute Node to run the node.","title":"2. Mocean node"},{"location":"integrations/nodes/n8n-nodes-base.mondayCom/","text":"monday.com # monday.com is a work operating system that enables organizations to manage tasks, projects, and team work. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Board Archive a board Create a new board Get a board Get all boards Board Column Create a new column Get all columns Board Group Delete a group in a board Create a group in a board Get list of groups in a board Board Item Add an update to an item. Change a column value for a board item Change multiple column values for a board item Create an item in a board's group Delete an item Get an item Get all items Get items by column value Move item to group Example Usage # This workflow allows you to get a board from monday.com. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - monday.com The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. monday.com node # First of all, you'll have to enter credentials for the monday.com node. You can find out how to do that here . Select the 'Get' option from the Operation dropdown list. Select the board you want to get from the Board ID dropdown list. Click on Execute Node to run the workflow.","title":"monday.com"},{"location":"integrations/nodes/n8n-nodes-base.mondayCom/#mondaycom","text":"monday.com is a work operating system that enables organizations to manage tasks, projects, and team work. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"monday.com"},{"location":"integrations/nodes/n8n-nodes-base.mondayCom/#basic-operations","text":"Board Archive a board Create a new board Get a board Get all boards Board Column Create a new column Get all columns Board Group Delete a group in a board Create a group in a board Get list of groups in a board Board Item Add an update to an item. Change a column value for a board item Change multiple column values for a board item Create an item in a board's group Delete an item Get an item Get all items Get items by column value Move item to group","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.mondayCom/#example-usage","text":"This workflow allows you to get a board from monday.com. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - monday.com The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.mondayCom/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.mondayCom/#2-mondaycom-node","text":"First of all, you'll have to enter credentials for the monday.com node. You can find out how to do that here . Select the 'Get' option from the Operation dropdown list. Select the board you want to get from the Board ID dropdown list. Click on Execute Node to run the workflow.","title":"2. monday.com node"},{"location":"integrations/nodes/n8n-nodes-base.mongoDb/","text":"MongoDB # MongoDB is a cross-platform document-oriented database program developed by MongoDB Inc. It is classified as a NoSQL database program. MongoDB uses JSON-like documents with optional schemas. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Aggregate documents. Delete documents. Find documents. Insert documents. Update documents. Example Usage # This workflow allows you to insert a document into a MongoDB collection. You can also find the workflow on the website. This example usage workflow would use the following three nodes. - Start - Set - MongoDB The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Set node # Click on the Add Value button and select 'String' from the dropdown list. Enter my_key in the Name field. Enter my_value in the Value field. 3. MongoDB node # First of all, you'll have to enter credentials for the MongoDB node. You can find out how to do that here . Select 'Insert' from the Operation dropdown list. Enter the name of your MongoDB collection in the Collection field. Enter my_key in the Fields field. Click on Execute Node to run the workflow.","title":"MongoDB"},{"location":"integrations/nodes/n8n-nodes-base.mongoDb/#mongodb","text":"MongoDB is a cross-platform document-oriented database program developed by MongoDB Inc. It is classified as a NoSQL database program. MongoDB uses JSON-like documents with optional schemas. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"MongoDB"},{"location":"integrations/nodes/n8n-nodes-base.mongoDb/#basic-operations","text":"Aggregate documents. Delete documents. Find documents. Insert documents. Update documents.","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.mongoDb/#example-usage","text":"This workflow allows you to insert a document into a MongoDB collection. You can also find the workflow on the website. This example usage workflow would use the following three nodes. - Start - Set - MongoDB The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.mongoDb/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.mongoDb/#2-set-node","text":"Click on the Add Value button and select 'String' from the dropdown list. Enter my_key in the Name field. Enter my_value in the Value field.","title":"2. Set node"},{"location":"integrations/nodes/n8n-nodes-base.mongoDb/#3-mongodb-node","text":"First of all, you'll have to enter credentials for the MongoDB node. You can find out how to do that here . Select 'Insert' from the Operation dropdown list. Enter the name of your MongoDB collection in the Collection field. Enter my_key in the Fields field. Click on Execute Node to run the workflow.","title":"3. MongoDB node"},{"location":"integrations/nodes/n8n-nodes-base.monicaCrm/","text":"Monica CRM # Monica CRM is an open-source web application to organize and record your interactions with your loved ones. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic operations # Activity Create an activity Delete an activity Retrieve an activity Retrieve all activities Update an activity Call Create a call Delete a call Retrieve a call Retrieve all calls Update a call Contact Create a contact Delete a contact Retrieve a contact Retrieve all contacts Update a contact Contact Field Create a contact field Delete a contact field Retrieve a contact field Update a contact field Contact Tag Add Remove Conversation Create a conversation Delete a conversation Retrieve a conversation Update a conversation Conversation Message Add a message to a conversation Update a message in a conversation Journal Entry Create a journal entry Delete a journal entry Retrieve a journal entry Retrieve all journal entries Update a journal entry Note Create a note Delete a note Retrieve a note Retrieve all notes Update a note Reminder Create a reminder Delete a reminder Retrieve a reminder Retrieve all reminders Update a reminder Tag Create a tag Delete a tag Retrieve a tag Retrieve all tags Update a tag Task Create a task Delete a task Retrieve a task Retrieve all tasks Update a task Example usage # This workflow allows you to create a new contact in Monica CRM. This example usage workflow would use the following three nodes. - Start - Monica CRM The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Monica CRM node # First enter your credentials for the Monica CRM node. You can find out how to do that here . Select Contact from the Resource dropdown list. Select Create from the Operation dropdown list. Enter the First Name of your new contact. Enter the Gender of your new contact using the dropdown list. Click on Execute Node to run the workflow.","title":"Monica CRM"},{"location":"integrations/nodes/n8n-nodes-base.monicaCrm/#monica-crm","text":"Monica CRM is an open-source web application to organize and record your interactions with your loved ones. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Monica CRM"},{"location":"integrations/nodes/n8n-nodes-base.monicaCrm/#basic-operations","text":"Activity Create an activity Delete an activity Retrieve an activity Retrieve all activities Update an activity Call Create a call Delete a call Retrieve a call Retrieve all calls Update a call Contact Create a contact Delete a contact Retrieve a contact Retrieve all contacts Update a contact Contact Field Create a contact field Delete a contact field Retrieve a contact field Update a contact field Contact Tag Add Remove Conversation Create a conversation Delete a conversation Retrieve a conversation Update a conversation Conversation Message Add a message to a conversation Update a message in a conversation Journal Entry Create a journal entry Delete a journal entry Retrieve a journal entry Retrieve all journal entries Update a journal entry Note Create a note Delete a note Retrieve a note Retrieve all notes Update a note Reminder Create a reminder Delete a reminder Retrieve a reminder Retrieve all reminders Update a reminder Tag Create a tag Delete a tag Retrieve a tag Retrieve all tags Update a tag Task Create a task Delete a task Retrieve a task Retrieve all tasks Update a task","title":"Basic operations"},{"location":"integrations/nodes/n8n-nodes-base.monicaCrm/#example-usage","text":"This workflow allows you to create a new contact in Monica CRM. This example usage workflow would use the following three nodes. - Start - Monica CRM The final workflow should look like the following image.","title":"Example usage"},{"location":"integrations/nodes/n8n-nodes-base.monicaCrm/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.monicaCrm/#2-monica-crm-node","text":"First enter your credentials for the Monica CRM node. You can find out how to do that here . Select Contact from the Resource dropdown list. Select Create from the Operation dropdown list. Enter the First Name of your new contact. Enter the Gender of your new contact using the dropdown list. Click on Execute Node to run the workflow.","title":"2. Monica CRM node"},{"location":"integrations/nodes/n8n-nodes-base.mqtt/","text":"MQTT # MQTT is an open OASIS and ISO standard lightweight, publish-subscribe network protocol that transports messages between devices. \ud83d\udd11 Credentials You can find authentication information for this node here . Example Usage # This workflow allows you to send position updates of the ISS every minute to a topic in MQTT using the MQTT node. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Cron - HTTP Request - Set - MQTT The final workflow should look like the following image. 1. Cron node # The Cron node will trigger the workflow every minute. Click on Add Cron Time . Select 'Every Minute' from the Mode dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the Cron node is configured to trigger the workflow every minute. 2. HTTP Request node (GET) # This node will make a GET request to the API https://api.wheretheiss.at/v1/satellites/25544/positions to fetch the position of the ISS. This information gets passed on to the next node in the workflow. Enter https://api.wheretheiss.at/v1/satellites/25544/positions in the URL field. Click on the Add Parameter button in the Query Parameters section. Enter timestamps in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Enter the following expression: {{Date.now()}} . This expression will return the current timestamp. Click on Execute Node to run the node. In the screenshot below, you will notice that the node makes a GET request to the API and returns the information about the location of the ISS. 3. Set node # We will use the Set node to ensure that only the data that we set in this node gets passed on to the next nodes in the workflow. Click on Add Value and select 'String' from the dropdown list. Enter Name in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > 0 > name. You can also add the following expression: {{$json[\"0\"][\"name\"]}} . Click on Add Value and select 'String' from the dropdown list. Enter Latitude in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > 0 > latitude. You can also add the following expression: {{$json[\"0\"][\"latitude\"]}} . Click on Add Value and select 'String' from the dropdown list. Enter Longitude in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > 0 > longitude. You can also add the following expression: {{$json[\"0\"][\"longitude\"]}} . Click on Add Value and select 'String' from the dropdown list. Enter Timestamp in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > 0 > timpestamp. You can also add the following expression: {{$json[\"0\"][\"timestamp\"]}} . Toggle Keep Only Set to true . We set this option to true to ensure that only the data that we have set in this node get passed on to the next nodes in the workflow. Click on Execute Node to run the node. In the screenshot below, you will notice that the node uses the data from the previous node and returns the data that we set for the workflow. 4. MQTT node # This node will send the data from the previous node to the iss-position topic in MQTT. If you have created a topic with a different name in MQTT, you can use that topic name instead. First of all, you'll have to enter credentials for the MQTT node. You can find out how to do that here . Enter the name of the topic in the Topic field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node sends the data from the previous node to the iss-position topic in MQTT. Activate workflow for production This example workflow uses the Cron node, which is a Trigger node. You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Cron node.","title":"MQTT"},{"location":"integrations/nodes/n8n-nodes-base.mqtt/#mqtt","text":"MQTT is an open OASIS and ISO standard lightweight, publish-subscribe network protocol that transports messages between devices. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"MQTT"},{"location":"integrations/nodes/n8n-nodes-base.mqtt/#example-usage","text":"This workflow allows you to send position updates of the ISS every minute to a topic in MQTT using the MQTT node. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Cron - HTTP Request - Set - MQTT The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.mqtt/#1-cron-node","text":"The Cron node will trigger the workflow every minute. Click on Add Cron Time . Select 'Every Minute' from the Mode dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the Cron node is configured to trigger the workflow every minute.","title":"1. Cron node"},{"location":"integrations/nodes/n8n-nodes-base.mqtt/#2-http-request-node-get","text":"This node will make a GET request to the API https://api.wheretheiss.at/v1/satellites/25544/positions to fetch the position of the ISS. This information gets passed on to the next node in the workflow. Enter https://api.wheretheiss.at/v1/satellites/25544/positions in the URL field. Click on the Add Parameter button in the Query Parameters section. Enter timestamps in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Enter the following expression: {{Date.now()}} . This expression will return the current timestamp. Click on Execute Node to run the node. In the screenshot below, you will notice that the node makes a GET request to the API and returns the information about the location of the ISS.","title":"2. HTTP Request node (GET)"},{"location":"integrations/nodes/n8n-nodes-base.mqtt/#3-set-node","text":"We will use the Set node to ensure that only the data that we set in this node gets passed on to the next nodes in the workflow. Click on Add Value and select 'String' from the dropdown list. Enter Name in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > 0 > name. You can also add the following expression: {{$json[\"0\"][\"name\"]}} . Click on Add Value and select 'String' from the dropdown list. Enter Latitude in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > 0 > latitude. You can also add the following expression: {{$json[\"0\"][\"latitude\"]}} . Click on Add Value and select 'String' from the dropdown list. Enter Longitude in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > 0 > longitude. You can also add the following expression: {{$json[\"0\"][\"longitude\"]}} . Click on Add Value and select 'String' from the dropdown list. Enter Timestamp in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > 0 > timpestamp. You can also add the following expression: {{$json[\"0\"][\"timestamp\"]}} . Toggle Keep Only Set to true . We set this option to true to ensure that only the data that we have set in this node get passed on to the next nodes in the workflow. Click on Execute Node to run the node. In the screenshot below, you will notice that the node uses the data from the previous node and returns the data that we set for the workflow.","title":"3. Set node"},{"location":"integrations/nodes/n8n-nodes-base.mqtt/#4-mqtt-node","text":"This node will send the data from the previous node to the iss-position topic in MQTT. If you have created a topic with a different name in MQTT, you can use that topic name instead. First of all, you'll have to enter credentials for the MQTT node. You can find out how to do that here . Enter the name of the topic in the Topic field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node sends the data from the previous node to the iss-position topic in MQTT. Activate workflow for production This example workflow uses the Cron node, which is a Trigger node. You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Cron node.","title":"4. MQTT node"},{"location":"integrations/nodes/n8n-nodes-base.msg91/","text":"MSG91 # MSG91 is an enterprise SMS Solution providing Bulk SMS, Transactional SMS API, Regional SMS, OTP Verification APIs, Promotional SMS via powerful, and a robust SMS Gateway. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # SMS Send SMS Example Usage # This workflow allows you to send an SMS using MSG91. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - MSG91 The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. MSG91 node # First of all, you'll have to enter credentials for the MSG91 node. You can find out how to do that here . Enter the sender ID in the Sender ID field. You can find instructions on how to obtain the sender ID in the FAQs below. Enter the phone number to which you'll be sending the message in the To field. Enter you message in the Message field. Click on Execute Node to run the workflow. FAQs # How do I find my Sender ID? # Log in to your MSG91 dasboard and click on 'Sender Id' in the left panel. If you don't already have one, click on Add Sender Id + , fill in the details, and click on the Save Sender Id button.","title":"MSG91"},{"location":"integrations/nodes/n8n-nodes-base.msg91/#msg91","text":"MSG91 is an enterprise SMS Solution providing Bulk SMS, Transactional SMS API, Regional SMS, OTP Verification APIs, Promotional SMS via powerful, and a robust SMS Gateway. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"MSG91"},{"location":"integrations/nodes/n8n-nodes-base.msg91/#basic-operations","text":"SMS Send SMS","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.msg91/#example-usage","text":"This workflow allows you to send an SMS using MSG91. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - MSG91 The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.msg91/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.msg91/#2-msg91-node","text":"First of all, you'll have to enter credentials for the MSG91 node. You can find out how to do that here . Enter the sender ID in the Sender ID field. You can find instructions on how to obtain the sender ID in the FAQs below. Enter the phone number to which you'll be sending the message in the To field. Enter you message in the Message field. Click on Execute Node to run the workflow.","title":"2. MSG91 node"},{"location":"integrations/nodes/n8n-nodes-base.msg91/#faqs","text":"","title":"FAQs"},{"location":"integrations/nodes/n8n-nodes-base.msg91/#how-do-i-find-my-sender-id","text":"Log in to your MSG91 dasboard and click on 'Sender Id' in the left panel. If you don't already have one, click on Add Sender Id + , fill in the details, and click on the Save Sender Id button.","title":"How do I find my Sender ID?"},{"location":"integrations/nodes/n8n-nodes-base.mySql/","text":"MySQL # MySQL is an open-source relational database management system. MySQL has stand-alone clients that allow users to interact directly with a MySQL database using SQL, but more often MySQL is used with other programs to implement applications that need relational database capability. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Execute an SQL query. Insert rows in database. Update rows in database Example Usage # This workflow allows you to create a table and insert data in it on a MySQL database. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Set - MySQL The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. MySQL node (Execute Query) # First of all, you'll have to enter credentials for the MySQL node. You can find out how to do that here . Select 'Execute Query' from the Operation dropdown list. Enter the following SQL query in the Query field: CREATE TABLE test (id INT, name VARCHAR(255), PRIMARY KEY (id)); . Click on Execute Node to run the node. 3. Set node # Set the Keep Only Set toggle to true. Click on the Add Value button and select 'Number' from the dropdown list. Enter id in the Name field. Click on the Add Value button and select 'String' from the dropdown list. Enter name in the Name field. Enter the value for the name in the Value field. Click on Execute Node to run the node. 4. MySQL1 node (Insert) # Select the credentials that you entered in the previous MySQL node. Enter test in the Table field. Enter id, name in the Columns field. Click on Execute Node to run the node.","title":"MySQL"},{"location":"integrations/nodes/n8n-nodes-base.mySql/#mysql","text":"MySQL is an open-source relational database management system. MySQL has stand-alone clients that allow users to interact directly with a MySQL database using SQL, but more often MySQL is used with other programs to implement applications that need relational database capability. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"MySQL"},{"location":"integrations/nodes/n8n-nodes-base.mySql/#basic-operations","text":"Execute an SQL query. Insert rows in database. Update rows in database","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.mySql/#example-usage","text":"This workflow allows you to create a table and insert data in it on a MySQL database. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Set - MySQL The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.mySql/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.mySql/#2-mysql-node-execute-query","text":"First of all, you'll have to enter credentials for the MySQL node. You can find out how to do that here . Select 'Execute Query' from the Operation dropdown list. Enter the following SQL query in the Query field: CREATE TABLE test (id INT, name VARCHAR(255), PRIMARY KEY (id)); . Click on Execute Node to run the node.","title":"2. MySQL node (Execute Query)"},{"location":"integrations/nodes/n8n-nodes-base.mySql/#3-set-node","text":"Set the Keep Only Set toggle to true. Click on the Add Value button and select 'Number' from the dropdown list. Enter id in the Name field. Click on the Add Value button and select 'String' from the dropdown list. Enter name in the Name field. Enter the value for the name in the Value field. Click on Execute Node to run the node.","title":"3. Set node"},{"location":"integrations/nodes/n8n-nodes-base.mySql/#4-mysql1-node-insert","text":"Select the credentials that you entered in the previous MySQL node. Enter test in the Table field. Enter id, name in the Columns field. Click on Execute Node to run the node.","title":"4. MySQL1 node (Insert)"},{"location":"integrations/nodes/n8n-nodes-base.n8nTrainingCustomerDatastore/","text":"Customer Datastore (n8n Training) # This node is used exclusively for the n8n new user onboarding tutorial. It provides dummy data for testing purposes and has no further functionality.","title":"Customer Datastore (n8n Training)"},{"location":"integrations/nodes/n8n-nodes-base.n8nTrainingCustomerDatastore/#customer-datastore-n8n-training","text":"This node is used exclusively for the n8n new user onboarding tutorial. It provides dummy data for testing purposes and has no further functionality.","title":"Customer Datastore (n8n Training)"},{"location":"integrations/nodes/n8n-nodes-base.n8nTrainingCustomerMessenger/","text":"Customer Messenger (n8n Training) # This node is used exclusively for the n8n new user onboarding tutorial. It provides no further functionality.","title":"Customer Messenger (n8n Training)"},{"location":"integrations/nodes/n8n-nodes-base.n8nTrainingCustomerMessenger/#customer-messenger-n8n-training","text":"This node is used exclusively for the n8n new user onboarding tutorial. It provides no further functionality.","title":"Customer Messenger (n8n Training)"},{"location":"integrations/nodes/n8n-nodes-base.nasa/","text":"NASA # NASA is an independent agency of the U.S. federal government responsible for the civilian space program, as well as aeronautics and space research. The NASA API makes NASA data, including imagery, accessible to application developers. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Astronomy Picture of the Day Get the Astronomy Picture of the Day Asteroid Neo-Feed Retrieve a list of asteroids based on their closest approach date to Earth Asteroid Neo-Lookup Look up an asteroid based on its NASA SPK-ID Asteroid Neo-Browse Browse the overall asteroid dataset DONKI Coronal Mass Ejection Retrieve DONKI coronal mass ejection data DONKI Interplanetary Shock Retrieve DONKI interplanetary shock data DONKI Solar Flare Retrieve DONKI solar flare data DONKI Solar Energetic Particle Retrieve DONKI solar energetic particle data DONKI Magnetopause Crossing Retrieve data on DONKI magnetopause crossings DONKI Radiation Belt Enhancement Retrieve DONKI radiation belt enhancement data DONKI High Speed Stream Retrieve DONKI high speed stream data DONKI WSA+EnlilSimulation Retrieve DONKI WSA+EnlilSimulation data DONKI Notifications Retrieve DONKI notifications data Earth Imagery Retrieve Earth imagery Earth Assets Retrieve Earth assets Example Usage # This workflow allows you to send the Astronomy Picture of the day daily to a Telegram channel. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Cron - NASA - Telegram The final workflow should look like the following image. 1. Cron node # The Cron node will trigger the workflow daily at 8 PM. Click on Add Cron Time . Set hours to 20 in the Hour field. Click on Execute Node to run the node. In the screenshot below, you will notice that the Cron node is configured to trigger the workflow every day at 8 PM. 2. NASA node (get:astronomyPictureOfTheDay) # This node will return the Astronomy Picture of the Day. First of all, you'll have to enter credentials for the NASA node. You can find out how to do that here . Toggle Download Image to false . By setting this option to false the node will not return binary data. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns data for the Astronomy Picture of the Day. This data will be used by the next node in the workflow. 3. Telegram node (sendPhoto: message) # This node will send the picture that we receive from the previous node to a channel. First of all, you'll have to enter credentials for the Telegram node. You can find out how to do that here . Select 'Send Photo' from the Operation dropdown list. Enter a chat ID in the Chat ID field. Click on the gears icon next to the Photo field and click on Add Expression . Select the following in the Variable Selector section: Nodes > NASA > Output Data > JSON > url. You can also add the following expression: {{$node[\"NASA\"].json[\"url\"]}} . Click on Add Field and select 'Caption' from the dropdown list. Click on the gears icon next to the Caption field and click on Add Expression . Select the following in the Variable Selector section: Nodes > NASA > Output Data > JSON > title. You can also add the following expression: {{$node[\"NASA\"].json[\"title\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node sends the image with a caption to the channel that we specifiy. Activate workflow for production This example workflow uses the Cron node, which is a Trigger node. You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Cron node.","title":"NASA"},{"location":"integrations/nodes/n8n-nodes-base.nasa/#nasa","text":"NASA is an independent agency of the U.S. federal government responsible for the civilian space program, as well as aeronautics and space research. The NASA API makes NASA data, including imagery, accessible to application developers. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"NASA"},{"location":"integrations/nodes/n8n-nodes-base.nasa/#basic-operations","text":"Astronomy Picture of the Day Get the Astronomy Picture of the Day Asteroid Neo-Feed Retrieve a list of asteroids based on their closest approach date to Earth Asteroid Neo-Lookup Look up an asteroid based on its NASA SPK-ID Asteroid Neo-Browse Browse the overall asteroid dataset DONKI Coronal Mass Ejection Retrieve DONKI coronal mass ejection data DONKI Interplanetary Shock Retrieve DONKI interplanetary shock data DONKI Solar Flare Retrieve DONKI solar flare data DONKI Solar Energetic Particle Retrieve DONKI solar energetic particle data DONKI Magnetopause Crossing Retrieve data on DONKI magnetopause crossings DONKI Radiation Belt Enhancement Retrieve DONKI radiation belt enhancement data DONKI High Speed Stream Retrieve DONKI high speed stream data DONKI WSA+EnlilSimulation Retrieve DONKI WSA+EnlilSimulation data DONKI Notifications Retrieve DONKI notifications data Earth Imagery Retrieve Earth imagery Earth Assets Retrieve Earth assets","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.nasa/#example-usage","text":"This workflow allows you to send the Astronomy Picture of the day daily to a Telegram channel. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Cron - NASA - Telegram The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.nasa/#1-cron-node","text":"The Cron node will trigger the workflow daily at 8 PM. Click on Add Cron Time . Set hours to 20 in the Hour field. Click on Execute Node to run the node. In the screenshot below, you will notice that the Cron node is configured to trigger the workflow every day at 8 PM.","title":"1. Cron node"},{"location":"integrations/nodes/n8n-nodes-base.nasa/#2-nasa-node-getastronomypictureoftheday","text":"This node will return the Astronomy Picture of the Day. First of all, you'll have to enter credentials for the NASA node. You can find out how to do that here . Toggle Download Image to false . By setting this option to false the node will not return binary data. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns data for the Astronomy Picture of the Day. This data will be used by the next node in the workflow.","title":"2. NASA node (get:astronomyPictureOfTheDay)"},{"location":"integrations/nodes/n8n-nodes-base.nasa/#3-telegram-node-sendphoto-message","text":"This node will send the picture that we receive from the previous node to a channel. First of all, you'll have to enter credentials for the Telegram node. You can find out how to do that here . Select 'Send Photo' from the Operation dropdown list. Enter a chat ID in the Chat ID field. Click on the gears icon next to the Photo field and click on Add Expression . Select the following in the Variable Selector section: Nodes > NASA > Output Data > JSON > url. You can also add the following expression: {{$node[\"NASA\"].json[\"url\"]}} . Click on Add Field and select 'Caption' from the dropdown list. Click on the gears icon next to the Caption field and click on Add Expression . Select the following in the Variable Selector section: Nodes > NASA > Output Data > JSON > title. You can also add the following expression: {{$node[\"NASA\"].json[\"title\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node sends the image with a caption to the channel that we specifiy. Activate workflow for production This example workflow uses the Cron node, which is a Trigger node. You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Cron node.","title":"3. Telegram node (sendPhoto: message)"},{"location":"integrations/nodes/n8n-nodes-base.netlify/","text":"Netlify # Netlify offers hosting and serverless backend services for web applications and static websites. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Deploy Cancel a deployment Create a new deployment Get a deployment Get all deployments Site Delete a site Get a site Returns all sites","title":"Netlify"},{"location":"integrations/nodes/n8n-nodes-base.netlify/#netlify","text":"Netlify offers hosting and serverless backend services for web applications and static websites. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Netlify"},{"location":"integrations/nodes/n8n-nodes-base.netlify/#basic-operations","text":"Deploy Cancel a deployment Create a new deployment Get a deployment Get all deployments Site Delete a site Get a site Returns all sites","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.nextCloud/","text":"Nextcloud # Nextcloud is a free and open-source suite of client-server software for creating and using file hosting services. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # File Copy a file Delete a file Download a file Move a file Share a file Upload a file Folder Copy a folder Create a folder Delete a folder Return the contents of a given folder Move a folder Share a folder User Invite a user to a NextCloud organization Delete a user. Retrieve information about a single user. Retrieve a list of users. Edit attributes related to a user. Example Usage # This workflow allows you to create a folder in Nextcloud, upload a file into that folder, and list the contents of the folder. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Nextcloud - HTTP Request The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Nextcloud node (create: folder) # First of all, you'll have to enter credentials for the Nextcloud node. You can find out how to do that here . Select the 'Folder' option from the Resource dropdown list. Enter a folder name in the Folder field. Click on Execute Node to run the node. 3. HTTP Request node (GET) # Enter https://n8n.io/n8n-logo.png in the URL field. Select 'File' from the Response Format dropdown list. Click on Execute Node to run the node. 4. Nextcloud1 node (upload: file) # Select the credentials that you entered in the Nextcloud node. Enter the path of the Nextcloud folder you created in the previous steps along with a file name in the File Path field. Set the Binary Data toggle to true. Click on Execute Node to run the node. 5. Nextcloud2 node (list: folder) # Select the credentials that you entered in the Nextcloud node. Select 'Folder' from the Resource dropdown list. Select 'List' from the Operation dropdown list. Enter the name of the Nextcloud folder you created in the previous steps in the Folder Path field. Click on Execute Node to run the node.","title":"Nextcloud"},{"location":"integrations/nodes/n8n-nodes-base.nextCloud/#nextcloud","text":"Nextcloud is a free and open-source suite of client-server software for creating and using file hosting services. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Nextcloud"},{"location":"integrations/nodes/n8n-nodes-base.nextCloud/#basic-operations","text":"File Copy a file Delete a file Download a file Move a file Share a file Upload a file Folder Copy a folder Create a folder Delete a folder Return the contents of a given folder Move a folder Share a folder User Invite a user to a NextCloud organization Delete a user. Retrieve information about a single user. Retrieve a list of users. Edit attributes related to a user.","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.nextCloud/#example-usage","text":"This workflow allows you to create a folder in Nextcloud, upload a file into that folder, and list the contents of the folder. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Nextcloud - HTTP Request The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.nextCloud/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.nextCloud/#2-nextcloud-node-create-folder","text":"First of all, you'll have to enter credentials for the Nextcloud node. You can find out how to do that here . Select the 'Folder' option from the Resource dropdown list. Enter a folder name in the Folder field. Click on Execute Node to run the node.","title":"2. Nextcloud node (create: folder)"},{"location":"integrations/nodes/n8n-nodes-base.nextCloud/#3-http-request-node-get","text":"Enter https://n8n.io/n8n-logo.png in the URL field. Select 'File' from the Response Format dropdown list. Click on Execute Node to run the node.","title":"3. HTTP Request node (GET)"},{"location":"integrations/nodes/n8n-nodes-base.nextCloud/#4-nextcloud1-node-upload-file","text":"Select the credentials that you entered in the Nextcloud node. Enter the path of the Nextcloud folder you created in the previous steps along with a file name in the File Path field. Set the Binary Data toggle to true. Click on Execute Node to run the node.","title":"4. Nextcloud1 node (upload: file)"},{"location":"integrations/nodes/n8n-nodes-base.nextCloud/#5-nextcloud2-node-list-folder","text":"Select the credentials that you entered in the Nextcloud node. Select 'Folder' from the Resource dropdown list. Select 'List' from the Operation dropdown list. Enter the name of the Nextcloud folder you created in the previous steps in the Folder Path field. Click on Execute Node to run the node.","title":"5. Nextcloud2 node (list: folder)"},{"location":"integrations/nodes/n8n-nodes-base.nocoDb/","text":"NocoDB # NocoDB is an open source Airtable alternative. It works by connecting to any relational database and transforming them into a spreadsheet interface. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic operations # Row Create a row Delete a row Retrieve all rows Retrieve a row Update a row Example usage # This workflow allows you to get all rows in your table. This example usage workflow would use the following two nodes. - Start - NocoDB The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. NocoDB node # First enter your credentials for the NocoDB node. You can find out how to do that here . The Row Resource is selected by default. Select Get All from the Operation dropdown. Enter the NocoDB Project ID . Enter the name of the targeted Table . Click on Execute Node to run the workflow.","title":"NocoDB"},{"location":"integrations/nodes/n8n-nodes-base.nocoDb/#nocodb","text":"NocoDB is an open source Airtable alternative. It works by connecting to any relational database and transforming them into a spreadsheet interface. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"NocoDB"},{"location":"integrations/nodes/n8n-nodes-base.nocoDb/#basic-operations","text":"Row Create a row Delete a row Retrieve all rows Retrieve a row Update a row","title":"Basic operations"},{"location":"integrations/nodes/n8n-nodes-base.nocoDb/#example-usage","text":"This workflow allows you to get all rows in your table. This example usage workflow would use the following two nodes. - Start - NocoDB The final workflow should look like the following image.","title":"Example usage"},{"location":"integrations/nodes/n8n-nodes-base.nocoDb/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.nocoDb/#2-nocodb-node","text":"First enter your credentials for the NocoDB node. You can find out how to do that here . The Row Resource is selected by default. Select Get All from the Operation dropdown. Enter the NocoDB Project ID . Enter the name of the targeted Table . Click on Execute Node to run the workflow.","title":"2. NocoDB node"},{"location":"integrations/nodes/n8n-nodes-base.notion/","text":"Notion # Notion is an all-in-one workspace for your notes, tasks, wikis, and databases. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Block - Append a block - Get all children block Database - Get a database - Get all database - Query a database Database Record - Create a record in a database - Update a record in a database Page - Create a page - Get a page - Text search for pages User - Get a user - Get all users Example Usage # This workflow allows you to add a new user to your Notion database when an invite gets created via Calendly. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. Calendly Trigger Notion The final workflow should look like the following image. 1. Calendly Trigger node # The Calendly node will trigger the workflow when an invite gets created. First of all, you'll have to enter credentials for the Notion node. You can find out how to do that here . Select 'invitee.created' from the Events dropdown list. Save your workflow so that the webhook gets registered. Click on Execute Node to run the node. Note: Since you\u2019ll be using the test webhook while building the workflow, the node only stays active for 120 seconds. After you click on the Execute Node button, create an invite via Calendly. In the screenshot below, you will notice that the Calendly Trigger node triggers the workflow when an invite is created. 2. Notion node (create: databaseRecord) # This node will create a new record using the information received from the previous node. First of all, you'll have to enter credentials for the Notion node. You can find out how to do that here . Select 'Database Record' from the Resource dropdown list. Select the database from the Database ID dropdown list. Click on the Add Property button. Select 'Name' from the Key dropdown list. Click on the gears icon next to the Title field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > payload > invitee > name. You can also add the following expression: {{$json[\"payload\"][\"invitee\"][\"name\"]}} . Click on the Add Property button. Select 'Email' from the Key dropdown list. Click on the gears icon next to the Email field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > payload > invitee > email. You can also add the following expression: {{$json[\"payload\"][\"invitee\"][\"email\"]}} . Click on the Add Property button. Select 'Status' from the Key dropdown list. Select 'Scheduled' from the Option dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new record from the information that gets received from the previous node. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Calendly Trigger node.","title":"Notion"},{"location":"integrations/nodes/n8n-nodes-base.notion/#notion","text":"Notion is an all-in-one workspace for your notes, tasks, wikis, and databases. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Notion"},{"location":"integrations/nodes/n8n-nodes-base.notion/#basic-operations","text":"Block - Append a block - Get all children block Database - Get a database - Get all database - Query a database Database Record - Create a record in a database - Update a record in a database Page - Create a page - Get a page - Text search for pages User - Get a user - Get all users","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.notion/#example-usage","text":"This workflow allows you to add a new user to your Notion database when an invite gets created via Calendly. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. Calendly Trigger Notion The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.notion/#1-calendly-trigger-node","text":"The Calendly node will trigger the workflow when an invite gets created. First of all, you'll have to enter credentials for the Notion node. You can find out how to do that here . Select 'invitee.created' from the Events dropdown list. Save your workflow so that the webhook gets registered. Click on Execute Node to run the node. Note: Since you\u2019ll be using the test webhook while building the workflow, the node only stays active for 120 seconds. After you click on the Execute Node button, create an invite via Calendly. In the screenshot below, you will notice that the Calendly Trigger node triggers the workflow when an invite is created.","title":"1. Calendly Trigger node"},{"location":"integrations/nodes/n8n-nodes-base.notion/#2-notion-node-create-databaserecord","text":"This node will create a new record using the information received from the previous node. First of all, you'll have to enter credentials for the Notion node. You can find out how to do that here . Select 'Database Record' from the Resource dropdown list. Select the database from the Database ID dropdown list. Click on the Add Property button. Select 'Name' from the Key dropdown list. Click on the gears icon next to the Title field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > payload > invitee > name. You can also add the following expression: {{$json[\"payload\"][\"invitee\"][\"name\"]}} . Click on the Add Property button. Select 'Email' from the Key dropdown list. Click on the gears icon next to the Email field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > payload > invitee > email. You can also add the following expression: {{$json[\"payload\"][\"invitee\"][\"email\"]}} . Click on the Add Property button. Select 'Status' from the Key dropdown list. Select 'Scheduled' from the Option dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new record from the information that gets received from the previous node. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Calendly Trigger node.","title":"2. Notion node (create: databaseRecord)"},{"location":"integrations/nodes/n8n-nodes-base.odoo/","text":"Odoo # Odoo is a suite of open-source business apps covering functionality such as: CRM, eCommerce, accounting, inventory, point of sale, project management. Credentials You can find authentication information for this node here . Operations # Contact Create a new contact Delete a contact Get a contact Get all contacts Update a contact Custom Resource Create a new item Delete an item Get an item Get all items Update an item Note Create a new note Delete a note Get a note Get all notes Update a note Opportunity Create a new opportunity Delete an opportunity Get an opportunity Get all opportunities Update an opportunity","title":"Odoo"},{"location":"integrations/nodes/n8n-nodes-base.odoo/#odoo","text":"Odoo is a suite of open-source business apps covering functionality such as: CRM, eCommerce, accounting, inventory, point of sale, project management. Credentials You can find authentication information for this node here .","title":"Odoo"},{"location":"integrations/nodes/n8n-nodes-base.odoo/#operations","text":"Contact Create a new contact Delete a contact Get a contact Get all contacts Update a contact Custom Resource Create a new item Delete an item Get an item Get all items Update an item Note Create a new note Delete a note Get a note Get all notes Update a note Opportunity Create a new opportunity Delete an opportunity Get an opportunity Get all opportunities Update an opportunity","title":"Operations"},{"location":"integrations/nodes/n8n-nodes-base.oneSimpleApi/","text":"One Simple API # One Simple API is an API toolbox offering PDF generation, Currency Exchange, QR codes, Screenshots, and more. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Information Convert a value between currencies Retrieve image metadata from a URL Social Profile Get details about an Instagram profile Get details about a Spotify Artist Utility Expand a shortened url Generate a QR Code Validate an email address Website Generate a PDF from a webpage Get SEO information from website Create a screenshot from a webpage","title":"One Simple API"},{"location":"integrations/nodes/n8n-nodes-base.oneSimpleApi/#one-simple-api","text":"One Simple API is an API toolbox offering PDF generation, Currency Exchange, QR codes, Screenshots, and more. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"One Simple API"},{"location":"integrations/nodes/n8n-nodes-base.oneSimpleApi/#basic-operations","text":"Information Convert a value between currencies Retrieve image metadata from a URL Social Profile Get details about an Instagram profile Get details about a Spotify Artist Utility Expand a shortened url Generate a QR Code Validate an email address Website Generate a PDF from a webpage Get SEO information from website Create a screenshot from a webpage","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.onfleet/","text":"Onfleet # Onfleet is a logistics platform offering a last-mile delivery solution. Credentials You can find authentication information for this node here . Operations # Admin Create a new Onfleet admin Delete an Onfleet admin Get all Onfleet admins Update an Onfleet admin Container Add task at index (or append) Get container information Fully replace a container's tasks Destination Create a new destination Get a specific destination Hub Create a new Onfleet hub Get all Onfleet hubs Update an Onfleet hub Organization Retrieve your own organization's details Retrieve the details of an organization with which you are connected Recipient Create a new Onfleet recipient Get a specific Onfleet recipient Update an Onfleet recipient Task Create a new Onfleet task Clone an Onfleet task Force-complete a started Onfleet task Delete an Onfleet task Get all Onfleet tasks Get a specific Onfleet task Update an Onfleet task Team Automatically dispatch tasks assigned to a team to on-duty drivers Create a new Onfleet team Delete an Onfleet team Get a specific Onfleet team Get all Onfleet teams Get estimated times for upcoming tasks for a team, returns a selected driver Update an Onfleet team Worker Create a new Onfleet worker Delete an Onfleet worker Get a specific Onfleet worker Get all Onfleet workers Get a specific Onfleet worker schedule Update an Onfleet worker","title":"Onfleet"},{"location":"integrations/nodes/n8n-nodes-base.onfleet/#onfleet","text":"Onfleet is a logistics platform offering a last-mile delivery solution. Credentials You can find authentication information for this node here .","title":"Onfleet"},{"location":"integrations/nodes/n8n-nodes-base.onfleet/#operations","text":"Admin Create a new Onfleet admin Delete an Onfleet admin Get all Onfleet admins Update an Onfleet admin Container Add task at index (or append) Get container information Fully replace a container's tasks Destination Create a new destination Get a specific destination Hub Create a new Onfleet hub Get all Onfleet hubs Update an Onfleet hub Organization Retrieve your own organization's details Retrieve the details of an organization with which you are connected Recipient Create a new Onfleet recipient Get a specific Onfleet recipient Update an Onfleet recipient Task Create a new Onfleet task Clone an Onfleet task Force-complete a started Onfleet task Delete an Onfleet task Get all Onfleet tasks Get a specific Onfleet task Update an Onfleet task Team Automatically dispatch tasks assigned to a team to on-duty drivers Create a new Onfleet team Delete an Onfleet team Get a specific Onfleet team Get all Onfleet teams Get estimated times for upcoming tasks for a team, returns a selected driver Update an Onfleet team Worker Create a new Onfleet worker Delete an Onfleet worker Get a specific Onfleet worker Get all Onfleet workers Get a specific Onfleet worker schedule Update an Onfleet worker","title":"Operations"},{"location":"integrations/nodes/n8n-nodes-base.openThesaurus/","text":"OpenThesaurus # OpenThesaurus is a free German dictionary for synonyms. \ud83d\udd11 Credentials The OpenThesaurus node does not require authentication. Basic Operations # Get synonyms for a German word in German Example Usage # This workflow allows you to get synonyms of a German word in German. You can also find the workflow on the website. This example usage workflow would use the following nodes. - Start - OpenThesaurus The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. OpenThesaurus node # This node will return synonyms of the word Hallo in German. If you want to get synonyms of another German word, use that word instead. Enter Hallo in the Text field. Click on Execute Node to run the workflow. In the screenshot below, you will notice that the node returns the synonyms of the word Hallo .","title":"OpenThesaurus"},{"location":"integrations/nodes/n8n-nodes-base.openThesaurus/#openthesaurus","text":"OpenThesaurus is a free German dictionary for synonyms. \ud83d\udd11 Credentials The OpenThesaurus node does not require authentication.","title":"OpenThesaurus"},{"location":"integrations/nodes/n8n-nodes-base.openThesaurus/#basic-operations","text":"Get synonyms for a German word in German","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.openThesaurus/#example-usage","text":"This workflow allows you to get synonyms of a German word in German. You can also find the workflow on the website. This example usage workflow would use the following nodes. - Start - OpenThesaurus The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.openThesaurus/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.openThesaurus/#2-openthesaurus-node","text":"This node will return synonyms of the word Hallo in German. If you want to get synonyms of another German word, use that word instead. Enter Hallo in the Text field. Click on Execute Node to run the workflow. In the screenshot below, you will notice that the node returns the synonyms of the word Hallo .","title":"2. OpenThesaurus node"},{"location":"integrations/nodes/n8n-nodes-base.openWeatherMap/","text":"OpenWeatherMap # OpenWeatherMap is an online service that provides weather data. It provides current weather data, forecasts, and historical data. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Returns the current weather data Returns the weather data for the next 5 days Example Usage # This workflow allows you to get the current weather data for a city. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - OpenWeatherMap The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. OpenWeatherMap node # First of all, you'll have to enter credentials for the OpenWeatherMap node. You can find out how to do that here . Enter the name of the city in the City field. Click on Execute Node to run the workflow.","title":"OpenWeatherMap"},{"location":"integrations/nodes/n8n-nodes-base.openWeatherMap/#openweathermap","text":"OpenWeatherMap is an online service that provides weather data. It provides current weather data, forecasts, and historical data. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"OpenWeatherMap"},{"location":"integrations/nodes/n8n-nodes-base.openWeatherMap/#basic-operations","text":"Returns the current weather data Returns the weather data for the next 5 days","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.openWeatherMap/#example-usage","text":"This workflow allows you to get the current weather data for a city. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - OpenWeatherMap The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.openWeatherMap/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.openWeatherMap/#2-openweathermap-node","text":"First of all, you'll have to enter credentials for the OpenWeatherMap node. You can find out how to do that here . Enter the name of the city in the City field. Click on Execute Node to run the workflow.","title":"2. OpenWeatherMap node"},{"location":"integrations/nodes/n8n-nodes-base.orbit/","text":"Orbit # Orbit is a platform for managing and growing communities. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Activity Create an activity for a member Get all activities Member Delete a member Get a member Get all members in a workspace Lookup a member by identity Update a member Create/Update a member Note Create a note Get all notes for a member Update a note Post Create a post Get all posts Delete a post Example Usage # This workflow allows you to create a new member and update their information in Orbit using the Orbit node. It also allows you to create a note and a post for the new member in Orbit. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - Orbit The final workflow should look like the following image. 1. Start node # The Start node exists by default when you create a new workflow. 2. Orbit node (upsert: member) # This node will create a new member in a workspace in Orbit. We will use the GitHub identity to create a new member. First of all, you'll have to enter credentials for the Orbit node. You can find out how to do that here . Select 'Upsert' from the Operation dropdown list. Select the workspace where you want to create a new member from the Workspace dropdown list. Click on the Add Identity button. Select 'GitHub' from the Source dropdown list. Select 'Username' from the Search By dropdown list. Enter the GitHub username of the member in the Username field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new member in a workspace in Orbit using the GitHub identity. 3. Orbit1 node (update: member) # This node will update the tags of the member that we created in the previous node. Select the credentials that you entered in the previous node. Select 'Update' from the Operation dropdown list. Click on the gears icon next to the Workspace field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Orbit > Parameters > workspaceId. You can also add the following expression: {{$node[\"Orbit\"].parameter[\"workspaceId\"]}} . Click on the gears icon next to the Member ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Orbit > Output Data > JSON > id. You can also add the following expression: {{$node[\"Orbit\"].json[\"id\"]}} . Click on the Add Field button and select 'Tags to Add'. Enter the tags in the Tags to Add field. You can add multiple tags by separating them with a comma. Click on Execute Node to run the node. In the screenshot below, you will notice that the node updates the information of the new member that we created in the previous node. The node adds the tags n8nConf and MLH to the new member. 4. Orbit2 node (create: note) # This node will create a note for the member that we created using the Orbit node. Select the credentials that you entered in the previous node. Select 'Note' from the Resource dropdown list. Click on the gears icon next to the Workspace field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Orbit > Parameters > workspaceId. You can also add the following expression: {{$node[\"Orbit\"].parameter[\"workspaceId\"]}} . Click on the gears icon next to the Member ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Orbit > Output Data > JSON > id. You can also add the following expression: {{$node[\"Orbit\"].json[\"id\"]}} . Enter a note in the Note field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a note for the member that we created using the Orbit node. 5. Orbit3 node (create: post) # This node will create a post for the member that we created using the Orbit node. Select the credentials that you entered in the previous node. Select 'Post' from the Resource dropdown list. Click on the gears icon next to the Workspace field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Orbit > Parameters > workspaceId. You can also add the following expression: {{$node[\"Orbit\"].parameter[\"workspaceId\"]}} . Click on the gears icon next to the Member ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Orbit > Output Data > JSON > id. You can also add the following expression: {{$node[\"Orbit\"].json[\"id\"]}} . Enter a URL for the post in the URL field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a post for the member that we created using the Orbit node.","title":"Orbit"},{"location":"integrations/nodes/n8n-nodes-base.orbit/#orbit","text":"Orbit is a platform for managing and growing communities. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Orbit"},{"location":"integrations/nodes/n8n-nodes-base.orbit/#basic-operations","text":"Activity Create an activity for a member Get all activities Member Delete a member Get a member Get all members in a workspace Lookup a member by identity Update a member Create/Update a member Note Create a note Get all notes for a member Update a note Post Create a post Get all posts Delete a post","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.orbit/#example-usage","text":"This workflow allows you to create a new member and update their information in Orbit using the Orbit node. It also allows you to create a note and a post for the new member in Orbit. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - Orbit The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.orbit/#1-start-node","text":"The Start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.orbit/#2-orbit-node-upsert-member","text":"This node will create a new member in a workspace in Orbit. We will use the GitHub identity to create a new member. First of all, you'll have to enter credentials for the Orbit node. You can find out how to do that here . Select 'Upsert' from the Operation dropdown list. Select the workspace where you want to create a new member from the Workspace dropdown list. Click on the Add Identity button. Select 'GitHub' from the Source dropdown list. Select 'Username' from the Search By dropdown list. Enter the GitHub username of the member in the Username field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new member in a workspace in Orbit using the GitHub identity.","title":"2. Orbit node (upsert: member)"},{"location":"integrations/nodes/n8n-nodes-base.orbit/#3-orbit1-node-update-member","text":"This node will update the tags of the member that we created in the previous node. Select the credentials that you entered in the previous node. Select 'Update' from the Operation dropdown list. Click on the gears icon next to the Workspace field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Orbit > Parameters > workspaceId. You can also add the following expression: {{$node[\"Orbit\"].parameter[\"workspaceId\"]}} . Click on the gears icon next to the Member ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Orbit > Output Data > JSON > id. You can also add the following expression: {{$node[\"Orbit\"].json[\"id\"]}} . Click on the Add Field button and select 'Tags to Add'. Enter the tags in the Tags to Add field. You can add multiple tags by separating them with a comma. Click on Execute Node to run the node. In the screenshot below, you will notice that the node updates the information of the new member that we created in the previous node. The node adds the tags n8nConf and MLH to the new member.","title":"3. Orbit1 node (update: member)"},{"location":"integrations/nodes/n8n-nodes-base.orbit/#4-orbit2-node-create-note","text":"This node will create a note for the member that we created using the Orbit node. Select the credentials that you entered in the previous node. Select 'Note' from the Resource dropdown list. Click on the gears icon next to the Workspace field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Orbit > Parameters > workspaceId. You can also add the following expression: {{$node[\"Orbit\"].parameter[\"workspaceId\"]}} . Click on the gears icon next to the Member ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Orbit > Output Data > JSON > id. You can also add the following expression: {{$node[\"Orbit\"].json[\"id\"]}} . Enter a note in the Note field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a note for the member that we created using the Orbit node.","title":"4. Orbit2 node (create: note)"},{"location":"integrations/nodes/n8n-nodes-base.orbit/#5-orbit3-node-create-post","text":"This node will create a post for the member that we created using the Orbit node. Select the credentials that you entered in the previous node. Select 'Post' from the Resource dropdown list. Click on the gears icon next to the Workspace field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Orbit > Parameters > workspaceId. You can also add the following expression: {{$node[\"Orbit\"].parameter[\"workspaceId\"]}} . Click on the gears icon next to the Member ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Orbit > Output Data > JSON > id. You can also add the following expression: {{$node[\"Orbit\"].json[\"id\"]}} . Enter a URL for the post in the URL field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a post for the member that we created using the Orbit node.","title":"5. Orbit3 node (create: post)"},{"location":"integrations/nodes/n8n-nodes-base.oura/","text":"Oura # Oura is a wellness ring and app that helps you keep track of your activities and sleep. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Profile Get the user's personal information. Summary Get the user's activity summary. Get the user's readiness summary. Get the user's sleep summary Example Usage # This workflow allows you to get activity summary from Oura and store the output in Airtable. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Cron - Oura - Set - Airtable The final workflow should look like the following image. 1. Cron node # The Cron node will trigger the workflow every Sunday at 9 AM. Click on Add Cron Time . Select 'Every Week' from the Mode dropdown list. Enter 9 in the Hour field. Select 'Sunday' from the Weekday dropdown list. Click on Execute Node to run the node. 2. Oura node (getActivity: summary) # This node will return the activity summary of a week. First of all, you'll have to enter credentials for the Oura node. You can find out how to do that here . Select 'Get Activity Summary' from the Operation dropdown list. Toggle Return All to true . Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the activity summary. 3. Set node # We will use the Set node to ensure that only the data that we set in this node gets passed on to the next nodes in the workflow. Click on Add Value and select 'String' from the dropdown list. Enter Day in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > summary_date. You can also add the following expression: {{$json[\"summary_date\"]}} . Click on Add Value and select 'String' from the dropdown list. Enter Steps in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > steps. You can also add the following expression: {{$json[\"steps\"]}} . Click on Add Value and select 'String' from the dropdown list. Enter Activity Score in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > score. You can also add the following expression: {{$json[\"score\"]}} . Toggle Keep Only Set to true . We set this option to true to ensure that only the data that we have set in this node get passed on to the next nodes in the workflow. Click on Execute Node to run the node. In the screenshot below, you will notice that the node uses the data from the previous node and returns the data that we set for the workflow. 4. Airtable node (Append) # This node will append the data that we set in the previous node to a table. Create a table like this in your Airtable base. First of all, you'll have to enter credentials for the Airtable node. You can find out how to do that here . Select 'Append' from the Operation dropdown list. Enter the Base ID in the Base ID field. For obtaining the Base ID, head over to their API page and select the correct base. You\u2019ll find the Base ID there. Enter the name of your table in the Table field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node appends the data that we had set in the previous node. Activate workflow for production This example workflow uses the Cron node, which is a Trigger node. You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Cron node.","title":"Oura"},{"location":"integrations/nodes/n8n-nodes-base.oura/#oura","text":"Oura is a wellness ring and app that helps you keep track of your activities and sleep. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Oura"},{"location":"integrations/nodes/n8n-nodes-base.oura/#basic-operations","text":"Profile Get the user's personal information. Summary Get the user's activity summary. Get the user's readiness summary. Get the user's sleep summary","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.oura/#example-usage","text":"This workflow allows you to get activity summary from Oura and store the output in Airtable. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Cron - Oura - Set - Airtable The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.oura/#1-cron-node","text":"The Cron node will trigger the workflow every Sunday at 9 AM. Click on Add Cron Time . Select 'Every Week' from the Mode dropdown list. Enter 9 in the Hour field. Select 'Sunday' from the Weekday dropdown list. Click on Execute Node to run the node.","title":"1. Cron node"},{"location":"integrations/nodes/n8n-nodes-base.oura/#2-oura-node-getactivity-summary","text":"This node will return the activity summary of a week. First of all, you'll have to enter credentials for the Oura node. You can find out how to do that here . Select 'Get Activity Summary' from the Operation dropdown list. Toggle Return All to true . Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the activity summary.","title":"2. Oura node (getActivity: summary)"},{"location":"integrations/nodes/n8n-nodes-base.oura/#3-set-node","text":"We will use the Set node to ensure that only the data that we set in this node gets passed on to the next nodes in the workflow. Click on Add Value and select 'String' from the dropdown list. Enter Day in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > summary_date. You can also add the following expression: {{$json[\"summary_date\"]}} . Click on Add Value and select 'String' from the dropdown list. Enter Steps in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > steps. You can also add the following expression: {{$json[\"steps\"]}} . Click on Add Value and select 'String' from the dropdown list. Enter Activity Score in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > score. You can also add the following expression: {{$json[\"score\"]}} . Toggle Keep Only Set to true . We set this option to true to ensure that only the data that we have set in this node get passed on to the next nodes in the workflow. Click on Execute Node to run the node. In the screenshot below, you will notice that the node uses the data from the previous node and returns the data that we set for the workflow.","title":"3. Set node"},{"location":"integrations/nodes/n8n-nodes-base.oura/#4-airtable-node-append","text":"This node will append the data that we set in the previous node to a table. Create a table like this in your Airtable base. First of all, you'll have to enter credentials for the Airtable node. You can find out how to do that here . Select 'Append' from the Operation dropdown list. Enter the Base ID in the Base ID field. For obtaining the Base ID, head over to their API page and select the correct base. You\u2019ll find the Base ID there. Enter the name of your table in the Table field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node appends the data that we had set in the previous node. Activate workflow for production This example workflow uses the Cron node, which is a Trigger node. You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Cron node.","title":"4. Airtable node (Append)"},{"location":"integrations/nodes/n8n-nodes-base.paddle/","text":"Paddle # Paddle is an all-in-one SaaS Commerce platform for software and SaaS companies to run and grow their business. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Coupon Create a coupon. Get all coupons. Update a coupon. Payment Get all payment. Reschedule payment. Plan Get a plan. Get all plans. Product Get all products. User Get all users Example Usage # This workflow allows you to create a coupon on Paddle. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Paddle The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Paddle node (create: coupon) # First of all, you'll have to enter credentials for the Paddle node. You can find out how to do that here . Enter the discount amount in the Discount Amount field. Click on the Add Field button and select 'Coupon Code' from the dropdown list. Enter the coupon code in the Coupon Code field. Click on Execute Node to run the node.","title":"Paddle"},{"location":"integrations/nodes/n8n-nodes-base.paddle/#paddle","text":"Paddle is an all-in-one SaaS Commerce platform for software and SaaS companies to run and grow their business. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Paddle"},{"location":"integrations/nodes/n8n-nodes-base.paddle/#basic-operations","text":"Coupon Create a coupon. Get all coupons. Update a coupon. Payment Get all payment. Reschedule payment. Plan Get a plan. Get all plans. Product Get all products. User Get all users","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.paddle/#example-usage","text":"This workflow allows you to create a coupon on Paddle. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Paddle The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.paddle/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.paddle/#2-paddle-node-create-coupon","text":"First of all, you'll have to enter credentials for the Paddle node. You can find out how to do that here . Enter the discount amount in the Discount Amount field. Click on the Add Field button and select 'Coupon Code' from the dropdown list. Enter the coupon code in the Coupon Code field. Click on Execute Node to run the node.","title":"2. Paddle node (create: coupon)"},{"location":"integrations/nodes/n8n-nodes-base.pagerDuty/","text":"PagerDuty # PagerDuty is a cloud computing company that produces a SaaS incident response platform for IT departments. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Incident Create an incident Get an incident Get all incidents Update an incident Incident Note Create an incident note Get all incident's notes Log Entry Get a log entry Get all log entries User Get a user Example Usage # This workflow allows you to create, update, and get an incident on PagerDuty. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - PagerDuty The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. PagerDuty node (create: incident) # First of all, you'll have to enter credentials for the PagerDuty node. You can find out how to do that here . Enter the title of the incident in the Title field. Select the Service ID from the dropdown list. Enter your email in the Email field. Click on Execute Node to run the node. 3. PagerDuty1 node (update: incident) # Select the credentials that you entered in the previous node. Select 'Update' from the Operation dropdown list. Click on the gears icon next to the Incident ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > PagerDuty > Output Data > JSON > id. You can also add the following expression: {{$node[\"PagerDuty\"].json[\"id\"]}} . Click on the gears icon next to the Email field and click on Add Expression . Select the following in the Variable Selector section: Nodes > PagerDuty > Parameters > email. You can also add the following expression: {{$node[\"PagerDuty\"].parameter[\"email\"]}} . Click on the Add Field button and click on Title . Enter the name of the updated title in the Title field. Click on Execute Node to run the node. 4. PagerDuty2 node (get: incident) # Select the credentials that you entered in the previous node. Select 'Get' from the Operation dropdown list. Click on the gears icon next to the Incident ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > PagerDuty > Output Data > JSON > id. You can also add the following expression: {{$node[\"PagerDuty\"].json[\"id\"]}} . Click on Execute Node to run the node.","title":"PagerDuty"},{"location":"integrations/nodes/n8n-nodes-base.pagerDuty/#pagerduty","text":"PagerDuty is a cloud computing company that produces a SaaS incident response platform for IT departments. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"PagerDuty"},{"location":"integrations/nodes/n8n-nodes-base.pagerDuty/#basic-operations","text":"Incident Create an incident Get an incident Get all incidents Update an incident Incident Note Create an incident note Get all incident's notes Log Entry Get a log entry Get all log entries User Get a user","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.pagerDuty/#example-usage","text":"This workflow allows you to create, update, and get an incident on PagerDuty. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - PagerDuty The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.pagerDuty/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.pagerDuty/#2-pagerduty-node-create-incident","text":"First of all, you'll have to enter credentials for the PagerDuty node. You can find out how to do that here . Enter the title of the incident in the Title field. Select the Service ID from the dropdown list. Enter your email in the Email field. Click on Execute Node to run the node.","title":"2. PagerDuty node (create: incident)"},{"location":"integrations/nodes/n8n-nodes-base.pagerDuty/#3-pagerduty1-node-update-incident","text":"Select the credentials that you entered in the previous node. Select 'Update' from the Operation dropdown list. Click on the gears icon next to the Incident ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > PagerDuty > Output Data > JSON > id. You can also add the following expression: {{$node[\"PagerDuty\"].json[\"id\"]}} . Click on the gears icon next to the Email field and click on Add Expression . Select the following in the Variable Selector section: Nodes > PagerDuty > Parameters > email. You can also add the following expression: {{$node[\"PagerDuty\"].parameter[\"email\"]}} . Click on the Add Field button and click on Title . Enter the name of the updated title in the Title field. Click on Execute Node to run the node.","title":"3. PagerDuty1 node (update: incident)"},{"location":"integrations/nodes/n8n-nodes-base.pagerDuty/#4-pagerduty2-node-get-incident","text":"Select the credentials that you entered in the previous node. Select 'Get' from the Operation dropdown list. Click on the gears icon next to the Incident ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > PagerDuty > Output Data > JSON > id. You can also add the following expression: {{$node[\"PagerDuty\"].json[\"id\"]}} . Click on Execute Node to run the node.","title":"4. PagerDuty2 node (get: incident)"},{"location":"integrations/nodes/n8n-nodes-base.payPal/","text":"PayPal # PayPal is a digital payment service that supports online funds transfers and that customers can use when shopping online. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Payout Create a batch payout Show batch payout details Payout Item Cancels an unclaimed payout item Show payout item details Example Usage # This workflow shows you how to create a PayPal batch payout. You can also find the workflow on this website. This example usage workflow uses the following two nodes. - Start - PayPal The final workflow should look like the following image. 1. Start node # The Start node exists by default when you create a new workflow. 2. PayPal node # First of all, you'll have to enter credentials for the PayPal node. You can find out how to do that here . Enter an ID in the Sender Batch ID field. Click on Execute Node to run the workflow.","title":"PayPal"},{"location":"integrations/nodes/n8n-nodes-base.payPal/#paypal","text":"PayPal is a digital payment service that supports online funds transfers and that customers can use when shopping online. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"PayPal"},{"location":"integrations/nodes/n8n-nodes-base.payPal/#basic-operations","text":"Payout Create a batch payout Show batch payout details Payout Item Cancels an unclaimed payout item Show payout item details","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.payPal/#example-usage","text":"This workflow shows you how to create a PayPal batch payout. You can also find the workflow on this website. This example usage workflow uses the following two nodes. - Start - PayPal The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.payPal/#1-start-node","text":"The Start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.payPal/#2-paypal-node","text":"First of all, you'll have to enter credentials for the PayPal node. You can find out how to do that here . Enter an ID in the Sender Batch ID field. Click on Execute Node to run the workflow.","title":"2. PayPal node"},{"location":"integrations/nodes/n8n-nodes-base.peekalink/","text":"Peekalink # Peekalink is an API that allows developers to preview links on the web. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Check whether preview for a given link is available Return the preview for a link Example Usage # This workflow allows you to check if preview for a link is available and return the link preview. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - Peekalink - IF - No Operation, do nothing The final workflow should look like the following image. 1. Start node # The Start node exists by default when you create a new workflow. 2. Peekalink node (create: room) # This node will check whether a preview for the specified link is available. First of all, you'll have to enter credentials for the Peekalink node. You can find out how to do that here . Select 'Is available' from the Operation dropdown list. Enter a URL in the URL field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns information about whether a preview for the specified link is available. 3. IF node # This node will check the response from the previous node. If the previous node returned true , the IF node will also return true , otherwise the IF node will return false . Click on Add Condition and select 'Boolean'. Click on the gears icon next to the Value 1 field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > isAvailable. You can also add the following expression: {{$json[\"isAvailable\"]}} . Toggle Value 2 to true . Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the data from the previous node for the true branch. 4. Peekalink node (preview) # This node will return the preview of the URL that you specified in the Peekalink node. Connect the node to the 'true' output of the IF node Select the credentials that you entered in the previous Peekalink node. Click on the gears icon next to the URL field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Peekalink > Parameters > url. You can also add the following expression: {{$node[\"Peekalink\"].parameter[\"url\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the preview of the URL that you specified in the Peekalink node. 5. NoOp node # Adding this node here is optional, as the absence of this node won't make a difference to the functioning of the workflow. We've added this as it can sometimes help others with a better understanding of the workflow, visually. Create a NoOp node connected to the 'false' output of the IF node. Click on Execute Node to run the node.","title":"Peekalink"},{"location":"integrations/nodes/n8n-nodes-base.peekalink/#peekalink","text":"Peekalink is an API that allows developers to preview links on the web. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Peekalink"},{"location":"integrations/nodes/n8n-nodes-base.peekalink/#basic-operations","text":"Check whether preview for a given link is available Return the preview for a link","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.peekalink/#example-usage","text":"This workflow allows you to check if preview for a link is available and return the link preview. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - Peekalink - IF - No Operation, do nothing The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.peekalink/#1-start-node","text":"The Start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.peekalink/#2-peekalink-node-create-room","text":"This node will check whether a preview for the specified link is available. First of all, you'll have to enter credentials for the Peekalink node. You can find out how to do that here . Select 'Is available' from the Operation dropdown list. Enter a URL in the URL field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns information about whether a preview for the specified link is available.","title":"2. Peekalink node (create: room)"},{"location":"integrations/nodes/n8n-nodes-base.peekalink/#3-if-node","text":"This node will check the response from the previous node. If the previous node returned true , the IF node will also return true , otherwise the IF node will return false . Click on Add Condition and select 'Boolean'. Click on the gears icon next to the Value 1 field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > isAvailable. You can also add the following expression: {{$json[\"isAvailable\"]}} . Toggle Value 2 to true . Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the data from the previous node for the true branch.","title":"3. IF node"},{"location":"integrations/nodes/n8n-nodes-base.peekalink/#4-peekalink-node-preview","text":"This node will return the preview of the URL that you specified in the Peekalink node. Connect the node to the 'true' output of the IF node Select the credentials that you entered in the previous Peekalink node. Click on the gears icon next to the URL field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Peekalink > Parameters > url. You can also add the following expression: {{$node[\"Peekalink\"].parameter[\"url\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the preview of the URL that you specified in the Peekalink node.","title":"4. Peekalink node (preview)"},{"location":"integrations/nodes/n8n-nodes-base.peekalink/#5-noop-node","text":"Adding this node here is optional, as the absence of this node won't make a difference to the functioning of the workflow. We've added this as it can sometimes help others with a better understanding of the workflow, visually. Create a NoOp node connected to the 'false' output of the IF node. Click on Execute Node to run the node.","title":"5. NoOp node"},{"location":"integrations/nodes/n8n-nodes-base.phantombuster/","text":"Phantombuster # Phantombuster is a scraping platform that allows chain actions and data extraction on the web to generate business leads, marketing audiences, and overall growth. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Agent Delete an agent by ID. Get an agent by ID. Get all agents of the current user's organization. Get the output of the most recent container of an agent. Add an agent to the launch queue. Example Usage # This workflow allows you to store the output of a phantom in Airtable. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - Phantombuster - Set - Airtable The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Phantombuster node (getOutput: agent) # Create and launch the LinkedIn Profile Scraper in your Phantombuster account. This node will return the output of this phantom. First of all, you'll have to enter credentials for the Phantombuster node. You can find out how to do that here . Select 'Get Output' from the Operation dropdown list. Select a phantom from the Agent dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the output from the LinkedIn Profile Scraper phantom. 3. Set node # We will use the Set node to ensure that only the data that we set in this node gets passed on to the next nodes in the workflow. Click on Add Value and select 'String' from the dropdown list. Enter Name in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Phantombuster > Output Data > JSON > general > fullName. You can also add the following expression: {{$node[\"Phantombuster\"].json[\"general\"][\"fullName\"]}} . Click on Add Value and select 'String' from the dropdown list. Enter Email in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Phantombuster > Output Data > JSON > details > mail. You can also add the following expression: {{$node[\"Phantombuster\"].json[\"details\"][\"mail\"]}} . Click on Add Value and select 'String' from the dropdown list. Enter Company in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Phantombuster > Output Data > JSON > jobs> [Item: 0] > companyName. You can also add the following expression: {{$node[\"Phantombuster\"].json[\"jobs\"][0][\"companyName\"]}} . Toggle Keep Only Set to true . We set this option to true to ensure that only the data that we have set in this node get passed on to the next nodes in the workflow. Click on Execute Node to run the node. In the screenshot below, you will notice that the node uses the data from the previous node and returns the data that we set for the workflow. 4. Airtable node (Append) # This node will append the data that we set in the previous node to a table. Create a table like this in your Airtable base. First of all, you'll have to enter credentials for the Airtable node. You can find out how to do that here . Select 'Append' from the Operation dropdown list. Enter the Base ID in the Base ID field. For obtaining the Base ID, head over to their API page and select the correct base. You\u2019ll find the Base ID there. Enter the name of your table in the Table field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node appends the data that we had set in the previous node.","title":"Phantombuster"},{"location":"integrations/nodes/n8n-nodes-base.phantombuster/#phantombuster","text":"Phantombuster is a scraping platform that allows chain actions and data extraction on the web to generate business leads, marketing audiences, and overall growth. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Phantombuster"},{"location":"integrations/nodes/n8n-nodes-base.phantombuster/#basic-operations","text":"Agent Delete an agent by ID. Get an agent by ID. Get all agents of the current user's organization. Get the output of the most recent container of an agent. Add an agent to the launch queue.","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.phantombuster/#example-usage","text":"This workflow allows you to store the output of a phantom in Airtable. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - Phantombuster - Set - Airtable The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.phantombuster/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.phantombuster/#2-phantombuster-node-getoutput-agent","text":"Create and launch the LinkedIn Profile Scraper in your Phantombuster account. This node will return the output of this phantom. First of all, you'll have to enter credentials for the Phantombuster node. You can find out how to do that here . Select 'Get Output' from the Operation dropdown list. Select a phantom from the Agent dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the output from the LinkedIn Profile Scraper phantom.","title":"2. Phantombuster node (getOutput: agent)"},{"location":"integrations/nodes/n8n-nodes-base.phantombuster/#3-set-node","text":"We will use the Set node to ensure that only the data that we set in this node gets passed on to the next nodes in the workflow. Click on Add Value and select 'String' from the dropdown list. Enter Name in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Phantombuster > Output Data > JSON > general > fullName. You can also add the following expression: {{$node[\"Phantombuster\"].json[\"general\"][\"fullName\"]}} . Click on Add Value and select 'String' from the dropdown list. Enter Email in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Phantombuster > Output Data > JSON > details > mail. You can also add the following expression: {{$node[\"Phantombuster\"].json[\"details\"][\"mail\"]}} . Click on Add Value and select 'String' from the dropdown list. Enter Company in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Phantombuster > Output Data > JSON > jobs> [Item: 0] > companyName. You can also add the following expression: {{$node[\"Phantombuster\"].json[\"jobs\"][0][\"companyName\"]}} . Toggle Keep Only Set to true . We set this option to true to ensure that only the data that we have set in this node get passed on to the next nodes in the workflow. Click on Execute Node to run the node. In the screenshot below, you will notice that the node uses the data from the previous node and returns the data that we set for the workflow.","title":"3. Set node"},{"location":"integrations/nodes/n8n-nodes-base.phantombuster/#4-airtable-node-append","text":"This node will append the data that we set in the previous node to a table. Create a table like this in your Airtable base. First of all, you'll have to enter credentials for the Airtable node. You can find out how to do that here . Select 'Append' from the Operation dropdown list. Enter the Base ID in the Base ID field. For obtaining the Base ID, head over to their API page and select the correct base. You\u2019ll find the Base ID there. Enter the name of your table in the Table field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node appends the data that we had set in the previous node.","title":"4. Airtable node (Append)"},{"location":"integrations/nodes/n8n-nodes-base.philipsHue/","text":"Philips Hue # Philips Hue is a line of smart color-changing LED lamps and bulbs that can be controlled wirelessly. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Light Delete a light Retrieve a light Retrieve all lights Update a light Example Usage # This workflow allows you to turn on a light and set its brightness using the Philips Hue node. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Philips Hue The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Philips Hue node (update: light) # First of all, you'll have to enter credentials for the Philips Hue node. You can find out how to do that here . Enter the light id in the Light ID field. Click on Add Field and select 'Brightness' from the dropdown list. Enter a value between 1 and 254 for the brightness in the Brightness field. Click on Execute Node to run the node.","title":"Philips Hue"},{"location":"integrations/nodes/n8n-nodes-base.philipsHue/#philips-hue","text":"Philips Hue is a line of smart color-changing LED lamps and bulbs that can be controlled wirelessly. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Philips Hue"},{"location":"integrations/nodes/n8n-nodes-base.philipsHue/#basic-operations","text":"Light Delete a light Retrieve a light Retrieve all lights Update a light","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.philipsHue/#example-usage","text":"This workflow allows you to turn on a light and set its brightness using the Philips Hue node. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Philips Hue The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.philipsHue/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.philipsHue/#2-philips-hue-node-update-light","text":"First of all, you'll have to enter credentials for the Philips Hue node. You can find out how to do that here . Enter the light id in the Light ID field. Click on Add Field and select 'Brightness' from the dropdown list. Enter a value between 1 and 254 for the brightness in the Brightness field. Click on Execute Node to run the node.","title":"2. Philips Hue node (update: light)"},{"location":"integrations/nodes/n8n-nodes-base.pipedrive/","text":"Pipedrive # Pipedrive is a cloud-based sales software company that aims to improve the productivity of businesses through the use of their software. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Activity Create an activity Delete an activity Get data of an activity Get data of all activities Update an activity Deal Create a deal Delete a deal Duplicate a deal Get data of a deal Get data of all deals Search a deal Update a deal Deal Activity Get all activities of a deal Deal Product Add a product to a deal Get all products in a deal Remove a product from a deal Update a product in a deal File Create a file Delete a file Download a file Get data of a file Lead Create a lead Delete a lead Get data of a lead Get data of all leads Update a lead Note Create a note Delete a note Get data of a note Get data of all notes Update a note Organization Create an organization Delete an organization Get data of an organization Get data of all organizations Update an organization Search organizations Person Create a person Delete a person Get data of a person Get data of all persons Search all persons Update a person Product Get data of all products Example Usage # This workflow allows you to create an deal in Pipedrive. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Pipedrive The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Pipedrive node # First of all, you'll have to enter credentials for the Pipedrive node. You can find out how to do that here . Enter the title of the deal in the Title field. Click on Execute Node to run the workflow.","title":"Pipedrive"},{"location":"integrations/nodes/n8n-nodes-base.pipedrive/#pipedrive","text":"Pipedrive is a cloud-based sales software company that aims to improve the productivity of businesses through the use of their software. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Pipedrive"},{"location":"integrations/nodes/n8n-nodes-base.pipedrive/#basic-operations","text":"Activity Create an activity Delete an activity Get data of an activity Get data of all activities Update an activity Deal Create a deal Delete a deal Duplicate a deal Get data of a deal Get data of all deals Search a deal Update a deal Deal Activity Get all activities of a deal Deal Product Add a product to a deal Get all products in a deal Remove a product from a deal Update a product in a deal File Create a file Delete a file Download a file Get data of a file Lead Create a lead Delete a lead Get data of a lead Get data of all leads Update a lead Note Create a note Delete a note Get data of a note Get data of all notes Update a note Organization Create an organization Delete an organization Get data of an organization Get data of all organizations Update an organization Search organizations Person Create a person Delete a person Get data of a person Get data of all persons Search all persons Update a person Product Get data of all products","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.pipedrive/#example-usage","text":"This workflow allows you to create an deal in Pipedrive. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Pipedrive The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.pipedrive/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.pipedrive/#2-pipedrive-node","text":"First of all, you'll have to enter credentials for the Pipedrive node. You can find out how to do that here . Enter the title of the deal in the Title field. Click on Execute Node to run the workflow.","title":"2. Pipedrive node"},{"location":"integrations/nodes/n8n-nodes-base.plivo/","text":"Plivo # Plivo is a cloud communications platform as a service company that allows you to add SMS, MMS, and Voice calling functionality within your apps programmatically. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Call Make a voice call MMS Send an MMS message (US/Canada only) SMS Send an SMS message. Example Usage # This workflow allows you to send daily weather updates via an SMS message using the Plivo node. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Cron - OpenWeatherMap - Plivo The final workflow should look like the following image. 1. Cron node # The Cron node will trigger the workflow daily at 9 AM. Click on Add Cron Time . Set hours to 9 in the Hour field. Click on Execute Node to run the node. In the screenshot below, you will notice that the Cron node is configured to trigger the workflow every day at 9 AM. 2. OpenWeatherMap node (Current Weather) # This node will return data about the current weather in Berlin. To get the weather updates for your city, you can enter the name of your city instead. First of all, you'll have to enter credentials for the OpenWeatherMap node. You can find out how to do that here . Enter berlin in the City field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns data about the current weather in Berlin. 3. Plivo node (send: sms) # This node will send an SMS with the weather update, which was sent by the previous node. First of all, you'll have to enter credentials for the Plivo node. You can find out how to do that here . Enter a Plivo phone number in the From field. Enter the receiver's phone number in the To field. Click on the gears icon next to the Message field and click on Add Expression . Enter the following message in the Expression field: Hey! The temperature outside is {{$node[\"OpenWeatherMap\"].json[\"main\"][\"temp\"]}}\u00b0C. . Click on Execute Node to run the node. In the screenshot below, you will notice that the node sends an SMS to the phone number that we specified with the weather update. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Cron node.","title":"Plivo"},{"location":"integrations/nodes/n8n-nodes-base.plivo/#plivo","text":"Plivo is a cloud communications platform as a service company that allows you to add SMS, MMS, and Voice calling functionality within your apps programmatically. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Plivo"},{"location":"integrations/nodes/n8n-nodes-base.plivo/#basic-operations","text":"Call Make a voice call MMS Send an MMS message (US/Canada only) SMS Send an SMS message.","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.plivo/#example-usage","text":"This workflow allows you to send daily weather updates via an SMS message using the Plivo node. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Cron - OpenWeatherMap - Plivo The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.plivo/#1-cron-node","text":"The Cron node will trigger the workflow daily at 9 AM. Click on Add Cron Time . Set hours to 9 in the Hour field. Click on Execute Node to run the node. In the screenshot below, you will notice that the Cron node is configured to trigger the workflow every day at 9 AM.","title":"1. Cron node"},{"location":"integrations/nodes/n8n-nodes-base.plivo/#2-openweathermap-node-current-weather","text":"This node will return data about the current weather in Berlin. To get the weather updates for your city, you can enter the name of your city instead. First of all, you'll have to enter credentials for the OpenWeatherMap node. You can find out how to do that here . Enter berlin in the City field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns data about the current weather in Berlin.","title":"2. OpenWeatherMap node (Current Weather)"},{"location":"integrations/nodes/n8n-nodes-base.plivo/#3-plivo-node-send-sms","text":"This node will send an SMS with the weather update, which was sent by the previous node. First of all, you'll have to enter credentials for the Plivo node. You can find out how to do that here . Enter a Plivo phone number in the From field. Enter the receiver's phone number in the To field. Click on the gears icon next to the Message field and click on Add Expression . Enter the following message in the Expression field: Hey! The temperature outside is {{$node[\"OpenWeatherMap\"].json[\"main\"][\"temp\"]}}\u00b0C. . Click on Execute Node to run the node. In the screenshot below, you will notice that the node sends an SMS to the phone number that we specified with the weather update. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Cron node.","title":"3. Plivo node (send: sms)"},{"location":"integrations/nodes/n8n-nodes-base.postHog/","text":"PostHog # PostHog is an open-source product analytics platform. It provides tools to improve your product, such as session recording, heatmaps, and feature flags. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Alias Create an alias Event Create an event Identity Create Track Track a page Track a screen Example Usage # This workflow allows you to create an event in PostHog when a request is made to a webhook URL. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Webhook - PostHog The final workflow should look like the following image. 1. Webhook node # This node will trigger the workflow. We will make a GET request to the test webhook URL and pass on a query parameter called event . Click on Webhook URLs and select the 'Test' tab. Copy the displayed URL. We will make a GET request to this URL later on. Save the workflow to register the webhook. Click on Execute Node to run the node. In a new browser tab, paste the URL that you copied in the previous step and append ?event=login to it. Your URL should look similar to the following URL: https://your-n8n.url/webhook/path?event=login . Here, we are passing a query parameter called event and assigning the value login to it. Press Enter (or Return) to make a request to the test webhook URL. In the screenshot below, you will notice that the node triggers the workflow and receives a query parameter. We will use the value of the query parameter in the next node in the workflow. 2. PostHog node (create:customer) # This node will create a new event in PostHog. First of all, you'll have to enter credentials for the PostHog node. You can find out how to do that here . Click on the gears icon next to the Event field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > query > event. You can also add the following expression: {{$json[\"query\"][\"event\"]}} . Enter a distinct id in the Distinct ID field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new event in PostHog. Activate workflow for production This example workflow uses the Webhook node, which is a Trigger node. You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered every time a GET request is sent to the Production webhook URL.","title":"PostHog"},{"location":"integrations/nodes/n8n-nodes-base.postHog/#posthog","text":"PostHog is an open-source product analytics platform. It provides tools to improve your product, such as session recording, heatmaps, and feature flags. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"PostHog"},{"location":"integrations/nodes/n8n-nodes-base.postHog/#basic-operations","text":"Alias Create an alias Event Create an event Identity Create Track Track a page Track a screen","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.postHog/#example-usage","text":"This workflow allows you to create an event in PostHog when a request is made to a webhook URL. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Webhook - PostHog The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.postHog/#1-webhook-node","text":"This node will trigger the workflow. We will make a GET request to the test webhook URL and pass on a query parameter called event . Click on Webhook URLs and select the 'Test' tab. Copy the displayed URL. We will make a GET request to this URL later on. Save the workflow to register the webhook. Click on Execute Node to run the node. In a new browser tab, paste the URL that you copied in the previous step and append ?event=login to it. Your URL should look similar to the following URL: https://your-n8n.url/webhook/path?event=login . Here, we are passing a query parameter called event and assigning the value login to it. Press Enter (or Return) to make a request to the test webhook URL. In the screenshot below, you will notice that the node triggers the workflow and receives a query parameter. We will use the value of the query parameter in the next node in the workflow.","title":"1. Webhook node"},{"location":"integrations/nodes/n8n-nodes-base.postHog/#2-posthog-node-createcustomer","text":"This node will create a new event in PostHog. First of all, you'll have to enter credentials for the PostHog node. You can find out how to do that here . Click on the gears icon next to the Event field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > query > event. You can also add the following expression: {{$json[\"query\"][\"event\"]}} . Enter a distinct id in the Distinct ID field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new event in PostHog. Activate workflow for production This example workflow uses the Webhook node, which is a Trigger node. You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered every time a GET request is sent to the Production webhook URL.","title":"2. PostHog node (create:customer)"},{"location":"integrations/nodes/n8n-nodes-base.postgres/","text":"Postgres # PostgreSQL , also known as Postgres, is a free and open-source relational database management system emphasizing extensibility and SQL compliance. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Execute an SQL query Insert rows in database Update rows in database Example Usage # This workflow allows you to run an SQL query on a Postgres instance. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Set - Postgres The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Postgres node (Execute Query) # First of all, you'll have to enter credentials for the Postgres node. You can find out how to do that here . Select 'Execute Query' from the Operation dropdown list. Enter the following SQL query in the Query field: CREATE TABLE test (id INT, name VARCHAR(255), PRIMARY KEY (id)); . Click on the Node tab and toggle Always Output Data to true. Click on Execute Node to run the node. 3. Set node # Click on the Add Value button and select 'Number' from the dropdown list. Enter id in the Name field. Click on the Add Value button and select 'String' from the dropdown list. Enter name in the Name field. Enter the value for the name in the Value field. Click on Execute Node to run the node. 4. Postgres1 node (Insert) # Select the credentials that you entered in the previous Postgres node. Enter test in the Table field. Enter id, name in the Columns field. Click on Execute Node to run the node. FAQs # How to specify the data type of a column? # To specify the data type of a column, append the column name with :type , where type is the data type of that column. For example, if you want to specify the type int for the column id and type text for the column name , you can use the following snippet in the Columns field: id:init,name:text .","title":"Postgres"},{"location":"integrations/nodes/n8n-nodes-base.postgres/#postgres","text":"PostgreSQL , also known as Postgres, is a free and open-source relational database management system emphasizing extensibility and SQL compliance. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Postgres"},{"location":"integrations/nodes/n8n-nodes-base.postgres/#basic-operations","text":"Execute an SQL query Insert rows in database Update rows in database","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.postgres/#example-usage","text":"This workflow allows you to run an SQL query on a Postgres instance. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Set - Postgres The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.postgres/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.postgres/#2-postgres-node-execute-query","text":"First of all, you'll have to enter credentials for the Postgres node. You can find out how to do that here . Select 'Execute Query' from the Operation dropdown list. Enter the following SQL query in the Query field: CREATE TABLE test (id INT, name VARCHAR(255), PRIMARY KEY (id)); . Click on the Node tab and toggle Always Output Data to true. Click on Execute Node to run the node.","title":"2. Postgres node (Execute Query)"},{"location":"integrations/nodes/n8n-nodes-base.postgres/#3-set-node","text":"Click on the Add Value button and select 'Number' from the dropdown list. Enter id in the Name field. Click on the Add Value button and select 'String' from the dropdown list. Enter name in the Name field. Enter the value for the name in the Value field. Click on Execute Node to run the node.","title":"3. Set node"},{"location":"integrations/nodes/n8n-nodes-base.postgres/#4-postgres1-node-insert","text":"Select the credentials that you entered in the previous Postgres node. Enter test in the Table field. Enter id, name in the Columns field. Click on Execute Node to run the node.","title":"4. Postgres1 node (Insert)"},{"location":"integrations/nodes/n8n-nodes-base.postgres/#faqs","text":"","title":"FAQs"},{"location":"integrations/nodes/n8n-nodes-base.postgres/#how-to-specify-the-data-type-of-a-column","text":"To specify the data type of a column, append the column name with :type , where type is the data type of that column. For example, if you want to specify the type int for the column id and type text for the column name , you can use the following snippet in the Columns field: id:init,name:text .","title":"How to specify the data type of a column?"},{"location":"integrations/nodes/n8n-nodes-base.profitWell/","text":"ProfitWell # ProfitWell provides real-time subscription financial metrics. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Company Get your companys ProfitWell account settings Metric Retrieve financial metric broken down by day for either the current month or the last Example Usage # This workflow allows you to send financial metrics monthly to a Mattermost channel. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Cron - ProfitWell - Mattermost The final workflow should look like the following image. 1. Cron node # The Cron node will trigger the workflow on the first day of every month at 9 AM. Click on Add Cron Time . Select 'Every Month' from the Mode dropdown list. Set hours to 9 in the Hour field. Click on Execute Node to run the node. In the screenshot below, you will notice that the Cron node is configured to trigger the workflow on the first day of every month at 9 AM. 2. ProfitWell node (get: metric) # This node will return monthly financial metrics. First of all, you'll have to enter credentials for the ProfitWell node. You can find out how to do that here . Select 'Monthly' from the Type dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns montly financial metrics. 3. Mattermost node (post: message) # This node will send a message with the metrics that we get from the previous node in the 'Monthly Metrics' channel in Mattermost. If you have a different channel, use that instead. First of all, you'll have to enter credentials for the Mattermost node. You can find out how to do that here . Select a channel from the Channel ID dropdown list. Click on the gears icon next to the Message field and click on Add Expression . Enter the following message in the Expression field: 1 2 3 4 5 Active Customers: {{$node[\"ProfitWell\"].json[\"active_customers\"]}} Trailing Customers: {{$node[\"ProfitWell\"].json[\"active_trialing_customers\"]}} New Customers: {{$node[\"ProfitWell\"].json[\"new_customers\"]}} Growth Rate: {{$node[\"ProfitWell\"].json[\"growth_rate\"]}} Recurring Revenue: {{$node[\"ProfitWell\"].json[\"recurring_revenue\"]}} Click on Execute Node to run the node. In the screenshot below, you will notice that the node sends a message with the metrics that we get from the previous node. Activate workflow for production This example workflow uses the Cron node, which is a Trigger node. You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Cron node.","title":"ProfitWell"},{"location":"integrations/nodes/n8n-nodes-base.profitWell/#profitwell","text":"ProfitWell provides real-time subscription financial metrics. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"ProfitWell"},{"location":"integrations/nodes/n8n-nodes-base.profitWell/#basic-operations","text":"Company Get your companys ProfitWell account settings Metric Retrieve financial metric broken down by day for either the current month or the last","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.profitWell/#example-usage","text":"This workflow allows you to send financial metrics monthly to a Mattermost channel. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Cron - ProfitWell - Mattermost The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.profitWell/#1-cron-node","text":"The Cron node will trigger the workflow on the first day of every month at 9 AM. Click on Add Cron Time . Select 'Every Month' from the Mode dropdown list. Set hours to 9 in the Hour field. Click on Execute Node to run the node. In the screenshot below, you will notice that the Cron node is configured to trigger the workflow on the first day of every month at 9 AM.","title":"1. Cron node"},{"location":"integrations/nodes/n8n-nodes-base.profitWell/#2-profitwell-node-get-metric","text":"This node will return monthly financial metrics. First of all, you'll have to enter credentials for the ProfitWell node. You can find out how to do that here . Select 'Monthly' from the Type dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns montly financial metrics.","title":"2. ProfitWell node (get: metric)"},{"location":"integrations/nodes/n8n-nodes-base.profitWell/#3-mattermost-node-post-message","text":"This node will send a message with the metrics that we get from the previous node in the 'Monthly Metrics' channel in Mattermost. If you have a different channel, use that instead. First of all, you'll have to enter credentials for the Mattermost node. You can find out how to do that here . Select a channel from the Channel ID dropdown list. Click on the gears icon next to the Message field and click on Add Expression . Enter the following message in the Expression field: 1 2 3 4 5 Active Customers: {{$node[\"ProfitWell\"].json[\"active_customers\"]}} Trailing Customers: {{$node[\"ProfitWell\"].json[\"active_trialing_customers\"]}} New Customers: {{$node[\"ProfitWell\"].json[\"new_customers\"]}} Growth Rate: {{$node[\"ProfitWell\"].json[\"growth_rate\"]}} Recurring Revenue: {{$node[\"ProfitWell\"].json[\"recurring_revenue\"]}} Click on Execute Node to run the node. In the screenshot below, you will notice that the node sends a message with the metrics that we get from the previous node. Activate workflow for production This example workflow uses the Cron node, which is a Trigger node. You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Cron node.","title":"3. Mattermost node (post: message)"},{"location":"integrations/nodes/n8n-nodes-base.pushbullet/","text":"Pushbullet # Pushbullet connects your devices and allows you to see your phone's notifications on your computer, transfer links, and files between devices. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Push Create a push Delete a push Get all pushes Update a push Example Usage # This workflow allows you to send daily weather updates via a push notification using the Pushbullet node. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Cron - OpenWeatherMap - Pushbullet The final workflow should look like the following image. 1. Cron node # The Cron node will trigger the workflow daily at 9 AM. Click on Add Cron Time . Set hours to 9 in the Hour field. Click on Execute Node to run the node. In the screenshot below, you will notice that the Cron node is configured to trigger the workflow every day at 9 AM. 2. OpenWeatherMap node (Current Weather) # This node will return data about the current weather in Berlin. To get the weather updates for your city, you can enter the name of your city instead. First of all, you'll have to enter credentials for the OpenWeatherMap node. You can find out how to do that here . Enter berlin in the City field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns data about the current weather in Berlin. 3. Pushbullet node (create: push) # This node will send a push notification with the weather update to the default device. If you want to send it to a specific device, select 'Device ID' from the Target dropdown list and enter the device ID in the Value field. First of all, you'll have to enter credentials for the Pushbullet node. You can find out how to do that here . Enter Today's Weather Update in the Title field. Click on the gears icon next to the Body field and click on Add Expression . Enter the following message in the Expression field: Hey! The temperature outside is {{$node[\"OpenWeatherMap\"].json[\"main\"][\"temp\"]}}\u00b0C. . Click on Execute Node to run the node. In the screenshot below, you will notice that the node sends a push notification to the default device with the weather update.","title":"Pushbullet"},{"location":"integrations/nodes/n8n-nodes-base.pushbullet/#pushbullet","text":"Pushbullet connects your devices and allows you to see your phone's notifications on your computer, transfer links, and files between devices. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Pushbullet"},{"location":"integrations/nodes/n8n-nodes-base.pushbullet/#basic-operations","text":"Push Create a push Delete a push Get all pushes Update a push","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.pushbullet/#example-usage","text":"This workflow allows you to send daily weather updates via a push notification using the Pushbullet node. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Cron - OpenWeatherMap - Pushbullet The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.pushbullet/#1-cron-node","text":"The Cron node will trigger the workflow daily at 9 AM. Click on Add Cron Time . Set hours to 9 in the Hour field. Click on Execute Node to run the node. In the screenshot below, you will notice that the Cron node is configured to trigger the workflow every day at 9 AM.","title":"1. Cron node"},{"location":"integrations/nodes/n8n-nodes-base.pushbullet/#2-openweathermap-node-current-weather","text":"This node will return data about the current weather in Berlin. To get the weather updates for your city, you can enter the name of your city instead. First of all, you'll have to enter credentials for the OpenWeatherMap node. You can find out how to do that here . Enter berlin in the City field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns data about the current weather in Berlin.","title":"2. OpenWeatherMap node (Current Weather)"},{"location":"integrations/nodes/n8n-nodes-base.pushbullet/#3-pushbullet-node-create-push","text":"This node will send a push notification with the weather update to the default device. If you want to send it to a specific device, select 'Device ID' from the Target dropdown list and enter the device ID in the Value field. First of all, you'll have to enter credentials for the Pushbullet node. You can find out how to do that here . Enter Today's Weather Update in the Title field. Click on the gears icon next to the Body field and click on Add Expression . Enter the following message in the Expression field: Hey! The temperature outside is {{$node[\"OpenWeatherMap\"].json[\"main\"][\"temp\"]}}\u00b0C. . Click on Execute Node to run the node. In the screenshot below, you will notice that the node sends a push notification to the default device with the weather update.","title":"3. Pushbullet node (create: push)"},{"location":"integrations/nodes/n8n-nodes-base.pushcut/","text":"Pushcut # Pushcut is an app for iOS that lets you create smart notifications to kick off shortcuts, URLs, and online automation. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Notification Send a notification Example Usage # This workflow allows you to send daily weather updates via a push notification using the Pushcut node. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Cron - OpenWeatherMap - Pushcut The final workflow should look like the following image. 1. Cron node # The Cron node will trigger the workflow daily at 9 AM. Click on Add Cron Time . Set hours to 9 in the Hour field. Click on Execute Node to run the node. In the screenshot below, you will notice that the Cron node is configured to trigger the workflow every day at 9 AM. 2. OpenWeatherMap node (Current Weather) # This node will return data about the current weather in Berlin. To get the weather updates for your city, you can enter the name of your city instead. First of all, you'll have to enter credentials for the OpenWeatherMap node. You can find out how to do that here . Enter berlin in the City field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns data about the current weather in Berlin. 3. Pushcut node (send: notification) # This node will send a push notification with the weather update, which was sent by the previous node. First of all, you'll have to enter credentials for the Pushcut node. You can find out how to do that here . Select a notification from the Notification Name dropdown list. Click on Add Field and select 'Title' from the dropdown list. Enter Today's Weather Update in the Title field. Click on Add Field and select 'Text' from the dropdown list. Click on the gears icon next to the Text field and click on Add Expression . Enter the following message in the Expression field: Hey! The temperature outside is {{$node[\"OpenWeatherMap\"].json[\"main\"][\"temp\"]}}\u00b0C. . Click on Execute Node to run the node. In the screenshot below, you will notice that the node sends a push notification to your device with the weather update. Activate workflow for production This example workflow uses the Cron node, which is a Trigger node. You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Cron node.","title":"Pushcut"},{"location":"integrations/nodes/n8n-nodes-base.pushcut/#pushcut","text":"Pushcut is an app for iOS that lets you create smart notifications to kick off shortcuts, URLs, and online automation. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Pushcut"},{"location":"integrations/nodes/n8n-nodes-base.pushcut/#basic-operations","text":"Notification Send a notification","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.pushcut/#example-usage","text":"This workflow allows you to send daily weather updates via a push notification using the Pushcut node. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Cron - OpenWeatherMap - Pushcut The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.pushcut/#1-cron-node","text":"The Cron node will trigger the workflow daily at 9 AM. Click on Add Cron Time . Set hours to 9 in the Hour field. Click on Execute Node to run the node. In the screenshot below, you will notice that the Cron node is configured to trigger the workflow every day at 9 AM.","title":"1. Cron node"},{"location":"integrations/nodes/n8n-nodes-base.pushcut/#2-openweathermap-node-current-weather","text":"This node will return data about the current weather in Berlin. To get the weather updates for your city, you can enter the name of your city instead. First of all, you'll have to enter credentials for the OpenWeatherMap node. You can find out how to do that here . Enter berlin in the City field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns data about the current weather in Berlin.","title":"2. OpenWeatherMap node (Current Weather)"},{"location":"integrations/nodes/n8n-nodes-base.pushcut/#3-pushcut-node-send-notification","text":"This node will send a push notification with the weather update, which was sent by the previous node. First of all, you'll have to enter credentials for the Pushcut node. You can find out how to do that here . Select a notification from the Notification Name dropdown list. Click on Add Field and select 'Title' from the dropdown list. Enter Today's Weather Update in the Title field. Click on Add Field and select 'Text' from the dropdown list. Click on the gears icon next to the Text field and click on Add Expression . Enter the following message in the Expression field: Hey! The temperature outside is {{$node[\"OpenWeatherMap\"].json[\"main\"][\"temp\"]}}\u00b0C. . Click on Execute Node to run the node. In the screenshot below, you will notice that the node sends a push notification to your device with the weather update. Activate workflow for production This example workflow uses the Cron node, which is a Trigger node. You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Cron node.","title":"3. Pushcut node (send: notification)"},{"location":"integrations/nodes/n8n-nodes-base.pushover/","text":"Pushover # Pushover is a simple push notification service that integrates easily into web apps, network monitors, shell scripts, servers, and anything else that needs to send alerts to your Android, iPhone, iPad, and Desktop. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Message Push Example Usage # This workflow allows you to send daily weather updates via a push notification using the Pushover node. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Cron - OpenWeatherMap - Pushover The final workflow should look like the following image. 1. Cron node # The Cron node will trigger the workflow daily at 9 AM. Click on Add Cron Time . Set hours to 9 in the Hour field. Click on Execute Node to run the node. In the screenshot below, you will notice that the Cron node is configured to trigger the workflow every day at 9 AM. 2. OpenWeatherMap node (Current Weather) # This node will return data about the current weather in Berlin. To get the weather updates for your city, you can enter the name of your city instead. First of all, you'll have to enter credentials for the OpenWeatherMap node. You can find out how to do that here . Enter berlin in the City field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns data about the current weather in Berlin. 3. Pushover node (push: message) # This node will send a push notification with the weather update, which was sent by the previous node. First of all, you'll have to enter credentials for the Pushover node. You can find out how to do that here . Enter a user key in the User Key field. You can obtain your user key from the Pushover Dashboard . Click on the gears icon next to the Message field and click on Add Expression . Enter the following message in the Expression field: Hey! The temperature outside is {{$node[\"OpenWeatherMap\"].json[\"main\"][\"temp\"]}}\u00b0C. . Select 'Normal Priority' from the Priority dropdown list. This will trigger sound, vibration, and display an alert according to the user's device settings. Click on Add Field and select 'Title' from the dropdown list. Enter Today's Weather in the Title field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node sends a push notification to a device with the weather update.","title":"Pushover"},{"location":"integrations/nodes/n8n-nodes-base.pushover/#pushover","text":"Pushover is a simple push notification service that integrates easily into web apps, network monitors, shell scripts, servers, and anything else that needs to send alerts to your Android, iPhone, iPad, and Desktop. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Pushover"},{"location":"integrations/nodes/n8n-nodes-base.pushover/#basic-operations","text":"Message Push","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.pushover/#example-usage","text":"This workflow allows you to send daily weather updates via a push notification using the Pushover node. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Cron - OpenWeatherMap - Pushover The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.pushover/#1-cron-node","text":"The Cron node will trigger the workflow daily at 9 AM. Click on Add Cron Time . Set hours to 9 in the Hour field. Click on Execute Node to run the node. In the screenshot below, you will notice that the Cron node is configured to trigger the workflow every day at 9 AM.","title":"1. Cron node"},{"location":"integrations/nodes/n8n-nodes-base.pushover/#2-openweathermap-node-current-weather","text":"This node will return data about the current weather in Berlin. To get the weather updates for your city, you can enter the name of your city instead. First of all, you'll have to enter credentials for the OpenWeatherMap node. You can find out how to do that here . Enter berlin in the City field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns data about the current weather in Berlin.","title":"2. OpenWeatherMap node (Current Weather)"},{"location":"integrations/nodes/n8n-nodes-base.pushover/#3-pushover-node-push-message","text":"This node will send a push notification with the weather update, which was sent by the previous node. First of all, you'll have to enter credentials for the Pushover node. You can find out how to do that here . Enter a user key in the User Key field. You can obtain your user key from the Pushover Dashboard . Click on the gears icon next to the Message field and click on Add Expression . Enter the following message in the Expression field: Hey! The temperature outside is {{$node[\"OpenWeatherMap\"].json[\"main\"][\"temp\"]}}\u00b0C. . Select 'Normal Priority' from the Priority dropdown list. This will trigger sound, vibration, and display an alert according to the user's device settings. Click on Add Field and select 'Title' from the dropdown list. Enter Today's Weather in the Title field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node sends a push notification to a device with the weather update.","title":"3. Pushover node (push: message)"},{"location":"integrations/nodes/n8n-nodes-base.questDb/","text":"QuestDB # QuestDB is an open-source NewSQL relational database designed to process time-series data, faster. QuestDB\u2019s stack is engineered from scratch, zero-GC Java and dependency-free. It supports a a Java API, SQL via HTTP and the PostgreSQL wire protocol. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Executes a SQL query. Insert rows in database. Example Usage # This workflow allows you to create a table and insert data into it in QuestDB. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Set - QuestDB The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. QuestDB node (Execute Query) # First of all, you'll have to enter credentials for the QuestDB node. You can find out how to do that here . Select 'Execute Query' from the Operation dropdown list. Enter the following SQL query in the Query field: CREATE TABLE test (id INT, name STRING); . Click on the Node tab and toggle Always Output Data to true. Click on Execute Node to run the node. 3. Set node # Click on the Add Value button and select 'Number' from the dropdown list. Enter id in the Name field. Click on the Add Value button and select 'String' from the dropdown list. Enter name in the Name field. Enter the value for the name in the Value field. Click on Execute Node to run the node. 4. QuestDB1 node (Insert) # Select the credentials that you entered in the previous QuestDB node. Enter test in the Table field. Enter id, name in the Columns field. Click on Execute Node to run the node. FAQs # How to specify the data type of a column? # To specify the data type of a column, append the column name with :type , where type is the data type of that column. For example, if you want to specify the type int for the column id and type text for the column name , you can use the following snippet in the Columns field: id:init,name:text .","title":"QuestDB"},{"location":"integrations/nodes/n8n-nodes-base.questDb/#questdb","text":"QuestDB is an open-source NewSQL relational database designed to process time-series data, faster. QuestDB\u2019s stack is engineered from scratch, zero-GC Java and dependency-free. It supports a a Java API, SQL via HTTP and the PostgreSQL wire protocol. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"QuestDB"},{"location":"integrations/nodes/n8n-nodes-base.questDb/#basic-operations","text":"Executes a SQL query. Insert rows in database.","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.questDb/#example-usage","text":"This workflow allows you to create a table and insert data into it in QuestDB. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Set - QuestDB The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.questDb/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.questDb/#2-questdb-node-execute-query","text":"First of all, you'll have to enter credentials for the QuestDB node. You can find out how to do that here . Select 'Execute Query' from the Operation dropdown list. Enter the following SQL query in the Query field: CREATE TABLE test (id INT, name STRING); . Click on the Node tab and toggle Always Output Data to true. Click on Execute Node to run the node.","title":"2. QuestDB node (Execute Query)"},{"location":"integrations/nodes/n8n-nodes-base.questDb/#3-set-node","text":"Click on the Add Value button and select 'Number' from the dropdown list. Enter id in the Name field. Click on the Add Value button and select 'String' from the dropdown list. Enter name in the Name field. Enter the value for the name in the Value field. Click on Execute Node to run the node.","title":"3. Set node"},{"location":"integrations/nodes/n8n-nodes-base.questDb/#4-questdb1-node-insert","text":"Select the credentials that you entered in the previous QuestDB node. Enter test in the Table field. Enter id, name in the Columns field. Click on Execute Node to run the node.","title":"4. QuestDB1 node (Insert)"},{"location":"integrations/nodes/n8n-nodes-base.questDb/#faqs","text":"","title":"FAQs"},{"location":"integrations/nodes/n8n-nodes-base.questDb/#how-to-specify-the-data-type-of-a-column","text":"To specify the data type of a column, append the column name with :type , where type is the data type of that column. For example, if you want to specify the type int for the column id and type text for the column name , you can use the following snippet in the Columns field: id:init,name:text .","title":"How to specify the data type of a column?"},{"location":"integrations/nodes/n8n-nodes-base.quickbase/","text":"Quick Base # Quick Base is a low-code application development platform. It allows you to connect data, integrate your systems in real-time, and orchestrate automated workflows using simple business logic. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Field Get all fields File Delete a file Download a file Record Create a record Delete a record Get all records Update a record Upsert a record Report Get a report Run a report Example Usage # This workflow allows you to create, update, and get all records in Quick Base. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Set - Quick Base The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Set node # We will use the Set node to set the name and age for a new record. Click on Add Value and select 'String' from the dropdown list. Enter name in the Name field. Enter n8n in the Value field. Click on Add Value and select 'Number' from the dropdown list. Enter age in the Name field. Set the value to 8 . Click on Execute Node to run the node. In the screenshot below, you will notice that node sets the value for name and age. 3. Quick Base node (create: record) # This node will create a new record in a table. Creating a Quick Base table # Create a new table with the fields name and age . Copy the string of characters located between db/ and ?a=td in your Quick Base URL. This string is the Table ID that we will use in the Quick Base node. Configure the Quick Base node # First of all, you'll have to enter credentials for the Quick Base node. You can find out how to do that here . Paste the Table ID you copied in the previous step, in the Table ID field. Enter name,age in the Columns field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new record in Quick Base using the information from the previous node. 4. Set1 node # We will use the Set node to ensure that only the data that we set in this node gets passed on to the next nodes in the workflow. We will set the value of age and Record ID# in this node. Click on Add Value and select 'Number' from the dropdown list. Enter age in the Name field. Set the value to 10 . Click on Add Value and select 'Number' from the dropdown list. Enter Record ID# in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Quick Base > Output Data > JSON > Record ID#. You can also add the following expression: {{$node[\"Quick Base\"].json[\"Record ID#\"]}} . Toggle Keep Only Set to true . We set this option to true to ensure that only the data that we have set in this node get passed on to the next nodes in the workflow. Click on Execute Node to run the node. In the screenshot below, you will notice that the node sets the value of age and Record ID# . This value is passed to the next node in the workflow. 5. Quick Base1 node (update: record) # This node will update the age field with the new value that we set in the previous node. Select the credentials that you entered in the previous node. Select 'Update' from the Operation dropdown list. Click on the gears icon next to the Table ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Quick Base > Parameters > tableId. You can also add the following expression: {{$node[\"Quick Base\"].parameter[\"tableId\"]}} . Enter age in the Columns field. If you want to update a different column, enter that column name instead. Enter Record ID# in the Update Key field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node updates the age field with the new value that we set in the previous node. 6. Quick Base2 node (getAll: record) # This node returns all the records from Quick Base. Select the credentials that you entered in the previous node. Select 'Get All' from the Operation dropdown list. Click on the gears icon next to the Table ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Quick Base > Parameters > tableId. You can also add the following expression: {{$node[\"Quick Base\"].parameter[\"tableId\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns all the records from Quick Base.","title":"Quick Base"},{"location":"integrations/nodes/n8n-nodes-base.quickbase/#quick-base","text":"Quick Base is a low-code application development platform. It allows you to connect data, integrate your systems in real-time, and orchestrate automated workflows using simple business logic. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Quick Base"},{"location":"integrations/nodes/n8n-nodes-base.quickbase/#basic-operations","text":"Field Get all fields File Delete a file Download a file Record Create a record Delete a record Get all records Update a record Upsert a record Report Get a report Run a report","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.quickbase/#example-usage","text":"This workflow allows you to create, update, and get all records in Quick Base. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Set - Quick Base The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.quickbase/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.quickbase/#2-set-node","text":"We will use the Set node to set the name and age for a new record. Click on Add Value and select 'String' from the dropdown list. Enter name in the Name field. Enter n8n in the Value field. Click on Add Value and select 'Number' from the dropdown list. Enter age in the Name field. Set the value to 8 . Click on Execute Node to run the node. In the screenshot below, you will notice that node sets the value for name and age.","title":"2. Set node"},{"location":"integrations/nodes/n8n-nodes-base.quickbase/#3-quick-base-node-create-record","text":"This node will create a new record in a table.","title":"3. Quick Base node (create: record)"},{"location":"integrations/nodes/n8n-nodes-base.quickbase/#creating-a-quick-base-table","text":"Create a new table with the fields name and age . Copy the string of characters located between db/ and ?a=td in your Quick Base URL. This string is the Table ID that we will use in the Quick Base node.","title":"Creating a Quick Base table"},{"location":"integrations/nodes/n8n-nodes-base.quickbase/#configure-the-quick-base-node","text":"First of all, you'll have to enter credentials for the Quick Base node. You can find out how to do that here . Paste the Table ID you copied in the previous step, in the Table ID field. Enter name,age in the Columns field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new record in Quick Base using the information from the previous node.","title":"Configure the Quick Base node"},{"location":"integrations/nodes/n8n-nodes-base.quickbase/#4-set1-node","text":"We will use the Set node to ensure that only the data that we set in this node gets passed on to the next nodes in the workflow. We will set the value of age and Record ID# in this node. Click on Add Value and select 'Number' from the dropdown list. Enter age in the Name field. Set the value to 10 . Click on Add Value and select 'Number' from the dropdown list. Enter Record ID# in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Quick Base > Output Data > JSON > Record ID#. You can also add the following expression: {{$node[\"Quick Base\"].json[\"Record ID#\"]}} . Toggle Keep Only Set to true . We set this option to true to ensure that only the data that we have set in this node get passed on to the next nodes in the workflow. Click on Execute Node to run the node. In the screenshot below, you will notice that the node sets the value of age and Record ID# . This value is passed to the next node in the workflow.","title":"4. Set1 node"},{"location":"integrations/nodes/n8n-nodes-base.quickbase/#5-quick-base1-node-update-record","text":"This node will update the age field with the new value that we set in the previous node. Select the credentials that you entered in the previous node. Select 'Update' from the Operation dropdown list. Click on the gears icon next to the Table ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Quick Base > Parameters > tableId. You can also add the following expression: {{$node[\"Quick Base\"].parameter[\"tableId\"]}} . Enter age in the Columns field. If you want to update a different column, enter that column name instead. Enter Record ID# in the Update Key field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node updates the age field with the new value that we set in the previous node.","title":"5. Quick Base1 node (update: record)"},{"location":"integrations/nodes/n8n-nodes-base.quickbase/#6-quick-base2-node-getall-record","text":"This node returns all the records from Quick Base. Select the credentials that you entered in the previous node. Select 'Get All' from the Operation dropdown list. Click on the gears icon next to the Table ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Quick Base > Parameters > tableId. You can also add the following expression: {{$node[\"Quick Base\"].parameter[\"tableId\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns all the records from Quick Base.","title":"6. Quick Base2 node (getAll: record)"},{"location":"integrations/nodes/n8n-nodes-base.quickbooks/","text":"QuickBooks # QuickBooks is an accounting software package developed by Intuit. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Bill Create Delete Get Get All Update Customer Create Get Get All Update Employee Create Get Get All Update Estimate Create Delete Get Get All Send Update Invoice Create Delete Get Get All Send Update Void Item Get Get All Payment Create Delete Get Get All Send Update Void Purchase Get Get All Transaction Get Report Vendor Create Get Get All Update Example Usage # This workflow allows you to create a customer and an invoice, and send the invoice to the customer. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - QuickBooks The final workflow should look like the following image. 1. Start node # The Start node exists by default when you create a new workflow. 2. QuickBooks node (create:customer) # This node will create a new customer in QuickBooks. First of all, you'll have to enter credentials for the QuickBooks node. You can find out how to do that here . Select 'Create' from the Operation dropdown list. Enter a display name in the Display Name field. Click on the Add Field button and select 'Primary Email Address'. Enter the email address of the customer in the Primary Email Address field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new customer. 3. QuickBooks1 node (create:invoice) # This node will create an invoice for the customer that we created in the previous node. Select the credentials that you entered in the previous node. Select 'Invoice' from the Resource dropdown list. Select 'Create' from the Operation dropdown list. Click on the gears icon next to the For Customer field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > Id. You can also add the following expression: {{$json[\"Id\"]}} . Click on the Add Item button. Select 'Item' from the Add Line Item Property dropdown list. Select an item from the Item dropdown list. Select 'Amount' from the Add Line Item Property dropdown list. Enter an amount in the Amount field. Select 'Detail Type' from the Add Line Item Property dropdown list. Select a type from the Detail Type dropdown list. Select 'Description' from the Add Line Item Property dropdown list. Enter a description in the Description field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates an invoice for the customer that we created in the previous node. 4. QuickBooks2 node (send:invoice) # This node will send the invoice that we created in the previous node. Select the credentials that you entered in the previous node. Select 'Invoice' from the Resource dropdown list. Select 'Send' from the Operation dropdown list. Click on the gears icon next to the Invoice ID field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > Id. You can also add the following expression: {{$json[\"Id\"]}} . Enter the email address of the customer in the Email field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node sends the invoice to the customer.","title":"QuickBooks"},{"location":"integrations/nodes/n8n-nodes-base.quickbooks/#quickbooks","text":"QuickBooks is an accounting software package developed by Intuit. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"QuickBooks"},{"location":"integrations/nodes/n8n-nodes-base.quickbooks/#basic-operations","text":"Bill Create Delete Get Get All Update Customer Create Get Get All Update Employee Create Get Get All Update Estimate Create Delete Get Get All Send Update Invoice Create Delete Get Get All Send Update Void Item Get Get All Payment Create Delete Get Get All Send Update Void Purchase Get Get All Transaction Get Report Vendor Create Get Get All Update","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.quickbooks/#example-usage","text":"This workflow allows you to create a customer and an invoice, and send the invoice to the customer. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - QuickBooks The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.quickbooks/#1-start-node","text":"The Start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.quickbooks/#2-quickbooks-node-createcustomer","text":"This node will create a new customer in QuickBooks. First of all, you'll have to enter credentials for the QuickBooks node. You can find out how to do that here . Select 'Create' from the Operation dropdown list. Enter a display name in the Display Name field. Click on the Add Field button and select 'Primary Email Address'. Enter the email address of the customer in the Primary Email Address field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new customer.","title":"2. QuickBooks node (create:customer)"},{"location":"integrations/nodes/n8n-nodes-base.quickbooks/#3-quickbooks1-node-createinvoice","text":"This node will create an invoice for the customer that we created in the previous node. Select the credentials that you entered in the previous node. Select 'Invoice' from the Resource dropdown list. Select 'Create' from the Operation dropdown list. Click on the gears icon next to the For Customer field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > Id. You can also add the following expression: {{$json[\"Id\"]}} . Click on the Add Item button. Select 'Item' from the Add Line Item Property dropdown list. Select an item from the Item dropdown list. Select 'Amount' from the Add Line Item Property dropdown list. Enter an amount in the Amount field. Select 'Detail Type' from the Add Line Item Property dropdown list. Select a type from the Detail Type dropdown list. Select 'Description' from the Add Line Item Property dropdown list. Enter a description in the Description field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates an invoice for the customer that we created in the previous node.","title":"3. QuickBooks1 node (create:invoice)"},{"location":"integrations/nodes/n8n-nodes-base.quickbooks/#4-quickbooks2-node-sendinvoice","text":"This node will send the invoice that we created in the previous node. Select the credentials that you entered in the previous node. Select 'Invoice' from the Resource dropdown list. Select 'Send' from the Operation dropdown list. Click on the gears icon next to the Invoice ID field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > Id. You can also add the following expression: {{$json[\"Id\"]}} . Enter the email address of the customer in the Email field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node sends the invoice to the customer.","title":"4. QuickBooks2 node (send:invoice)"},{"location":"integrations/nodes/n8n-nodes-base.rabbitmq/","text":"RabbitMQ # RabbitMQ is an open-source message broker that accepts and forwards messages. \ud83d\udd11 Credentials You can find authentication information for this node here . Example Usage # This workflow allows you to send updates about the position of the ISS every minute to a queue using the RabbitMQ node. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Cron - HTTP Request - Set - RabbitMQ The final workflow should look like the following image. 1. Cron node # The Cron node will trigger the workflow every minute. Click on Add Cron Time . Select 'Every Minute' from the Mode dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the Cron node is configured to trigger the workflow every minute. 2. HTTP Request node (GET) # This node will make a GET request to the API https://api.wheretheiss.at/v1/satellites/25544/positions to fetch the position of the ISS. This information gets passed on to the next node in the workflow. Enter https://api.wheretheiss.at/v1/satellites/25544/positions in the URL field. Click on the Add Parameter button in the Query Parameters section. Enter timestamps in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Enter the following expression: {{Date.now()}} . This expression will return the current timestamp. Click on Execute Node to run the node. In the screenshot below, you will notice that the node makes a GET request to the API and returns the information about the location of the ISS. 3. Set node # We will use the Set node to ensure that only the data that we set in this node gets passed on to the next nodes in the workflow. Click on Add Value and select 'String' from the dropdown list. Enter Name in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > HTTP Request > Output Data > JSON > 0 > name. You can also add the following expression: {{$node[\"HTTP Request\"].json[\"0\"][\"name\"]}} . Click on Add Value and select 'String' from the dropdown list. Enter Latitude in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > HTTP Request > Output Data > JSON > 0 > latitude. You can also add the following expression: {{$node[\"HTTP Request\"].json[\"0\"][\"latitude\"]}} . Click on Add Value and select 'String' from the dropdown list. Enter Longitude in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > HTTP Request > Output Data > JSON > 0 > longitude. You can also add the following expression: {{$node[\"HTTP Request\"].json[\"0\"][\"longitude\"]}} . Click on Add Value and select 'String' from the dropdown list. Enter Timestamp in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > HTTP Request > Output Data > JSON > 0 > timpestamp. You can also add the following expression: {{$node[\"HTTP Request\"].json[\"0\"][\"timestamp\"]}} . Toggle Keep Only Set to true . We set this option to true to ensure that only the data that we have set in this node get passed on to the next nodes in the workflow. Click on Execute Node to run the node. In the screenshot below, you will notice that the node uses the data from the previous node and returns the data that we set for the workflow. 4. RabbitMQ node # This node will send the data from the previous node to the iss-position queue in RabbitMQ. If you have created a queue with a different name in RabbitMQ, you can use that queue instead. First of all, you'll have to enter credentials for the RabbitMQ node. You can find out how to do that here . Enter the name of the queue or topic in the Queue / Topic field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node sends the data from the previous node to the iss-position queue in RabbitMQ. Activate workflow for production This example workflow uses the Cron node, which is a Trigger node. You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Cron node.","title":"RabbitMQ"},{"location":"integrations/nodes/n8n-nodes-base.rabbitmq/#rabbitmq","text":"RabbitMQ is an open-source message broker that accepts and forwards messages. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"RabbitMQ"},{"location":"integrations/nodes/n8n-nodes-base.rabbitmq/#example-usage","text":"This workflow allows you to send updates about the position of the ISS every minute to a queue using the RabbitMQ node. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Cron - HTTP Request - Set - RabbitMQ The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.rabbitmq/#1-cron-node","text":"The Cron node will trigger the workflow every minute. Click on Add Cron Time . Select 'Every Minute' from the Mode dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the Cron node is configured to trigger the workflow every minute.","title":"1. Cron node"},{"location":"integrations/nodes/n8n-nodes-base.rabbitmq/#2-http-request-node-get","text":"This node will make a GET request to the API https://api.wheretheiss.at/v1/satellites/25544/positions to fetch the position of the ISS. This information gets passed on to the next node in the workflow. Enter https://api.wheretheiss.at/v1/satellites/25544/positions in the URL field. Click on the Add Parameter button in the Query Parameters section. Enter timestamps in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Enter the following expression: {{Date.now()}} . This expression will return the current timestamp. Click on Execute Node to run the node. In the screenshot below, you will notice that the node makes a GET request to the API and returns the information about the location of the ISS.","title":"2. HTTP Request node (GET)"},{"location":"integrations/nodes/n8n-nodes-base.rabbitmq/#3-set-node","text":"We will use the Set node to ensure that only the data that we set in this node gets passed on to the next nodes in the workflow. Click on Add Value and select 'String' from the dropdown list. Enter Name in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > HTTP Request > Output Data > JSON > 0 > name. You can also add the following expression: {{$node[\"HTTP Request\"].json[\"0\"][\"name\"]}} . Click on Add Value and select 'String' from the dropdown list. Enter Latitude in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > HTTP Request > Output Data > JSON > 0 > latitude. You can also add the following expression: {{$node[\"HTTP Request\"].json[\"0\"][\"latitude\"]}} . Click on Add Value and select 'String' from the dropdown list. Enter Longitude in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > HTTP Request > Output Data > JSON > 0 > longitude. You can also add the following expression: {{$node[\"HTTP Request\"].json[\"0\"][\"longitude\"]}} . Click on Add Value and select 'String' from the dropdown list. Enter Timestamp in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > HTTP Request > Output Data > JSON > 0 > timpestamp. You can also add the following expression: {{$node[\"HTTP Request\"].json[\"0\"][\"timestamp\"]}} . Toggle Keep Only Set to true . We set this option to true to ensure that only the data that we have set in this node get passed on to the next nodes in the workflow. Click on Execute Node to run the node. In the screenshot below, you will notice that the node uses the data from the previous node and returns the data that we set for the workflow.","title":"3. Set node"},{"location":"integrations/nodes/n8n-nodes-base.rabbitmq/#4-rabbitmq-node","text":"This node will send the data from the previous node to the iss-position queue in RabbitMQ. If you have created a queue with a different name in RabbitMQ, you can use that queue instead. First of all, you'll have to enter credentials for the RabbitMQ node. You can find out how to do that here . Enter the name of the queue or topic in the Queue / Topic field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node sends the data from the previous node to the iss-position queue in RabbitMQ. Activate workflow for production This example workflow uses the Cron node, which is a Trigger node. You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Cron node.","title":"4. RabbitMQ node"},{"location":"integrations/nodes/n8n-nodes-base.raindrop/","text":"Raindrop # Raindrop is a bookmarking tool that allows you to organize your bookmarks. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Bookmark Create Delete Get Get All Update Collection Create Delete Get Get All Update Tag Delete Get All User Get Example Usage # This workflow allows you to create a collection and create, update, and get a bookmark in Raindrop. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - Raindrop The final workflow should look like the following image. 1. Start node # The Start node exists by default when you create a new workflow. 2. Raindrop node (create: collection) # This node will create a new collection in Raindrop. First of all, you'll have to enter credentials for the Raindrop node. You can find out how to do that here . Select 'Create' from the Operation dropdown list. Enter a title in the Title field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new collection with the title n8n-docs . 3. Raindrop1 node (create: bookmark) # This node will create a new bookmark and add it to the collection that we created in the previous node. Select the credentials that you entered in the previous node. Select 'Bookmark' from the Resource dropdown list. Select 'Create' from the Operation dropdown list. Click on the gears icon next to the Collection field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > _id. You can also add the following expression: {{$json[\"_id\"]}} . Enter https://docs.n8n.io in the Link field. Click on Add Field and select 'Title' from the dropdown list. Enter Documentation in the Title field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new bookmark with the title Documentation . 4. Raindrop2 node (update: bookmark) # This node will update the bookmark that we created in the previous node. Select the credentials that you entered in the previous node. Select 'Bookmark' from the Resource dropdown list. Select 'Update' from the Operation dropdown list. Click on the gears icon next to the Bookmark ID field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > _id. You can also add the following expression: {{$json[\"_id\"]}} . Click on Add Field and select 'Title' from the dropdown list. Enter n8n Documentation in the Title field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node updates the title of the bookmark that we created in the previous node. 5. Raindrop3 node (get: bookmark) # This node will return the information about the bookmark that we created earlier. Select the credentials that you entered in the previous node. Select 'Bookmark' from the Resource dropdown list. Click on the gears icon next to the Bookmark ID field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > _id. You can also add the following expression: {{$json[\"_id\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the information on the bookmark that we created earlier.","title":"Raindrop"},{"location":"integrations/nodes/n8n-nodes-base.raindrop/#raindrop","text":"Raindrop is a bookmarking tool that allows you to organize your bookmarks. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Raindrop"},{"location":"integrations/nodes/n8n-nodes-base.raindrop/#basic-operations","text":"Bookmark Create Delete Get Get All Update Collection Create Delete Get Get All Update Tag Delete Get All User Get","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.raindrop/#example-usage","text":"This workflow allows you to create a collection and create, update, and get a bookmark in Raindrop. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - Raindrop The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.raindrop/#1-start-node","text":"The Start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.raindrop/#2-raindrop-node-create-collection","text":"This node will create a new collection in Raindrop. First of all, you'll have to enter credentials for the Raindrop node. You can find out how to do that here . Select 'Create' from the Operation dropdown list. Enter a title in the Title field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new collection with the title n8n-docs .","title":"2. Raindrop node (create: collection)"},{"location":"integrations/nodes/n8n-nodes-base.raindrop/#3-raindrop1-node-create-bookmark","text":"This node will create a new bookmark and add it to the collection that we created in the previous node. Select the credentials that you entered in the previous node. Select 'Bookmark' from the Resource dropdown list. Select 'Create' from the Operation dropdown list. Click on the gears icon next to the Collection field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > _id. You can also add the following expression: {{$json[\"_id\"]}} . Enter https://docs.n8n.io in the Link field. Click on Add Field and select 'Title' from the dropdown list. Enter Documentation in the Title field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new bookmark with the title Documentation .","title":"3. Raindrop1 node (create: bookmark)"},{"location":"integrations/nodes/n8n-nodes-base.raindrop/#4-raindrop2-node-update-bookmark","text":"This node will update the bookmark that we created in the previous node. Select the credentials that you entered in the previous node. Select 'Bookmark' from the Resource dropdown list. Select 'Update' from the Operation dropdown list. Click on the gears icon next to the Bookmark ID field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > _id. You can also add the following expression: {{$json[\"_id\"]}} . Click on Add Field and select 'Title' from the dropdown list. Enter n8n Documentation in the Title field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node updates the title of the bookmark that we created in the previous node.","title":"4. Raindrop2 node (update: bookmark)"},{"location":"integrations/nodes/n8n-nodes-base.raindrop/#5-raindrop3-node-get-bookmark","text":"This node will return the information about the bookmark that we created earlier. Select the credentials that you entered in the previous node. Select 'Bookmark' from the Resource dropdown list. Click on the gears icon next to the Bookmark ID field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > _id. You can also add the following expression: {{$json[\"_id\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the information on the bookmark that we created earlier.","title":"5. Raindrop3 node (get: bookmark)"},{"location":"integrations/nodes/n8n-nodes-base.reddit/","text":"Reddit # Reddit is a social news aggregation, web content rating, and discussion website. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Post Submit a post to a subreddit Delete a post from a subreddit Get a post from a subreddit Get all posts from a subreddit Search posts in a subreddit or in all of Reddit. Post Comment Create a top-level comment in a post Retrieve all comments in a post Remove a comment from a post Write a reply to a comment in a post Profile Get Subreddit Retrieve background information about a subreddit. Retrieve information about subreddits from all of Reddit. User Get Example Usage # This workflow allows you to create a post a Reddit and add a comment to that post. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - Reddit The final workflow should look like the following image. 1. Start node # The Start node exists by default when you create a new workflow. 2. Reddit node (create: post) # This node will create a post under the subreddit n8n . If you want to create a post under a different subreddit, enter the name of that subreddit instead. First of all, you'll have to enter credentials for the Reddit node. You can find out how to do that here . Enter n8n in the Subreddit field. Enter a title in the Title field. Enter the content of the post in the Text field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new post under the subreddit n8n . 3. Reddit1 node (get: post) # This node will retrieve the post that we created using the previous node. Select the credentials you entered in the previous node. Select 'Get' from the Operation dropdown list. Click on the gears icon next to the Subreddit field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Reddit > Parameters > subreddit. You can also add the following expression: {{$node[\"Reddit\"].parameter[\"subreddit\"]}} . Click on the gears icon next to the Post ID field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > id. You can also add the following expression: {{$json[\"id\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the information of the post that we created in the previous node. 4. Reddit node (create: postComment) # This node will add a comment to the post that we created earlier. Select the credentials you entered in the previous node. Select 'Post Comment' from the Resource dropdown list. Click on the gears icon next to the Post ID field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > id. You can also add the following expression: {{$json[\"id\"]}} . Enter your comment in the Comment Text field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node comments on the post that we created earlier.","title":"Reddit"},{"location":"integrations/nodes/n8n-nodes-base.reddit/#reddit","text":"Reddit is a social news aggregation, web content rating, and discussion website. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Reddit"},{"location":"integrations/nodes/n8n-nodes-base.reddit/#basic-operations","text":"Post Submit a post to a subreddit Delete a post from a subreddit Get a post from a subreddit Get all posts from a subreddit Search posts in a subreddit or in all of Reddit. Post Comment Create a top-level comment in a post Retrieve all comments in a post Remove a comment from a post Write a reply to a comment in a post Profile Get Subreddit Retrieve background information about a subreddit. Retrieve information about subreddits from all of Reddit. User Get","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.reddit/#example-usage","text":"This workflow allows you to create a post a Reddit and add a comment to that post. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - Reddit The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.reddit/#1-start-node","text":"The Start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.reddit/#2-reddit-node-create-post","text":"This node will create a post under the subreddit n8n . If you want to create a post under a different subreddit, enter the name of that subreddit instead. First of all, you'll have to enter credentials for the Reddit node. You can find out how to do that here . Enter n8n in the Subreddit field. Enter a title in the Title field. Enter the content of the post in the Text field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new post under the subreddit n8n .","title":"2. Reddit node (create: post)"},{"location":"integrations/nodes/n8n-nodes-base.reddit/#3-reddit1-node-get-post","text":"This node will retrieve the post that we created using the previous node. Select the credentials you entered in the previous node. Select 'Get' from the Operation dropdown list. Click on the gears icon next to the Subreddit field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Reddit > Parameters > subreddit. You can also add the following expression: {{$node[\"Reddit\"].parameter[\"subreddit\"]}} . Click on the gears icon next to the Post ID field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > id. You can also add the following expression: {{$json[\"id\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the information of the post that we created in the previous node.","title":"3. Reddit1 node (get: post)"},{"location":"integrations/nodes/n8n-nodes-base.reddit/#4-reddit-node-create-postcomment","text":"This node will add a comment to the post that we created earlier. Select the credentials you entered in the previous node. Select 'Post Comment' from the Resource dropdown list. Click on the gears icon next to the Post ID field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > id. You can also add the following expression: {{$json[\"id\"]}} . Enter your comment in the Comment Text field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node comments on the post that we created earlier.","title":"4. Reddit node (create: postComment)"},{"location":"integrations/nodes/n8n-nodes-base.redis/","text":"Redis # Redis is an open-source, in-memory data structure store, used as a database, cache and message broker. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Delete a key from Redis. Get the value of a key from Redis. Returns generic information about the Redis instance. Atomically increments a key by 1. Creates the key if it does not exist. Returns all the keys matching a pattern. Set the value of a key in redis. Publish message to redis channel. Example Usage # This workflow allows you to get the value of a key in Redis. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Redis The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Redis node # First of all, you'll have to enter credentials for the Redis node. You can find out how to do that here . Select the 'Get' option from the Operation dropdown list. Enter the key for which you want to retrieve the value in the Key field. Click on Execute Node to run the workflow.","title":"Redis"},{"location":"integrations/nodes/n8n-nodes-base.redis/#redis","text":"Redis is an open-source, in-memory data structure store, used as a database, cache and message broker. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Redis"},{"location":"integrations/nodes/n8n-nodes-base.redis/#basic-operations","text":"Delete a key from Redis. Get the value of a key from Redis. Returns generic information about the Redis instance. Atomically increments a key by 1. Creates the key if it does not exist. Returns all the keys matching a pattern. Set the value of a key in redis. Publish message to redis channel.","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.redis/#example-usage","text":"This workflow allows you to get the value of a key in Redis. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Redis The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.redis/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.redis/#2-redis-node","text":"First of all, you'll have to enter credentials for the Redis node. You can find out how to do that here . Select the 'Get' option from the Operation dropdown list. Enter the key for which you want to retrieve the value in the Key field. Click on Execute Node to run the workflow.","title":"2. Redis node"},{"location":"integrations/nodes/n8n-nodes-base.rocketchat/","text":"Rocket.Chat # Rocket.Chat is a free and open source team chat collaboration platform that allows users to communicate securely in real-time across devices. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Chat Post a message to a channel or a direct message Example Usage # This workflow allows you to post a message to a channel in Rocket.Chat. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Rocket.Chat The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Rocket.Chat node # First of all, you'll have to enter credentials for the Rocket.Chat node. You can find out how to do that here . Enter the name of the channel where you want to post the message in the Channel field. For example, #general . Enter the message in the Text field. Click on Execute Node to run the workflow.","title":"Rocket.Chat"},{"location":"integrations/nodes/n8n-nodes-base.rocketchat/#rocketchat","text":"Rocket.Chat is a free and open source team chat collaboration platform that allows users to communicate securely in real-time across devices. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Rocket.Chat"},{"location":"integrations/nodes/n8n-nodes-base.rocketchat/#basic-operations","text":"Chat Post a message to a channel or a direct message","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.rocketchat/#example-usage","text":"This workflow allows you to post a message to a channel in Rocket.Chat. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Rocket.Chat The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.rocketchat/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.rocketchat/#2-rocketchat-node","text":"First of all, you'll have to enter credentials for the Rocket.Chat node. You can find out how to do that here . Enter the name of the channel where you want to post the message in the Channel field. For example, #general . Enter the message in the Text field. Click on Execute Node to run the workflow.","title":"2. Rocket.Chat node"},{"location":"integrations/nodes/n8n-nodes-base.rundeck/","text":"Rundeck # Rundeck is an open-source runbook automation for incident management, business continuity, and self-service operations. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Job - Execute a job - Get metadata of a job Example Usage # This workflow allows you to execute a job on Rundeck. You can also find the workflow on this website. This example usage workflow uses the following two nodes. Start Rundeck The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Rundeck node # First of all, you'll have to enter credentials for the Rundeck node. You can find out how to do that here . Enter your Rundeck job ID in the Job Id field. You can find instructions on how to obtain the job ID in the FAQs below. Click on Execute Node to run the workflow. FAQs # How do I find the Job ID? # Access your Rundeck dashboard. Open the project that contains the job you want to use with n8n. In the sidebar, click on 'JOBS'. Under 'All Jobs', click on the name of the job you want to use with n8n. In the top left corner, under the name of the job, copy the string that is displayed in smaller font below the job name. This is your job ID. Paste this job ID in the Job Id field in n8n.","title":"Rundeck"},{"location":"integrations/nodes/n8n-nodes-base.rundeck/#rundeck","text":"Rundeck is an open-source runbook automation for incident management, business continuity, and self-service operations. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Rundeck"},{"location":"integrations/nodes/n8n-nodes-base.rundeck/#basic-operations","text":"Job - Execute a job - Get metadata of a job","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.rundeck/#example-usage","text":"This workflow allows you to execute a job on Rundeck. You can also find the workflow on this website. This example usage workflow uses the following two nodes. Start Rundeck The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.rundeck/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.rundeck/#2-rundeck-node","text":"First of all, you'll have to enter credentials for the Rundeck node. You can find out how to do that here . Enter your Rundeck job ID in the Job Id field. You can find instructions on how to obtain the job ID in the FAQs below. Click on Execute Node to run the workflow.","title":"2. Rundeck node"},{"location":"integrations/nodes/n8n-nodes-base.rundeck/#faqs","text":"","title":"FAQs"},{"location":"integrations/nodes/n8n-nodes-base.rundeck/#how-do-i-find-the-job-id","text":"Access your Rundeck dashboard. Open the project that contains the job you want to use with n8n. In the sidebar, click on 'JOBS'. Under 'All Jobs', click on the name of the job you want to use with n8n. In the top left corner, under the name of the job, copy the string that is displayed in smaller font below the job name. This is your job ID. Paste this job ID in the Job Id field in n8n.","title":"How do I find the Job ID?"},{"location":"integrations/nodes/n8n-nodes-base.s3/","text":"S3 # S3 is an object storage service that allows you to block public access to all of your objects at the bucket or the account level with S3 Block Public Access. S3 maintains compliance programs, such as PCI-DSS, HIPAA/HITECH, FedRAMP, EU Data Protection Directive, and FISMA, to help you meet regulatory requirements. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Bucket Create a bucket Delete a bucket Get all buckets Search within a bucket File Copy a file Delete a file Download a file Get all files Upload a file Folder Create a folder Delete a folder Get all folders Note: To attach a file for upload, you will need to use an additional node such as the Read Binary File node or the HTTP Request node to pass the file as a data property. Example Usage # This workflow allows you to upload a file to an S3 compatible server and get a list of all the files in a bucket using the S3 node. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - HTTP Request - S3 The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. HTTP Request node (GET) # Enter the URL of the file in the URL field. Select 'File' from the Response Format field. Click on Execute Node to run the node. 3. S3 node (upload: file) # First of all, you'll have to enter credentials for the S3 node. You can find out how to do that here . Select 'Upload' from the Operation dropdown list. Enter the bucket name in the Bucket Name field. Click on the gears icon next to the File Name field and click on Add Expression . Select the following in the Variable Selector section: Nodes > HTTP Request > Output Data > Binary > data > fileName. You can also add the following expression: {{$node[\"HTTP Request\"].binary.data.fileName}} Click on Execute Node to run the node. 4. S node (getAll: file) # Select the credentials that you entered in the previous node. Select 'Get All' from the Operation dropdown list. Enter the bucket name in the Bucket Name field. Toggle Return All to true. Click on Execute Node to run the node. FAQs # Setting file permissions in Wasabi # When uploading files to Wasabi , permissions for the files must be set using the ACL dropdown and not the toggles.","title":"S3"},{"location":"integrations/nodes/n8n-nodes-base.s3/#s3","text":"S3 is an object storage service that allows you to block public access to all of your objects at the bucket or the account level with S3 Block Public Access. S3 maintains compliance programs, such as PCI-DSS, HIPAA/HITECH, FedRAMP, EU Data Protection Directive, and FISMA, to help you meet regulatory requirements. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"S3"},{"location":"integrations/nodes/n8n-nodes-base.s3/#basic-operations","text":"Bucket Create a bucket Delete a bucket Get all buckets Search within a bucket File Copy a file Delete a file Download a file Get all files Upload a file Folder Create a folder Delete a folder Get all folders Note: To attach a file for upload, you will need to use an additional node such as the Read Binary File node or the HTTP Request node to pass the file as a data property.","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.s3/#example-usage","text":"This workflow allows you to upload a file to an S3 compatible server and get a list of all the files in a bucket using the S3 node. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - HTTP Request - S3 The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.s3/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.s3/#2-http-request-node-get","text":"Enter the URL of the file in the URL field. Select 'File' from the Response Format field. Click on Execute Node to run the node.","title":"2. HTTP Request node (GET)"},{"location":"integrations/nodes/n8n-nodes-base.s3/#3-s3-node-upload-file","text":"First of all, you'll have to enter credentials for the S3 node. You can find out how to do that here . Select 'Upload' from the Operation dropdown list. Enter the bucket name in the Bucket Name field. Click on the gears icon next to the File Name field and click on Add Expression . Select the following in the Variable Selector section: Nodes > HTTP Request > Output Data > Binary > data > fileName. You can also add the following expression: {{$node[\"HTTP Request\"].binary.data.fileName}} Click on Execute Node to run the node.","title":"3. S3 node (upload: file)"},{"location":"integrations/nodes/n8n-nodes-base.s3/#4-s-node-getall-file","text":"Select the credentials that you entered in the previous node. Select 'Get All' from the Operation dropdown list. Enter the bucket name in the Bucket Name field. Toggle Return All to true. Click on Execute Node to run the node.","title":"4. S node (getAll: file)"},{"location":"integrations/nodes/n8n-nodes-base.s3/#faqs","text":"","title":"FAQs"},{"location":"integrations/nodes/n8n-nodes-base.s3/#setting-file-permissions-in-wasabi","text":"When uploading files to Wasabi , permissions for the files must be set using the ACL dropdown and not the toggles.","title":"Setting file permissions in Wasabi"},{"location":"integrations/nodes/n8n-nodes-base.salesforce/","text":"Salesforce # Salesforce is a cloud-based software company. It provides customer relationship management service and also sells a complementary suite of enterprise applications focused on customer service, marketing automation, analytics, and application development. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Account Add note to an account Create an account Create a new account, or update the current one if it already exists (upsert) Get an account Get all accounts Returns an overview of account's metadata. Delete an account Update an account Attachment Create a attachment Delete a attachment Get a attachment Get all attachments Returns an overview of attachment's metadata. Update a attachment Case Add a comment to a case Create a case Get a case Get all cases Returns an overview of case's metadata Delete a case Update a case Contact Add lead to a campaign Add note to a contact Create a contact Create a new contact, or update the current one if it already exists (upsert) Delete a contact Get a contact Returns an overview of contact's metadata Get all contacts Update a contact Custom Object Create a custom object record Create a new record, or update the current one if it already exists (upsert) Get a custom object record Get all custom object records Delete a custom object record Update a custom object record Document Upload a document Flow Get all flows Invoke a flow Lead Add lead to a campaign Add note to a lead Create a lead Create a new lead, or update the current one if it already exists (upsert) Delete a lead Get a lead Get all leads Returns an overview of Lead's metadata Update a lead Opportunity Add note to an opportunity Create an opportunity Create a new opportunity, or update the current one if it already exists (upsert) Delete an opportunity Get an opportunity Get all opportunities Returns an overview of opportunity's metadata Update an opportunity Search Execute a SOQL query that returns all the results in a single response Task Create a task Delete a task Get a task Get all tasks Returns an overview of task's metadata Update a task User Get a user Get all users Example Usage # This workflow allows you to create, update, and add a note to a lead in Salesforce. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Salesforce The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Salesforce node (create: lead) # First of all, you'll have to enter credentials for the Salesforce node. You can find out how to do that here . Enter the name of the company in the Company field. Enter the last name of the contact person in the Last Name field. Click on Execute Node to run the node. 3. Salesforce1 node (update: lead) # Select the credentials that you entered in the previous node. Select 'Update' from the Operation dropdown list. Click on the gears icon next to the Lead ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Salesforce > Output Data > JSON > id. You can also add the following expression: {{$node[\"Salesforce\"].json[\"id\"]}} Click on the Add Field button and select 'City' from the dropdown list. Enter a city name in the City field. Click on Execute Node to run the node. 4. Salesforce2 node (addNote: lead) # Select the credentials that you entered in the previous node. Select Add Note from the Operation dropdown list. Click on the gears icon next to the Lead ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Salesforce > Output Data > JSON > id. You can also add the following expression: {{$node[\"Salesforce\"].json[\"id\"]}} Enter the note in the Title field. Click on Execute Node to run the node.","title":"Salesforce"},{"location":"integrations/nodes/n8n-nodes-base.salesforce/#salesforce","text":"Salesforce is a cloud-based software company. It provides customer relationship management service and also sells a complementary suite of enterprise applications focused on customer service, marketing automation, analytics, and application development. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Salesforce"},{"location":"integrations/nodes/n8n-nodes-base.salesforce/#basic-operations","text":"Account Add note to an account Create an account Create a new account, or update the current one if it already exists (upsert) Get an account Get all accounts Returns an overview of account's metadata. Delete an account Update an account Attachment Create a attachment Delete a attachment Get a attachment Get all attachments Returns an overview of attachment's metadata. Update a attachment Case Add a comment to a case Create a case Get a case Get all cases Returns an overview of case's metadata Delete a case Update a case Contact Add lead to a campaign Add note to a contact Create a contact Create a new contact, or update the current one if it already exists (upsert) Delete a contact Get a contact Returns an overview of contact's metadata Get all contacts Update a contact Custom Object Create a custom object record Create a new record, or update the current one if it already exists (upsert) Get a custom object record Get all custom object records Delete a custom object record Update a custom object record Document Upload a document Flow Get all flows Invoke a flow Lead Add lead to a campaign Add note to a lead Create a lead Create a new lead, or update the current one if it already exists (upsert) Delete a lead Get a lead Get all leads Returns an overview of Lead's metadata Update a lead Opportunity Add note to an opportunity Create an opportunity Create a new opportunity, or update the current one if it already exists (upsert) Delete an opportunity Get an opportunity Get all opportunities Returns an overview of opportunity's metadata Update an opportunity Search Execute a SOQL query that returns all the results in a single response Task Create a task Delete a task Get a task Get all tasks Returns an overview of task's metadata Update a task User Get a user Get all users","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.salesforce/#example-usage","text":"This workflow allows you to create, update, and add a note to a lead in Salesforce. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Salesforce The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.salesforce/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.salesforce/#2-salesforce-node-create-lead","text":"First of all, you'll have to enter credentials for the Salesforce node. You can find out how to do that here . Enter the name of the company in the Company field. Enter the last name of the contact person in the Last Name field. Click on Execute Node to run the node.","title":"2. Salesforce node (create: lead)"},{"location":"integrations/nodes/n8n-nodes-base.salesforce/#3-salesforce1-node-update-lead","text":"Select the credentials that you entered in the previous node. Select 'Update' from the Operation dropdown list. Click on the gears icon next to the Lead ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Salesforce > Output Data > JSON > id. You can also add the following expression: {{$node[\"Salesforce\"].json[\"id\"]}} Click on the Add Field button and select 'City' from the dropdown list. Enter a city name in the City field. Click on Execute Node to run the node.","title":"3. Salesforce1 node (update: lead)"},{"location":"integrations/nodes/n8n-nodes-base.salesforce/#4-salesforce2-node-addnote-lead","text":"Select the credentials that you entered in the previous node. Select Add Note from the Operation dropdown list. Click on the gears icon next to the Lead ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Salesforce > Output Data > JSON > id. You can also add the following expression: {{$node[\"Salesforce\"].json[\"id\"]}} Enter the note in the Title field. Click on Execute Node to run the node.","title":"4. Salesforce2 node (addNote: lead)"},{"location":"integrations/nodes/n8n-nodes-base.salesmate/","text":"Salesmate # Salesmate is a cloud-based CRM solution that caters to small and midsize businesses across various industries. Key features include contact management, sales pipeline management, email marketing and internal chat and phone integration. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Activity Create an activity Delete an activity Get an activity Get all companies Update an activity Company Create a company Delete a company Get a company Get all companies Update a company Deal Create a deal Delete a deal Get a deal Get all deals Update a deal Example Usage # This workflow allows you to create a company in Salesmate. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Salesmate The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Salesmate node # First of all, you'll have to enter credentials for the Salesmate node. You can find out how to do that here . Select the 'Company' option from the Resource dropdown list. Enter the name of the company in the Name field. Select the owner from the Owner dropdown list. Click on Execute Node to run the workflow.","title":"Salesmate"},{"location":"integrations/nodes/n8n-nodes-base.salesmate/#salesmate","text":"Salesmate is a cloud-based CRM solution that caters to small and midsize businesses across various industries. Key features include contact management, sales pipeline management, email marketing and internal chat and phone integration. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Salesmate"},{"location":"integrations/nodes/n8n-nodes-base.salesmate/#basic-operations","text":"Activity Create an activity Delete an activity Get an activity Get all companies Update an activity Company Create a company Delete a company Get a company Get all companies Update a company Deal Create a deal Delete a deal Get a deal Get all deals Update a deal","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.salesmate/#example-usage","text":"This workflow allows you to create a company in Salesmate. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Salesmate The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.salesmate/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.salesmate/#2-salesmate-node","text":"First of all, you'll have to enter credentials for the Salesmate node. You can find out how to do that here . Select the 'Company' option from the Resource dropdown list. Enter the name of the company in the Name field. Select the owner from the Owner dropdown list. Click on Execute Node to run the workflow.","title":"2. Salesmate node"},{"location":"integrations/nodes/n8n-nodes-base.seaTable/","text":"SeaTable # SeaTable is a collaborative database application with a spreadsheet interface. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic operations # Row Create Delete Get Get All Update","title":"SeaTable"},{"location":"integrations/nodes/n8n-nodes-base.seaTable/#seatable","text":"SeaTable is a collaborative database application with a spreadsheet interface. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"SeaTable"},{"location":"integrations/nodes/n8n-nodes-base.seaTable/#basic-operations","text":"Row Create Delete Get Get All Update","title":"Basic operations"},{"location":"integrations/nodes/n8n-nodes-base.securityScorecard/","text":"SecurityScorecard # SecurityScorecard enables organizations to prove and maintain compliance with leading regulations and standards mandates that include PCI, NIST, SOX, GDPR, and many others. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Company Get company factor scores and issue counts Get company's historical factor scores Get company's historical scores Get company information and summary of their scorecard Get company's score improvement plan Industry Get Factor Scores Get Historical Factor Scores Get Score Invite Create an invite for a company/user Portfolio Create a portfolio Delete a portfolio Get all portfolios Update a portfolio Portfolio Company Add a company to portfolio Get all companies in a portfolio Remove a company from portfolio Report Download a generated report Generate a report Get list of recently generated report Example Usage # This workflow allows you to generate, retrieve, and download a report using the SecurityScorecard node. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - SecurityScorecard The final workflow should look like the following image. 1. Start node # The Start node exists by default when you create a new workflow. 2. SecurityScorecard node (generate: report) # This node will generate a full scorecard report for a company that we specify. First of all, you'll have to enter credentials for the SecurityScorecard node. You can find out how to do that here . Select 'Report' from the Resource dropdown list. Select 'Generate' from the Operation dropdown list. Select 'Full Scorecard' from the Report dropdown list. Enter the domain of the company in the Scorecard Identifier field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node generates a full scorecard report of n8n.io . 3. SecurityScorecard1 node (getAll: report) # This node will return a report from SecurityScorecard. Select the credentials that you entered in the previous node. Select 'Report' from the Resource dropdown list. Select 'Get All' from the Operation dropdown list. Enter 1 in the Limit field. By setting it to one, the node will return a single report. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns a report from SecurityScroecard. 4. SecurityScorecard2 node (download: report) # This node will download the report that got returned by the previous node. Select the credentials that you entered in the previous node. Select 'Report' from the Resource dropdown list. Select 'Download' from the Operation dropdown list. Click on the gears icon next to the Report URL field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > download_url. You can also add the following expression: {{$json[\"download_url\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node downloads the report that was returned by the previous node.","title":"SecurityScorecard"},{"location":"integrations/nodes/n8n-nodes-base.securityScorecard/#securityscorecard","text":"SecurityScorecard enables organizations to prove and maintain compliance with leading regulations and standards mandates that include PCI, NIST, SOX, GDPR, and many others. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"SecurityScorecard"},{"location":"integrations/nodes/n8n-nodes-base.securityScorecard/#basic-operations","text":"Company Get company factor scores and issue counts Get company's historical factor scores Get company's historical scores Get company information and summary of their scorecard Get company's score improvement plan Industry Get Factor Scores Get Historical Factor Scores Get Score Invite Create an invite for a company/user Portfolio Create a portfolio Delete a portfolio Get all portfolios Update a portfolio Portfolio Company Add a company to portfolio Get all companies in a portfolio Remove a company from portfolio Report Download a generated report Generate a report Get list of recently generated report","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.securityScorecard/#example-usage","text":"This workflow allows you to generate, retrieve, and download a report using the SecurityScorecard node. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - SecurityScorecard The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.securityScorecard/#1-start-node","text":"The Start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.securityScorecard/#2-securityscorecard-node-generate-report","text":"This node will generate a full scorecard report for a company that we specify. First of all, you'll have to enter credentials for the SecurityScorecard node. You can find out how to do that here . Select 'Report' from the Resource dropdown list. Select 'Generate' from the Operation dropdown list. Select 'Full Scorecard' from the Report dropdown list. Enter the domain of the company in the Scorecard Identifier field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node generates a full scorecard report of n8n.io .","title":"2. SecurityScorecard node (generate: report)"},{"location":"integrations/nodes/n8n-nodes-base.securityScorecard/#3-securityscorecard1-node-getall-report","text":"This node will return a report from SecurityScorecard. Select the credentials that you entered in the previous node. Select 'Report' from the Resource dropdown list. Select 'Get All' from the Operation dropdown list. Enter 1 in the Limit field. By setting it to one, the node will return a single report. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns a report from SecurityScroecard.","title":"3. SecurityScorecard1 node (getAll: report)"},{"location":"integrations/nodes/n8n-nodes-base.securityScorecard/#4-securityscorecard2-node-download-report","text":"This node will download the report that got returned by the previous node. Select the credentials that you entered in the previous node. Select 'Report' from the Resource dropdown list. Select 'Download' from the Operation dropdown list. Click on the gears icon next to the Report URL field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > download_url. You can also add the following expression: {{$json[\"download_url\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node downloads the report that was returned by the previous node.","title":"4. SecurityScorecard2 node (download: report)"},{"location":"integrations/nodes/n8n-nodes-base.segment/","text":"Segment # Segment is a customer data platform (CDP) that helps you collect, clean, and control your customer data. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Group Add a user to a group Identify Create an identity Track Record the actions your users perform. Every action triggers an event, which can also have associated properties. Record page views on your website, along with optional extra information about the page being viewed. Example Usage # This workflow allows you to track an event in Segment. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Segment The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Segment node # First of all, you'll have to enter credentials for the Segment node. You can find out how to do that here . Select the 'Track' option from the Resource dropdown list. Enter the ID of the user in the User ID field. Enter the name of event in the Event field. Click on Execute Node to run the workflow.","title":"Segment"},{"location":"integrations/nodes/n8n-nodes-base.segment/#segment","text":"Segment is a customer data platform (CDP) that helps you collect, clean, and control your customer data. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Segment"},{"location":"integrations/nodes/n8n-nodes-base.segment/#basic-operations","text":"Group Add a user to a group Identify Create an identity Track Record the actions your users perform. Every action triggers an event, which can also have associated properties. Record page views on your website, along with optional extra information about the page being viewed.","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.segment/#example-usage","text":"This workflow allows you to track an event in Segment. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Segment The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.segment/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.segment/#2-segment-node","text":"First of all, you'll have to enter credentials for the Segment node. You can find out how to do that here . Select the 'Track' option from the Resource dropdown list. Enter the ID of the user in the User ID field. Enter the name of event in the Event field. Click on Execute Node to run the workflow.","title":"2. Segment node"},{"location":"integrations/nodes/n8n-nodes-base.sendGrid/","text":"SendGrid # SendGrid provides a cloud-based service that assists businesses with email delivery. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Contact Create/update a contact Delete a contact Get a contact by ID Get all contacts List Create a list Delete a list Get a list Get all lists Update a list Mail Send an email. Example Usage # This workflow allows you to create, update and get a contact using the SendGrid node. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - SendGrid The final workflow should look like the following image. 1. Start node # The Start node exists by default when you create a new workflow. 2. SendGrid node (upsert:contact) # This node will create a contact in SendGrid. First of all, you'll have to enter credentials for the SendGrid node. You can find out how to do that here . Select 'Contact' from the Resource dropdown list. Select 'Create/Update' from the Operation dropdown list. Enter an email address in the Email field. Click on the Add Field button and select 'First Name'. Enter the name of the contact in the First Name field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates contact with their first name. 3. SendGrid1 node (upsert:contact) # This node will update the contact that we created in the previous node. Select the credentials that you entered in the previous node. Select 'Contact' from the Resource dropdown list. Select 'Create/Update' from the Operation dropdown list. Click on the gears icon next to the Email field and click on Add Expression . Select the following in the Variable Selector section: Nodes > SendGrid > Parameters > email. You can also add the following expression: {{$node[\"SendGrid\"].parameter[\"email\"]}} . Click on the Add Field button and select 'Last Name'. Enter the last name of the contact in the Last Name field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node updates the contact that we created in the previous node. 4. SendGrid2 node (get:contact) # This node will return the information of the contact that we created using the SendGrid node. Select the credentials that you entered in the previous node. Select 'Contact' from the Resource dropdown list. Select 'Get' from the Operation dropdown list. Select 'Email' from the By dropdown list. Click on the gears icon next to the Email field and click on Add Expression . Select the following in the Variable Selector section: Nodes > SendGrid > Parameters > email. You can also add the following expression: {{$node[\"SendGrid\"].parameter[\"email\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the information of the contact that we created using the SendGrid node.","title":"SendGrid"},{"location":"integrations/nodes/n8n-nodes-base.sendGrid/#sendgrid","text":"SendGrid provides a cloud-based service that assists businesses with email delivery. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"SendGrid"},{"location":"integrations/nodes/n8n-nodes-base.sendGrid/#basic-operations","text":"Contact Create/update a contact Delete a contact Get a contact by ID Get all contacts List Create a list Delete a list Get a list Get all lists Update a list Mail Send an email.","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.sendGrid/#example-usage","text":"This workflow allows you to create, update and get a contact using the SendGrid node. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - SendGrid The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.sendGrid/#1-start-node","text":"The Start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.sendGrid/#2-sendgrid-node-upsertcontact","text":"This node will create a contact in SendGrid. First of all, you'll have to enter credentials for the SendGrid node. You can find out how to do that here . Select 'Contact' from the Resource dropdown list. Select 'Create/Update' from the Operation dropdown list. Enter an email address in the Email field. Click on the Add Field button and select 'First Name'. Enter the name of the contact in the First Name field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates contact with their first name.","title":"2. SendGrid node (upsert:contact)"},{"location":"integrations/nodes/n8n-nodes-base.sendGrid/#3-sendgrid1-node-upsertcontact","text":"This node will update the contact that we created in the previous node. Select the credentials that you entered in the previous node. Select 'Contact' from the Resource dropdown list. Select 'Create/Update' from the Operation dropdown list. Click on the gears icon next to the Email field and click on Add Expression . Select the following in the Variable Selector section: Nodes > SendGrid > Parameters > email. You can also add the following expression: {{$node[\"SendGrid\"].parameter[\"email\"]}} . Click on the Add Field button and select 'Last Name'. Enter the last name of the contact in the Last Name field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node updates the contact that we created in the previous node.","title":"3. SendGrid1 node (upsert:contact)"},{"location":"integrations/nodes/n8n-nodes-base.sendGrid/#4-sendgrid2-node-getcontact","text":"This node will return the information of the contact that we created using the SendGrid node. Select the credentials that you entered in the previous node. Select 'Contact' from the Resource dropdown list. Select 'Get' from the Operation dropdown list. Select 'Email' from the By dropdown list. Click on the gears icon next to the Email field and click on Add Expression . Select the following in the Variable Selector section: Nodes > SendGrid > Parameters > email. You can also add the following expression: {{$node[\"SendGrid\"].parameter[\"email\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the information of the contact that we created using the SendGrid node.","title":"4. SendGrid2 node (get:contact)"},{"location":"integrations/nodes/n8n-nodes-base.sendy/","text":"Sendy # Sendy is a self-hosted email newsletter application that lets you send trackable emails via AWS SES. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Campaign Create a campaign Subscriber Add a subscriber to a list Count subscribers Delete a subscriber from a list Unsubscribe user from a list Get the status of subscriber Example Usage # This workflow allows you to add a subscriber to a list and create and send a campaign using the Sendy node. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - Sendy The final workflow should look like the following image. 1. Start node # The Start node exists by default when you create a new workflow. 2. Sendy node (add: subscriber) # This node will add a subscriber to a list in Sendy. If you don't already have a list in Sendy, make sure to create one. First of all, you'll have to enter credentials for the Sendy node. You can find out how to do that here . Enter the subscriber's email address in the Email field. In your Sendy dashboard, click on 'View all lists' and copy the ID of the list to which you want to add the subscriber. Paste this list ID in the List ID field in n8n. Click on the Add Field button and select 'Name'. Enter the name of the subscriber in the Name field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node adds a subscriber with their name to the list that we specify. 3. Sendy1 node (create: campaign) # This node will create a campaign with the title 'Welcome to n8n' and send it to the subscribers of the list that we specify. Select the credentials that you entered in the previous node. Select 'Campaign' from the Resource dropdown list. Enter the name of the sender in the From Name field. Enter the email address of the sender in the From Email field. Enter the email address where the subscribers can reply to in the Reply To field. Enter the title of the campaign in the Title field. Enter the subject of the email in the Subject field. Enter the HTML snippet of the email campaign in the HTML Text field. Toggle Send Campaign to true. Click on the Add Field button and select 'List IDs'. Click on the gears icon next to the List IDs field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Sendy > Parameters > listId. You can also add the following expression: {{$node[\"Sendy\"].parameter[\"listId\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates the campaign with the title Welcome to n8n and sends it to the list that we specify.","title":"Sendy"},{"location":"integrations/nodes/n8n-nodes-base.sendy/#sendy","text":"Sendy is a self-hosted email newsletter application that lets you send trackable emails via AWS SES. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Sendy"},{"location":"integrations/nodes/n8n-nodes-base.sendy/#basic-operations","text":"Campaign Create a campaign Subscriber Add a subscriber to a list Count subscribers Delete a subscriber from a list Unsubscribe user from a list Get the status of subscriber","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.sendy/#example-usage","text":"This workflow allows you to add a subscriber to a list and create and send a campaign using the Sendy node. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - Sendy The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.sendy/#1-start-node","text":"The Start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.sendy/#2-sendy-node-add-subscriber","text":"This node will add a subscriber to a list in Sendy. If you don't already have a list in Sendy, make sure to create one. First of all, you'll have to enter credentials for the Sendy node. You can find out how to do that here . Enter the subscriber's email address in the Email field. In your Sendy dashboard, click on 'View all lists' and copy the ID of the list to which you want to add the subscriber. Paste this list ID in the List ID field in n8n. Click on the Add Field button and select 'Name'. Enter the name of the subscriber in the Name field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node adds a subscriber with their name to the list that we specify.","title":"2. Sendy node (add: subscriber)"},{"location":"integrations/nodes/n8n-nodes-base.sendy/#3-sendy1-node-create-campaign","text":"This node will create a campaign with the title 'Welcome to n8n' and send it to the subscribers of the list that we specify. Select the credentials that you entered in the previous node. Select 'Campaign' from the Resource dropdown list. Enter the name of the sender in the From Name field. Enter the email address of the sender in the From Email field. Enter the email address where the subscribers can reply to in the Reply To field. Enter the title of the campaign in the Title field. Enter the subject of the email in the Subject field. Enter the HTML snippet of the email campaign in the HTML Text field. Toggle Send Campaign to true. Click on the Add Field button and select 'List IDs'. Click on the gears icon next to the List IDs field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Sendy > Parameters > listId. You can also add the following expression: {{$node[\"Sendy\"].parameter[\"listId\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates the campaign with the title Welcome to n8n and sends it to the list that we specify.","title":"3. Sendy1 node (create: campaign)"},{"location":"integrations/nodes/n8n-nodes-base.sentryIo/","text":"Sentry.io # Sentry.io is a service that helps you monitor and fix crashes in realtime. Sentry\u2019s platform helps every developer diagnose, fix, and optimize the performance of their code. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Event Get event by ID Get all events Issue Delete an issue Get issue by ID Get all issues Update an issue Project Create a new project Delete a project Get project by ID Get all projects Update a project Release Create a release Delete a release Get release by version identifier Get all releases Update a release Organization Create an organization Get organization by slug Get all organizations Update an organization Team Create a new team Delete a team Get team by slug Get all teams Update a team Example Usage # This workflow allows you to create a release and get all releases using the Sentry.io node. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Sentry.io The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Sentry.io node (create: release) # First of all, you'll have to enter credentials for the Sentry.io node. You can find out how to do that here . Select 'Release' from the Resource dropdown list. Select 'Create' from the Operation dropdown list. Select the organization from the Organization Slug dropdown list. Enter the version in the Version field. Enter the URL that points to the release in the URL field. Select the project from Projects dropdown list. Click on Execute Node to run the node. 2. Sentry.io node (getAll: release) # Select the credentials that you entered in the previous Sentry.io node. Select 'Release' from the Resource dropdown list. Select 'Get All' from the Operation dropdown list. Select the organization from the Organization Slug dropdown list. Toggle Return All to true. Click on Execute Node to run the node.","title":"Sentry.io"},{"location":"integrations/nodes/n8n-nodes-base.sentryIo/#sentryio","text":"Sentry.io is a service that helps you monitor and fix crashes in realtime. Sentry\u2019s platform helps every developer diagnose, fix, and optimize the performance of their code. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Sentry.io"},{"location":"integrations/nodes/n8n-nodes-base.sentryIo/#basic-operations","text":"Event Get event by ID Get all events Issue Delete an issue Get issue by ID Get all issues Update an issue Project Create a new project Delete a project Get project by ID Get all projects Update a project Release Create a release Delete a release Get release by version identifier Get all releases Update a release Organization Create an organization Get organization by slug Get all organizations Update an organization Team Create a new team Delete a team Get team by slug Get all teams Update a team","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.sentryIo/#example-usage","text":"This workflow allows you to create a release and get all releases using the Sentry.io node. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Sentry.io The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.sentryIo/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.sentryIo/#2-sentryio-node-create-release","text":"First of all, you'll have to enter credentials for the Sentry.io node. You can find out how to do that here . Select 'Release' from the Resource dropdown list. Select 'Create' from the Operation dropdown list. Select the organization from the Organization Slug dropdown list. Enter the version in the Version field. Enter the URL that points to the release in the URL field. Select the project from Projects dropdown list. Click on Execute Node to run the node.","title":"2. Sentry.io node (create: release)"},{"location":"integrations/nodes/n8n-nodes-base.sentryIo/#2-sentryio-node-getall-release","text":"Select the credentials that you entered in the previous Sentry.io node. Select 'Release' from the Resource dropdown list. Select 'Get All' from the Operation dropdown list. Select the organization from the Organization Slug dropdown list. Toggle Return All to true. Click on Execute Node to run the node.","title":"2. Sentry.io node (getAll: release)"},{"location":"integrations/nodes/n8n-nodes-base.serviceNow/","text":"ServiceNow # ServiceNow is a cloud computing platform to help companies manage digital workflows for their operations. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic operations # Business Service Get All Configuration Items Get All Department Get All Dictionary Get All Incident Create Delete Get Get All Update Table Record Create Delete Get Get All Update User Create Delete Get Get All Update User Group Get All User Role Get All Example usage # This workflow allows you to get the 50 most recent incidents and view only the desired fields. This example usage workflow uses the following nodes: Start ServiceNow The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. ServiceNow node # First enter credentials, you can find out how to do that here . Select Incident from the Resource dropdown. Select Get All from the Operation dropdown. Click Add Option and select Fields . Use the dropdown to select the fields you want to view, here we used Close code , Severity , Sys ID , and Resolve time . Click on Execute Node to run the workflow.","title":"ServiceNow"},{"location":"integrations/nodes/n8n-nodes-base.serviceNow/#servicenow","text":"ServiceNow is a cloud computing platform to help companies manage digital workflows for their operations. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"ServiceNow"},{"location":"integrations/nodes/n8n-nodes-base.serviceNow/#basic-operations","text":"Business Service Get All Configuration Items Get All Department Get All Dictionary Get All Incident Create Delete Get Get All Update Table Record Create Delete Get Get All Update User Create Delete Get Get All Update User Group Get All User Role Get All","title":"Basic operations"},{"location":"integrations/nodes/n8n-nodes-base.serviceNow/#example-usage","text":"This workflow allows you to get the 50 most recent incidents and view only the desired fields. This example usage workflow uses the following nodes: Start ServiceNow The final workflow should look like the following image.","title":"Example usage"},{"location":"integrations/nodes/n8n-nodes-base.serviceNow/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.serviceNow/#2-servicenow-node","text":"First enter credentials, you can find out how to do that here . Select Incident from the Resource dropdown. Select Get All from the Operation dropdown. Click Add Option and select Fields . Use the dropdown to select the fields you want to view, here we used Close code , Severity , Sys ID , and Resolve time . Click on Execute Node to run the workflow.","title":"2. ServiceNow node"},{"location":"integrations/nodes/n8n-nodes-base.shopify/","text":"Shopify # Shopify is an e-commerce platform that allows users to set up an online store and sell their products. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Order Create an order Delete an order Get an order Get all orders Update an order Product Create a product Delete a product Get a product Get all products Update a product Example Usage # This workflow allows you to get all orders from Shopify. You can also find the workflow on the website. This example usage workflow uses the following two nodes. Start Shopify The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Shopify node # First of all, you'll have to enter credentials for the Shopify node. You can find out how to do that here . Select 'Get All' from the Operation dropdown list. Click on Execute Node to run the workflow.","title":"Shopify"},{"location":"integrations/nodes/n8n-nodes-base.shopify/#shopify","text":"Shopify is an e-commerce platform that allows users to set up an online store and sell their products. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Shopify"},{"location":"integrations/nodes/n8n-nodes-base.shopify/#basic-operations","text":"Order Create an order Delete an order Get an order Get all orders Update an order Product Create a product Delete a product Get a product Get all products Update a product","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.shopify/#example-usage","text":"This workflow allows you to get all orders from Shopify. You can also find the workflow on the website. This example usage workflow uses the following two nodes. Start Shopify The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.shopify/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.shopify/#2-shopify-node","text":"First of all, you'll have to enter credentials for the Shopify node. You can find out how to do that here . Select 'Get All' from the Operation dropdown list. Click on Execute Node to run the workflow.","title":"2. Shopify node"},{"location":"integrations/nodes/n8n-nodes-base.signl4/","text":"SIGNL4 # SIGNL4 is a plug-and-play cloud solution produced by Derdack. It automatically notifies teams on their mobile devices in case of critical events. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Alert Send an alert Resolve an alert Example Usage # This workflow allows you to send an alert on SIGNL4. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - SIGNL4 The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. SIGNL4 node # First of all, you'll have to enter credentials for the SIGNL4 node. You can find out how to do that here . Enter a message in the Message field. Click on the Add Field button and select 'Title'. Enter a title in the Title field. Click on Execute Node to run the workflow.","title":"SIGNL4"},{"location":"integrations/nodes/n8n-nodes-base.signl4/#signl4","text":"SIGNL4 is a plug-and-play cloud solution produced by Derdack. It automatically notifies teams on their mobile devices in case of critical events. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"SIGNL4"},{"location":"integrations/nodes/n8n-nodes-base.signl4/#basic-operations","text":"Alert Send an alert Resolve an alert","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.signl4/#example-usage","text":"This workflow allows you to send an alert on SIGNL4. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - SIGNL4 The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.signl4/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.signl4/#2-signl4-node","text":"First of all, you'll have to enter credentials for the SIGNL4 node. You can find out how to do that here . Enter a message in the Message field. Click on the Add Field button and select 'Title'. Enter a title in the Title field. Click on Execute Node to run the workflow.","title":"2. SIGNL4 node"},{"location":"integrations/nodes/n8n-nodes-base.slack/","text":"Slack # Slack is a business communication platform offering many IRC-style features, including persistent chat rooms (channels), private groups, and direct messaging. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Channel Archives a conversation. Closes a direct message or multi-person direct message. Initiates a public or private channel-based conversation Get information about a channel. Get all channels in a Slack team. Get a conversation's history of messages and events. Invite a user to a channel Joins an existing conversation. Removes a user from a channel. Leaves a conversation. List members of a conversation. Opens or resumes a direct message or multi-person direct message. Renames a conversation. Get a thread of messages posted to a channel Sets the purpose for a conversation. Sets the topic for a conversation. Unarchives a conversation. File Get a file info Get & filters team files. Create or upload an existing file. Message Deletes a message Get Permanent Link of a message Post a message into a channel Post an ephemeral message to a user in channel Updates a message Reaction Adds a reaction to a message Get the reactions of a message Remove a reaction of a message Star Add a star to an item. Delete a star from an item. Get all stars of autenticated user. User Get information about a user Get online status of a user User Group Create a user group Disable a user group Enable a user group Get all user groups Update a user group User Profile Get your user's profile Update user's profile Example Usage # This workflow allows you to create a channel, invite users to the channel, post a message, and upload a file to the channel. You can also find the workflow on n8n.io This example usage workflow uses the following nodes. - Start - Slack - HTTP Request The final workflow should look like the following image. 1. Start node # The Start node exists by default when you create a new workflow. 2. Slack node (create: channel) # This node will create a new channel in your Slack workspace. This operation requires the channel:manage scope. Add this scope under the Bot Token Scopes section on Slack. You can refer to the FAQs to learn how to add scopes. Select 'Access Token' from the Authentication dropdown list. You'll have to enter credentials for the Slack node. You can find out how to enter credentials for this node here . Select 'Channel' from the Resource dropdown list. Enter a channel name in the Channel field. Click on Execute Node to run the node. In the screenshot below, you will notice that node creates a new channel in Slack. 3. Slack1 node (invite: channel) # This node will invite a member to the channel that we created in the previous node. This operation requires the channel:read scope. Add this scope under the Bot Token Scopes section on Slack. Select 'Access Token' from the Authentication dropdown list. Select the credentials that you entered in the previous node. Select 'Channel' from the Resource dropdown list. Select 'Invite' from the Operation dropdown list. Click on the gears icon next to the Channel field click on Add Expression . Select the following in the Variable Selector section: Nodes > Slack > Output Data > JSON > id. You can also add the following expression: {{$node[\"Slack\"].json[\"id\"]}} . Select the users from the User IDs dropdown list. The users you select in this field will be added to the channel. Click on Execute Node to run the node. In the screenshot below, you will notice that node invites the user to the channel we created using the previous node. 4. Slack2 node (post: message) # This node will post a message in the channel with an attachment. Select 'Access Token' from the Authentication dropdown list. Select the credentials that you entered in the previous node. Click on the gears icon next to the Channel field click on Add Expression . Select the following in the Variable Selector section: Nodes > Slack > Output Data > JSON > id. You can also add the following expression: {{$node[\"Slack\"].json[\"id\"]}} . Enter a message in the Text field. Toggle As User to true . This option allows you to post a message as a bot. Click on the Add attachment button. Select 'Image URL' from the Add attachment item dropdown list. Enter the URL of an image in the Image URL field. Select 'Title' from the Add attachment item dropdown list. Enter a title in the Title field. Click on Execute Node to run the node. In the screenshot below, you will notice that node sends a message with an attachment to the channel that we created in the previous node. 5. HTTP Request node (GET) # This node will fetch a file from a URL. You can also use the Read Binary File node to read a file from the path you specify. Enter the URL of a file in the URL field. Select 'File' from the Response Format dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the HTTP Request node fetches the file from the URL. This file gets passed on as binary data to the next node in the workflow. 6. Slack3 node (upload: file) # This node will upload the file that we got from the previous node to a channel we specify. Select 'Access Token' from the Authentication dropdown list. Select the credentials that you entered in the previous Slack node. Select 'File' from Resource dropdown list. Select 'Upload' from the Operation dropdown list. Toggle Binary Data to true. Click on Add options and select 'Channels'. Select the channel from the Channels dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node uploads the file to the channel that we created earlier. FAQs # How to create a private channel? # To create a private channel, follow the steps mentioned below. 1. Select 'Channel' from the Resource dropdown list. 2. Select 'Create' from the Operation dropdown list. 3. Click on the Add Field button. 4. Toggle Is Private to true . How to add OAuth Scopes to a Slack app? # Your app needs appropriate scopes and permissions to perform actions. For example, if you want to create a new channel, your app requires the channel:manage scope. To add scopes and permissions, follow the steps mentioned below. 1. Navigate to the Slack App dashboard page and select your app. 2. Click on 'OAuth & Permissions' under the Feature section on the left sidebar. 3. Scroll down to the Scopes section. 4. If you're building a bot, click on Add an OAuth Scope under the Bot Token Scopes . 5. Select the permissions you want to give to your bot from the dropdown list. 6. If you want the app to access user data and act on behalf of users that authorize them, add scopes under the User Token Scopes . 7. When you add new scopes, Slack will ask you to reinstall the app. Click on 'reinstall your app' on the top of the page and reinstall the app. You can refer to the official documentation on Scopes and permissions to learn more.","title":"Slack"},{"location":"integrations/nodes/n8n-nodes-base.slack/#slack","text":"Slack is a business communication platform offering many IRC-style features, including persistent chat rooms (channels), private groups, and direct messaging. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Slack"},{"location":"integrations/nodes/n8n-nodes-base.slack/#basic-operations","text":"Channel Archives a conversation. Closes a direct message or multi-person direct message. Initiates a public or private channel-based conversation Get information about a channel. Get all channels in a Slack team. Get a conversation's history of messages and events. Invite a user to a channel Joins an existing conversation. Removes a user from a channel. Leaves a conversation. List members of a conversation. Opens or resumes a direct message or multi-person direct message. Renames a conversation. Get a thread of messages posted to a channel Sets the purpose for a conversation. Sets the topic for a conversation. Unarchives a conversation. File Get a file info Get & filters team files. Create or upload an existing file. Message Deletes a message Get Permanent Link of a message Post a message into a channel Post an ephemeral message to a user in channel Updates a message Reaction Adds a reaction to a message Get the reactions of a message Remove a reaction of a message Star Add a star to an item. Delete a star from an item. Get all stars of autenticated user. User Get information about a user Get online status of a user User Group Create a user group Disable a user group Enable a user group Get all user groups Update a user group User Profile Get your user's profile Update user's profile","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.slack/#example-usage","text":"This workflow allows you to create a channel, invite users to the channel, post a message, and upload a file to the channel. You can also find the workflow on n8n.io This example usage workflow uses the following nodes. - Start - Slack - HTTP Request The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.slack/#1-start-node","text":"The Start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.slack/#2-slack-node-create-channel","text":"This node will create a new channel in your Slack workspace. This operation requires the channel:manage scope. Add this scope under the Bot Token Scopes section on Slack. You can refer to the FAQs to learn how to add scopes. Select 'Access Token' from the Authentication dropdown list. You'll have to enter credentials for the Slack node. You can find out how to enter credentials for this node here . Select 'Channel' from the Resource dropdown list. Enter a channel name in the Channel field. Click on Execute Node to run the node. In the screenshot below, you will notice that node creates a new channel in Slack.","title":"2. Slack node (create: channel)"},{"location":"integrations/nodes/n8n-nodes-base.slack/#3-slack1-node-invite-channel","text":"This node will invite a member to the channel that we created in the previous node. This operation requires the channel:read scope. Add this scope under the Bot Token Scopes section on Slack. Select 'Access Token' from the Authentication dropdown list. Select the credentials that you entered in the previous node. Select 'Channel' from the Resource dropdown list. Select 'Invite' from the Operation dropdown list. Click on the gears icon next to the Channel field click on Add Expression . Select the following in the Variable Selector section: Nodes > Slack > Output Data > JSON > id. You can also add the following expression: {{$node[\"Slack\"].json[\"id\"]}} . Select the users from the User IDs dropdown list. The users you select in this field will be added to the channel. Click on Execute Node to run the node. In the screenshot below, you will notice that node invites the user to the channel we created using the previous node.","title":"3. Slack1 node (invite: channel)"},{"location":"integrations/nodes/n8n-nodes-base.slack/#4-slack2-node-post-message","text":"This node will post a message in the channel with an attachment. Select 'Access Token' from the Authentication dropdown list. Select the credentials that you entered in the previous node. Click on the gears icon next to the Channel field click on Add Expression . Select the following in the Variable Selector section: Nodes > Slack > Output Data > JSON > id. You can also add the following expression: {{$node[\"Slack\"].json[\"id\"]}} . Enter a message in the Text field. Toggle As User to true . This option allows you to post a message as a bot. Click on the Add attachment button. Select 'Image URL' from the Add attachment item dropdown list. Enter the URL of an image in the Image URL field. Select 'Title' from the Add attachment item dropdown list. Enter a title in the Title field. Click on Execute Node to run the node. In the screenshot below, you will notice that node sends a message with an attachment to the channel that we created in the previous node.","title":"4. Slack2 node (post: message)"},{"location":"integrations/nodes/n8n-nodes-base.slack/#5-http-request-node-get","text":"This node will fetch a file from a URL. You can also use the Read Binary File node to read a file from the path you specify. Enter the URL of a file in the URL field. Select 'File' from the Response Format dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the HTTP Request node fetches the file from the URL. This file gets passed on as binary data to the next node in the workflow.","title":"5. HTTP Request node (GET)"},{"location":"integrations/nodes/n8n-nodes-base.slack/#6-slack3-node-upload-file","text":"This node will upload the file that we got from the previous node to a channel we specify. Select 'Access Token' from the Authentication dropdown list. Select the credentials that you entered in the previous Slack node. Select 'File' from Resource dropdown list. Select 'Upload' from the Operation dropdown list. Toggle Binary Data to true. Click on Add options and select 'Channels'. Select the channel from the Channels dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node uploads the file to the channel that we created earlier.","title":"6. Slack3 node (upload: file)"},{"location":"integrations/nodes/n8n-nodes-base.slack/#faqs","text":"","title":"FAQs"},{"location":"integrations/nodes/n8n-nodes-base.slack/#how-to-create-a-private-channel","text":"To create a private channel, follow the steps mentioned below. 1. Select 'Channel' from the Resource dropdown list. 2. Select 'Create' from the Operation dropdown list. 3. Click on the Add Field button. 4. Toggle Is Private to true .","title":"How to create a private channel?"},{"location":"integrations/nodes/n8n-nodes-base.slack/#how-to-add-oauth-scopes-to-a-slack-app","text":"Your app needs appropriate scopes and permissions to perform actions. For example, if you want to create a new channel, your app requires the channel:manage scope. To add scopes and permissions, follow the steps mentioned below. 1. Navigate to the Slack App dashboard page and select your app. 2. Click on 'OAuth & Permissions' under the Feature section on the left sidebar. 3. Scroll down to the Scopes section. 4. If you're building a bot, click on Add an OAuth Scope under the Bot Token Scopes . 5. Select the permissions you want to give to your bot from the dropdown list. 6. If you want the app to access user data and act on behalf of users that authorize them, add scopes under the User Token Scopes . 7. When you add new scopes, Slack will ask you to reinstall the app. Click on 'reinstall your app' on the top of the page and reinstall the app. You can refer to the official documentation on Scopes and permissions to learn more.","title":"How to add OAuth Scopes to a Slack app?"},{"location":"integrations/nodes/n8n-nodes-base.sms77/","text":"sms77 # sms77 is a full service messaging provider that helps improve communication with a powerful API and comprehensive products like Voice, SMS, and Text2Speech. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # SMS Send SMS Voice Call Converts text to voice and calls a given number Example Usage # This workflow allows you to send an SMS to a specified phone number from any phone number. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - sms77 The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. sms77 node # First of all, you'll have to enter credentials for the sms77 node. You can find out how to do that here . Enter the phone number from which you'll be sending the message in the From field. Enter the phone number to which you'll be sending the message in the To field. Enter you message in the Message field. Click on Execute Node to run the workflow.","title":"sms77"},{"location":"integrations/nodes/n8n-nodes-base.sms77/#sms77","text":"sms77 is a full service messaging provider that helps improve communication with a powerful API and comprehensive products like Voice, SMS, and Text2Speech. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"sms77"},{"location":"integrations/nodes/n8n-nodes-base.sms77/#basic-operations","text":"SMS Send SMS Voice Call Converts text to voice and calls a given number","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.sms77/#example-usage","text":"This workflow allows you to send an SMS to a specified phone number from any phone number. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - sms77 The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.sms77/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.sms77/#2-sms77-node","text":"First of all, you'll have to enter credentials for the sms77 node. You can find out how to do that here . Enter the phone number from which you'll be sending the message in the From field. Enter the phone number to which you'll be sending the message in the To field. Enter you message in the Message field. Click on Execute Node to run the workflow.","title":"2. sms77 node"},{"location":"integrations/nodes/n8n-nodes-base.snowflake/","text":"Snowflake # Snowflake is a cloud data platform that provides a data warehouse-as-a-service designed for the cloud. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Execute an SQL query. Insert rows in database. Update rows in database. Example Usage # This workflow allows you to create a table, insert, and update data in a table in Snowflake. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Set - Snowflake The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Snowflake node (Execute Query) # This node will create a table named docs with id and name columns. First of all, you'll have to enter credentials for the Snowflake node. You can find out how to do that here . Select 'Execute Query' from the Operation dropdown list. Enter the following SQL query in the Query field: CREATE TABLE docs (id INT, name STRING); . Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a table named docs in Snowflake. 3. Set node # We will use the Set node to set the values for the id and name columns for a new record. Click on the Add Value button and select 'Number' from the dropdown list. Enter id in the Name field. Enter an id in the Value field. Click on the Add Value button and select 'String' from the dropdown list. Enter name in the Name field. Enter the value for the name in the Value field. Toggle Keep Only Set to true . We set this option to true to ensure that only the data that we have set in this node get passed on to the next nodes in the workflow. Click on Execute Node to run the node. In the screenshot below, you will notice that the node sets the value for id and name . 4. Snowflake1 node (Insert) # This node will insert the data that we set in the previous node into the docs table in Snowflake. Select the credentials that you entered in the previous Snowflake node. Enter docs in the Table field. Enter id, name in the Columns field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node inserts the data in the table that we created using the Snowflake node. 5. Set1 node # We will use the Set node to ensure that only the data that we set in this node gets passed on to the next nodes in the workflow. We will set the value of name in this node. Click on the Add Value button and select 'Number' from the dropdown list. Enter id in the Name field. Enter 1 in the Value field. Click on the Add Value button and select 'String' from the dropdown list. Enter name in the Name field. Enter nodemation in the Value field. Toggle Keep Only Set to true . We set this option to true to ensure that only the data that we have set in this node get passed on to the next nodes in the workflow. Click on Execute Node to run the node. In the screenshot below, you will notice that the node sets the value of name . This value is passed to the next node in the workflow. 6. Snowflake2 node (Update) # This node will update the value of the name column for the id 1 . Select the credentials that you entered in the previous Snowflake node. Select 'Update' from the Operation dropdown list. Click on the gears icon next to the Table field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Snowflake1 > Parameters > table. You can also add the following expression: {{$node[\"Snowflake1\"].parameter[\"table\"]}} . Enter name in the Columns field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node updates the value of the name field for the record with id 1 .","title":"Snowflake"},{"location":"integrations/nodes/n8n-nodes-base.snowflake/#snowflake","text":"Snowflake is a cloud data platform that provides a data warehouse-as-a-service designed for the cloud. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Snowflake"},{"location":"integrations/nodes/n8n-nodes-base.snowflake/#basic-operations","text":"Execute an SQL query. Insert rows in database. Update rows in database.","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.snowflake/#example-usage","text":"This workflow allows you to create a table, insert, and update data in a table in Snowflake. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Set - Snowflake The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.snowflake/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.snowflake/#2-snowflake-node-execute-query","text":"This node will create a table named docs with id and name columns. First of all, you'll have to enter credentials for the Snowflake node. You can find out how to do that here . Select 'Execute Query' from the Operation dropdown list. Enter the following SQL query in the Query field: CREATE TABLE docs (id INT, name STRING); . Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a table named docs in Snowflake.","title":"2. Snowflake node (Execute Query)"},{"location":"integrations/nodes/n8n-nodes-base.snowflake/#3-set-node","text":"We will use the Set node to set the values for the id and name columns for a new record. Click on the Add Value button and select 'Number' from the dropdown list. Enter id in the Name field. Enter an id in the Value field. Click on the Add Value button and select 'String' from the dropdown list. Enter name in the Name field. Enter the value for the name in the Value field. Toggle Keep Only Set to true . We set this option to true to ensure that only the data that we have set in this node get passed on to the next nodes in the workflow. Click on Execute Node to run the node. In the screenshot below, you will notice that the node sets the value for id and name .","title":"3. Set node"},{"location":"integrations/nodes/n8n-nodes-base.snowflake/#4-snowflake1-node-insert","text":"This node will insert the data that we set in the previous node into the docs table in Snowflake. Select the credentials that you entered in the previous Snowflake node. Enter docs in the Table field. Enter id, name in the Columns field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node inserts the data in the table that we created using the Snowflake node.","title":"4. Snowflake1 node (Insert)"},{"location":"integrations/nodes/n8n-nodes-base.snowflake/#5-set1-node","text":"We will use the Set node to ensure that only the data that we set in this node gets passed on to the next nodes in the workflow. We will set the value of name in this node. Click on the Add Value button and select 'Number' from the dropdown list. Enter id in the Name field. Enter 1 in the Value field. Click on the Add Value button and select 'String' from the dropdown list. Enter name in the Name field. Enter nodemation in the Value field. Toggle Keep Only Set to true . We set this option to true to ensure that only the data that we have set in this node get passed on to the next nodes in the workflow. Click on Execute Node to run the node. In the screenshot below, you will notice that the node sets the value of name . This value is passed to the next node in the workflow.","title":"5. Set1 node"},{"location":"integrations/nodes/n8n-nodes-base.snowflake/#6-snowflake2-node-update","text":"This node will update the value of the name column for the id 1 . Select the credentials that you entered in the previous Snowflake node. Select 'Update' from the Operation dropdown list. Click on the gears icon next to the Table field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Snowflake1 > Parameters > table. You can also add the following expression: {{$node[\"Snowflake1\"].parameter[\"table\"]}} . Enter name in the Columns field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node updates the value of the name field for the record with id 1 .","title":"6. Snowflake2 node (Update)"},{"location":"integrations/nodes/n8n-nodes-base.splunk/","text":"Splunk # Splunk produces software for searching, monitoring, and analyzing machine-generated data via a Web-style interface. It indexes and correlates information in a container that makes it searchable, and makes it possible to generate alerts, reports and visualizations. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Fired Alert Retrieve a fired alerts report Search Configuration Delete a search configuration Retrieve a search configuration Retrieve all search configurations Search Job Create a search job Delete a search job Retrieve a search job Retrieve all search jobs Search Result Retrieve all search results for a search job User Create an user Delete an user Retrieve an user Retrieve all users Update an user","title":"Splunk"},{"location":"integrations/nodes/n8n-nodes-base.splunk/#splunk","text":"Splunk produces software for searching, monitoring, and analyzing machine-generated data via a Web-style interface. It indexes and correlates information in a container that makes it searchable, and makes it possible to generate alerts, reports and visualizations. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Splunk"},{"location":"integrations/nodes/n8n-nodes-base.splunk/#basic-operations","text":"Fired Alert Retrieve a fired alerts report Search Configuration Delete a search configuration Retrieve a search configuration Retrieve all search configurations Search Job Create a search job Delete a search job Retrieve a search job Retrieve all search jobs Search Result Retrieve all search results for a search job User Create an user Delete an user Retrieve an user Retrieve all users Update an user","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.spontit/","text":"Spontit # Spontit enables you to send push notifications without your app or website. You can create different channels and send push notifications to specific followers. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Push Create a push notification Example Usage # This workflow allows you to send daily weather updates via a push notification using the Spontit node. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Cron - OpenWeatherMap - Spontit The final workflow should look like the following image. 1. Cron node # The Cron node will trigger the workflow daily at 9 AM. Click on Add Cron Time . Set hours to 9 in the Hour field. Click on Execute Node to run the node. In the screenshot below, you will notice that the Cron node is configured to trigger the workflow every day at 9 AM. 2. OpenWeatherMap node (Current Weather) # This node will return data about the current weather in Berlin. To get the weather updates for your city, you can enter the name of your city instead. First of all, you'll have to enter credentials for the OpenWeatherMap node. You can find out how to do that here . Enter berlin in the City field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns data about the current weather in Berlin. 3. Spontit node (create: push) # This node will send a push notification with the weather update. First of all, you'll have to enter credentials for the Spontit node. You can find out how to do that here . Click on Add Field and select 'Title' from the dropdown list. Enter Today's Weather Update in the Title field. Click on the gears icon next to the Content field and click on Add Expression . Enter the following message in the Expression field: Hey! The temperature outside is {{$node[\"OpenWeatherMap\"].json[\"main\"][\"temp\"]}}\u00b0C. . Click on Execute Node to run the node. In the screenshot below, you will notice that the node sends a push notification with the weather update. Activate workflow for production This example workflow uses the Cron node, which is a Trigger node. You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Cron node.","title":"Spontit"},{"location":"integrations/nodes/n8n-nodes-base.spontit/#spontit","text":"Spontit enables you to send push notifications without your app or website. You can create different channels and send push notifications to specific followers. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Spontit"},{"location":"integrations/nodes/n8n-nodes-base.spontit/#basic-operations","text":"Push Create a push notification","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.spontit/#example-usage","text":"This workflow allows you to send daily weather updates via a push notification using the Spontit node. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Cron - OpenWeatherMap - Spontit The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.spontit/#1-cron-node","text":"The Cron node will trigger the workflow daily at 9 AM. Click on Add Cron Time . Set hours to 9 in the Hour field. Click on Execute Node to run the node. In the screenshot below, you will notice that the Cron node is configured to trigger the workflow every day at 9 AM.","title":"1. Cron node"},{"location":"integrations/nodes/n8n-nodes-base.spontit/#2-openweathermap-node-current-weather","text":"This node will return data about the current weather in Berlin. To get the weather updates for your city, you can enter the name of your city instead. First of all, you'll have to enter credentials for the OpenWeatherMap node. You can find out how to do that here . Enter berlin in the City field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns data about the current weather in Berlin.","title":"2. OpenWeatherMap node (Current Weather)"},{"location":"integrations/nodes/n8n-nodes-base.spontit/#3-spontit-node-create-push","text":"This node will send a push notification with the weather update. First of all, you'll have to enter credentials for the Spontit node. You can find out how to do that here . Click on Add Field and select 'Title' from the dropdown list. Enter Today's Weather Update in the Title field. Click on the gears icon next to the Content field and click on Add Expression . Enter the following message in the Expression field: Hey! The temperature outside is {{$node[\"OpenWeatherMap\"].json[\"main\"][\"temp\"]}}\u00b0C. . Click on Execute Node to run the node. In the screenshot below, you will notice that the node sends a push notification with the weather update. Activate workflow for production This example workflow uses the Cron node, which is a Trigger node. You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Cron node.","title":"3. Spontit node (create: push)"},{"location":"integrations/nodes/n8n-nodes-base.spotify/","text":"Spotify # Spotify is a music streaming service containing millions of music tracks and podcasts. Spotify allows users to create and manage their own playlists, explore new music through recommendation services, and listen to songs on demand. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Album Get an album by URI or ID. Get a list of new album releases. Get an album's tracks by URI or ID. Search albums by keyword. Artist Get an artist by URI or ID. Get an artist's albums by URI or ID. Get an artist's related artists by URI or ID. Get an artist's top tracks by URI or ID. Search artists by keyword. Library Get the user's liked tracks. My Data Get your followed artists. Player Add a song to your queue. Get your currently playing track. Skip to your next track. Pause your music. Skip to your previous song. Get your recently played tracks. Resume playback on the current active device. Set volume on the current active device. Start playing a playlist, artist, or album. Playlist Add tracks from a playlist by track and playlist URI or ID. Create a new playlist. Get a playlist by URI or ID. Get a playlist's tracks by URI or ID. Get a user's playlists. Remove tracks from a playlist by track and playlist URI or ID. Search playlists by keyword. Track Get a track by its URI or ID. Get audio features for a track by URI or ID. Search tracks by keyword Example Usage # This workflow allows you to add a song to your queue in Spotify. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Spotify The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Spotify node # First of all, you'll have to enter credentials for the Spotify node. You can find out how to do that here . Enter the song's URI (or ID) to the Track ID field. The following GIF shows you how to find the Track ID on Spotify's UI. Click on Execute Node to run the workflow.","title":"Spotify"},{"location":"integrations/nodes/n8n-nodes-base.spotify/#spotify","text":"Spotify is a music streaming service containing millions of music tracks and podcasts. Spotify allows users to create and manage their own playlists, explore new music through recommendation services, and listen to songs on demand. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Spotify"},{"location":"integrations/nodes/n8n-nodes-base.spotify/#basic-operations","text":"Album Get an album by URI or ID. Get a list of new album releases. Get an album's tracks by URI or ID. Search albums by keyword. Artist Get an artist by URI or ID. Get an artist's albums by URI or ID. Get an artist's related artists by URI or ID. Get an artist's top tracks by URI or ID. Search artists by keyword. Library Get the user's liked tracks. My Data Get your followed artists. Player Add a song to your queue. Get your currently playing track. Skip to your next track. Pause your music. Skip to your previous song. Get your recently played tracks. Resume playback on the current active device. Set volume on the current active device. Start playing a playlist, artist, or album. Playlist Add tracks from a playlist by track and playlist URI or ID. Create a new playlist. Get a playlist by URI or ID. Get a playlist's tracks by URI or ID. Get a user's playlists. Remove tracks from a playlist by track and playlist URI or ID. Search playlists by keyword. Track Get a track by its URI or ID. Get audio features for a track by URI or ID. Search tracks by keyword","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.spotify/#example-usage","text":"This workflow allows you to add a song to your queue in Spotify. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Spotify The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.spotify/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.spotify/#2-spotify-node","text":"First of all, you'll have to enter credentials for the Spotify node. You can find out how to do that here . Enter the song's URI (or ID) to the Track ID field. The following GIF shows you how to find the Track ID on Spotify's UI. Click on Execute Node to run the workflow.","title":"2. Spotify node"},{"location":"integrations/nodes/n8n-nodes-base.stackby/","text":"Stackby # Stackby is a real-time database and team collaboration platform. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Append Delete List Read Example Usage # This workflow allows you to insert and retrieve data from a table in Stackby. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Set - Stackby The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Set node # We will use the Set node to set the values for the name and id fields for a new record. Click on the Add Value button and select 'Number' from the dropdown list. Enter ID in the Name field. Enter an id in the Value field. Click on the Add Value button and select 'String' from the dropdown list. Enter Name in the Name field. Enter a name in the Value field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node sets the value for ID and Name . 3. Stackby node (Append) # This node will append the data that we set in the previous node to a table. Create a table like this in your Stackby stack. Copy the string of characters located after /stack/ in your Stackby URL. This is your Stack ID. For example, if the URL is https://stackby.com/stack/stabdcat4234324/ , the Stack ID will be stabdcat4234324 . First of all, you'll have to enter credentials for the Stackby node. You can find out how to do that here . Paste the Stack ID in the Stack ID field. Enter the name of your table in the Table field. Enter ID, Name in the Columns field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node appends the data that we had set in the previous node. 4. Stackby1 node (List) # This node will list all the records from a table. Select the credentials that you entered in the previous node. Select 'List' from the Operation dropdown list. Click on the gears icon next to the Stack ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Stackby > Parameters > stackId. You can also add the following expression: {{$node[\"Stackby\"].parameter[\"stackId\"]}} . Click on the gears icon next to the Table field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Stackby > Parameters > table. You can also add the following expression: {{$node[\"Stackby\"].parameter[\"table\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns all the entries that are stored in the table.","title":"Stackby"},{"location":"integrations/nodes/n8n-nodes-base.stackby/#stackby","text":"Stackby is a real-time database and team collaboration platform. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Stackby"},{"location":"integrations/nodes/n8n-nodes-base.stackby/#basic-operations","text":"Append Delete List Read","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.stackby/#example-usage","text":"This workflow allows you to insert and retrieve data from a table in Stackby. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Set - Stackby The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.stackby/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.stackby/#2-set-node","text":"We will use the Set node to set the values for the name and id fields for a new record. Click on the Add Value button and select 'Number' from the dropdown list. Enter ID in the Name field. Enter an id in the Value field. Click on the Add Value button and select 'String' from the dropdown list. Enter Name in the Name field. Enter a name in the Value field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node sets the value for ID and Name .","title":"2. Set node"},{"location":"integrations/nodes/n8n-nodes-base.stackby/#3-stackby-node-append","text":"This node will append the data that we set in the previous node to a table. Create a table like this in your Stackby stack. Copy the string of characters located after /stack/ in your Stackby URL. This is your Stack ID. For example, if the URL is https://stackby.com/stack/stabdcat4234324/ , the Stack ID will be stabdcat4234324 . First of all, you'll have to enter credentials for the Stackby node. You can find out how to do that here . Paste the Stack ID in the Stack ID field. Enter the name of your table in the Table field. Enter ID, Name in the Columns field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node appends the data that we had set in the previous node.","title":"3. Stackby node (Append)"},{"location":"integrations/nodes/n8n-nodes-base.stackby/#4-stackby1-node-list","text":"This node will list all the records from a table. Select the credentials that you entered in the previous node. Select 'List' from the Operation dropdown list. Click on the gears icon next to the Stack ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Stackby > Parameters > stackId. You can also add the following expression: {{$node[\"Stackby\"].parameter[\"stackId\"]}} . Click on the gears icon next to the Table field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Stackby > Parameters > table. You can also add the following expression: {{$node[\"Stackby\"].parameter[\"table\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns all the entries that are stored in the table.","title":"4. Stackby1 node (List)"},{"location":"integrations/nodes/n8n-nodes-base.storyblok/","text":"Storyblok # Storyblok is a headless content management system with a visual editor. It provides developers with all the flexibility they need to build reliable and fast websites, while giving content creators with no coding skills the ability to edit content independently of the developer. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Content API # Story - Get a story - Get all stories Management API # Story - Delete a story - Get a story - Get all stories - Publish a story - Unpublish a story Example Usage # This workflow allows you to get all the stories that have the slug starting with release and publish them using the Storyblok node. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Storyblok The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Storyblok node (getAll: story) # This node will get all the stories that have a slug starting with release . Select 'Management API' from the Source dropdown list. You'll have to enter credentials for the Storyblok node. You can find out how to do that here . Select 'Get All' from the Operation dropdown list. Select a space from the Space ID dropdown list. Click on the Add Filter button. Enter release in the Starts With field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns all the stories that have a slug starting with release . 3. Storyblok1 node (publish: story) # This node will publish the stories that were returned by the previous node. Select 'Management API' from the Source dropdown list. Select the credentials that you entered in the previous node. Select 'Publish' from the Operation dropdown list. Click on the gears icon next to the Space ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Storyblok > Parameters > space. You can also add the following expression: {{$node[\"Storyblok\"].parameter[\"space\"]}} . Click on the gears icon next to the Story ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Storyblok > Output Data > JSON > id. You can also add the following expression: {{$node[\"Storyblok\"].json[\"id\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node publishes the stories that were returned by the previous node.","title":"Storyblok"},{"location":"integrations/nodes/n8n-nodes-base.storyblok/#storyblok","text":"Storyblok is a headless content management system with a visual editor. It provides developers with all the flexibility they need to build reliable and fast websites, while giving content creators with no coding skills the ability to edit content independently of the developer. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Storyblok"},{"location":"integrations/nodes/n8n-nodes-base.storyblok/#basic-operations","text":"","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.storyblok/#content-api","text":"Story - Get a story - Get all stories","title":"Content API"},{"location":"integrations/nodes/n8n-nodes-base.storyblok/#management-api","text":"Story - Delete a story - Get a story - Get all stories - Publish a story - Unpublish a story","title":"Management API"},{"location":"integrations/nodes/n8n-nodes-base.storyblok/#example-usage","text":"This workflow allows you to get all the stories that have the slug starting with release and publish them using the Storyblok node. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Storyblok The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.storyblok/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.storyblok/#2-storyblok-node-getall-story","text":"This node will get all the stories that have a slug starting with release . Select 'Management API' from the Source dropdown list. You'll have to enter credentials for the Storyblok node. You can find out how to do that here . Select 'Get All' from the Operation dropdown list. Select a space from the Space ID dropdown list. Click on the Add Filter button. Enter release in the Starts With field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns all the stories that have a slug starting with release .","title":"2. Storyblok node (getAll: story)"},{"location":"integrations/nodes/n8n-nodes-base.storyblok/#3-storyblok1-node-publish-story","text":"This node will publish the stories that were returned by the previous node. Select 'Management API' from the Source dropdown list. Select the credentials that you entered in the previous node. Select 'Publish' from the Operation dropdown list. Click on the gears icon next to the Space ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Storyblok > Parameters > space. You can also add the following expression: {{$node[\"Storyblok\"].parameter[\"space\"]}} . Click on the gears icon next to the Story ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Storyblok > Output Data > JSON > id. You can also add the following expression: {{$node[\"Storyblok\"].json[\"id\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node publishes the stories that were returned by the previous node.","title":"3. Storyblok1 node (publish: story)"},{"location":"integrations/nodes/n8n-nodes-base.strapi/","text":"Strapi # Strapi is an open-source Headless CMS that gives developers the freedom to choose their tools and frameworks while also allowing editors to easily manage and distribute their content. \ud83d\udd11 Credentials You can find authentication information for this node here . Strapi Version 4 The Strapi node node was built for Strapi version 3. Some of its operations will not work with Strapi version 4. Basic Operations # Entry Create an entry Delete an entry Get an entry Get all entries Update an entry Example Usage # This workflow allows you to create, update, and get an entry in Strapi. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Set - Strapi The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Set node # We will use the Set node to set the title, content, and description for an entry of the content type Post . If you have a different content type in Strapi, set the values accordingly. Click on Add Value and select 'String' from the dropdown list. Enter Title in the Name field. Enter Automate Strapi with n8n in the Value field. Click on Add Value and select 'String' from the dropdown list. Enter Content in the Name field. Enter Strapi is a headless CMS. We will use Strapi and n8n to automate our content creation workflows. in the Value field. Click on Add Value and select 'String' from the dropdown list. Enter Description in the Name field. Enter Learn how to automate Strapi with n8n. in the Value field. Click on Execute Node to run the node. In the screenshot below, you will notice that node sets the value for title, content, and description. 2. Strapi node (create: entry) # This node will create an entry for the content type posts . If you have a different content type, use that content type instead. First of all, you'll have to enter credentials for the Strapi node. You can find out how to do that here . Select 'Create' from the Operation dropdown list. Enter posts in the Content Type field. Enter Title, Content, Description in the Columns field. If you want to add data for other columns, enter those column names. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new entry in Strapi using the information from the previous node. 3. Set1 node # We will use the Set node to ensure that only the data that we set in this node gets passed on to the next nodes in the workflow. We will set the value of id and slug in this node. Click on Add Value and select 'String' from the dropdown list. Enter id in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Strapi > Output Data > JSON > id. You can also add the following expression: {{$node[\"Strapi\"].json[\"id\"]}} . Click on Add Value and select 'String' from the dropdown list. Enter slug in the Name field. Enter automate-strapi-with-n8n in the Value field. Toggle Keep Only Set to true . We set this option to true to ensure that only the data that we have set in this node get passed on to the next nodes in the workflow. Click on Execute Node to run the node. In the screenshot below, you will notice that the node sets the values of id and slug . These values are passed to the next node in the workflow. 4. Strapi1 node (update: entry) # This node will update the slug for the entry that we created using the Strapi node. Select the credentials that you entered in the previous node. Select 'Update' from the Operation dropdown list. Click on the gears icon next to the Content Type field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Strapi > Parameters > contentType. You can also add the following expression: {{$node[\"Strapi\"].parameter[\"contentType\"]}} . Enter id in the Update Key field. Enter slug in the Columns field. If you want to update a different column, enter that column name instead. Click on Execute Node to run the node. In the screenshot below, you will notice that the node adds a slug to the entry that we created using the Strapi node. 5. Strapi2 node (get: entry) # This node returns information about the entry that we created using the Strapi node. Select the credentials that you entered in the previous node. Click on the gears icon next to the Content Type field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Strapi > Parameters > contentType. You can also add the following expression: {{$node[\"Strapi\"].parameter[\"contentType\"]}} . Click on the gears icon next to the Entry ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Strapi > Output Data > JSON > id. You can also add the following expression: {{$node[\"Strapi1\"].json[\"id\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns information about the entry that we specified.","title":"Strapi"},{"location":"integrations/nodes/n8n-nodes-base.strapi/#strapi","text":"Strapi is an open-source Headless CMS that gives developers the freedom to choose their tools and frameworks while also allowing editors to easily manage and distribute their content. \ud83d\udd11 Credentials You can find authentication information for this node here . Strapi Version 4 The Strapi node node was built for Strapi version 3. Some of its operations will not work with Strapi version 4.","title":"Strapi"},{"location":"integrations/nodes/n8n-nodes-base.strapi/#basic-operations","text":"Entry Create an entry Delete an entry Get an entry Get all entries Update an entry","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.strapi/#example-usage","text":"This workflow allows you to create, update, and get an entry in Strapi. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Set - Strapi The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.strapi/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.strapi/#2-set-node","text":"We will use the Set node to set the title, content, and description for an entry of the content type Post . If you have a different content type in Strapi, set the values accordingly. Click on Add Value and select 'String' from the dropdown list. Enter Title in the Name field. Enter Automate Strapi with n8n in the Value field. Click on Add Value and select 'String' from the dropdown list. Enter Content in the Name field. Enter Strapi is a headless CMS. We will use Strapi and n8n to automate our content creation workflows. in the Value field. Click on Add Value and select 'String' from the dropdown list. Enter Description in the Name field. Enter Learn how to automate Strapi with n8n. in the Value field. Click on Execute Node to run the node. In the screenshot below, you will notice that node sets the value for title, content, and description.","title":"2. Set node"},{"location":"integrations/nodes/n8n-nodes-base.strapi/#2-strapi-node-create-entry","text":"This node will create an entry for the content type posts . If you have a different content type, use that content type instead. First of all, you'll have to enter credentials for the Strapi node. You can find out how to do that here . Select 'Create' from the Operation dropdown list. Enter posts in the Content Type field. Enter Title, Content, Description in the Columns field. If you want to add data for other columns, enter those column names. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new entry in Strapi using the information from the previous node.","title":"2. Strapi node (create: entry)"},{"location":"integrations/nodes/n8n-nodes-base.strapi/#3-set1-node","text":"We will use the Set node to ensure that only the data that we set in this node gets passed on to the next nodes in the workflow. We will set the value of id and slug in this node. Click on Add Value and select 'String' from the dropdown list. Enter id in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Strapi > Output Data > JSON > id. You can also add the following expression: {{$node[\"Strapi\"].json[\"id\"]}} . Click on Add Value and select 'String' from the dropdown list. Enter slug in the Name field. Enter automate-strapi-with-n8n in the Value field. Toggle Keep Only Set to true . We set this option to true to ensure that only the data that we have set in this node get passed on to the next nodes in the workflow. Click on Execute Node to run the node. In the screenshot below, you will notice that the node sets the values of id and slug . These values are passed to the next node in the workflow.","title":"3. Set1 node"},{"location":"integrations/nodes/n8n-nodes-base.strapi/#4-strapi1-node-update-entry","text":"This node will update the slug for the entry that we created using the Strapi node. Select the credentials that you entered in the previous node. Select 'Update' from the Operation dropdown list. Click on the gears icon next to the Content Type field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Strapi > Parameters > contentType. You can also add the following expression: {{$node[\"Strapi\"].parameter[\"contentType\"]}} . Enter id in the Update Key field. Enter slug in the Columns field. If you want to update a different column, enter that column name instead. Click on Execute Node to run the node. In the screenshot below, you will notice that the node adds a slug to the entry that we created using the Strapi node.","title":"4. Strapi1 node (update: entry)"},{"location":"integrations/nodes/n8n-nodes-base.strapi/#5-strapi2-node-get-entry","text":"This node returns information about the entry that we created using the Strapi node. Select the credentials that you entered in the previous node. Click on the gears icon next to the Content Type field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Strapi > Parameters > contentType. You can also add the following expression: {{$node[\"Strapi\"].parameter[\"contentType\"]}} . Click on the gears icon next to the Entry ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Strapi > Output Data > JSON > id. You can also add the following expression: {{$node[\"Strapi1\"].json[\"id\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns information about the entry that we specified.","title":"5. Strapi2 node (get: entry)"},{"location":"integrations/nodes/n8n-nodes-base.strava/","text":"Strava # Strava is an internet service for tracking human exercise which incorporates social network features. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Activity Create a new activity Get an activity Get all activities Get all activity comments Get all activity kudos Get all activity laps Get all activity zones Update an activity Example Usage # This workflow allows you to create, update, and get an activity in Strava. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Strava The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Strava node (create: activity) # This node will create an activity with the name Morning Run in Strava. To create an activity with a different name, you can enter the name of your activity instead. First of all, you'll have to enter credentials for the Strava node. You can find out how to do that here . Enter Morning Run in the Name field. Enter Run in the Type field. Select the date and time in the Start Date field. Set Elapsed Time (Seconds) to 3600 . Click on the Add Field button and select 'Distance' from the dropdown list. Set Distance to 1000 . Strava measures distance in meters. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates an activity with the name Morning Run and type Run . 3. Strava1 node (update: activity) # This node will update the activity that we created in the previous node. Select the credentials that you entered in the previous node. Select 'Update' from the Operation dropdown list. Click on the gears icon next to the Activity ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Strava > Output Data > JSON > id. You can also add the following expression: {{$node[\"Strava\"].json[\"id\"]}} . Click on the Add Field button and select 'Description' from the dropdown list. Enter the description of the activity in the Description field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node adds a description to the activity that we created using the Strava node. 4. Strava2 node (get: activity) # This node returns the information of the activity that we created using the Strava node. Select the credentials that you entered in the previous node. Select 'Get' from the Operation dropdown list. Click on the gears icon next to the Activity ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Strava > Output Data > JSON > id. You can also add the following expression: {{$node[\"Strava\"].json[\"id\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the information of the activity that we specified in this node.","title":"Strava"},{"location":"integrations/nodes/n8n-nodes-base.strava/#strava","text":"Strava is an internet service for tracking human exercise which incorporates social network features. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Strava"},{"location":"integrations/nodes/n8n-nodes-base.strava/#basic-operations","text":"Activity Create a new activity Get an activity Get all activities Get all activity comments Get all activity kudos Get all activity laps Get all activity zones Update an activity","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.strava/#example-usage","text":"This workflow allows you to create, update, and get an activity in Strava. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Strava The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.strava/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.strava/#2-strava-node-create-activity","text":"This node will create an activity with the name Morning Run in Strava. To create an activity with a different name, you can enter the name of your activity instead. First of all, you'll have to enter credentials for the Strava node. You can find out how to do that here . Enter Morning Run in the Name field. Enter Run in the Type field. Select the date and time in the Start Date field. Set Elapsed Time (Seconds) to 3600 . Click on the Add Field button and select 'Distance' from the dropdown list. Set Distance to 1000 . Strava measures distance in meters. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates an activity with the name Morning Run and type Run .","title":"2. Strava node (create: activity)"},{"location":"integrations/nodes/n8n-nodes-base.strava/#3-strava1-node-update-activity","text":"This node will update the activity that we created in the previous node. Select the credentials that you entered in the previous node. Select 'Update' from the Operation dropdown list. Click on the gears icon next to the Activity ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Strava > Output Data > JSON > id. You can also add the following expression: {{$node[\"Strava\"].json[\"id\"]}} . Click on the Add Field button and select 'Description' from the dropdown list. Enter the description of the activity in the Description field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node adds a description to the activity that we created using the Strava node.","title":"3. Strava1 node (update: activity)"},{"location":"integrations/nodes/n8n-nodes-base.strava/#4-strava2-node-get-activity","text":"This node returns the information of the activity that we created using the Strava node. Select the credentials that you entered in the previous node. Select 'Get' from the Operation dropdown list. Click on the gears icon next to the Activity ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Strava > Output Data > JSON > id. You can also add the following expression: {{$node[\"Strava\"].json[\"id\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the information of the activity that we specified in this node.","title":"4. Strava2 node (get: activity)"},{"location":"integrations/nodes/n8n-nodes-base.stripe/","text":"Stripe # Stripe offers payment processing software and application programming interfaces for e-commerce websites and mobile applications. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic operations # Balance Get a balance Charge Create a charge Get a charge Get all charges Update a charge Coupon Create a coupon Get all coupons Customer Create a customer Delete a customer Get a customer Get all customers Update a customer Customer Card Add a customer card Get a customer card Remove a customer card Source Create a source Delete a source Get a source Token Create a token Example # This workflow allows you to create a new customer, create a card token, and associate this token as that customer's card. This example usage workflow would use the following nodes. - Start - Stripe The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Stripe node # First enter your Stripe API credentials. You can learn how to create that here . Fill in the remaining parameters as follows: Resource : Select the entity you want to work with, Customer in this example. Operation : Select the action to perform, Create in this example. Name : Enter the customer name. Additional Fields : Provide any further details, available options are: Address, Description, Email, Metadata, and Shipping. Type : The type of token to create, Card Token by default. 3. Stripe1 node # First enter your Stripe API credentials as with the first node. Fill in the remaining parameters as follows: Resource : Select the entity you want to work with, Token in this example. Operation : Select the action to perform, Create in this example. Type : The type of token to create, Card Token by default. Card Number : Enter the customer credit card number. CVC : Enter the security code for this card. Expiration Month : Enter the expiration month for this card. Expiration Year : Enter the expiration year for this card. 4. Stripe2 node # First enter your Stripe API credentials as with the previous node. Fill in the remaining parameters as follows: Resource : Select the entity you want to work with, Customer Card in this example. Operation : Select the action to perform, Add in this example. Customer ID : Enter the customer ID generated by the first node. Card Token : Enter the token generated by the second node. Type : The type of token to create, Card Token by default.","title":"Stripe"},{"location":"integrations/nodes/n8n-nodes-base.stripe/#stripe","text":"Stripe offers payment processing software and application programming interfaces for e-commerce websites and mobile applications. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Stripe"},{"location":"integrations/nodes/n8n-nodes-base.stripe/#basic-operations","text":"Balance Get a balance Charge Create a charge Get a charge Get all charges Update a charge Coupon Create a coupon Get all coupons Customer Create a customer Delete a customer Get a customer Get all customers Update a customer Customer Card Add a customer card Get a customer card Remove a customer card Source Create a source Delete a source Get a source Token Create a token","title":"Basic operations"},{"location":"integrations/nodes/n8n-nodes-base.stripe/#example","text":"This workflow allows you to create a new customer, create a card token, and associate this token as that customer's card. This example usage workflow would use the following nodes. - Start - Stripe The final workflow should look like the following image.","title":"Example"},{"location":"integrations/nodes/n8n-nodes-base.stripe/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.stripe/#2-stripe-node","text":"First enter your Stripe API credentials. You can learn how to create that here . Fill in the remaining parameters as follows: Resource : Select the entity you want to work with, Customer in this example. Operation : Select the action to perform, Create in this example. Name : Enter the customer name. Additional Fields : Provide any further details, available options are: Address, Description, Email, Metadata, and Shipping. Type : The type of token to create, Card Token by default.","title":"2. Stripe node"},{"location":"integrations/nodes/n8n-nodes-base.stripe/#3-stripe1-node","text":"First enter your Stripe API credentials as with the first node. Fill in the remaining parameters as follows: Resource : Select the entity you want to work with, Token in this example. Operation : Select the action to perform, Create in this example. Type : The type of token to create, Card Token by default. Card Number : Enter the customer credit card number. CVC : Enter the security code for this card. Expiration Month : Enter the expiration month for this card. Expiration Year : Enter the expiration year for this card.","title":"3. Stripe1 node"},{"location":"integrations/nodes/n8n-nodes-base.stripe/#4-stripe2-node","text":"First enter your Stripe API credentials as with the previous node. Fill in the remaining parameters as follows: Resource : Select the entity you want to work with, Customer Card in this example. Operation : Select the action to perform, Add in this example. Customer ID : Enter the customer ID generated by the first node. Card Token : Enter the token generated by the second node. Type : The type of token to create, Card Token by default.","title":"4. Stripe2 node"},{"location":"integrations/nodes/n8n-nodes-base.supabase/","text":"Supabase # Supabase is an open source Firebase alternative. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Row Create a new row Delete a row Get a row Get all rows Update a row","title":"Supabase"},{"location":"integrations/nodes/n8n-nodes-base.supabase/#supabase","text":"Supabase is an open source Firebase alternative. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Supabase"},{"location":"integrations/nodes/n8n-nodes-base.supabase/#basic-operations","text":"Row Create a new row Delete a row Get a row Get all rows Update a row","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.syncroMsp/","text":"SyncroMSP # SyncroMSP is a cloud-based remote monitoring and management platform (RMM). \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Contact Create new contact Delete contact Retrieve contact Retrieve all contacts Update contact Customer Create new customer Delete customer Retrieve customer Retrieve all customers Update customer RMM Create new RMM Alert Delete RMM Alert Retrieve RMM Alert Retrieve all RMM Alerts Mute RMM Alert Ticket Create new ticket Delete ticket Retrieve ticket Retrieve all tickets Update ticket","title":"SyncroMSP"},{"location":"integrations/nodes/n8n-nodes-base.syncroMsp/#syncromsp","text":"SyncroMSP is a cloud-based remote monitoring and management platform (RMM). \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"SyncroMSP"},{"location":"integrations/nodes/n8n-nodes-base.syncroMsp/#basic-operations","text":"Contact Create new contact Delete contact Retrieve contact Retrieve all contacts Update contact Customer Create new customer Delete customer Retrieve customer Retrieve all customers Update customer RMM Create new RMM Alert Delete RMM Alert Retrieve RMM Alert Retrieve all RMM Alerts Mute RMM Alert Ticket Create new ticket Delete ticket Retrieve ticket Retrieve all tickets Update ticket","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.taiga/","text":"Taiga # Taiga is a free and open-source project management platform for startups, agile developers, and designers. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Issue - Create an issue - Delete an issue - Get an issue - Get all issues - Update an issue Example Usage # This workflow allows you to create, update, and get an issue on Taiga. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Taiga The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Taiga node (create: issue) # First of all, you'll have to enter credentials for the Taiga node. You can find out how to do that here . Select the project ID from the Project ID dropdown list. Enter the subject of the issue in the Subject field. Click on Execute Node to run the node. 3. Taiga1 node (update: issue) # Select the credentials that you entered in the previous node. Select 'Update' from the Operation dropdown list. Click on the gears icon next to the Project ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Taiga > Output Data > JSON > project. You can also add the following expression: {{$node[\"Taiga\"].json[\"project\"]}} . Click on the gears icon next to the Issue ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Taiga > Output Data > JSON > id. You can also add the following expression: {{$node[\"Taiga\"].json[\"id\"]}} . Click on the Add Field button and select 'Description' from the dropdown list. Enter the description of the issue in the Description field. Click on Execute Node to run the node. 4. Taiga2 node (get: issue) # Select the credentials that you entered in the previous node. Select 'Get' from the Operation dropdown list. Click on the gears icon next to the Issue ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Taiga > Output Data > JSON > id. You can also add the following expression: {{$node[\"Taiga\"].json[\"id\"]}} . Click on Execute Node to run the node.","title":"Taiga"},{"location":"integrations/nodes/n8n-nodes-base.taiga/#taiga","text":"Taiga is a free and open-source project management platform for startups, agile developers, and designers. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Taiga"},{"location":"integrations/nodes/n8n-nodes-base.taiga/#basic-operations","text":"Issue - Create an issue - Delete an issue - Get an issue - Get all issues - Update an issue","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.taiga/#example-usage","text":"This workflow allows you to create, update, and get an issue on Taiga. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Taiga The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.taiga/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.taiga/#2-taiga-node-create-issue","text":"First of all, you'll have to enter credentials for the Taiga node. You can find out how to do that here . Select the project ID from the Project ID dropdown list. Enter the subject of the issue in the Subject field. Click on Execute Node to run the node.","title":"2. Taiga node (create: issue)"},{"location":"integrations/nodes/n8n-nodes-base.taiga/#3-taiga1-node-update-issue","text":"Select the credentials that you entered in the previous node. Select 'Update' from the Operation dropdown list. Click on the gears icon next to the Project ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Taiga > Output Data > JSON > project. You can also add the following expression: {{$node[\"Taiga\"].json[\"project\"]}} . Click on the gears icon next to the Issue ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Taiga > Output Data > JSON > id. You can also add the following expression: {{$node[\"Taiga\"].json[\"id\"]}} . Click on the Add Field button and select 'Description' from the dropdown list. Enter the description of the issue in the Description field. Click on Execute Node to run the node.","title":"3. Taiga1 node (update: issue)"},{"location":"integrations/nodes/n8n-nodes-base.taiga/#4-taiga2-node-get-issue","text":"Select the credentials that you entered in the previous node. Select 'Get' from the Operation dropdown list. Click on the gears icon next to the Issue ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Taiga > Output Data > JSON > id. You can also add the following expression: {{$node[\"Taiga\"].json[\"id\"]}} . Click on Execute Node to run the node.","title":"4. Taiga2 node (get: issue)"},{"location":"integrations/nodes/n8n-nodes-base.tapfiliate/","text":"Tapfiliate # Tapfiliate allows you to create, track, and grow your affiliate marketing programs. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Affiliate Create an affiliate Delete an affiliate Get an affiliate by ID Get all affiliates Affiliate Metadata Add metadata to affiliate Remove metadata from affiliate Update affiliate's metadata Program Affiliate Add affiliate to program Approve an affiliate for a program Disapprove an affiliate Get an affiliate in a program Get all affiliates in program Example Usage # This workflow allows you to create an affiliate, add metadata, and add the affiliate to a program. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - Tapfiliate The final workflow should look like the following image. 1. Start node # The Start node exists by default when you create a new workflow. 2. Tapfiliate node (create:affiliate) # This node will create an affiliate in Tapfiliate. First of all, you'll have to enter credentials for the Tapfiliate node. You can find out how to do that here . Enter an email address in the Email field. Enter the first name of the affiliate in the First Name field. Enter the last name of the affiliate in the Last Name field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates an affiliate in Tapfiliate. 3. Tapfiliate1 node (add:affiliateMetadata) # This node will add metadata to the affiliate that we created with the previous node. Select the credentials that you entered in the previous node. Select 'Affiliate Metadata' from the Resource dropdown list. Select 'Add' from the Operation dropdown list. Click on the gears icon next to the Affiliate ID field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > id. You can also add the following expression: {{$json[\"id\"]}} . Click on the Add Metadata button. Enter tag in the Key field. Enter n8n in the Value field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node adds the metadata to the affiliate that we created with the previous node. 4. Tapfiliate2 node (get:contact) # This node will add the affiliate that we created with the Tapfiliate node to an affiliate program. Select the credentials that you entered in the previous node. Select 'Program Affiliate' from the Resource dropdown list. Select 'Add' from the Operation dropdown list. Select a program from the Program ID dropdown list. Click on the gears icon next to the Affiliate ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Tapfiliate > Output Data > JSON > id. You can also add the following expression: {{$node[\"Tapfiliate\"].json[\"id\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node adds the affiliate to a program.","title":"Tapfiliate"},{"location":"integrations/nodes/n8n-nodes-base.tapfiliate/#tapfiliate","text":"Tapfiliate allows you to create, track, and grow your affiliate marketing programs. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Tapfiliate"},{"location":"integrations/nodes/n8n-nodes-base.tapfiliate/#basic-operations","text":"Affiliate Create an affiliate Delete an affiliate Get an affiliate by ID Get all affiliates Affiliate Metadata Add metadata to affiliate Remove metadata from affiliate Update affiliate's metadata Program Affiliate Add affiliate to program Approve an affiliate for a program Disapprove an affiliate Get an affiliate in a program Get all affiliates in program","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.tapfiliate/#example-usage","text":"This workflow allows you to create an affiliate, add metadata, and add the affiliate to a program. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - Tapfiliate The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.tapfiliate/#1-start-node","text":"The Start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.tapfiliate/#2-tapfiliate-node-createaffiliate","text":"This node will create an affiliate in Tapfiliate. First of all, you'll have to enter credentials for the Tapfiliate node. You can find out how to do that here . Enter an email address in the Email field. Enter the first name of the affiliate in the First Name field. Enter the last name of the affiliate in the Last Name field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates an affiliate in Tapfiliate.","title":"2. Tapfiliate node (create:affiliate)"},{"location":"integrations/nodes/n8n-nodes-base.tapfiliate/#3-tapfiliate1-node-addaffiliatemetadata","text":"This node will add metadata to the affiliate that we created with the previous node. Select the credentials that you entered in the previous node. Select 'Affiliate Metadata' from the Resource dropdown list. Select 'Add' from the Operation dropdown list. Click on the gears icon next to the Affiliate ID field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > id. You can also add the following expression: {{$json[\"id\"]}} . Click on the Add Metadata button. Enter tag in the Key field. Enter n8n in the Value field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node adds the metadata to the affiliate that we created with the previous node.","title":"3. Tapfiliate1 node (add:affiliateMetadata)"},{"location":"integrations/nodes/n8n-nodes-base.tapfiliate/#4-tapfiliate2-node-getcontact","text":"This node will add the affiliate that we created with the Tapfiliate node to an affiliate program. Select the credentials that you entered in the previous node. Select 'Program Affiliate' from the Resource dropdown list. Select 'Add' from the Operation dropdown list. Select a program from the Program ID dropdown list. Click on the gears icon next to the Affiliate ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Tapfiliate > Output Data > JSON > id. You can also add the following expression: {{$node[\"Tapfiliate\"].json[\"id\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node adds the affiliate to a program.","title":"4. Tapfiliate2 node (get:contact)"},{"location":"integrations/nodes/n8n-nodes-base.telegram/","text":"Telegram # Telegram is a cloud-based instant messaging and voice-over-IP service. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Chat Get up to date information about a chat. Leave a group, supergroup or channel. Get the member of a chat. Set the description of a chat. Set the title of a chat. Callback Send answer to callback query sent from inline keyboard. Send answer to callback query sent from inline bot. File Get a file. Message Delete a chat message Edit a text message Pin a chat message Send an animated file Send a audio file Send a chat action Send a document Send a location Send group of photos or videos to album Send a text message Send a photo Send a sticker Send a video Unpin a chat message Example Usage # This workflow allows you to send a cocktail recipe to a specified chat ID every day via a Telegram bot. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Cron - HTTP Request - Telegram The final workflow should look like the following image. 1. Cron node # The Cron node will trigger the workflow daily at 8 PM. Click on Add Cron Time . Set hours to 20 in the Hour field. Click on Execute Node to run the node. In the screenshot below, you will notice that the Cron node is configured to trigger the workflow every day at 8 PM. 2. HTTP Request node (GET) # This node will make a GET request to the API https://www.thecocktaildb.com/api/json/v1/1/random.php to fetch a random cocktail. This information gets passed on to the next node in the workflow. Enter https://www.thecocktaildb.com/api/json/v1/1/random.php in the URL field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node makes a GET request to the API and returns information about a random cocktail. 3. Telegram node (sendPhoto: message) # This node will send a message on Telegram with an image and the recipe of the cocktail that we got from the previous node. First of all, you'll have to enter credentials for the Telegram node. You can find out how to do that here . Select 'Send Photo' from the Operation dropdown list. Enter the target chat ID in the Chat ID field. Refer to the FAQs to learn how to get the chat ID. Click on the gears icon next to the Photo field and click on Add Expression . Select the following in the Variable Selector section: Nodes > HTTP Request > Output Data > JSON > drinks > [item: 0] > strDrinkThumb. You can also add the following expression: {{$node[\"HTTP Request\"].json[\"drinks\"][0][\"strDrinkThumb\"]}} . Click on Add Field and select 'Caption' from the dropdown list. Click on the gears icon next to the Caption field and click on Add Expression . Select the following in the Variable Selector section: Nodes > HTTP Request > Output Data > JSON > drinks > [item: 0] > strInstructions. You can also add the following expression: {{$node[\"HTTP Request\"].json[\"drinks\"][0][\"strInstructions\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node sends a message on Telegram with an image and the recipe of the cocktail. Activate workflow for production This example workflow uses the Cron node, which is a Trigger node. You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Cron node. FAQs # How can I send more than 30 messages per second? # The Telegram API has a limitation of sending only 30 messages per second. Follow the steps mentioned below to send more than 30 messages: 1. Split In Batches node: Use the Split in Batches node to get at most 30 chat IDs from your database. 2. Telegram node: Connect the Telegram node with the Split In Batches node. Use the Expression Editor to select the Chat IDs from the Split in Batches node. 3. Function node: Connect the Function node with the Telegram node. Use the Function node to wait for a few seconds before fetching the next batch of chat IDs. Connect this node with the Split In Batches node. You can also use this workflow . How do I add a bot to a Telegram channel? # In the Telegram app, access the target channel and tap on the channel name. Make sure that the channel name is labeled as \"public channel\". Tap on Administrators and then on Add Admin . Search for the username of the bot and select it. Tap on the checkmark on the top-right corner to add the bot to the channel. How do I get the Chat ID? # There are two ways to get the Chat ID in Telegram. Using the Telegram Trigger node: On successful execution, the Telegram Trigger node returns a Chat ID. You can use the Telegram Trigger node in your workflow to get a Chat ID. Using the @RawDataBot : The @RawDataBot returns the raw data of the chat with a Chat ID. Invite the @RawDataBot to your channel/group, and upon joining, it will output a Chat ID along with other information. Be sure to remove the @RawDataBot from your group/channel afterwards.","title":"Telegram"},{"location":"integrations/nodes/n8n-nodes-base.telegram/#telegram","text":"Telegram is a cloud-based instant messaging and voice-over-IP service. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Telegram"},{"location":"integrations/nodes/n8n-nodes-base.telegram/#basic-operations","text":"Chat Get up to date information about a chat. Leave a group, supergroup or channel. Get the member of a chat. Set the description of a chat. Set the title of a chat. Callback Send answer to callback query sent from inline keyboard. Send answer to callback query sent from inline bot. File Get a file. Message Delete a chat message Edit a text message Pin a chat message Send an animated file Send a audio file Send a chat action Send a document Send a location Send group of photos or videos to album Send a text message Send a photo Send a sticker Send a video Unpin a chat message","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.telegram/#example-usage","text":"This workflow allows you to send a cocktail recipe to a specified chat ID every day via a Telegram bot. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Cron - HTTP Request - Telegram The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.telegram/#1-cron-node","text":"The Cron node will trigger the workflow daily at 8 PM. Click on Add Cron Time . Set hours to 20 in the Hour field. Click on Execute Node to run the node. In the screenshot below, you will notice that the Cron node is configured to trigger the workflow every day at 8 PM.","title":"1. Cron node"},{"location":"integrations/nodes/n8n-nodes-base.telegram/#2-http-request-node-get","text":"This node will make a GET request to the API https://www.thecocktaildb.com/api/json/v1/1/random.php to fetch a random cocktail. This information gets passed on to the next node in the workflow. Enter https://www.thecocktaildb.com/api/json/v1/1/random.php in the URL field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node makes a GET request to the API and returns information about a random cocktail.","title":"2. HTTP Request node (GET)"},{"location":"integrations/nodes/n8n-nodes-base.telegram/#3-telegram-node-sendphoto-message","text":"This node will send a message on Telegram with an image and the recipe of the cocktail that we got from the previous node. First of all, you'll have to enter credentials for the Telegram node. You can find out how to do that here . Select 'Send Photo' from the Operation dropdown list. Enter the target chat ID in the Chat ID field. Refer to the FAQs to learn how to get the chat ID. Click on the gears icon next to the Photo field and click on Add Expression . Select the following in the Variable Selector section: Nodes > HTTP Request > Output Data > JSON > drinks > [item: 0] > strDrinkThumb. You can also add the following expression: {{$node[\"HTTP Request\"].json[\"drinks\"][0][\"strDrinkThumb\"]}} . Click on Add Field and select 'Caption' from the dropdown list. Click on the gears icon next to the Caption field and click on Add Expression . Select the following in the Variable Selector section: Nodes > HTTP Request > Output Data > JSON > drinks > [item: 0] > strInstructions. You can also add the following expression: {{$node[\"HTTP Request\"].json[\"drinks\"][0][\"strInstructions\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node sends a message on Telegram with an image and the recipe of the cocktail. Activate workflow for production This example workflow uses the Cron node, which is a Trigger node. You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Cron node.","title":"3. Telegram node (sendPhoto: message)"},{"location":"integrations/nodes/n8n-nodes-base.telegram/#faqs","text":"","title":"FAQs"},{"location":"integrations/nodes/n8n-nodes-base.telegram/#how-can-i-send-more-than-30-messages-per-second","text":"The Telegram API has a limitation of sending only 30 messages per second. Follow the steps mentioned below to send more than 30 messages: 1. Split In Batches node: Use the Split in Batches node to get at most 30 chat IDs from your database. 2. Telegram node: Connect the Telegram node with the Split In Batches node. Use the Expression Editor to select the Chat IDs from the Split in Batches node. 3. Function node: Connect the Function node with the Telegram node. Use the Function node to wait for a few seconds before fetching the next batch of chat IDs. Connect this node with the Split In Batches node. You can also use this workflow .","title":"How can I send more than 30 messages per second?"},{"location":"integrations/nodes/n8n-nodes-base.telegram/#how-do-i-add-a-bot-to-a-telegram-channel","text":"In the Telegram app, access the target channel and tap on the channel name. Make sure that the channel name is labeled as \"public channel\". Tap on Administrators and then on Add Admin . Search for the username of the bot and select it. Tap on the checkmark on the top-right corner to add the bot to the channel.","title":"How do I add a bot to a Telegram channel?"},{"location":"integrations/nodes/n8n-nodes-base.telegram/#how-do-i-get-the-chat-id","text":"There are two ways to get the Chat ID in Telegram. Using the Telegram Trigger node: On successful execution, the Telegram Trigger node returns a Chat ID. You can use the Telegram Trigger node in your workflow to get a Chat ID. Using the @RawDataBot : The @RawDataBot returns the raw data of the chat with a Chat ID. Invite the @RawDataBot to your channel/group, and upon joining, it will output a Chat ID along with other information. Be sure to remove the @RawDataBot from your group/channel afterwards.","title":"How do I get the Chat ID?"},{"location":"integrations/nodes/n8n-nodes-base.theHive/","text":"TheHive # TheHive is a scalable open-source and free security incident response platform. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Alert - Count alerts - Create an alert - Execute a responder on a specified alert - Get an alert - Get all alerts - Mark an alert as read - Mark an alert as unread - Merge an alert into an existing case - Promote an alert into a case - Update an alert Case - Count cases - Create a case - Execute a responder on a specified case - Get all cases - Get a single case - Update a case Log - Create a task log - Execute a responder on a selected log - Get all task logs - Get a single log Observable - Count observables - Create an observable - Execute an analyzer - Execute a responder on selected observable - Get all observables of a specific case - Get a single observable - Search observables - Update an observable Task - Count tasks - Create a task - Execute a responder on a specified task - Get a single task - Search tasks - Update a task Example Usage # This workflow allows you to create, update, and get a case in TheHive. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - TheHive The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. TheHive node (create: case) # This node will create a new case in TheHive with the title n8n and set its severity to low . You can create a case with a different title and severity. First of all, you'll have to enter credentials for the TheHive node. You can find out how to do that here . Select 'Case' from the Resource dropdown list. Select 'Create' from the Operation dropdown list. Enter a title in the Title field. Enter a description in the Description field. Select 'Low' from the Severity dropdown list. Set the start date in the Start Date field. Enter a case owner in the Owner field. Enter tags in the Tags field. You can enter multiple tags separate by a comma. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new case with the title n8n and low severity . 3. TheHive node (update: case) # This node will update the case that we created in the previous node. We will update the severity of the case. Select the credentials that you entered in the previous node. Select 'Case' from the Resource dropdown list. Select 'Update' from the Operation dropdown list. Click on the gears icon next to the Case ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > TheHive > Output Data > JSON > id. You can also add the following expression: {{$node[\"TheHive\"].json[\"id\"]}} . Click on Add Field and select 'Severity' from the dropdown list. Select 'High' from the Severity dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node updates the severity of the case that we created in the previous node. 4. TheHive node (get: case) # This node will return the information of the case that we created in the previous node. Select the credentials that you entered in the previous node. Select 'Case' from the Resource dropdown list. Select 'Get' from the Operation dropdown list. Click on the gears icon next to the Case ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > TheHive > Output Data > JSON > id. You can also add the following expression: {{$node[\"TheHive\"].json[\"id\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the information of the case that we created earlier.","title":"TheHive"},{"location":"integrations/nodes/n8n-nodes-base.theHive/#thehive","text":"TheHive is a scalable open-source and free security incident response platform. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"TheHive"},{"location":"integrations/nodes/n8n-nodes-base.theHive/#basic-operations","text":"Alert - Count alerts - Create an alert - Execute a responder on a specified alert - Get an alert - Get all alerts - Mark an alert as read - Mark an alert as unread - Merge an alert into an existing case - Promote an alert into a case - Update an alert Case - Count cases - Create a case - Execute a responder on a specified case - Get all cases - Get a single case - Update a case Log - Create a task log - Execute a responder on a selected log - Get all task logs - Get a single log Observable - Count observables - Create an observable - Execute an analyzer - Execute a responder on selected observable - Get all observables of a specific case - Get a single observable - Search observables - Update an observable Task - Count tasks - Create a task - Execute a responder on a specified task - Get a single task - Search tasks - Update a task","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.theHive/#example-usage","text":"This workflow allows you to create, update, and get a case in TheHive. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - TheHive The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.theHive/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.theHive/#2-thehive-node-create-case","text":"This node will create a new case in TheHive with the title n8n and set its severity to low . You can create a case with a different title and severity. First of all, you'll have to enter credentials for the TheHive node. You can find out how to do that here . Select 'Case' from the Resource dropdown list. Select 'Create' from the Operation dropdown list. Enter a title in the Title field. Enter a description in the Description field. Select 'Low' from the Severity dropdown list. Set the start date in the Start Date field. Enter a case owner in the Owner field. Enter tags in the Tags field. You can enter multiple tags separate by a comma. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new case with the title n8n and low severity .","title":"2. TheHive node (create: case)"},{"location":"integrations/nodes/n8n-nodes-base.theHive/#3-thehive-node-update-case","text":"This node will update the case that we created in the previous node. We will update the severity of the case. Select the credentials that you entered in the previous node. Select 'Case' from the Resource dropdown list. Select 'Update' from the Operation dropdown list. Click on the gears icon next to the Case ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > TheHive > Output Data > JSON > id. You can also add the following expression: {{$node[\"TheHive\"].json[\"id\"]}} . Click on Add Field and select 'Severity' from the dropdown list. Select 'High' from the Severity dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node updates the severity of the case that we created in the previous node.","title":"3. TheHive node (update: case)"},{"location":"integrations/nodes/n8n-nodes-base.theHive/#4-thehive-node-get-case","text":"This node will return the information of the case that we created in the previous node. Select the credentials that you entered in the previous node. Select 'Case' from the Resource dropdown list. Select 'Get' from the Operation dropdown list. Click on the gears icon next to the Case ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > TheHive > Output Data > JSON > id. You can also add the following expression: {{$node[\"TheHive\"].json[\"id\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the information of the case that we created earlier.","title":"4. TheHive node (get: case)"},{"location":"integrations/nodes/n8n-nodes-base.timescaleDb/","text":"TimescaleDB # TimescaleDB is an open-source time-series SQL database optimized for fast ingest and complex queries. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Execute an SQL query Insert rows in database Update rows in database Example Usage # This workflow allows you to receive updates of the position of the ISS every minute and insert it to a table using the TimscaleDB node. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Cron - HTTP Request - Set - TimescaleDB The final workflow should look like the following image. 1. Cron node # The Cron node will trigger the workflow every minute. Click on Add Cron Time . Select 'Every Minute' from the Mode dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the Cron node is configured to trigger the workflow every minute. 2. HTTP Request node (GET) # This node will make a GET request to the API https://api.wheretheiss.at/v1/satellites/25544/positions to fetch the position of the ISS. This information gets passed on to the next node in the workflow. Enter https://api.wheretheiss.at/v1/satellites/25544/positions in the URL field. Click on the Add Parameter button in the Query Parameters section. Enter timestamps in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Enter the following expression: {{Date.now()}} . This expression will return the current timestamp. Click on Execute Node to run the node. In the screenshot below, you will notice that the node makes a GET request to the API and returns the information about the location of the ISS. 3. Set node # We will use the Set node to ensure that only the data that we set in this node gets passed on to the next nodes in the workflow. Click on Add Value and select 'String' from the dropdown list. Enter latitude in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > 0 > latitude. You can also add the following expression: {{$json[\"0\"][\"latitude\"]}} . Click on Add Value and select 'String' from the dropdown list. Enter longitude in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > 0 > longitude. You can also add the following expression: {{$json[\"0\"][\"longitude\"]}} . Click on Add Value and select 'String' from the dropdown list. Enter timestamp in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > 0 > timpestamp. You can also add the following expression: {{$json[\"0\"][\"timestamp\"]}} . Toggle Keep Only Set to true . We set this option to true to ensure that only the data that we have set in this node get passed on to the next nodes in the workflow. Click on Execute Node to run the node. In the screenshot below, you will notice that the node uses the data from the previous node and returns the data that we set for the workflow. 4. TimescaleDB node (Insert) # We will insert the data from the previous node to a table named iss . To create the table, use the following SQL command. 1 CREATE TABLE iss(latitude NUMERIC, longitude NUMERIC, timestamp NUMERIC); First of all, you'll have to enter credentials for the TimescaleDB node. You can find out how to do that here . Enter iss in the Table field. Enter latitude, longitude, timestamp in the Columns field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node inserts the data from the previous node to the iss table in TimescaleDB. Activate workflow for production This example workflow uses the Cron node, which is a Trigger node. You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Cron node. FAQs # How to specify the data type of a column? # To specify the data type of a column, append the column name with :type , where type is the data type of that column. For example, if you want to specify the type int for the column id and type text for the column name , you can use the following snippet in the Columns field: id:init,name:text .","title":"TimescaleDB"},{"location":"integrations/nodes/n8n-nodes-base.timescaleDb/#timescaledb","text":"TimescaleDB is an open-source time-series SQL database optimized for fast ingest and complex queries. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"TimescaleDB"},{"location":"integrations/nodes/n8n-nodes-base.timescaleDb/#basic-operations","text":"Execute an SQL query Insert rows in database Update rows in database","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.timescaleDb/#example-usage","text":"This workflow allows you to receive updates of the position of the ISS every minute and insert it to a table using the TimscaleDB node. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Cron - HTTP Request - Set - TimescaleDB The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.timescaleDb/#1-cron-node","text":"The Cron node will trigger the workflow every minute. Click on Add Cron Time . Select 'Every Minute' from the Mode dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the Cron node is configured to trigger the workflow every minute.","title":"1. Cron node"},{"location":"integrations/nodes/n8n-nodes-base.timescaleDb/#2-http-request-node-get","text":"This node will make a GET request to the API https://api.wheretheiss.at/v1/satellites/25544/positions to fetch the position of the ISS. This information gets passed on to the next node in the workflow. Enter https://api.wheretheiss.at/v1/satellites/25544/positions in the URL field. Click on the Add Parameter button in the Query Parameters section. Enter timestamps in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Enter the following expression: {{Date.now()}} . This expression will return the current timestamp. Click on Execute Node to run the node. In the screenshot below, you will notice that the node makes a GET request to the API and returns the information about the location of the ISS.","title":"2. HTTP Request node (GET)"},{"location":"integrations/nodes/n8n-nodes-base.timescaleDb/#3-set-node","text":"We will use the Set node to ensure that only the data that we set in this node gets passed on to the next nodes in the workflow. Click on Add Value and select 'String' from the dropdown list. Enter latitude in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > 0 > latitude. You can also add the following expression: {{$json[\"0\"][\"latitude\"]}} . Click on Add Value and select 'String' from the dropdown list. Enter longitude in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > 0 > longitude. You can also add the following expression: {{$json[\"0\"][\"longitude\"]}} . Click on Add Value and select 'String' from the dropdown list. Enter timestamp in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > 0 > timpestamp. You can also add the following expression: {{$json[\"0\"][\"timestamp\"]}} . Toggle Keep Only Set to true . We set this option to true to ensure that only the data that we have set in this node get passed on to the next nodes in the workflow. Click on Execute Node to run the node. In the screenshot below, you will notice that the node uses the data from the previous node and returns the data that we set for the workflow.","title":"3. Set node"},{"location":"integrations/nodes/n8n-nodes-base.timescaleDb/#4-timescaledb-node-insert","text":"We will insert the data from the previous node to a table named iss . To create the table, use the following SQL command. 1 CREATE TABLE iss(latitude NUMERIC, longitude NUMERIC, timestamp NUMERIC); First of all, you'll have to enter credentials for the TimescaleDB node. You can find out how to do that here . Enter iss in the Table field. Enter latitude, longitude, timestamp in the Columns field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node inserts the data from the previous node to the iss table in TimescaleDB. Activate workflow for production This example workflow uses the Cron node, which is a Trigger node. You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Cron node.","title":"4. TimescaleDB node (Insert)"},{"location":"integrations/nodes/n8n-nodes-base.timescaleDb/#faqs","text":"","title":"FAQs"},{"location":"integrations/nodes/n8n-nodes-base.timescaleDb/#how-to-specify-the-data-type-of-a-column","text":"To specify the data type of a column, append the column name with :type , where type is the data type of that column. For example, if you want to specify the type int for the column id and type text for the column name , you can use the following snippet in the Columns field: id:init,name:text .","title":"How to specify the data type of a column?"},{"location":"integrations/nodes/n8n-nodes-base.todoist/","text":"Todoist # Todoist is a task management software that can be used for small teams, individuals and professionals to manage anything from a shopping list to major projects at work. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Task Create a new task Close a task Delete a task Get a task Get all tasks Reopen a task Update a task Example Usage # This workflow allows you to create a new task in Todoist. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Todoist The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Todoist node # First of all, you'll have to enter credentials for the Todoist node. You can find out how to do that here . Select your project from the Project dropdown list. Enter the content for the task in the Content field. Click on Execute Node to run the workflow.","title":"Todoist"},{"location":"integrations/nodes/n8n-nodes-base.todoist/#todoist","text":"Todoist is a task management software that can be used for small teams, individuals and professionals to manage anything from a shopping list to major projects at work. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Todoist"},{"location":"integrations/nodes/n8n-nodes-base.todoist/#basic-operations","text":"Task Create a new task Close a task Delete a task Get a task Get all tasks Reopen a task Update a task","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.todoist/#example-usage","text":"This workflow allows you to create a new task in Todoist. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Todoist The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.todoist/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.todoist/#2-todoist-node","text":"First of all, you'll have to enter credentials for the Todoist node. You can find out how to do that here . Select your project from the Project dropdown list. Enter the content for the task in the Content field. Click on Execute Node to run the workflow.","title":"2. Todoist node"},{"location":"integrations/nodes/n8n-nodes-base.travisCi/","text":"Travis CI # Travis CI is a hosted continuous integration service used to build and test software projects hosted at GitHub and Bitbucket. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Build Cancel a build Get a build Get all builds Restart a build Trigger a build Example Usage # This workflow allows you to trigger a build using the Travis CI node. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Travis CI The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Travis CI node (trigger: build) # First of all, you'll have to enter credentials for the Travis CI node. You can find out how to do that here . Select 'Trigger' from the Operation dropdown list. Enter the repository name in the Slug field in the ownerName/repositoryName format. Enter the branch name in the Branch field. Click on Execute Node to run the node.","title":"Travis CI"},{"location":"integrations/nodes/n8n-nodes-base.travisCi/#travis-ci","text":"Travis CI is a hosted continuous integration service used to build and test software projects hosted at GitHub and Bitbucket. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Travis CI"},{"location":"integrations/nodes/n8n-nodes-base.travisCi/#basic-operations","text":"Build Cancel a build Get a build Get all builds Restart a build Trigger a build","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.travisCi/#example-usage","text":"This workflow allows you to trigger a build using the Travis CI node. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Travis CI The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.travisCi/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.travisCi/#2-travis-ci-node-trigger-build","text":"First of all, you'll have to enter credentials for the Travis CI node. You can find out how to do that here . Select 'Trigger' from the Operation dropdown list. Enter the repository name in the Slug field in the ownerName/repositoryName format. Enter the branch name in the Branch field. Click on Execute Node to run the node.","title":"2. Travis CI node (trigger: build)"},{"location":"integrations/nodes/n8n-nodes-base.trello/","text":"Trello # Trello is a web-based Kanban-style list-making application which is a subsidiary of Atlassian. Users can create their task boards with different columns and move the tasks between them. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Attachment Create a new attachment for a card Delete an attachment Get the data of an attachment Returns all attachments for the card Board Create a new board Delete a board Get the data of a board Update a board Card Create a new card Delete a card Get the data of a card Update a card Card Comment Create a comment on a card Delete a comment from a card Update a comment on a card Checklist Create a checklist item Create a new checklist Delete a checklist Delete a checklist item Get the data of a checklist Returns all checklists for the card Get a specific checklist on a card Get the completed checklist items on a card Update an item in a checklist on a card Label Add a label to a card. Create a new label Delete a label Get the data of a label Returns all labels for the board Remove a label from a card. Update a label. List Archive/Unarchive a list Create a new list Get the data of a list Get all the lists Get all the cards in a list Update a list Example Usage # This workflow allows you to create a new card in Trello. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Trello The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Trello node # First of all, you'll have to enter credentials for the Trello node. You can find out how to do that here . Enter the ID of the list in which you want to create a new card in the List ID field. You can find instructions on how to obtain the ID of the list in the FAQs below. Enter the name of the card in the Name field. Enter the description of the card in the Description field. Click on Execute Node to run the workflow. FAQs # How do I find the List ID? # Open the Trello board that contains the list. If the list doesn't have any cards, add a card to the list. Open the card, add '.json' at the end of the URL, and press enter. In the JSON file, you will see a field called idList . Copy idList and paste it in the List ID field in n8n.","title":"Trello"},{"location":"integrations/nodes/n8n-nodes-base.trello/#trello","text":"Trello is a web-based Kanban-style list-making application which is a subsidiary of Atlassian. Users can create their task boards with different columns and move the tasks between them. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Trello"},{"location":"integrations/nodes/n8n-nodes-base.trello/#basic-operations","text":"Attachment Create a new attachment for a card Delete an attachment Get the data of an attachment Returns all attachments for the card Board Create a new board Delete a board Get the data of a board Update a board Card Create a new card Delete a card Get the data of a card Update a card Card Comment Create a comment on a card Delete a comment from a card Update a comment on a card Checklist Create a checklist item Create a new checklist Delete a checklist Delete a checklist item Get the data of a checklist Returns all checklists for the card Get a specific checklist on a card Get the completed checklist items on a card Update an item in a checklist on a card Label Add a label to a card. Create a new label Delete a label Get the data of a label Returns all labels for the board Remove a label from a card. Update a label. List Archive/Unarchive a list Create a new list Get the data of a list Get all the lists Get all the cards in a list Update a list","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.trello/#example-usage","text":"This workflow allows you to create a new card in Trello. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Trello The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.trello/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.trello/#2-trello-node","text":"First of all, you'll have to enter credentials for the Trello node. You can find out how to do that here . Enter the ID of the list in which you want to create a new card in the List ID field. You can find instructions on how to obtain the ID of the list in the FAQs below. Enter the name of the card in the Name field. Enter the description of the card in the Description field. Click on Execute Node to run the workflow.","title":"2. Trello node"},{"location":"integrations/nodes/n8n-nodes-base.trello/#faqs","text":"","title":"FAQs"},{"location":"integrations/nodes/n8n-nodes-base.trello/#how-do-i-find-the-list-id","text":"Open the Trello board that contains the list. If the list doesn't have any cards, add a card to the list. Open the card, add '.json' at the end of the URL, and press enter. In the JSON file, you will see a field called idList . Copy idList and paste it in the List ID field in n8n.","title":"How do I find the List ID?"},{"location":"integrations/nodes/n8n-nodes-base.twake/","text":"Twake # Twake is an open-source collaborative workspace. It can be self-hosted and easily integrated into your teams. Twake offers features for collaboration like team chat, team calendar, video call, todo list, and storage space. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Message Send a message Example Usage # This workflow allows you to send a message to a channel on Twake. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Twake The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Twake node # First of all, you'll have to enter credentials for the Twake node. You can find out how to do that here . Select the channel from the Channel ID dropdown list. Enter the content of the message in the Content field. Click on Execute Node to run the node.","title":"Twake"},{"location":"integrations/nodes/n8n-nodes-base.twake/#twake","text":"Twake is an open-source collaborative workspace. It can be self-hosted and easily integrated into your teams. Twake offers features for collaboration like team chat, team calendar, video call, todo list, and storage space. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Twake"},{"location":"integrations/nodes/n8n-nodes-base.twake/#basic-operations","text":"Message Send a message","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.twake/#example-usage","text":"This workflow allows you to send a message to a channel on Twake. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Twake The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.twake/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.twake/#2-twake-node","text":"First of all, you'll have to enter credentials for the Twake node. You can find out how to do that here . Select the channel from the Channel ID dropdown list. Enter the content of the message in the Content field. Click on Execute Node to run the node.","title":"2. Twake node"},{"location":"integrations/nodes/n8n-nodes-base.twilio/","text":"Twilio # Twilio is a cloud communications platform as a service company. Twilio allows software developers to programmatically make and receive phone calls, send and receive text messages, and perform other communication functions using its web service APIs. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # SMS Send SMS/MMS/WhatsApp message Example Usage # This workflow allows you to send an SMS or a Whatsapp message to a specified phone number from your Twilio number. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Twilio The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Twilio node # First of all, you'll have to enter credentials for the Twilio node. You can find out how to do that here . Enter the phone number from which you'll be sending the message in the From field. Enter the phone number to which you'll be sending the message in the To field. In case you want to send a Whatsapp message, toggle the To Whatsapp button. Enter you message in the Message field. Click on Execute Node to run the workflow.","title":"Twilio"},{"location":"integrations/nodes/n8n-nodes-base.twilio/#twilio","text":"Twilio is a cloud communications platform as a service company. Twilio allows software developers to programmatically make and receive phone calls, send and receive text messages, and perform other communication functions using its web service APIs. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Twilio"},{"location":"integrations/nodes/n8n-nodes-base.twilio/#basic-operations","text":"SMS Send SMS/MMS/WhatsApp message","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.twilio/#example-usage","text":"This workflow allows you to send an SMS or a Whatsapp message to a specified phone number from your Twilio number. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Twilio The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.twilio/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.twilio/#2-twilio-node","text":"First of all, you'll have to enter credentials for the Twilio node. You can find out how to do that here . Enter the phone number from which you'll be sending the message in the From field. Enter the phone number to which you'll be sending the message in the To field. In case you want to send a Whatsapp message, toggle the To Whatsapp button. Enter you message in the Message field. Click on Execute Node to run the workflow.","title":"2. Twilio node"},{"location":"integrations/nodes/n8n-nodes-base.twist/","text":"Twist # Twist is a communication app that helps teams balance focused work with collaborative conversations. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Channel Archive a channel Initiates a public or private channel-based conversation Delete a channel Get information about a channel Get all channels Unarchive a channel Update a channel Comment Create a new comment to a thread Delete a comment Get information about a comment Get all comments Update a comment Message Conversation Create a message in a conversation Delete a message in a conversation Get a message in a conversation Get all messages in a conversation Update a message in a conversation Thread Create a new thread in a channel Delete a thread Get information about a thread Get all threads Update a thread Example Usage # This workflow allows you to create and update a channel as well as send a message on Twist. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Twist The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Twist node (create: channel) # This node will create a channel n8n-docs and add a user to the channel. 1. First of all, you'll have to enter credentials for the Twist node. You can find out how to do that here . Select 'Channel' from the Resource dropdown list. Select a workspace from the Workspace ID dropdown list. Enter n8n-docs in the Name field. If you want to create a channel with a different name, enter that name instead. Click on Add Field and select 'User IDs' from the dropdown list. Select the users from the User IDs dropdown list. The users you select will be added to the channel. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new channel named n8n-docs , and adds a user to the channel. 3. Twist1 node (update: channel) # This node will update the description of the channel that we created in the previous node. Select the credentials that you entered in the previous node. Select 'Channel' from the Resource dropdown list. Select 'Update' from the Operation dropdown list. Click on the gears icon next to the Channel ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Twist > Output Data > JSON > id. You can also add the following expression: {{$node[\"Twist\"].json[\"id\"]}} . Click on Add Field and select 'Description' from the dropdown list. Enter a description in the Description field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node adds a description to the channel that we created in the previous node. 4. Twist2 node (create: messageConversation) # This node will send a message to the General conversation on Twist. The message contains an action button that navigates to https://docs.n8n.io . Select the credentials that you entered in the previous node. Select a workspace from the Workspace ID dropdown list. Select 'General' from the Conversation ID dropdown list. If you want to send a message to a different conversation, select that conversation instead. Click on the gears icon next to the Channel ID field and click on Add Expression . Enter the following text in the Content field: 1 2 3 Hey [Harshil](twist-mention://475370)! You have been added to the {{$node[\"Twist\"].json[\"name\"]}} channel. Click on the button below to quickly navigate to the documentation website. The above message mentions the user Harshil . To mention a user in your workspace you need to use their User ID. Refer to the FAQs to learn how to get a User ID. Click on Add options and select 'Actions' from the dropdown list. Click on the Add Action button. Select 'Open URL' from the Action dropdown list. Enter Documentation site in the Button Text field. Select 'Action' from the Type dropdown list. Enter https://docs.n8n.io in the URL field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node sends a message to the General conversation and mentions the user. FAQs # Where can I get the User ID? # To get the User ID for a user follow the steps mentioned below 1. Click on the Team tab. 2. Click on a user's avatar. 3. Copy the string of characters located after /u/ in your Twist URL. This string is the User ID. For example, if the URL is https://twist.com/a/4qw45/people/u/475370 the User ID will be 475370 .","title":"Twist"},{"location":"integrations/nodes/n8n-nodes-base.twist/#twist","text":"Twist is a communication app that helps teams balance focused work with collaborative conversations. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Twist"},{"location":"integrations/nodes/n8n-nodes-base.twist/#basic-operations","text":"Channel Archive a channel Initiates a public or private channel-based conversation Delete a channel Get information about a channel Get all channels Unarchive a channel Update a channel Comment Create a new comment to a thread Delete a comment Get information about a comment Get all comments Update a comment Message Conversation Create a message in a conversation Delete a message in a conversation Get a message in a conversation Get all messages in a conversation Update a message in a conversation Thread Create a new thread in a channel Delete a thread Get information about a thread Get all threads Update a thread","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.twist/#example-usage","text":"This workflow allows you to create and update a channel as well as send a message on Twist. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Twist The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.twist/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.twist/#2-twist-node-create-channel","text":"This node will create a channel n8n-docs and add a user to the channel. 1. First of all, you'll have to enter credentials for the Twist node. You can find out how to do that here . Select 'Channel' from the Resource dropdown list. Select a workspace from the Workspace ID dropdown list. Enter n8n-docs in the Name field. If you want to create a channel with a different name, enter that name instead. Click on Add Field and select 'User IDs' from the dropdown list. Select the users from the User IDs dropdown list. The users you select will be added to the channel. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new channel named n8n-docs , and adds a user to the channel.","title":"2. Twist node (create: channel)"},{"location":"integrations/nodes/n8n-nodes-base.twist/#3-twist1-node-update-channel","text":"This node will update the description of the channel that we created in the previous node. Select the credentials that you entered in the previous node. Select 'Channel' from the Resource dropdown list. Select 'Update' from the Operation dropdown list. Click on the gears icon next to the Channel ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Twist > Output Data > JSON > id. You can also add the following expression: {{$node[\"Twist\"].json[\"id\"]}} . Click on Add Field and select 'Description' from the dropdown list. Enter a description in the Description field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node adds a description to the channel that we created in the previous node.","title":"3. Twist1 node (update: channel)"},{"location":"integrations/nodes/n8n-nodes-base.twist/#4-twist2-node-create-messageconversation","text":"This node will send a message to the General conversation on Twist. The message contains an action button that navigates to https://docs.n8n.io . Select the credentials that you entered in the previous node. Select a workspace from the Workspace ID dropdown list. Select 'General' from the Conversation ID dropdown list. If you want to send a message to a different conversation, select that conversation instead. Click on the gears icon next to the Channel ID field and click on Add Expression . Enter the following text in the Content field: 1 2 3 Hey [Harshil](twist-mention://475370)! You have been added to the {{$node[\"Twist\"].json[\"name\"]}} channel. Click on the button below to quickly navigate to the documentation website. The above message mentions the user Harshil . To mention a user in your workspace you need to use their User ID. Refer to the FAQs to learn how to get a User ID. Click on Add options and select 'Actions' from the dropdown list. Click on the Add Action button. Select 'Open URL' from the Action dropdown list. Enter Documentation site in the Button Text field. Select 'Action' from the Type dropdown list. Enter https://docs.n8n.io in the URL field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node sends a message to the General conversation and mentions the user.","title":"4. Twist2 node (create: messageConversation)"},{"location":"integrations/nodes/n8n-nodes-base.twist/#faqs","text":"","title":"FAQs"},{"location":"integrations/nodes/n8n-nodes-base.twist/#where-can-i-get-the-user-id","text":"To get the User ID for a user follow the steps mentioned below 1. Click on the Team tab. 2. Click on a user's avatar. 3. Copy the string of characters located after /u/ in your Twist URL. This string is the User ID. For example, if the URL is https://twist.com/a/4qw45/people/u/475370 the User ID will be 475370 .","title":"Where can I get the User ID?"},{"location":"integrations/nodes/n8n-nodes-base.twitter/","text":"Twitter # Twitter is a microblogging and social networking service on which users post and interact with messages known as \"tweets\". \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Direct Message Create a direct message Tweet Create or reply a tweet Delete a tweet Search tweets Like a tweet Retweet a tweet Example Usage # This workflow allows you to tweet on Twitter. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Twitter The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Twitter node # First of all, you'll have to enter credentials for the Twitter node. You can find out how to do that here . Type the message you want to tweet in the Text field. Click on Execute Node to run the workflow.","title":"Twitter"},{"location":"integrations/nodes/n8n-nodes-base.twitter/#twitter","text":"Twitter is a microblogging and social networking service on which users post and interact with messages known as \"tweets\". \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Twitter"},{"location":"integrations/nodes/n8n-nodes-base.twitter/#basic-operations","text":"Direct Message Create a direct message Tweet Create or reply a tweet Delete a tweet Search tweets Like a tweet Retweet a tweet","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.twitter/#example-usage","text":"This workflow allows you to tweet on Twitter. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Twitter The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.twitter/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.twitter/#2-twitter-node","text":"First of all, you'll have to enter credentials for the Twitter node. You can find out how to do that here . Type the message you want to tweet in the Text field. Click on Execute Node to run the workflow.","title":"2. Twitter node"},{"location":"integrations/nodes/n8n-nodes-base.unleashedSoftware/","text":"Unleashed Software # Unleashed Software is a cloud app that gives product businesses the freedom to better make, manage and move products by enabling them to achieve complete clarity and control over suppliers, production, warehouses, and sales. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Sales Order Get all sales orders Stock On Hand Get a stock on hand Get all stocks on hand Example Usage # This workflow allows you to get a list of all the orders from Unleashed Software based on the order status. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Unleashed Software The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Unleashed Software node # First of all, you'll have to enter credentials for the Unleashed Software node. You can find out how to do that here . Toggle Return All to true. Click on the Add Filter button and select 'Order Status' from the dropdown list. Select 'Completed' from the Order Status dropdown list. Click on Execute Node to run the node.","title":"Unleashed Software"},{"location":"integrations/nodes/n8n-nodes-base.unleashedSoftware/#unleashed-software","text":"Unleashed Software is a cloud app that gives product businesses the freedom to better make, manage and move products by enabling them to achieve complete clarity and control over suppliers, production, warehouses, and sales. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Unleashed Software"},{"location":"integrations/nodes/n8n-nodes-base.unleashedSoftware/#basic-operations","text":"Sales Order Get all sales orders Stock On Hand Get a stock on hand Get all stocks on hand","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.unleashedSoftware/#example-usage","text":"This workflow allows you to get a list of all the orders from Unleashed Software based on the order status. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Unleashed Software The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.unleashedSoftware/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.unleashedSoftware/#2-unleashed-software-node","text":"First of all, you'll have to enter credentials for the Unleashed Software node. You can find out how to do that here . Toggle Return All to true. Click on the Add Filter button and select 'Order Status' from the dropdown list. Select 'Completed' from the Order Status dropdown list. Click on Execute Node to run the node.","title":"2. Unleashed Software node"},{"location":"integrations/nodes/n8n-nodes-base.uplead/","text":"UpLead # UpLead helps increase sales by quickly finding, connecting, and engaging with qualified prospects. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Company Enrich Person Enrich Example Usage # This workflow allows you to get information about a company with UpLead. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - UpLead The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. UpLead node # First of all, you'll have to enter credentials for the UpLead node. You can find out how to do that here . Enter the name of the company in the Company field. For example, I entered Apple . Click on Execute Node to run the workflow.","title":"UpLead"},{"location":"integrations/nodes/n8n-nodes-base.uplead/#uplead","text":"UpLead helps increase sales by quickly finding, connecting, and engaging with qualified prospects. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"UpLead"},{"location":"integrations/nodes/n8n-nodes-base.uplead/#basic-operations","text":"Company Enrich Person Enrich","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.uplead/#example-usage","text":"This workflow allows you to get information about a company with UpLead. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - UpLead The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.uplead/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.uplead/#2-uplead-node","text":"First of all, you'll have to enter credentials for the UpLead node. You can find out how to do that here . Enter the name of the company in the Company field. For example, I entered Apple . Click on Execute Node to run the workflow.","title":"2. UpLead node"},{"location":"integrations/nodes/n8n-nodes-base.uproc/","text":"uProc # uProc is a data platform that allows to clean, verify, and enrich any data field. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Audio - Get advanced human audio file by provided text and language - Get an audio file by provided text and language Communication - Discover if a domain has a social network presence - Discover if an email is valid, hard bounce, soft bounce, spam-trap, free, temporary, and recipient exists - Discover if the email recipient exists, returning email status - Check if an email domain has an SMTP server to receive emails - Discover if the email has a social network presence - Check if an email has a valid format - Check if an email domain belongs to a disposable email service - Check if email belongs to free service provider like Gmail, Hotmail - Discover if an email exists in the Robinson list (only Spain) - Check if email belongs to a system or role-based account - Check if an email is a spam trap - Discover if an IMEI number has a valid format - Check if a LinkedIn profile is a first-degree contact - Discover if mobile phone number exists in network operator, with worldwide coverage - Discover if a mobile phone number has a valid format with worldwide coverage - Discover if a mobile phone number has a valid format (only Spain) - Discover if a mobile phone number has a valid prefix, with worldwide coverage - Discover if a Spanish mobile phone number has a valid prefix - Discover if a mobile number is switched on to call it later, with worldwide coverage - Discover if a mobile number can receive SMS with worldwide coverage - Discover if a phone (landline or mobile) exists in a Robinson list (only Spain) - Discover if a landline or mobile number has a valid prefix - Discover if a landline phone number is valid, with Spain coverage - Allows discovering if landline number has a good international format, depending on the country - Discover if a landline phone number prefix exists, with worldwide coverage - Clean a phone removing non allowed characters - Allows getting country code of a mobile phone number with international format - Allows getting a domain from an email - Discover an email by company website or domain and prospect's first-name and last-name - Check if an email is personal or generic - Get emails list found on the internet by domain or URI - Get an emails list found on the internet by non-free email - Get emails list found inside the website by domain or URI - Get three first web references of an email published on the internet - Allows you to fix the email domain of those misspelled emails - Fix the international prefix of a phone based on the ISO code of a country - Get GDPR compliant emails list by domain for your Email Marketing campaigns in Europe - Discover if mobile exist via real-time HLR query - Get portability data about a landline or mobile number, only for Spain - Extract results from a LinkedIn search (employees in a company) - Get members in a LinkedIn group - Extract the last 80 connections from your LinkedIn profile - Extract the last 80 invitations sent from your LinkedIn - Get users who comment on a post on LinkedIn - Get users who like a post on LinkedIn - Extract a LinkedIn profile - Extract results from a LinkedIn search (profiles) - Extract fastly last profiles that have published content on LinkedIn by specific keywords - Discover if mobile exist via real-time HLR query, as well as portability and roaming data - Get existence, portability, and roaming of a mobile phone via MNP query - Discover if mobile or landline prefix exists in Spain - Allows normalizing email address, removing non allowed characters - Allows normalizing a mobile phone, removing non-allowed characters - Parse phone number in multiple fields and verify format and prefix validity - Allows getting country prefix number by country code - Discover an email by company website or domain and prospect's first-name and last-name - This tool parses a social URI address and extracts any available indicators - Search all social networks by domain, parses all found URLs, and returns social networks KPIs - Discover if a domain or a website has social activity and returns all social network profiles found - Discover if an email has social activity, and get all social network profiles found - Discover if a mobile phone has social activity, and get all social network profiles found - Get web references for an email published on the internet - Send a custom message invitation to a non connected LinkedIn profile - Send a custom email to a recipient - Send a custom SMS to a recipient with worldwide coverage - Send a custom invitation message if a profile is connected or a custom message otherwise - Visits a profile to show interest and get profile views in return from contact, increasing your LinkedIn network - Send a custom private message to a connected LinkedIn profile - Get an email by contact's LinkedIn profile URI - Discover an email by company's name and prospect's full name - Discover an email by company's website or domain and prospect's full name Company - Discover if a CIF card number is valid - Check if a company is a debtor by TaxID - Check if the ISIN number is valid - Check if the SS number is valid, only for Spain - Identify and classify a prospecting role in detecting the right area and seniority to filter later - Get a company's contact, social, and technology data by domain - Get a company's contact, social, and technology data by email - Get a company's data by CIF - Get a company's data by DUNS - Get a company's data by domain - Get a company's data by email - Get a company's data by IP address - Get a company's data by name - Get a company's data by phone number - Get a company's data by social networks URI (LinkedIn, Twitter) - Get a company's name by company domain - Get professional data of a decision-maker by company name/domain and area - Discover more suitable decision-maker using search engines (Bing) by company name and area - Get professional emails of decision-makers by company domain and area - Discover up to ten decision-makers using search engines (Bing) by company name and area - Get a company's domain by company name - Get employees by company name or domain, area, seniority, and country - Get a company's Facebook profile by name without manually searching on Google or Facebook - Get geocoded company data by IP address - Get a company's LinkedIn profile by name without manually searching on Google or LinkedIn - Allows normalizing a CIF number, removing non-allowed characters - Get a company's phone by company domain - Get a company's sales data by a company's DUNS number - Get a company's sales data by a company's domain name - Get a company's sales data by a company's name - Get a company's sales data by a company's tax ID (CIF) - Get a company's Twitter profile by name without manually searching on Google or Twitter Finance - Discover if a BIC number has a valid format - Discover if an account number has a valid format - Check if credit card number checksum is valid - Discover if an IBAN account number has a valid format - Discover if an ISO currency code is valid - Check if a TIN exists in Europe - Convert amount between supported currencies and an exchange date - Get credit card type - Get multiple ISO currency codes by a country name - Get all ISO currency by an IP address - Get multiple ISO currency codes by a country ISO code - Get ISO currency code by IP address - Get ISO currency code by a currency ISO code - Get ISO currency code by an ISO country code - Get ISO currency code by a country name - Get related European TIN in Europe - Get IBAN by account number of the country - Get to search data bank information by IBAN account number - Get country VAT by address - Get country VAT by coordinates - Get VAT by IP address - Get VAT value by country ISO code - Get VAT by phone number, with worldwide coverage - Get VAT by zipcode Geographical - Check if a country's ISO code exists - Discover if the distance between two coordinates is equal to another - Discover if the distance(in kilometers) between two coordinates is greater than the given input - Discover if the distance(in kilometers) between two coordinates is greater or equal to the given input - Discover if the distance(in kilometers) between two coordinates is lower than the given input - Check if an address exists by a partial address search - Check if a house number exists by a partial address search - Check if coordinates have a valid format - Discover if a zipcode number prefix exists (only for Spain) - Discover if a zipcode number has a valid format (only for Spain) - Get cartesian coordinates(X, Y, Z/WGS84) by Latitude and Longitude - Get multiple cities by phone prefix (only for Spain) - Get multiple cities by partial initial text (only for Spain) - Get multiple cities by zip code prefix (only for Spain) - Get a city from IP - City search by partial name (only for Spain) - Discover the city name by a local phone number (only for Spain) - Discover the city name by the zip code (only for Spain) - Discover the community name from a zipcode (only for Spain) - Discover latitude and longitude coordinates of an IP address - Discover latitude and longitude coordinates of a postal address - Get multiple country names by currency ISO code - Get multiple countries by ISO code - Get multiple country names by initial name - Get country name by currency ISO code - Get country name by IP address - Get country name by its ISO code - Get country by a prefix - Get country name by phone number, with worldwide coverage - Get Aplha2 code by a country prefix or a name - Get decimal coordinates (degrees, minutes, and seconds) by latitude and longitude - Returns straight-line distance(in kilometers) between two addresses - Returns straight-line distance(in kilometers) between two GPS coordinates (latitude and longitude) - Returns straight-line distance(in kilometers) between two IP addresses - Returns straight-line distance(in kilometers) between two landline phones, using city and province of every phone - Returns straight-line distance(in kilometers) between two zip codes, using city and province of every zip code - Get an exact address by a partial address search - Discover geographical, company, timezone, and reputation data by IPv4 address - Discover the city name, zip code, province, country, latitude, and longitude from an IPv4 or IPv6 address and geocodes it - Parse postal address into separated fields, getting an improved resolution - Discover locale data (currency, language) by IPv4 or IPv6 address - Discover the city name, zip code, province, or country by latitude and longitude - Discover the city name, zip code, province, country, latitude, and longitude from an IPv4 or IPv6 address - Discover the city and the province from a landline phone number (only Spain) - Discover location data by name - Discover the city and the province from a zipcode number (only Spain) - Get the most relevant locations by name - Get the most relevant locations by name, category, location, and radius - Get multiple personal names by a prefix - Discover network data by IPv4 or IPv6 address - Allow normalizing an address by removing non allowed characters - Allow normalizing a city by removing non allowed characters - Allow normalizing a country by removing non allowed characters - Allow normalizing a province by removing non allowed characters - Allow normalizing a zipcode by removing non allowed characters - Parse postal address into separated fields, getting a basic resolution - Discover the province name from an IP address - Get the first province by a name prefix (only for Spain) - Discover the province name from a landline phone number (only for Spain) - Discover the province name from a zipcode number (only for Spain) - Get a province list by a name prefix (only for Spain) - Get a province list by a phone prefix (only for Spain) - Get a province list by a zipcode prefix (only for Spain) - Discover reputation by IPv4 or IPv6 address - Returns driving routing time, distance, fuel consumption, and cost between two addresses - Returns driving routing time, distance, fuel consumption, and cost between two GPS coordinates - Returns driving routing time, distance, fuel consumption, and cost between two IP addresses - Returns driving routing time, distance, fuel consumption, and cost between two landline phones, using city and province of every phone (only for Spain) - Returns driving routing time, distance, fuel consumption, and cost between two zip codes, using city and province of every zip code - Discover date-time data by IPv4 or IPv6 address - Get USNG coordinates by latitude and longitude - Get UTM coordinates by latitude and longitude - Discover the zip code if you have an IP address - Get the first zipcode by prefix, only for Spain - Get multiple zip codes by prefix, with worldwide coverage Image - Get QR code decoded content by an image URL - It allows discovering all geographical and technical EXIF metadata present in a photographic JPEG image - Get an encoded barcode by number and a required standard - Get QR code encoded by a text - Generate a new image by URL and text - Discover logo (favicon) used in a domain - Generate a screenshot by URL provided using Chrome browser Internet - Check if a domain exists - Check if a domain has a DNS record - Check if a domain has the given IP address assigned - Check if a domain has an MX record - Check if a domain has a valid SSL certificate - Check if a domain has a valid format - Check if a domain accepts all emails, existing or not - Check if a domain is a free service domain provider - Check if a domain is temporary or not - Discover if a computer is switched on - Discover if service in a port is available - Check if an URL contains a string or regular expression - Check if an URL exists - Check that an URL has a valid format - Get full SSL certificate data by a domain (or website) and monitor your certificate status - Get text data from web, pdf or image allowing to filter some elements by regular expressions or field names - Decode URL to recover original - Get valid, existing, and default URL when accessing a domain using a web browser - Discover device features by a user agent - Get the network name of and IP address - Get the domain record by its type - Encode URL to avoid problems - Copy file from one URL to another URL - Fix an IP address to the right format - Get the IPv4 address linked with a domain - Convert a number to an IP address - Get ISP known name of email domain name - Convert an IP address to numeric notation - Scan a host and returns the most commonly open ports - Obtains a list with multiple results from a website - Obtains the content of a website - Decode URL into multiple fields - Generate a PDF file by URL (provided using Chrome browser) - Get the root domain of any web address, removing non needed characters - Generates shareable URIs to use on social networks and email using a content URI and a text - Get data from the existing table in an HTML page or a PDF file - Discover client and server technologies used in a domain - Discover client and server technologies used in web pages - Analyze URL's health status about SSL, broken links, conflictive HTTP links with SSL, and more - Get website visits and rank of any domain - Get a domain's Whois data by fields - Get Whois data fields by IP address provided Personal - Check if age is between two numbers - Check if date returns an age between 20 and 29 - Check if date returns an age between 40 and 49 - Check if age is greater than another - Check if birth date returns an age greater than 64 - Check if birth date belongs to an adult (18 years for Spain) - Check if age is lower than another - Check if age is lower or equal than another - Check if ages are equal - Discover if a date is between two dates - Discover if a date is greater - Discover if a date is greater or equal - Discover if a date belongs to a leap year - Discover if a date is lower - Discover if a date is lower or equal - Discover if a date has a valid format - Discover if a gender value is valid - Discover if an NIE card number is valid - Discover if a NIF card number is valid - Check if a personal name exists in the INE data source (only for Spain) - Check if a name contains accepted characters - Discover if a NIF exists in the Robison list (only for Spain) - Check if surname contains accepted characters - Check if a personal surname appears in INE data source (only for Spain) - Discover if a DNI card number is valid - Discover the age of a birt date - Discover the age range of a person by birth date - Get the difference between two dates - Discover the gender of a person by the email - Discover the gender of a person or company by the name - Get LinkedIn employee profile URI by business email - Get LinkedIn employee profile URI by first name, last name, and company - Discover the letter of a DNI card number - Get first personal name matching by prefix and gender from INE data source (only for Spain) - Allow normalizing a DNI number by removing non allowed characters - Allow normalizing an NIE number by removing non allowed characters - Normalize name by removing non allowed characters - Normalize surname - Get parsed date-time - Normalize full name, fixing abbreviations, sorting if necessary, and returning first name, last name, and gender - Get prospect's contact data and the company's location and social data by email - Get contact, location, and social data by email and company name and location - Get personal and social data by social profile - Get personal data by email - Get personal data by first name, last name, company, and location - Get personal data by mobile - Get personal data by social network profile - Generate random fake data - Get first personal surname matching by prefix from INE data source (only for Spain) - Get personal surname matching by prefix from INE data source (only for Spain) - Get Twitter profile by first name, last name, and company - Get Xing profile by first name, last name, and company - Add a contact email to a person list Product - Check if an ASIN code exists on the Amazon Marketplace - Check if an ASIN code has a valid format - Check if an EAN code exists on Amazon Marketplace - Check if an EAN barcode has a valid format - Check if an EAN barcode of 13 digits has a valid format - Check if an EAN barcode of 14 digits has a valid format - Check if an EAN barcode of 18 digits has a valid format - Check if an EAN barcode of 8 digits has a valid format - Check if a GTIN barcode has a valid format - Check if a GTIN barcode of 13 digits has a valid format - Check if a GTIN barcode of 14 digits has a valid format - Check if a GTIN barcode of 8 digits has a valid format - Allows checking if an ISBN book exists - Allows checking if an ISBN10/13 code has a valid format - Allows checking if an ISBN10 code has a valid format - Allows checking if an ISBN13 code has a valid format - Check if a UPC exists - Check if a UPC has a valid format - Get ASIN by EAN - Get a book by author's surname - Get all publications by category - Get book data by an editor's name - Get book or publication data by 10 or 13 digits ISBN code - Get book data by title - Get books by author's surname - Get all books by category - Get all books by editor - Get all books by title - Get EAN code by ASIN code - Get product data on a UPC on Amazon Marketplace Security - Check if a Luhn number is valid - Check if a password is strong - Check if a UUID number is valid - Get blacklists for a domain - Get blacklists for an IP address Text - Check if a string only contains alphabets - Check if a string is alphanumeric - Check if a string is boolean - Check if the largest item in a list matches the provided item - Check if IPv4 or IPv6 address has a valid format - Check if IPv4 address has a valid format - Check if IPv6 address has a valid format - Check if the length of a list is between two quantities - Checks if the length of a list equals a specified quantity - Checks if the length of a list is greater than or equal to a certain amount - Check if the length of a list is lower than a certain amount - Check if the list contains a specific item - Check if the list ends with a specific element - Check if a list is sorted in ascending order - Check if the list starts with a specific element - Checks if the smallest element in a list matches the provided element - Check if a string contains only numbers - Check if a string contains a character - Check if a string ends with a character - Check if a string has no content - Check if a string contains random characters - Check if a string contains a value that matches with a regular expression - Check if the length of a string is between two numbers - Check if the length of a string is equal to a number - Check if the length of a string is greater than a number - Check if the length of a string is greater or equal to a number - Check if the length of a string is lower than a number - Check if the length of a string is lower or equal to a number - Check if a string starts with a character - Check if a string contains only lowercase characters - Check if a string contains only uppercase characters - Check if a list consists of unique elements - Check if the supplied values form a valid list of elements - Check if the number of words in a sentence is between two determined quantities - Check if the number of words in a sentence equals a certain amount - Check if the number of words in a sentence is greater than a certain amount - Check if the number of words in a sentence is greater than - Check if the word count is lower - Check if the number of words present in a sentence is less than or equal to a quantity - Convert a string to Base64 encoded value - Discover banned English words in an email body or subject - Get field names by analyzing the field value provided - Format a string using a format pattern - Generate random string using a regular expression as a pattern - Return the largest item in a list - Return the smallest item in a list - Convert to lowercase - Convert a string to MD5 encoded value - Merge two strings - Normalize a string depending on the field name - Analyze string and return all emails, phones, zip codes, and links - Convert a string to an SHA encoded value - Analyze an English text with emojis and detect sentiment - Returns an ascending sorted list - Split a value into two parts and join them using a separator from the original string - Split a value into two parts using a separator from the original string - Get the length of a string - Lookup string between multiple values by fuzzy logic and regex patterns - Clean abuse words from a string - Replace the first value found in a string with another - Replace all values found in a string with another - Translate a text into any language - Return a single list with no repeating elements - Convert all letters to uppercase - Count total words in a text Example Usage # This workflow allows you to take a screenshot of a website and send it to a Telegram channel. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - uProc - Telegram The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. uProc node (getUrlScreenshot) # This node will return the screenshot of the n8n website. If you want to get the screenshot of a different website, enter the domain of that website instead. First of all, you'll have to enter credentials for the uProc node. You can find out how to do that here . Select 'Image' from the Resource dropdown list. Select 'Get Screenshot by URL' from the Operation dropdown list. Enter https://n8n.io in the URL field. Select '1024' from the Width dropdown list. Select 'Yes' from the Fullpage dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns a URL of the screenshot of the website. 3. Telegram node (sendPhoto: message) # This node will send the screenshot that we received from the previous node. First of all, you'll have to enter credentials for the Telegram node. You can find out how to do that here . Select 'Send Photo' from the Operation dropdown list. Enter a chat ID in the Chat ID field. Refer to the FAQs of the Telegram node to learn how to get the chat ID. Click on the gears icon next to the Photo field and click on Add Expression . Select the following in the Variable Selector section: Nodes > uProc > Output Data > JSON > message > result. You can also add the following expression: {{$node[\"uProc\"].json[\"message\"][\"result\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node sends the screenshot image to the channel that we specify.","title":"uProc"},{"location":"integrations/nodes/n8n-nodes-base.uproc/#uproc","text":"uProc is a data platform that allows to clean, verify, and enrich any data field. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"uProc"},{"location":"integrations/nodes/n8n-nodes-base.uproc/#basic-operations","text":"Audio - Get advanced human audio file by provided text and language - Get an audio file by provided text and language Communication - Discover if a domain has a social network presence - Discover if an email is valid, hard bounce, soft bounce, spam-trap, free, temporary, and recipient exists - Discover if the email recipient exists, returning email status - Check if an email domain has an SMTP server to receive emails - Discover if the email has a social network presence - Check if an email has a valid format - Check if an email domain belongs to a disposable email service - Check if email belongs to free service provider like Gmail, Hotmail - Discover if an email exists in the Robinson list (only Spain) - Check if email belongs to a system or role-based account - Check if an email is a spam trap - Discover if an IMEI number has a valid format - Check if a LinkedIn profile is a first-degree contact - Discover if mobile phone number exists in network operator, with worldwide coverage - Discover if a mobile phone number has a valid format with worldwide coverage - Discover if a mobile phone number has a valid format (only Spain) - Discover if a mobile phone number has a valid prefix, with worldwide coverage - Discover if a Spanish mobile phone number has a valid prefix - Discover if a mobile number is switched on to call it later, with worldwide coverage - Discover if a mobile number can receive SMS with worldwide coverage - Discover if a phone (landline or mobile) exists in a Robinson list (only Spain) - Discover if a landline or mobile number has a valid prefix - Discover if a landline phone number is valid, with Spain coverage - Allows discovering if landline number has a good international format, depending on the country - Discover if a landline phone number prefix exists, with worldwide coverage - Clean a phone removing non allowed characters - Allows getting country code of a mobile phone number with international format - Allows getting a domain from an email - Discover an email by company website or domain and prospect's first-name and last-name - Check if an email is personal or generic - Get emails list found on the internet by domain or URI - Get an emails list found on the internet by non-free email - Get emails list found inside the website by domain or URI - Get three first web references of an email published on the internet - Allows you to fix the email domain of those misspelled emails - Fix the international prefix of a phone based on the ISO code of a country - Get GDPR compliant emails list by domain for your Email Marketing campaigns in Europe - Discover if mobile exist via real-time HLR query - Get portability data about a landline or mobile number, only for Spain - Extract results from a LinkedIn search (employees in a company) - Get members in a LinkedIn group - Extract the last 80 connections from your LinkedIn profile - Extract the last 80 invitations sent from your LinkedIn - Get users who comment on a post on LinkedIn - Get users who like a post on LinkedIn - Extract a LinkedIn profile - Extract results from a LinkedIn search (profiles) - Extract fastly last profiles that have published content on LinkedIn by specific keywords - Discover if mobile exist via real-time HLR query, as well as portability and roaming data - Get existence, portability, and roaming of a mobile phone via MNP query - Discover if mobile or landline prefix exists in Spain - Allows normalizing email address, removing non allowed characters - Allows normalizing a mobile phone, removing non-allowed characters - Parse phone number in multiple fields and verify format and prefix validity - Allows getting country prefix number by country code - Discover an email by company website or domain and prospect's first-name and last-name - This tool parses a social URI address and extracts any available indicators - Search all social networks by domain, parses all found URLs, and returns social networks KPIs - Discover if a domain or a website has social activity and returns all social network profiles found - Discover if an email has social activity, and get all social network profiles found - Discover if a mobile phone has social activity, and get all social network profiles found - Get web references for an email published on the internet - Send a custom message invitation to a non connected LinkedIn profile - Send a custom email to a recipient - Send a custom SMS to a recipient with worldwide coverage - Send a custom invitation message if a profile is connected or a custom message otherwise - Visits a profile to show interest and get profile views in return from contact, increasing your LinkedIn network - Send a custom private message to a connected LinkedIn profile - Get an email by contact's LinkedIn profile URI - Discover an email by company's name and prospect's full name - Discover an email by company's website or domain and prospect's full name Company - Discover if a CIF card number is valid - Check if a company is a debtor by TaxID - Check if the ISIN number is valid - Check if the SS number is valid, only for Spain - Identify and classify a prospecting role in detecting the right area and seniority to filter later - Get a company's contact, social, and technology data by domain - Get a company's contact, social, and technology data by email - Get a company's data by CIF - Get a company's data by DUNS - Get a company's data by domain - Get a company's data by email - Get a company's data by IP address - Get a company's data by name - Get a company's data by phone number - Get a company's data by social networks URI (LinkedIn, Twitter) - Get a company's name by company domain - Get professional data of a decision-maker by company name/domain and area - Discover more suitable decision-maker using search engines (Bing) by company name and area - Get professional emails of decision-makers by company domain and area - Discover up to ten decision-makers using search engines (Bing) by company name and area - Get a company's domain by company name - Get employees by company name or domain, area, seniority, and country - Get a company's Facebook profile by name without manually searching on Google or Facebook - Get geocoded company data by IP address - Get a company's LinkedIn profile by name without manually searching on Google or LinkedIn - Allows normalizing a CIF number, removing non-allowed characters - Get a company's phone by company domain - Get a company's sales data by a company's DUNS number - Get a company's sales data by a company's domain name - Get a company's sales data by a company's name - Get a company's sales data by a company's tax ID (CIF) - Get a company's Twitter profile by name without manually searching on Google or Twitter Finance - Discover if a BIC number has a valid format - Discover if an account number has a valid format - Check if credit card number checksum is valid - Discover if an IBAN account number has a valid format - Discover if an ISO currency code is valid - Check if a TIN exists in Europe - Convert amount between supported currencies and an exchange date - Get credit card type - Get multiple ISO currency codes by a country name - Get all ISO currency by an IP address - Get multiple ISO currency codes by a country ISO code - Get ISO currency code by IP address - Get ISO currency code by a currency ISO code - Get ISO currency code by an ISO country code - Get ISO currency code by a country name - Get related European TIN in Europe - Get IBAN by account number of the country - Get to search data bank information by IBAN account number - Get country VAT by address - Get country VAT by coordinates - Get VAT by IP address - Get VAT value by country ISO code - Get VAT by phone number, with worldwide coverage - Get VAT by zipcode Geographical - Check if a country's ISO code exists - Discover if the distance between two coordinates is equal to another - Discover if the distance(in kilometers) between two coordinates is greater than the given input - Discover if the distance(in kilometers) between two coordinates is greater or equal to the given input - Discover if the distance(in kilometers) between two coordinates is lower than the given input - Check if an address exists by a partial address search - Check if a house number exists by a partial address search - Check if coordinates have a valid format - Discover if a zipcode number prefix exists (only for Spain) - Discover if a zipcode number has a valid format (only for Spain) - Get cartesian coordinates(X, Y, Z/WGS84) by Latitude and Longitude - Get multiple cities by phone prefix (only for Spain) - Get multiple cities by partial initial text (only for Spain) - Get multiple cities by zip code prefix (only for Spain) - Get a city from IP - City search by partial name (only for Spain) - Discover the city name by a local phone number (only for Spain) - Discover the city name by the zip code (only for Spain) - Discover the community name from a zipcode (only for Spain) - Discover latitude and longitude coordinates of an IP address - Discover latitude and longitude coordinates of a postal address - Get multiple country names by currency ISO code - Get multiple countries by ISO code - Get multiple country names by initial name - Get country name by currency ISO code - Get country name by IP address - Get country name by its ISO code - Get country by a prefix - Get country name by phone number, with worldwide coverage - Get Aplha2 code by a country prefix or a name - Get decimal coordinates (degrees, minutes, and seconds) by latitude and longitude - Returns straight-line distance(in kilometers) between two addresses - Returns straight-line distance(in kilometers) between two GPS coordinates (latitude and longitude) - Returns straight-line distance(in kilometers) between two IP addresses - Returns straight-line distance(in kilometers) between two landline phones, using city and province of every phone - Returns straight-line distance(in kilometers) between two zip codes, using city and province of every zip code - Get an exact address by a partial address search - Discover geographical, company, timezone, and reputation data by IPv4 address - Discover the city name, zip code, province, country, latitude, and longitude from an IPv4 or IPv6 address and geocodes it - Parse postal address into separated fields, getting an improved resolution - Discover locale data (currency, language) by IPv4 or IPv6 address - Discover the city name, zip code, province, or country by latitude and longitude - Discover the city name, zip code, province, country, latitude, and longitude from an IPv4 or IPv6 address - Discover the city and the province from a landline phone number (only Spain) - Discover location data by name - Discover the city and the province from a zipcode number (only Spain) - Get the most relevant locations by name - Get the most relevant locations by name, category, location, and radius - Get multiple personal names by a prefix - Discover network data by IPv4 or IPv6 address - Allow normalizing an address by removing non allowed characters - Allow normalizing a city by removing non allowed characters - Allow normalizing a country by removing non allowed characters - Allow normalizing a province by removing non allowed characters - Allow normalizing a zipcode by removing non allowed characters - Parse postal address into separated fields, getting a basic resolution - Discover the province name from an IP address - Get the first province by a name prefix (only for Spain) - Discover the province name from a landline phone number (only for Spain) - Discover the province name from a zipcode number (only for Spain) - Get a province list by a name prefix (only for Spain) - Get a province list by a phone prefix (only for Spain) - Get a province list by a zipcode prefix (only for Spain) - Discover reputation by IPv4 or IPv6 address - Returns driving routing time, distance, fuel consumption, and cost between two addresses - Returns driving routing time, distance, fuel consumption, and cost between two GPS coordinates - Returns driving routing time, distance, fuel consumption, and cost between two IP addresses - Returns driving routing time, distance, fuel consumption, and cost between two landline phones, using city and province of every phone (only for Spain) - Returns driving routing time, distance, fuel consumption, and cost between two zip codes, using city and province of every zip code - Discover date-time data by IPv4 or IPv6 address - Get USNG coordinates by latitude and longitude - Get UTM coordinates by latitude and longitude - Discover the zip code if you have an IP address - Get the first zipcode by prefix, only for Spain - Get multiple zip codes by prefix, with worldwide coverage Image - Get QR code decoded content by an image URL - It allows discovering all geographical and technical EXIF metadata present in a photographic JPEG image - Get an encoded barcode by number and a required standard - Get QR code encoded by a text - Generate a new image by URL and text - Discover logo (favicon) used in a domain - Generate a screenshot by URL provided using Chrome browser Internet - Check if a domain exists - Check if a domain has a DNS record - Check if a domain has the given IP address assigned - Check if a domain has an MX record - Check if a domain has a valid SSL certificate - Check if a domain has a valid format - Check if a domain accepts all emails, existing or not - Check if a domain is a free service domain provider - Check if a domain is temporary or not - Discover if a computer is switched on - Discover if service in a port is available - Check if an URL contains a string or regular expression - Check if an URL exists - Check that an URL has a valid format - Get full SSL certificate data by a domain (or website) and monitor your certificate status - Get text data from web, pdf or image allowing to filter some elements by regular expressions or field names - Decode URL to recover original - Get valid, existing, and default URL when accessing a domain using a web browser - Discover device features by a user agent - Get the network name of and IP address - Get the domain record by its type - Encode URL to avoid problems - Copy file from one URL to another URL - Fix an IP address to the right format - Get the IPv4 address linked with a domain - Convert a number to an IP address - Get ISP known name of email domain name - Convert an IP address to numeric notation - Scan a host and returns the most commonly open ports - Obtains a list with multiple results from a website - Obtains the content of a website - Decode URL into multiple fields - Generate a PDF file by URL (provided using Chrome browser) - Get the root domain of any web address, removing non needed characters - Generates shareable URIs to use on social networks and email using a content URI and a text - Get data from the existing table in an HTML page or a PDF file - Discover client and server technologies used in a domain - Discover client and server technologies used in web pages - Analyze URL's health status about SSL, broken links, conflictive HTTP links with SSL, and more - Get website visits and rank of any domain - Get a domain's Whois data by fields - Get Whois data fields by IP address provided Personal - Check if age is between two numbers - Check if date returns an age between 20 and 29 - Check if date returns an age between 40 and 49 - Check if age is greater than another - Check if birth date returns an age greater than 64 - Check if birth date belongs to an adult (18 years for Spain) - Check if age is lower than another - Check if age is lower or equal than another - Check if ages are equal - Discover if a date is between two dates - Discover if a date is greater - Discover if a date is greater or equal - Discover if a date belongs to a leap year - Discover if a date is lower - Discover if a date is lower or equal - Discover if a date has a valid format - Discover if a gender value is valid - Discover if an NIE card number is valid - Discover if a NIF card number is valid - Check if a personal name exists in the INE data source (only for Spain) - Check if a name contains accepted characters - Discover if a NIF exists in the Robison list (only for Spain) - Check if surname contains accepted characters - Check if a personal surname appears in INE data source (only for Spain) - Discover if a DNI card number is valid - Discover the age of a birt date - Discover the age range of a person by birth date - Get the difference between two dates - Discover the gender of a person by the email - Discover the gender of a person or company by the name - Get LinkedIn employee profile URI by business email - Get LinkedIn employee profile URI by first name, last name, and company - Discover the letter of a DNI card number - Get first personal name matching by prefix and gender from INE data source (only for Spain) - Allow normalizing a DNI number by removing non allowed characters - Allow normalizing an NIE number by removing non allowed characters - Normalize name by removing non allowed characters - Normalize surname - Get parsed date-time - Normalize full name, fixing abbreviations, sorting if necessary, and returning first name, last name, and gender - Get prospect's contact data and the company's location and social data by email - Get contact, location, and social data by email and company name and location - Get personal and social data by social profile - Get personal data by email - Get personal data by first name, last name, company, and location - Get personal data by mobile - Get personal data by social network profile - Generate random fake data - Get first personal surname matching by prefix from INE data source (only for Spain) - Get personal surname matching by prefix from INE data source (only for Spain) - Get Twitter profile by first name, last name, and company - Get Xing profile by first name, last name, and company - Add a contact email to a person list Product - Check if an ASIN code exists on the Amazon Marketplace - Check if an ASIN code has a valid format - Check if an EAN code exists on Amazon Marketplace - Check if an EAN barcode has a valid format - Check if an EAN barcode of 13 digits has a valid format - Check if an EAN barcode of 14 digits has a valid format - Check if an EAN barcode of 18 digits has a valid format - Check if an EAN barcode of 8 digits has a valid format - Check if a GTIN barcode has a valid format - Check if a GTIN barcode of 13 digits has a valid format - Check if a GTIN barcode of 14 digits has a valid format - Check if a GTIN barcode of 8 digits has a valid format - Allows checking if an ISBN book exists - Allows checking if an ISBN10/13 code has a valid format - Allows checking if an ISBN10 code has a valid format - Allows checking if an ISBN13 code has a valid format - Check if a UPC exists - Check if a UPC has a valid format - Get ASIN by EAN - Get a book by author's surname - Get all publications by category - Get book data by an editor's name - Get book or publication data by 10 or 13 digits ISBN code - Get book data by title - Get books by author's surname - Get all books by category - Get all books by editor - Get all books by title - Get EAN code by ASIN code - Get product data on a UPC on Amazon Marketplace Security - Check if a Luhn number is valid - Check if a password is strong - Check if a UUID number is valid - Get blacklists for a domain - Get blacklists for an IP address Text - Check if a string only contains alphabets - Check if a string is alphanumeric - Check if a string is boolean - Check if the largest item in a list matches the provided item - Check if IPv4 or IPv6 address has a valid format - Check if IPv4 address has a valid format - Check if IPv6 address has a valid format - Check if the length of a list is between two quantities - Checks if the length of a list equals a specified quantity - Checks if the length of a list is greater than or equal to a certain amount - Check if the length of a list is lower than a certain amount - Check if the list contains a specific item - Check if the list ends with a specific element - Check if a list is sorted in ascending order - Check if the list starts with a specific element - Checks if the smallest element in a list matches the provided element - Check if a string contains only numbers - Check if a string contains a character - Check if a string ends with a character - Check if a string has no content - Check if a string contains random characters - Check if a string contains a value that matches with a regular expression - Check if the length of a string is between two numbers - Check if the length of a string is equal to a number - Check if the length of a string is greater than a number - Check if the length of a string is greater or equal to a number - Check if the length of a string is lower than a number - Check if the length of a string is lower or equal to a number - Check if a string starts with a character - Check if a string contains only lowercase characters - Check if a string contains only uppercase characters - Check if a list consists of unique elements - Check if the supplied values form a valid list of elements - Check if the number of words in a sentence is between two determined quantities - Check if the number of words in a sentence equals a certain amount - Check if the number of words in a sentence is greater than a certain amount - Check if the number of words in a sentence is greater than - Check if the word count is lower - Check if the number of words present in a sentence is less than or equal to a quantity - Convert a string to Base64 encoded value - Discover banned English words in an email body or subject - Get field names by analyzing the field value provided - Format a string using a format pattern - Generate random string using a regular expression as a pattern - Return the largest item in a list - Return the smallest item in a list - Convert to lowercase - Convert a string to MD5 encoded value - Merge two strings - Normalize a string depending on the field name - Analyze string and return all emails, phones, zip codes, and links - Convert a string to an SHA encoded value - Analyze an English text with emojis and detect sentiment - Returns an ascending sorted list - Split a value into two parts and join them using a separator from the original string - Split a value into two parts using a separator from the original string - Get the length of a string - Lookup string between multiple values by fuzzy logic and regex patterns - Clean abuse words from a string - Replace the first value found in a string with another - Replace all values found in a string with another - Translate a text into any language - Return a single list with no repeating elements - Convert all letters to uppercase - Count total words in a text","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.uproc/#example-usage","text":"This workflow allows you to take a screenshot of a website and send it to a Telegram channel. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - uProc - Telegram The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.uproc/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.uproc/#2-uproc-node-geturlscreenshot","text":"This node will return the screenshot of the n8n website. If you want to get the screenshot of a different website, enter the domain of that website instead. First of all, you'll have to enter credentials for the uProc node. You can find out how to do that here . Select 'Image' from the Resource dropdown list. Select 'Get Screenshot by URL' from the Operation dropdown list. Enter https://n8n.io in the URL field. Select '1024' from the Width dropdown list. Select 'Yes' from the Fullpage dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns a URL of the screenshot of the website.","title":"2. uProc node (getUrlScreenshot)"},{"location":"integrations/nodes/n8n-nodes-base.uproc/#3-telegram-node-sendphoto-message","text":"This node will send the screenshot that we received from the previous node. First of all, you'll have to enter credentials for the Telegram node. You can find out how to do that here . Select 'Send Photo' from the Operation dropdown list. Enter a chat ID in the Chat ID field. Refer to the FAQs of the Telegram node to learn how to get the chat ID. Click on the gears icon next to the Photo field and click on Add Expression . Select the following in the Variable Selector section: Nodes > uProc > Output Data > JSON > message > result. You can also add the following expression: {{$node[\"uProc\"].json[\"message\"][\"result\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node sends the screenshot image to the channel that we specify.","title":"3. Telegram node (sendPhoto: message)"},{"location":"integrations/nodes/n8n-nodes-base.uptimeRobot/","text":"UptimeRobot # UptimeRobot is an uptime monitoring service. It monitors your website every 5 mins. You can set an HTTP/S, ping, port, keyword, or heartbeat monitor and get notifications to your email, phone, Telegram, Slack, Twitter, etc. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Account Get account details Alert Contact Create an alert contact Delete an alert contact Get an alert contact Get all alert contacts Update an alert contact Maintenance Window Create a maintenance window Delete a maintenance window Get a maintenance window Get all a maintenance windows Update a maintenance window Monitor Create a monitor Delete a monitor Get a monitor Get all monitors Reset a monitor Update a monitor Public Status Page Create a public status page Delete a public status page Get a public status page Get all a public status pages Example Usage # This workflow allows you to create, update, and get a monitor using the UptimeRobot node. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - UptimeRobot The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. UptimeRobot node (create: monitor) # This node will create a new monitor of the type HTTP(S) . First of all, you'll have to enter credentials for the OpenWeatherMap node. You can find out how to do that here . Select 'Monitor' from the Resource dropdown list. Select 'Create' from the Operation dropdown list. Enter n8n in the Friendly Name field. Select 'HTTP(S)' from the Type dropdown list. Enter https://n8n.io in the URL field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns data about the current weather in Berlin. 3. UptimeRobot node (update: monitor) # This node will update the monitor that we created in the previous node. Select the credentials that you entered in the previous node. Select 'Monitor' from the Resource dropdown list. Select 'Update' from the Operation dropdown list. Click on the gears icon next to the ID field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > id. You can also add the following expression: {{$json[\"id\"]}} . Click on Add Field and select 'Friendly Name' from the dropdown list. Enter n8n website in the Friendly Name field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node updates the friendly name of the monitor that we created in the previous node. 4. UptimeRobot node (get: monitor) # This node will get the information of the monitor that we created in the previous node. Select the credentials that you entered in the previous node. Select 'Monitor' from the Resource dropdown list. Select 'Update' from the Operation dropdown list. Click on the gears icon next to the ID field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > id. You can also add the following expression: {{$json[\"id\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the information of the monitor that we created earlier.","title":"UptimeRobot"},{"location":"integrations/nodes/n8n-nodes-base.uptimeRobot/#uptimerobot","text":"UptimeRobot is an uptime monitoring service. It monitors your website every 5 mins. You can set an HTTP/S, ping, port, keyword, or heartbeat monitor and get notifications to your email, phone, Telegram, Slack, Twitter, etc. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"UptimeRobot"},{"location":"integrations/nodes/n8n-nodes-base.uptimeRobot/#basic-operations","text":"Account Get account details Alert Contact Create an alert contact Delete an alert contact Get an alert contact Get all alert contacts Update an alert contact Maintenance Window Create a maintenance window Delete a maintenance window Get a maintenance window Get all a maintenance windows Update a maintenance window Monitor Create a monitor Delete a monitor Get a monitor Get all monitors Reset a monitor Update a monitor Public Status Page Create a public status page Delete a public status page Get a public status page Get all a public status pages","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.uptimeRobot/#example-usage","text":"This workflow allows you to create, update, and get a monitor using the UptimeRobot node. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - UptimeRobot The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.uptimeRobot/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.uptimeRobot/#2-uptimerobot-node-create-monitor","text":"This node will create a new monitor of the type HTTP(S) . First of all, you'll have to enter credentials for the OpenWeatherMap node. You can find out how to do that here . Select 'Monitor' from the Resource dropdown list. Select 'Create' from the Operation dropdown list. Enter n8n in the Friendly Name field. Select 'HTTP(S)' from the Type dropdown list. Enter https://n8n.io in the URL field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns data about the current weather in Berlin.","title":"2. UptimeRobot node (create: monitor)"},{"location":"integrations/nodes/n8n-nodes-base.uptimeRobot/#3-uptimerobot-node-update-monitor","text":"This node will update the monitor that we created in the previous node. Select the credentials that you entered in the previous node. Select 'Monitor' from the Resource dropdown list. Select 'Update' from the Operation dropdown list. Click on the gears icon next to the ID field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > id. You can also add the following expression: {{$json[\"id\"]}} . Click on Add Field and select 'Friendly Name' from the dropdown list. Enter n8n website in the Friendly Name field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node updates the friendly name of the monitor that we created in the previous node.","title":"3. UptimeRobot node (update: monitor)"},{"location":"integrations/nodes/n8n-nodes-base.uptimeRobot/#4-uptimerobot-node-get-monitor","text":"This node will get the information of the monitor that we created in the previous node. Select the credentials that you entered in the previous node. Select 'Monitor' from the Resource dropdown list. Select 'Update' from the Operation dropdown list. Click on the gears icon next to the ID field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > id. You can also add the following expression: {{$json[\"id\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the information of the monitor that we created earlier.","title":"4. UptimeRobot node (get: monitor)"},{"location":"integrations/nodes/n8n-nodes-base.urlScanIo/","text":"urlscan.io # urlscan.io is a free service to scan and analyse websites. When a URL is submitted to urlscan.io, an automated process will browse to the URL like a regular user and record the activity that this page navigation creates. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Scan Get Get All Perform","title":"urlscan.io"},{"location":"integrations/nodes/n8n-nodes-base.urlScanIo/#urlscanio","text":"urlscan.io is a free service to scan and analyse websites. When a URL is submitted to urlscan.io, an automated process will browse to the URL like a regular user and record the activity that this page navigation creates. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"urlscan.io"},{"location":"integrations/nodes/n8n-nodes-base.urlScanIo/#basic-operations","text":"Scan Get Get All Perform","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.vero/","text":"Vero # Vero is a messaging platform that helps manage real-time data to create a better customer experience. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # User Create or update a user profile Change a users identifier Unsubscribe a user. Resubscribe a user. Delete a user. Adds a tag to a users profile. Removes a tag from a users profile. Event Track an event for a specific customer Example Usage # This workflow allows you to create a user profile in Vero. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Vero The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Vero node # First of all, you'll have to enter credentials for the Vero node. You can find out how to do that here . Enter the unique identifier of the user in the ID field. Click on Execute Node to run the workflow.","title":"Vero"},{"location":"integrations/nodes/n8n-nodes-base.vero/#vero","text":"Vero is a messaging platform that helps manage real-time data to create a better customer experience. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Vero"},{"location":"integrations/nodes/n8n-nodes-base.vero/#basic-operations","text":"User Create or update a user profile Change a users identifier Unsubscribe a user. Resubscribe a user. Delete a user. Adds a tag to a users profile. Removes a tag from a users profile. Event Track an event for a specific customer","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.vero/#example-usage","text":"This workflow allows you to create a user profile in Vero. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Vero The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.vero/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.vero/#2-vero-node","text":"First of all, you'll have to enter credentials for the Vero node. You can find out how to do that here . Enter the unique identifier of the user in the ID field. Click on Execute Node to run the workflow.","title":"2. Vero node"},{"location":"integrations/nodes/n8n-nodes-base.vonage/","text":"Vonage # Vonage provides unified communications, contact centers, and programmable communications APIs. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # SMS Send Example Usage # This workflow allows you to send daily weather updates via an SMS message using the Vonage node. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Cron - OpenWeatherMap - Vonage The final workflow should look like the following image. 1. Cron node # The Cron node will trigger the workflow daily at 9 AM. Click on Add Cron Time . Set hours to 9 in the Hour field. Click on Execute Node to run the node. In the screenshot below, you will notice that the Cron node is configured to trigger the workflow every day at 9 AM. 2. OpenWeatherMap node (Current Weather) # This node will return data about the current weather in Berlin. To get the weather updates for your city, you can enter the name of your city instead. First of all, you'll have to enter credentials for the OpenWeatherMap node. You can find out how to do that here . Enter berlin in the City field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns data about the current weather in Berlin. 3. Vonage node (send: sms) # This node will send an SMS with the weather update, which was sent by the previous node. First of all, you'll have to enter credentials for the Vonage node. You can find out how to do that here . Enter a Vonage phone number or the brand name in the From field. Enter the receiver's phone number in the To field. Click on the gears icon next to the Message field and click on Add Expression . Enter the following message in the Expression field: Hey! The temperature outside is {{$node[\"OpenWeatherMap\"].json[\"main\"][\"temp\"]}}\u00b0C. . Click on Execute Node to run the node. In the screenshot below, you will notice that the node sends an SMS to the phone number that we specified with the weather update, which was sent by the previous node.","title":"Vonage"},{"location":"integrations/nodes/n8n-nodes-base.vonage/#vonage","text":"Vonage provides unified communications, contact centers, and programmable communications APIs. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Vonage"},{"location":"integrations/nodes/n8n-nodes-base.vonage/#basic-operations","text":"SMS Send","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.vonage/#example-usage","text":"This workflow allows you to send daily weather updates via an SMS message using the Vonage node. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Cron - OpenWeatherMap - Vonage The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.vonage/#1-cron-node","text":"The Cron node will trigger the workflow daily at 9 AM. Click on Add Cron Time . Set hours to 9 in the Hour field. Click on Execute Node to run the node. In the screenshot below, you will notice that the Cron node is configured to trigger the workflow every day at 9 AM.","title":"1. Cron node"},{"location":"integrations/nodes/n8n-nodes-base.vonage/#2-openweathermap-node-current-weather","text":"This node will return data about the current weather in Berlin. To get the weather updates for your city, you can enter the name of your city instead. First of all, you'll have to enter credentials for the OpenWeatherMap node. You can find out how to do that here . Enter berlin in the City field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns data about the current weather in Berlin.","title":"2. OpenWeatherMap node (Current Weather)"},{"location":"integrations/nodes/n8n-nodes-base.vonage/#3-vonage-node-send-sms","text":"This node will send an SMS with the weather update, which was sent by the previous node. First of all, you'll have to enter credentials for the Vonage node. You can find out how to do that here . Enter a Vonage phone number or the brand name in the From field. Enter the receiver's phone number in the To field. Click on the gears icon next to the Message field and click on Add Expression . Enter the following message in the Expression field: Hey! The temperature outside is {{$node[\"OpenWeatherMap\"].json[\"main\"][\"temp\"]}}\u00b0C. . Click on Execute Node to run the node. In the screenshot below, you will notice that the node sends an SMS to the phone number that we specified with the weather update, which was sent by the previous node.","title":"3. Vonage node (send: sms)"},{"location":"integrations/nodes/n8n-nodes-base.webflow/","text":"Webflow # Webflow is an application that allows you to build responsive websites with browser-based visual editing software. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Item Create Delete Get Get All Update Example Usage # This workflow allows you to create, update, and get an item from Webflow. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Webflow The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Webflow node (create: item) # This node will create a new collection of the type Team Members in Webflow. If you want to create a collection with a different type, use that type instead. First of all, you'll have to enter credentials for the Webflow node. You can find out how to do that here . Select 'Create' from the Operation dropdown list. Select your site from the Site ID dropdown list. Select 'Team Members' from the Collection ID dropdown list. Click on the Add Field button. Select 'Name (PlainText) (required)' from the Field ID dropdown list. If you're using a different collection type, select the field present in that collection. Enter n8n in the Field Value field. Click on the Add Field button. Select 'Slug (PlainText) (required)' from the Field ID dropdown list. If you're using a different collection type, select the field present in that collection. Enter n8n in the Field Value field. Click on the Add Field button. Select 'Archived (Bool) (required)' from the Field ID dropdown list. If you're using a different collection type, select the field present in that collection. Enter false in the Field Value field. Click on the Add Field button. Select 'Draft (Bool) (required)' from the Field ID dropdown list. If you're using a different collection type, select the field present in that collection. Enter false in the Field Value field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new item for the collection type Team Members in Webflow. 3. Webflow1 node (update: item) # This node will update the item that we created using the previous node. Select the credentials that you entered in the previous Webflow node. Select 'Update' from the Operation dropdown list. Select your site from the Site ID dropdown list. Select 'Team Members' from the Collection ID dropdown list. Click on the gears icon next to the Item ID field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > _id. You can also add the following expression: {{$json[\"_id\"]}} . Click on the Add Property button. Click on the Add Field button. Select 'Name (PlainText) (required)' from the Field ID dropdown list. If you're using a different collection type, select the field present in that collection. Click on the gears icon next to the Field Value field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > name. You can also add the following expression: {{$json[\"name\"]}} . Click on the Add Field button. Select 'Slug (PlainText) (required)' from the Field ID dropdown list. If you're using a different collection type, select the field present in that collection. Click on the gears icon next to the Field Value field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > slug. You can also add the following expression: {{$json[\"slug\"]}} . Click on the Add Field button. Select 'Archived (Bool) (required)' from the Field ID dropdown list. If you're using a different collection type, select the field present in that collection. Click on the gears icon next to the Field Value field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > _archived. You can also add the following expression: {{$json[\"_archived\"]}} . Click on the Add Field button. Select 'Draft (Bool) (required)' from the Field ID dropdown list. If you're using a different collection type, select the field present in that collection. Click on the gears icon next to the Field Value field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > _draft. You can also add the following expression: {{$json[\"_draft\"]}} . Click on the Add Field button. Select 'Avatar (ImageRef)' from the Field ID dropdown list. If you're using a different collection type, select the field present in that collection. Enter https://n8n.io/n8n-logo.png in the Value field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node updates the item that got created previously. 4. Webflow2 node (get: item) # This node will retrieve the information about the item that we created earlier. Select the credentials that you entered in the previous Webflow node. Select your site from the Site ID dropdown list. Select 'Team Members' from the Collection ID dropdown list. Click on the gears icon next to the Item ID field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > _id. You can also add the following expression: {{$json[\"_id\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node retrieves the information of the item that we created earlier.","title":"Webflow"},{"location":"integrations/nodes/n8n-nodes-base.webflow/#webflow","text":"Webflow is an application that allows you to build responsive websites with browser-based visual editing software. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Webflow"},{"location":"integrations/nodes/n8n-nodes-base.webflow/#basic-operations","text":"Item Create Delete Get Get All Update","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.webflow/#example-usage","text":"This workflow allows you to create, update, and get an item from Webflow. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Webflow The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.webflow/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.webflow/#2-webflow-node-create-item","text":"This node will create a new collection of the type Team Members in Webflow. If you want to create a collection with a different type, use that type instead. First of all, you'll have to enter credentials for the Webflow node. You can find out how to do that here . Select 'Create' from the Operation dropdown list. Select your site from the Site ID dropdown list. Select 'Team Members' from the Collection ID dropdown list. Click on the Add Field button. Select 'Name (PlainText) (required)' from the Field ID dropdown list. If you're using a different collection type, select the field present in that collection. Enter n8n in the Field Value field. Click on the Add Field button. Select 'Slug (PlainText) (required)' from the Field ID dropdown list. If you're using a different collection type, select the field present in that collection. Enter n8n in the Field Value field. Click on the Add Field button. Select 'Archived (Bool) (required)' from the Field ID dropdown list. If you're using a different collection type, select the field present in that collection. Enter false in the Field Value field. Click on the Add Field button. Select 'Draft (Bool) (required)' from the Field ID dropdown list. If you're using a different collection type, select the field present in that collection. Enter false in the Field Value field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new item for the collection type Team Members in Webflow.","title":"2. Webflow node (create: item)"},{"location":"integrations/nodes/n8n-nodes-base.webflow/#3-webflow1-node-update-item","text":"This node will update the item that we created using the previous node. Select the credentials that you entered in the previous Webflow node. Select 'Update' from the Operation dropdown list. Select your site from the Site ID dropdown list. Select 'Team Members' from the Collection ID dropdown list. Click on the gears icon next to the Item ID field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > _id. You can also add the following expression: {{$json[\"_id\"]}} . Click on the Add Property button. Click on the Add Field button. Select 'Name (PlainText) (required)' from the Field ID dropdown list. If you're using a different collection type, select the field present in that collection. Click on the gears icon next to the Field Value field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > name. You can also add the following expression: {{$json[\"name\"]}} . Click on the Add Field button. Select 'Slug (PlainText) (required)' from the Field ID dropdown list. If you're using a different collection type, select the field present in that collection. Click on the gears icon next to the Field Value field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > slug. You can also add the following expression: {{$json[\"slug\"]}} . Click on the Add Field button. Select 'Archived (Bool) (required)' from the Field ID dropdown list. If you're using a different collection type, select the field present in that collection. Click on the gears icon next to the Field Value field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > _archived. You can also add the following expression: {{$json[\"_archived\"]}} . Click on the Add Field button. Select 'Draft (Bool) (required)' from the Field ID dropdown list. If you're using a different collection type, select the field present in that collection. Click on the gears icon next to the Field Value field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > _draft. You can also add the following expression: {{$json[\"_draft\"]}} . Click on the Add Field button. Select 'Avatar (ImageRef)' from the Field ID dropdown list. If you're using a different collection type, select the field present in that collection. Enter https://n8n.io/n8n-logo.png in the Value field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node updates the item that got created previously.","title":"3. Webflow1 node (update: item)"},{"location":"integrations/nodes/n8n-nodes-base.webflow/#4-webflow2-node-get-item","text":"This node will retrieve the information about the item that we created earlier. Select the credentials that you entered in the previous Webflow node. Select your site from the Site ID dropdown list. Select 'Team Members' from the Collection ID dropdown list. Click on the gears icon next to the Item ID field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > _id. You can also add the following expression: {{$json[\"_id\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node retrieves the information of the item that we created earlier.","title":"4. Webflow2 node (get: item)"},{"location":"integrations/nodes/n8n-nodes-base.wekan/","text":"Wekan # Wekan is an open-source kanban board that allows a card-based task and to-do management. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Board Create a new board Delete a board Get the data of a board Get all user boards Card Create a new card Delete a card Get a card Get all cards Update a card Card Comment Create a comment on a card Delete a comment from a card Get a card comment Get all card comments Checklist Create a new checklist Delete a checklist Get the data of a checklist Returns all checklists for the card Checklist Item Delete a checklist item Get a checklist item Update a checklist item List Create a new list Delete a list Get the data of a list Get all board lists Example Usage # This workflow allows you to create a board and two lists called To Do and Done using the Wekan node. It also allows you to create a card and update the list ID of the card, enabling you to move it from the To Do list to the Done list. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - Wekan The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Wekan node (create: board) # This node will create a board called Documentation in Wekan. To create a board with a different name, you can enter the name of your board instead. First of all, you'll have to enter credentials for the Wekan node. You can find out how to do that here . Select 'Board' from the Resource dropdown list. Enter Documentation in the Title field. Select the owner of the board from the Owner dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new board with the title Documentation . 3. Wekan1 node (create: list) # This node will create a list with the title To Do in the Documentation board, which was created using the previous node. Select the credentials that you entered in the previous node. Select 'List' from the Resource dropdown list. Click on the gears icon next to the Board ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Wekan > Output Data > JSON > _id. You can also add the following expression: {{$node[\"Wekan\"].json[\"_id\"]}} . Enter To Do in the Title field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new list called To Do in the Documentation board. 4. Wekan2 node (create: list) # This node will create a list with the title Done in the Documentation board, which was created using the Wekan node. Select the credentials that you entered in the previous node. Select 'List' from the Resource dropdown list. Click on the gears icon next to the Board ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Wekan > Output Data > JSON > _id. You can also add the following expression: {{$node[\"Wekan\"].json[\"_id\"]}} . Enter Done in the Title field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new list called Done in the Documentation board. 5. Wekan3 node (create: card) # This node will create a card in the Documentation board under the list titled To Do , which was created using the Wekan1 node. Select the credentials that you entered in the previous node. Click on the gears icon next to the Board ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Wekan > Output Data > JSON > _id. You can also add the following expression: {{$node[\"Wekan\"].json[\"_id\"]}} . Click on the gears icon next to the List ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Wekan1 > Output Data > JSON > _id. You can also add the following expression: {{$node[\"Wekan1\"].json[\"_id\"]}} . Enter Document Wekan node in the Title field. Select 'Default' from the Swimlane ID dropdown list. Select an author from the Author ID dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new card with the title Document Wekan node in the To Do list of the Documentation board. 6. Wekan4 node (update: card) # This node will update the list ID of the card created by the previous node and move it from the To Do list to the Done list. Select the credentials that you entered in the previous node. Select 'Update' from the Operation dropdown list. Click on the gears icon next to the Board ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Wekan > Output Data > JSON > _id. You can also add the following expression: {{$node[\"Wekan\"].json[\"_id\"]}} . Click on the gears icon next to the List ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Wekan1 > Output Data > JSON > _id. You can also add the following expression: {{$node[\"Wekan1\"].json[\"_id\"]}} . Click on the gears icon next to the Card ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Wekan3 > Output Data > JSON > _id. You can also add the following expression: {{$node[\"Wekan3\"].json[\"_id\"]}} . Click on the Add Field button and select 'List ID'. Click on the gears icon next to the List ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Wekan2 > Output Data > JSON > _id. You can also add the following expression: {{$node[\"Wekan2\"].json[\"_id\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node updates the list id of the card that we created in the previous node and moves it from the To Do list to the Done list. FAQs # How to load all the parameters for the node? # To load all the parameters, for example, Author ID, you need to give admin permissions to the user. Refer to the Wekan documentation to learn how to change permissions.","title":"Wekan"},{"location":"integrations/nodes/n8n-nodes-base.wekan/#wekan","text":"Wekan is an open-source kanban board that allows a card-based task and to-do management. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Wekan"},{"location":"integrations/nodes/n8n-nodes-base.wekan/#basic-operations","text":"Board Create a new board Delete a board Get the data of a board Get all user boards Card Create a new card Delete a card Get a card Get all cards Update a card Card Comment Create a comment on a card Delete a comment from a card Get a card comment Get all card comments Checklist Create a new checklist Delete a checklist Get the data of a checklist Returns all checklists for the card Checklist Item Delete a checklist item Get a checklist item Update a checklist item List Create a new list Delete a list Get the data of a list Get all board lists","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.wekan/#example-usage","text":"This workflow allows you to create a board and two lists called To Do and Done using the Wekan node. It also allows you to create a card and update the list ID of the card, enabling you to move it from the To Do list to the Done list. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - Wekan The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.wekan/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.wekan/#2-wekan-node-create-board","text":"This node will create a board called Documentation in Wekan. To create a board with a different name, you can enter the name of your board instead. First of all, you'll have to enter credentials for the Wekan node. You can find out how to do that here . Select 'Board' from the Resource dropdown list. Enter Documentation in the Title field. Select the owner of the board from the Owner dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new board with the title Documentation .","title":"2. Wekan node (create: board)"},{"location":"integrations/nodes/n8n-nodes-base.wekan/#3-wekan1-node-create-list","text":"This node will create a list with the title To Do in the Documentation board, which was created using the previous node. Select the credentials that you entered in the previous node. Select 'List' from the Resource dropdown list. Click on the gears icon next to the Board ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Wekan > Output Data > JSON > _id. You can also add the following expression: {{$node[\"Wekan\"].json[\"_id\"]}} . Enter To Do in the Title field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new list called To Do in the Documentation board.","title":"3. Wekan1 node (create: list)"},{"location":"integrations/nodes/n8n-nodes-base.wekan/#4-wekan2-node-create-list","text":"This node will create a list with the title Done in the Documentation board, which was created using the Wekan node. Select the credentials that you entered in the previous node. Select 'List' from the Resource dropdown list. Click on the gears icon next to the Board ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Wekan > Output Data > JSON > _id. You can also add the following expression: {{$node[\"Wekan\"].json[\"_id\"]}} . Enter Done in the Title field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new list called Done in the Documentation board.","title":"4. Wekan2 node (create: list)"},{"location":"integrations/nodes/n8n-nodes-base.wekan/#5-wekan3-node-create-card","text":"This node will create a card in the Documentation board under the list titled To Do , which was created using the Wekan1 node. Select the credentials that you entered in the previous node. Click on the gears icon next to the Board ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Wekan > Output Data > JSON > _id. You can also add the following expression: {{$node[\"Wekan\"].json[\"_id\"]}} . Click on the gears icon next to the List ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Wekan1 > Output Data > JSON > _id. You can also add the following expression: {{$node[\"Wekan1\"].json[\"_id\"]}} . Enter Document Wekan node in the Title field. Select 'Default' from the Swimlane ID dropdown list. Select an author from the Author ID dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new card with the title Document Wekan node in the To Do list of the Documentation board.","title":"5. Wekan3 node (create: card)"},{"location":"integrations/nodes/n8n-nodes-base.wekan/#6-wekan4-node-update-card","text":"This node will update the list ID of the card created by the previous node and move it from the To Do list to the Done list. Select the credentials that you entered in the previous node. Select 'Update' from the Operation dropdown list. Click on the gears icon next to the Board ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Wekan > Output Data > JSON > _id. You can also add the following expression: {{$node[\"Wekan\"].json[\"_id\"]}} . Click on the gears icon next to the List ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Wekan1 > Output Data > JSON > _id. You can also add the following expression: {{$node[\"Wekan1\"].json[\"_id\"]}} . Click on the gears icon next to the Card ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Wekan3 > Output Data > JSON > _id. You can also add the following expression: {{$node[\"Wekan3\"].json[\"_id\"]}} . Click on the Add Field button and select 'List ID'. Click on the gears icon next to the List ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Wekan2 > Output Data > JSON > _id. You can also add the following expression: {{$node[\"Wekan2\"].json[\"_id\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node updates the list id of the card that we created in the previous node and moves it from the To Do list to the Done list.","title":"6. Wekan4 node (update: card)"},{"location":"integrations/nodes/n8n-nodes-base.wekan/#faqs","text":"","title":"FAQs"},{"location":"integrations/nodes/n8n-nodes-base.wekan/#how-to-load-all-the-parameters-for-the-node","text":"To load all the parameters, for example, Author ID, you need to give admin permissions to the user. Refer to the Wekan documentation to learn how to change permissions.","title":"How to load all the parameters for the node?"},{"location":"integrations/nodes/n8n-nodes-base.wise/","text":"Wise # Wise allows you to transfer money abroad with low-cost money transfers, receive money with international account details, and track transactions on your phone. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Account Retrieve balances for all account currencies of this user. Retrieve currencies in the borderless account of this user. Retrieve the statement for the borderless account of this user. Exchange Rate Get Profile Get Get All Recipient Get All Quote Create Get Transfer Create Delete Execute Get Get All Example Usage # This workflow allows you to create a quote and a transfer, execute the transfer, and get the information of the transfer using the Wise node. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - Wise The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Wise node (create: quote) # This node will create a new quote in Wise. First of all, you'll have to enter credentials for the Wise node. You can find out how to do that here . Select 'Quote' from the Resource dropdown list. Select 'Create' from the Operation dropdown list. Select a profile from the Profile ID dropdown list. Select a target account from the Target Account ID dropdown list. Enter an amount in the Amount field. Enter the source currency in the Source Currency field. Enter the target currency in the Target Currency field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new quote. 3. Wise1 node (create: transfer) # This node will create a new transfer for the quote that we created in the previous node. Select the credentials that you entered in the previous node. Select 'Transfer' from the Resource dropdown list. Select a profile from the Profile ID dropdown list. Click on the gears icon next to the Quote ID field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > id. You can also add the following expression: {{$json[\"id\"]}} . Select the target account from the Target Account ID dropdown list. Click on the Add Field button. Enter a description in the Reference field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new transfer for the quote that we created in the previous node. 4. Wise2 node (execute: transfer) # This node will execute the transfer that we created in the previous node. Select the credentials that you entered in the previous node. Select 'Transfer' from the Resource dropdown list. Select 'Execute' from the Operation dropdown list. Select a profile from the Profile ID dropdown list. Click on the gears icon next to the Transfer ID field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > id. You can also add the following expression: {{$json[\"id\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the executes the transfer that we created in the previous node. 5. Wise3 node (get: transfer) # This node will return the information of the transfer that we executed in the previous node. Select the credentials that you entered in the previous node. Select 'Transfer' from the Resource dropdown list. Select 'Get' from the Operation dropdown list. Click on the gears icon next to the Transfer ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Wise1 > Output Data > JSON > id. You can also add the following expression: {{$node[\"Wise1\"].json[\"id\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the information about the transfer that we executed in the previous node.","title":"Wise"},{"location":"integrations/nodes/n8n-nodes-base.wise/#wise","text":"Wise allows you to transfer money abroad with low-cost money transfers, receive money with international account details, and track transactions on your phone. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Wise"},{"location":"integrations/nodes/n8n-nodes-base.wise/#basic-operations","text":"Account Retrieve balances for all account currencies of this user. Retrieve currencies in the borderless account of this user. Retrieve the statement for the borderless account of this user. Exchange Rate Get Profile Get Get All Recipient Get All Quote Create Get Transfer Create Delete Execute Get Get All","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.wise/#example-usage","text":"This workflow allows you to create a quote and a transfer, execute the transfer, and get the information of the transfer using the Wise node. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - Wise The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.wise/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.wise/#2-wise-node-create-quote","text":"This node will create a new quote in Wise. First of all, you'll have to enter credentials for the Wise node. You can find out how to do that here . Select 'Quote' from the Resource dropdown list. Select 'Create' from the Operation dropdown list. Select a profile from the Profile ID dropdown list. Select a target account from the Target Account ID dropdown list. Enter an amount in the Amount field. Enter the source currency in the Source Currency field. Enter the target currency in the Target Currency field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new quote.","title":"2. Wise node (create: quote)"},{"location":"integrations/nodes/n8n-nodes-base.wise/#3-wise1-node-create-transfer","text":"This node will create a new transfer for the quote that we created in the previous node. Select the credentials that you entered in the previous node. Select 'Transfer' from the Resource dropdown list. Select a profile from the Profile ID dropdown list. Click on the gears icon next to the Quote ID field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > id. You can also add the following expression: {{$json[\"id\"]}} . Select the target account from the Target Account ID dropdown list. Click on the Add Field button. Enter a description in the Reference field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new transfer for the quote that we created in the previous node.","title":"3. Wise1 node (create: transfer)"},{"location":"integrations/nodes/n8n-nodes-base.wise/#4-wise2-node-execute-transfer","text":"This node will execute the transfer that we created in the previous node. Select the credentials that you entered in the previous node. Select 'Transfer' from the Resource dropdown list. Select 'Execute' from the Operation dropdown list. Select a profile from the Profile ID dropdown list. Click on the gears icon next to the Transfer ID field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > id. You can also add the following expression: {{$json[\"id\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the executes the transfer that we created in the previous node.","title":"4. Wise2 node (execute: transfer)"},{"location":"integrations/nodes/n8n-nodes-base.wise/#5-wise3-node-get-transfer","text":"This node will return the information of the transfer that we executed in the previous node. Select the credentials that you entered in the previous node. Select 'Transfer' from the Resource dropdown list. Select 'Get' from the Operation dropdown list. Click on the gears icon next to the Transfer ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Wise1 > Output Data > JSON > id. You can also add the following expression: {{$node[\"Wise1\"].json[\"id\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the information about the transfer that we executed in the previous node.","title":"5. Wise3 node (get: transfer)"},{"location":"integrations/nodes/n8n-nodes-base.wooCommerce/","text":"WooCommerce # WooCommerce is a customizable, open-source e-commerce plugin for WordPress. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Customer Create a customer Delete a customer Retrieve a customer Retrieve all customers Update a customer Order Create a order Delete a order Get a order Get all orders Update an order Product Create a product Delete a product Get a product Get all products Update a product Example Usage # This workflow allows you to create, update, and get a product from WooCommerce. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - WooCommerce The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. WooCommerce node (create: product) # This node will create a new product in WooCommerce. First of all, you'll have to enter credentials for the WooCommerce node. You can find out how to do that here . Enter the product name in the Name field. Click on Add Field and select 'Description'. Enter a description in the Description field. Click on Add Field and select 'Regular Price'. Enter the price in the Regular Price field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new product. 3. WooCommerce1 node (update: product) # This node will update the product that we created in the previous node. We will update the quantity of the product. Select the credentials that you entered in the previous node. Select 'Update' from the Operation dropdown list. Click on the gears icon next to the Product ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > WooCommerce > Output Data > JSON > id. You can also add the following expression: {{$node[\"WooCommerce\"].json[\"id\"]}} . Click on Add Field and select 'Stock Quantity'. Set the quantity in the Stock Quantity field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node updates the quantity of the product that we created in the previous node. 4. WooCommerce2 node (get: product) # This node will get the information about the product that we created using the WooCommerce node. Select the credentials that you entered in the previous node. Select 'Update' from the Operation dropdown list. Click on the gears icon next to the Product ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > WooCommerce > Output Data > JSON > id. You can also add the following expression: {{$node[\"WooCommerce\"].json[\"id\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the information about the product that we created using the WooCommerce node.","title":"WooCommerce"},{"location":"integrations/nodes/n8n-nodes-base.wooCommerce/#woocommerce","text":"WooCommerce is a customizable, open-source e-commerce plugin for WordPress. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"WooCommerce"},{"location":"integrations/nodes/n8n-nodes-base.wooCommerce/#basic-operations","text":"Customer Create a customer Delete a customer Retrieve a customer Retrieve all customers Update a customer Order Create a order Delete a order Get a order Get all orders Update an order Product Create a product Delete a product Get a product Get all products Update a product","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.wooCommerce/#example-usage","text":"This workflow allows you to create, update, and get a product from WooCommerce. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - WooCommerce The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.wooCommerce/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.wooCommerce/#2-woocommerce-node-create-product","text":"This node will create a new product in WooCommerce. First of all, you'll have to enter credentials for the WooCommerce node. You can find out how to do that here . Enter the product name in the Name field. Click on Add Field and select 'Description'. Enter a description in the Description field. Click on Add Field and select 'Regular Price'. Enter the price in the Regular Price field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a new product.","title":"2. WooCommerce node (create: product)"},{"location":"integrations/nodes/n8n-nodes-base.wooCommerce/#3-woocommerce1-node-update-product","text":"This node will update the product that we created in the previous node. We will update the quantity of the product. Select the credentials that you entered in the previous node. Select 'Update' from the Operation dropdown list. Click on the gears icon next to the Product ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > WooCommerce > Output Data > JSON > id. You can also add the following expression: {{$node[\"WooCommerce\"].json[\"id\"]}} . Click on Add Field and select 'Stock Quantity'. Set the quantity in the Stock Quantity field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node updates the quantity of the product that we created in the previous node.","title":"3. WooCommerce1 node (update: product)"},{"location":"integrations/nodes/n8n-nodes-base.wooCommerce/#4-woocommerce2-node-get-product","text":"This node will get the information about the product that we created using the WooCommerce node. Select the credentials that you entered in the previous node. Select 'Update' from the Operation dropdown list. Click on the gears icon next to the Product ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > WooCommerce > Output Data > JSON > id. You can also add the following expression: {{$node[\"WooCommerce\"].json[\"id\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the information about the product that we created using the WooCommerce node.","title":"4. WooCommerce2 node (get: product)"},{"location":"integrations/nodes/n8n-nodes-base.wordpress/","text":"WordPress # WordPress is a free and open-source content management system written in PHP and paired with a MySQL or MariaDB database. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Post Create a post Get a post Get all posts Update a post User Create a user Get a user Get all users Update a user Example Usage # This workflow allows you to create and update a post in WordPress. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - WordPress The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Wordpress node (create: post) # First of all, you'll have to enter credentials for the WordPress node. You can find out how to do that here . Enter the title in the Title field. Click on Execute Node to run the workflow. 3. Wordpress1 node (update: post) # Select the credentials that you entered in the previous node. Select 'Update' from the Operation dropdown list. Click on the gears icon next to the Post ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Wordpress > Output Data > JSON > id. You can also add the following expression: {{$node[\"Wordpress\"].json[\"id\"]}} . Click on the Add Field button and select 'Content' from the dropdown list. Enter the content in the Content filed. Click on Execute Node to run the workflow.","title":"WordPress"},{"location":"integrations/nodes/n8n-nodes-base.wordpress/#wordpress","text":"WordPress is a free and open-source content management system written in PHP and paired with a MySQL or MariaDB database. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"WordPress"},{"location":"integrations/nodes/n8n-nodes-base.wordpress/#basic-operations","text":"Post Create a post Get a post Get all posts Update a post User Create a user Get a user Get all users Update a user","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.wordpress/#example-usage","text":"This workflow allows you to create and update a post in WordPress. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - WordPress The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.wordpress/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.wordpress/#2-wordpress-node-create-post","text":"First of all, you'll have to enter credentials for the WordPress node. You can find out how to do that here . Enter the title in the Title field. Click on Execute Node to run the workflow.","title":"2. Wordpress node (create: post)"},{"location":"integrations/nodes/n8n-nodes-base.wordpress/#3-wordpress1-node-update-post","text":"Select the credentials that you entered in the previous node. Select 'Update' from the Operation dropdown list. Click on the gears icon next to the Post ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Wordpress > Output Data > JSON > id. You can also add the following expression: {{$node[\"Wordpress\"].json[\"id\"]}} . Click on the Add Field button and select 'Content' from the dropdown list. Enter the content in the Content filed. Click on Execute Node to run the workflow.","title":"3. Wordpress1 node (update: post)"},{"location":"integrations/nodes/n8n-nodes-base.xero/","text":"Xero # Xero offers an online cloud-based SaaS accounting software platform for small and medium-sized businesses. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Contact Create a contact Get a contact Get all contacts Update a contact Invoice Create a invoice Get a invoice Get all invoices Update a invoice Example Usage # This workflow allows you to get upto 100 invoices from Xero. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Xero The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Xero node # First of all, you'll have to enter credentials for the Xero node. You can find out how to do that here . Select 'Get All' from the Operation dropdown list. Select the organization for which you want to get the invoices from the Organization ID dropdown list. Click on Execute Node to run the workflow.","title":"Xero"},{"location":"integrations/nodes/n8n-nodes-base.xero/#xero","text":"Xero offers an online cloud-based SaaS accounting software platform for small and medium-sized businesses. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Xero"},{"location":"integrations/nodes/n8n-nodes-base.xero/#basic-operations","text":"Contact Create a contact Get a contact Get all contacts Update a contact Invoice Create a invoice Get a invoice Get all invoices Update a invoice","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.xero/#example-usage","text":"This workflow allows you to get upto 100 invoices from Xero. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Xero The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.xero/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.xero/#2-xero-node","text":"First of all, you'll have to enter credentials for the Xero node. You can find out how to do that here . Select 'Get All' from the Operation dropdown list. Select the organization for which you want to get the invoices from the Organization ID dropdown list. Click on Execute Node to run the workflow.","title":"2. Xero node"},{"location":"integrations/nodes/n8n-nodes-base.youTube/","text":"YouTube # YouTube is an online video-sharing platform. YouTube allows users to upload, view, rate, share, add to playlists, report, comment on videos, and subscribe to other users. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Channel Retrieve a channel Retrieve all channels Update a channel Upload a channel banner Playlist Create a playlist Delete a playlist Get a playlist Retrieve all playlists Update a playlist Playlist Item Add an item to a playlist Delete a item from a playlist Get a playlist's item Retrieve all playlist items Video Delete a video Get a video Retrieve all videos Rate a video Update a video Upload a video Video Category Retrieve all video categories Example Usage # This workflow allows you to upload a video, create a playlist, and add the video to the playlist in YouTube. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Read Binary File - YouTube The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Read Binary File node # Enter the path to the video file you want to upload in the File Path field. Click on Execute Node to run the node. 3. YouTube node (upload: video) # First of all, you'll have to enter credentials for the YouTube node. You can find out how to do that here . Select 'Video' from the Resource dropdown list. Select 'Upload' from the Operation dropdown list. Enter the title of the video in the Title field. Select the region code from Region Code dropdown list. Select the video category from the Category ID dropdown list. Click on Execute Node to run the node. 4. YouTube1 node (create: playlist) # Select the credentials that you entered in the previous YouTube node. Select 'Playlist' from the Resource dropdown list. Select 'Create' from the Operation dropdown list. Enter the title of the playlist in the Title field. Click on Execute Node to run the node. 5. YouTube2 node (add: playlistItem) # Select the credentials that you entered in the previous YouTube node. Select 'Playlist Item' from the Resource dropdown list. Select the playlist from the Playlist ID dropdown list. Click on the gears icon next to the Video ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > YouTube > Output Data > JSON > id. You can also add the following expression: {{$node[\"YouTube\"].json[\"id\"]}} . Click on Execute Node to run the node.","title":"YouTube"},{"location":"integrations/nodes/n8n-nodes-base.youTube/#youtube","text":"YouTube is an online video-sharing platform. YouTube allows users to upload, view, rate, share, add to playlists, report, comment on videos, and subscribe to other users. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"YouTube"},{"location":"integrations/nodes/n8n-nodes-base.youTube/#basic-operations","text":"Channel Retrieve a channel Retrieve all channels Update a channel Upload a channel banner Playlist Create a playlist Delete a playlist Get a playlist Retrieve all playlists Update a playlist Playlist Item Add an item to a playlist Delete a item from a playlist Get a playlist's item Retrieve all playlist items Video Delete a video Get a video Retrieve all videos Rate a video Update a video Upload a video Video Category Retrieve all video categories","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.youTube/#example-usage","text":"This workflow allows you to upload a video, create a playlist, and add the video to the playlist in YouTube. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Start - Read Binary File - YouTube The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.youTube/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.youTube/#2-read-binary-file-node","text":"Enter the path to the video file you want to upload in the File Path field. Click on Execute Node to run the node.","title":"2. Read Binary File node"},{"location":"integrations/nodes/n8n-nodes-base.youTube/#3-youtube-node-upload-video","text":"First of all, you'll have to enter credentials for the YouTube node. You can find out how to do that here . Select 'Video' from the Resource dropdown list. Select 'Upload' from the Operation dropdown list. Enter the title of the video in the Title field. Select the region code from Region Code dropdown list. Select the video category from the Category ID dropdown list. Click on Execute Node to run the node.","title":"3. YouTube node (upload: video)"},{"location":"integrations/nodes/n8n-nodes-base.youTube/#4-youtube1-node-create-playlist","text":"Select the credentials that you entered in the previous YouTube node. Select 'Playlist' from the Resource dropdown list. Select 'Create' from the Operation dropdown list. Enter the title of the playlist in the Title field. Click on Execute Node to run the node.","title":"4. YouTube1 node (create: playlist)"},{"location":"integrations/nodes/n8n-nodes-base.youTube/#5-youtube2-node-add-playlistitem","text":"Select the credentials that you entered in the previous YouTube node. Select 'Playlist Item' from the Resource dropdown list. Select the playlist from the Playlist ID dropdown list. Click on the gears icon next to the Video ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > YouTube > Output Data > JSON > id. You can also add the following expression: {{$node[\"YouTube\"].json[\"id\"]}} . Click on Execute Node to run the node.","title":"5. YouTube2 node (add: playlistItem)"},{"location":"integrations/nodes/n8n-nodes-base.yourls/","text":"Yourls # Yourls is a free and open-source software that allows you to run your URL shortening service. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # URL Expand a URL Shorten a URL Get stats about one short URL Example Usage # This workflow allows you to create a short URL and get the statistics of the URL. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - Yourls The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Yourls node (shorten: url) # This node will create a short URL for the link we specify. First of all, you'll have to enter credentials for the Yourls node. You can find out how to do that here . Enter the URL that you want to shorten in the URL field. Click on Add Field and select 'Title'. Enter a title in the Title field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a short URL for the URL you specified. 3. Yourls1 node (stats: url) # This node will give us the statistics of the short URL that we specify. We will get the statistics for the URL that we created in the previous step. Select the credentials that you entered in the previous node. Select 'Stats' from the Operation dropdown list. Click on the gears icon next to the Short URL field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Yourls > Output Data > JSON > shorturl. You can also add the following expression: {{$node[\"Yourls\"].json[\"shorturl\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node gives us the statistics of the short URL that we created in the previous node.","title":"Yourls"},{"location":"integrations/nodes/n8n-nodes-base.yourls/#yourls","text":"Yourls is a free and open-source software that allows you to run your URL shortening service. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Yourls"},{"location":"integrations/nodes/n8n-nodes-base.yourls/#basic-operations","text":"URL Expand a URL Shorten a URL Get stats about one short URL","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.yourls/#example-usage","text":"This workflow allows you to create a short URL and get the statistics of the URL. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Start - Yourls The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.yourls/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.yourls/#2-yourls-node-shorten-url","text":"This node will create a short URL for the link we specify. First of all, you'll have to enter credentials for the Yourls node. You can find out how to do that here . Enter the URL that you want to shorten in the URL field. Click on Add Field and select 'Title'. Enter a title in the Title field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node creates a short URL for the URL you specified.","title":"2. Yourls node (shorten: url)"},{"location":"integrations/nodes/n8n-nodes-base.yourls/#3-yourls1-node-stats-url","text":"This node will give us the statistics of the short URL that we specify. We will get the statistics for the URL that we created in the previous step. Select the credentials that you entered in the previous node. Select 'Stats' from the Operation dropdown list. Click on the gears icon next to the Short URL field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Yourls > Output Data > JSON > shorturl. You can also add the following expression: {{$node[\"Yourls\"].json[\"shorturl\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node gives us the statistics of the short URL that we created in the previous node.","title":"3. Yourls1 node (stats: url)"},{"location":"integrations/nodes/n8n-nodes-base.zammad/","text":"Zammad # Zammad is a free helpdesk and issue tracking system. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Group Create a group Delete a group Retrieve a group Get all groups Update a group Organization Create an organization Delete an organization Retrieve an organization Retrieve all organizations Update an organization Ticket Create a ticket Delete a ticket Retrieve a ticket Retrieve all tickets User Create a user Delete a user Retrieve a user Retrieve all users Retrieve currently logged-in user Update a user","title":"Zammad"},{"location":"integrations/nodes/n8n-nodes-base.zammad/#zammad","text":"Zammad is a free helpdesk and issue tracking system. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Zammad"},{"location":"integrations/nodes/n8n-nodes-base.zammad/#basic-operations","text":"Group Create a group Delete a group Retrieve a group Get all groups Update a group Organization Create an organization Delete an organization Retrieve an organization Retrieve all organizations Update an organization Ticket Create a ticket Delete a ticket Retrieve a ticket Retrieve all tickets User Create a user Delete a user Retrieve a user Retrieve all users Retrieve currently logged-in user Update a user","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.zendesk/","text":"Zendesk # Zendesk is a support ticketing system, designed to help track, prioritize, and solve customer support interactions. More than just a help desk, Zendesk Support helps nurture customer relationships with personalized, responsive support across any channel. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Ticket Create a ticket Delete a ticket Get a ticket Get all tickets Recover a suspended ticket Update a ticket Ticket Field Get a ticket field Get all system and custom ticket fields User Create a user Delete a user Get a user Get all users Get a user's organizations Get data related to the user Search users Update a user Organization Create an organization Delete an organization Count organizations Get an organization Get all organizations Get data related to the organization Update a organization Example Usage # This workflow allows you to create a ticket in Zendesk. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Zendesk The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Zendesk node # First of all, you'll have to enter credentials for the Zendesk node. You can find out how to do that here . Enter the description of the ticket in the Description field. Click on Execute Node to run the workflow.","title":"Zendesk"},{"location":"integrations/nodes/n8n-nodes-base.zendesk/#zendesk","text":"Zendesk is a support ticketing system, designed to help track, prioritize, and solve customer support interactions. More than just a help desk, Zendesk Support helps nurture customer relationships with personalized, responsive support across any channel. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Zendesk"},{"location":"integrations/nodes/n8n-nodes-base.zendesk/#basic-operations","text":"Ticket Create a ticket Delete a ticket Get a ticket Get all tickets Recover a suspended ticket Update a ticket Ticket Field Get a ticket field Get all system and custom ticket fields User Create a user Delete a user Get a user Get all users Get a user's organizations Get data related to the user Search users Update a user Organization Create an organization Delete an organization Count organizations Get an organization Get all organizations Get data related to the organization Update a organization","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.zendesk/#example-usage","text":"This workflow allows you to create a ticket in Zendesk. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Zendesk The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.zendesk/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.zendesk/#2-zendesk-node","text":"First of all, you'll have to enter credentials for the Zendesk node. You can find out how to do that here . Enter the description of the ticket in the Description field. Click on Execute Node to run the workflow.","title":"2. Zendesk node"},{"location":"integrations/nodes/n8n-nodes-base.zohoCrm/","text":"Zoho CRM # Zoho CRM is an online Sales CRM software that manages sales, marketing and support. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Account Create an account Create a new record, or update the current one if it already exists (upsert) Delete an account Get an account Get all accounts Update an account Contact Create a contact Create a new record, or update the current one if it already exists (upsert) Delete a contact Get a contact Get all contacts Update a contact Deal Create a deal Create a new record, or update the current one if it already exists (upsert) Delete a contact Get a contact Get all contacts Update a contact Invoice Create an invoice Create a new record, or update the current one if it already exists (upsert) Delete an invoice Get an invoice Get all invoices Update an invoice Lead Create a lead Create a new record, or update the current one if it already exists (upsert) Delete a lead Get a lead Get all leads Get lead fields Update a lead Product Create a product Create a new record, or update the current one if it already exists (upsert) Delete a product Get a product Get all products Update a product Purchase Order Create a purchase order Create a new record, or update the current one if it already exists (upsert) Delete a purchase order Get a purchase order Get all purchase orders Update a purchase order Quote Create a quote Create a new record, or update the current one if it already exists (upsert) Delete a quote Get a quote Get all quotes Update a quote Sales Order Create a sales order Create a new record, or update the current one if it already exists (upsert) Delete a sales order Get a sales order Get all sales orders Update a sales order Vendor Create a vendor Create a new record, or update the current one if it already exists (upsert) Delete a vendor Get a vendor Get all vendors Update a vendor Example Usage # This workflow allows you to get the data of all leads from Zoho CRM. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Zoho CRM The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Zoho CRM node # First of all, you'll have to enter credentials for the Zoho CRM node. You can find out how to do that here . Select the 'Get All' option from the Operation dropdown list. Click on Execute Node to run the workflow.","title":"Zoho CRM"},{"location":"integrations/nodes/n8n-nodes-base.zohoCrm/#zoho-crm","text":"Zoho CRM is an online Sales CRM software that manages sales, marketing and support. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Zoho CRM"},{"location":"integrations/nodes/n8n-nodes-base.zohoCrm/#basic-operations","text":"Account Create an account Create a new record, or update the current one if it already exists (upsert) Delete an account Get an account Get all accounts Update an account Contact Create a contact Create a new record, or update the current one if it already exists (upsert) Delete a contact Get a contact Get all contacts Update a contact Deal Create a deal Create a new record, or update the current one if it already exists (upsert) Delete a contact Get a contact Get all contacts Update a contact Invoice Create an invoice Create a new record, or update the current one if it already exists (upsert) Delete an invoice Get an invoice Get all invoices Update an invoice Lead Create a lead Create a new record, or update the current one if it already exists (upsert) Delete a lead Get a lead Get all leads Get lead fields Update a lead Product Create a product Create a new record, or update the current one if it already exists (upsert) Delete a product Get a product Get all products Update a product Purchase Order Create a purchase order Create a new record, or update the current one if it already exists (upsert) Delete a purchase order Get a purchase order Get all purchase orders Update a purchase order Quote Create a quote Create a new record, or update the current one if it already exists (upsert) Delete a quote Get a quote Get all quotes Update a quote Sales Order Create a sales order Create a new record, or update the current one if it already exists (upsert) Delete a sales order Get a sales order Get all sales orders Update a sales order Vendor Create a vendor Create a new record, or update the current one if it already exists (upsert) Delete a vendor Get a vendor Get all vendors Update a vendor","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.zohoCrm/#example-usage","text":"This workflow allows you to get the data of all leads from Zoho CRM. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Zoho CRM The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.zohoCrm/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.zohoCrm/#2-zoho-crm-node","text":"First of all, you'll have to enter credentials for the Zoho CRM node. You can find out how to do that here . Select the 'Get All' option from the Operation dropdown list. Click on Execute Node to run the workflow.","title":"2. Zoho CRM node"},{"location":"integrations/nodes/n8n-nodes-base.zoom/","text":"Zoom # Zoom is a communications technology company that provides videotelephony and online chat services through a cloud-based peer-to-peer software platform and is used for teleconferencing, telecommuting, distance education, and social relations. \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Meeting Create a meeting Delete a meeting Retrieve a meeting Retrieve all meetings Update a meeting Example Usage # This workflow allows you to create a meeting in Zoom. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Zoom The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Zoom node # First of all, you'll have to enter credentials for the Zoom node. You can find out how to do that here . Enter the topic of the meeting in the Topic field. Click on Execute Node to run the workflow.","title":"Zoom"},{"location":"integrations/nodes/n8n-nodes-base.zoom/#zoom","text":"Zoom is a communications technology company that provides videotelephony and online chat services through a cloud-based peer-to-peer software platform and is used for teleconferencing, telecommuting, distance education, and social relations. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Zoom"},{"location":"integrations/nodes/n8n-nodes-base.zoom/#basic-operations","text":"Meeting Create a meeting Delete a meeting Retrieve a meeting Retrieve all meetings Update a meeting","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.zoom/#example-usage","text":"This workflow allows you to create a meeting in Zoom. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Zoom The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.zoom/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.zoom/#2-zoom-node","text":"First of all, you'll have to enter credentials for the Zoom node. You can find out how to do that here . Enter the topic of the meeting in the Topic field. Click on Execute Node to run the workflow.","title":"2. Zoom node"},{"location":"integrations/nodes/n8n-nodes-base.zulip/","text":"Zulip # Zulip is an open source chat and collaborative software. In Zulip, communication occurs in streams (which are like channels in IRC). \ud83d\udd11 Credentials You can find authentication information for this node here . Basic Operations # Message Delete a message Get a message Send a private message Send a message to stream Update a message Upload a file Stream Create a stream. Delete a stream. Get all streams. Get subscribed streams. Update a stream. User Create a user. Deactivate a user. Get a user. Get all users. Update a user. Example Usage # This workflow allows you to send a private message on Zulip. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Zulip The final workflow should look like the following image. 1. Start node # The start node exists by default when you create a new workflow. 2. Zulip node # First of all, you'll have to enter credentials for the Zulip node. You can find out how to do that here . Select the user you want to send a private message to from the To dropdown list. Type the message you want to post in the Content field. Click on Execute Node to run the workflow.","title":"Zulip"},{"location":"integrations/nodes/n8n-nodes-base.zulip/#zulip","text":"Zulip is an open source chat and collaborative software. In Zulip, communication occurs in streams (which are like channels in IRC). \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Zulip"},{"location":"integrations/nodes/n8n-nodes-base.zulip/#basic-operations","text":"Message Delete a message Get a message Send a private message Send a message to stream Update a message Upload a file Stream Create a stream. Delete a stream. Get all streams. Get subscribed streams. Update a stream. User Create a user. Deactivate a user. Get a user. Get all users. Update a user.","title":"Basic Operations"},{"location":"integrations/nodes/n8n-nodes-base.zulip/#example-usage","text":"This workflow allows you to send a private message on Zulip. You can also find the workflow on the website. This example usage workflow would use the following two nodes. - Start - Zulip The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/nodes/n8n-nodes-base.zulip/#1-start-node","text":"The start node exists by default when you create a new workflow.","title":"1. Start node"},{"location":"integrations/nodes/n8n-nodes-base.zulip/#2-zulip-node","text":"First of all, you'll have to enter credentials for the Zulip node. You can find out how to do that here . Select the user you want to send a private message to from the To dropdown list. Type the message you want to post in the Content field. Click on Execute Node to run the workflow.","title":"2. Zulip node"},{"location":"integrations/trigger-nodes/","text":"Overview # This section provides information about n8n's trigger nodes.","title":"Overview"},{"location":"integrations/trigger-nodes/#overview","text":"This section provides information about n8n's trigger nodes.","title":"Overview"},{"location":"integrations/trigger-nodes/n8n-nodes-base.activeCampaignTrigger/","text":"ActiveCampaign Trigger # ActiveCampaign is a cloud software platform for small-to-mid-sized business. The company offers software for customer experience automation, which combines the email marketing, marketing automation, sales automation, and CRM categories. \ud83d\udd11 Credentials You can find authentication information for this node here . Example Usage # This workflow allows you to receive updates when a new account is added by an admin in ActiveCampaign. You can also find the workflow on the website. This example usage workflow would use the following node. - ActiveCampaign Trigger The final workflow should look like the following image. 1. ActiveCampaign Trigger node # First of all, you'll have to enter credentials for the ActiveCampaign Trigger node. You can find out how to do that here . Select 'account_add' from the Events dropdown list. Select 'Admin' from the Source dropdown list. Click on Execute Node to run the workflow. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the ActiveCampaign Trigger node.","title":"ActiveCampaign Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.activeCampaignTrigger/#activecampaign-trigger","text":"ActiveCampaign is a cloud software platform for small-to-mid-sized business. The company offers software for customer experience automation, which combines the email marketing, marketing automation, sales automation, and CRM categories. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"ActiveCampaign Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.activeCampaignTrigger/#example-usage","text":"This workflow allows you to receive updates when a new account is added by an admin in ActiveCampaign. You can also find the workflow on the website. This example usage workflow would use the following node. - ActiveCampaign Trigger The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/trigger-nodes/n8n-nodes-base.activeCampaignTrigger/#1-activecampaign-trigger-node","text":"First of all, you'll have to enter credentials for the ActiveCampaign Trigger node. You can find out how to do that here . Select 'account_add' from the Events dropdown list. Select 'Admin' from the Source dropdown list. Click on Execute Node to run the workflow. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the ActiveCampaign Trigger node.","title":"1. ActiveCampaign Trigger node"},{"location":"integrations/trigger-nodes/n8n-nodes-base.acuitySchedulingTrigger/","text":"Acuity Scheduling Trigger # Acuity Scheduling is a cloud-based appointment scheduling software solution that enables business owners to manage their appointments online. It has the capability to automatically sync calendars according to users\u2019 time zones and can send regular alerts and reminders to users regarding their appointment schedules. \ud83d\udd11 Credentials You can find authentication information for this node here . Example Usage # This workflow allows you to receive updates when a new appointment is scheduled on Acuity Scheduling. You can also find the workflow on the website. This example usage workflow would use the following node. - Acuity Scheduling Trigger The final workflow should look like the following image. 1. Acuity Scheduling Trigger node # First of all, you'll have to enter credentials for the Acuity Scheduling Trigger node. You can find out how to do that here . Select the appointment.scheduled option from the Event dropdown list. Click on Execute Node to run the workflow. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Acuity Scheduling Trigger node.","title":"Acuity Scheduling Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.acuitySchedulingTrigger/#acuity-scheduling-trigger","text":"Acuity Scheduling is a cloud-based appointment scheduling software solution that enables business owners to manage their appointments online. It has the capability to automatically sync calendars according to users\u2019 time zones and can send regular alerts and reminders to users regarding their appointment schedules. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Acuity Scheduling Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.acuitySchedulingTrigger/#example-usage","text":"This workflow allows you to receive updates when a new appointment is scheduled on Acuity Scheduling. You can also find the workflow on the website. This example usage workflow would use the following node. - Acuity Scheduling Trigger The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/trigger-nodes/n8n-nodes-base.acuitySchedulingTrigger/#1-acuity-scheduling-trigger-node","text":"First of all, you'll have to enter credentials for the Acuity Scheduling Trigger node. You can find out how to do that here . Select the appointment.scheduled option from the Event dropdown list. Click on Execute Node to run the workflow. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Acuity Scheduling Trigger node.","title":"1. Acuity Scheduling Trigger node"},{"location":"integrations/trigger-nodes/n8n-nodes-base.affinityTrigger/","text":"Affinity Trigger # Affinity is a powerful relationship intelligence platform enabling teams to leverage their network to close the next big deal. \ud83d\udd11 Credentials You can find authentication information for this node here . Example Usage # This workflow allows you to receive updates when a new list is created in Affinity. You can also find the workflow on n8n.io. This example usage workflow would use the following node. - Affinity Trigger The final workflow should look like the following image. 1. Affinity Trigger node # First of all, you'll have to enter credentials for the Affinity Trigger node. You can find out how to do that here . Select 'list.created' from the Events dropdown list. Click on Execute Node to run the node. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Affinity Trigger node.","title":"Affinity Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.affinityTrigger/#affinity-trigger","text":"Affinity is a powerful relationship intelligence platform enabling teams to leverage their network to close the next big deal. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Affinity Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.affinityTrigger/#example-usage","text":"This workflow allows you to receive updates when a new list is created in Affinity. You can also find the workflow on n8n.io. This example usage workflow would use the following node. - Affinity Trigger The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/trigger-nodes/n8n-nodes-base.affinityTrigger/#1-affinity-trigger-node","text":"First of all, you'll have to enter credentials for the Affinity Trigger node. You can find out how to do that here . Select 'list.created' from the Events dropdown list. Click on Execute Node to run the node. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Affinity Trigger node.","title":"1. Affinity Trigger node"},{"location":"integrations/trigger-nodes/n8n-nodes-base.airtableTrigger/","text":"Airtable Trigger # Airtable is a spreadsheet-database hybrid, with the features of a database but applied to a spreadsheet. The fields in an Airtable table are similar to cells in a spreadsheet, but have types such as 'checkbox', 'phone number', and 'drop-down list', and can reference file attachments like images. \ud83d\udd11 Credentials You can find authentication information for this node here . Example Usage # This workflow allows you to receive a Mattermost message when new data gets added to Airtable. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Airtable Trigger - Mattermost The final workflow should look like the following image. 1. Airtable Trigger node # The Airtable Trigger node will trigger the workflow when new data gets added to Airtable. First of all, you'll have to enter credentials for the Airtable Trigger node. You can find out how to do that here . Click on Add Poll Time and select 'Every Minute' from the Mode dropdown list. This will check Airtable every minute for new data entries. Enter the Base ID in the Base ID field. For obtaining the Base ID, head over to their API page and select the correct base. You\u2019ll find the Base ID there. Enter the table name in the Table field. Enter a trigger field name in the Trigger Field field. If you don't have a 'Created Time' or 'Last modified time' field in your table, please create one. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the new data from Airtable. This output gets passed on to the next node in the workflow. 2. Mattermost node (post: message) # This node will send a message about the new data in the channel 'Information Updated' in Mattermost. If you have a different channel, use that instead. First of all, you'll have to enter credentials for the Mattermost node. You can find out how to do that here . Select a channel from the Channel ID dropdown list. Click on the gears icon next to the Message field and click on Add Expression . Enter the following message in the Expression field: 1 2 3 New Data was added to Airtable. ID:{{$node[\"Airtable Trigger\"].json[\"fields\"][\"id\"]}} Name: {{$node[\"Airtable Trigger\"].json[\"fields\"][\"name\"]}} Click on Execute Node to run the node. In the screenshot below, you will notice that the node sends a message in Mattermost about the new data that got added to Airtable. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Airtable Trigger node.","title":"Airtable Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.airtableTrigger/#airtable-trigger","text":"Airtable is a spreadsheet-database hybrid, with the features of a database but applied to a spreadsheet. The fields in an Airtable table are similar to cells in a spreadsheet, but have types such as 'checkbox', 'phone number', and 'drop-down list', and can reference file attachments like images. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Airtable Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.airtableTrigger/#example-usage","text":"This workflow allows you to receive a Mattermost message when new data gets added to Airtable. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Airtable Trigger - Mattermost The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/trigger-nodes/n8n-nodes-base.airtableTrigger/#1-airtable-trigger-node","text":"The Airtable Trigger node will trigger the workflow when new data gets added to Airtable. First of all, you'll have to enter credentials for the Airtable Trigger node. You can find out how to do that here . Click on Add Poll Time and select 'Every Minute' from the Mode dropdown list. This will check Airtable every minute for new data entries. Enter the Base ID in the Base ID field. For obtaining the Base ID, head over to their API page and select the correct base. You\u2019ll find the Base ID there. Enter the table name in the Table field. Enter a trigger field name in the Trigger Field field. If you don't have a 'Created Time' or 'Last modified time' field in your table, please create one. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the new data from Airtable. This output gets passed on to the next node in the workflow.","title":"1. Airtable Trigger node"},{"location":"integrations/trigger-nodes/n8n-nodes-base.airtableTrigger/#2-mattermost-node-post-message","text":"This node will send a message about the new data in the channel 'Information Updated' in Mattermost. If you have a different channel, use that instead. First of all, you'll have to enter credentials for the Mattermost node. You can find out how to do that here . Select a channel from the Channel ID dropdown list. Click on the gears icon next to the Message field and click on Add Expression . Enter the following message in the Expression field: 1 2 3 New Data was added to Airtable. ID:{{$node[\"Airtable Trigger\"].json[\"fields\"][\"id\"]}} Name: {{$node[\"Airtable Trigger\"].json[\"fields\"][\"name\"]}} Click on Execute Node to run the node. In the screenshot below, you will notice that the node sends a message in Mattermost about the new data that got added to Airtable. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Airtable Trigger node.","title":"2. Mattermost node (post: message)"},{"location":"integrations/trigger-nodes/n8n-nodes-base.amqpTrigger/","text":"AMQP Trigger # AMQP is an open standard application layer protocol for message-oriented middleware. The defining features of AMQP are message orientation, queuing, routing, reliability and security. This node supports AMQP 1.0 compatible message brokers. \ud83d\udd11 Credentials You can find authentication information for this node here . Example Usage # This workflow allows you to receive messages for an ActiveMQ queue via AMQP Trigger. You can also find the workflow on the website. This example usage workflow would use the following node. - AMQP Trigger The final workflow should look like the following image. 1. AMQP Trigger node # First of all, you'll have to enter credentials for the AMQP Trigger node. You can find out how to do that here . Enter the name of the queue or topic in the Queue / Topic field. Click on Execute Node to run the workflow. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the AMQP Trigger node.","title":"AMQP Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.amqpTrigger/#amqp-trigger","text":"AMQP is an open standard application layer protocol for message-oriented middleware. The defining features of AMQP are message orientation, queuing, routing, reliability and security. This node supports AMQP 1.0 compatible message brokers. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"AMQP Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.amqpTrigger/#example-usage","text":"This workflow allows you to receive messages for an ActiveMQ queue via AMQP Trigger. You can also find the workflow on the website. This example usage workflow would use the following node. - AMQP Trigger The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/trigger-nodes/n8n-nodes-base.amqpTrigger/#1-amqp-trigger-node","text":"First of all, you'll have to enter credentials for the AMQP Trigger node. You can find out how to do that here . Enter the name of the queue or topic in the Queue / Topic field. Click on Execute Node to run the workflow. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the AMQP Trigger node.","title":"1. AMQP Trigger node"},{"location":"integrations/trigger-nodes/n8n-nodes-base.asanaTrigger/","text":"Asana Trigger # Asana is a web and mobile application designed to help teams organize, track, and manage their work. \ud83d\udd11 Credentials You can find authentication information for this node here . Example Usage # This workflow allows you to receive updates when an event occurs in Asana. You can also find the workflow on n8n.io. This example usage workflow would use the following node. - Asana Trigger The final workflow should look like the following image. 1. Asana Trigger node # First of all, you'll have to enter credentials for the Asana Trigger node. You can find out how to do that here . Enter the name of the resource in the Resource field. Enter the name of the workspace in the Workspace field. Click on Execute Node to run the node. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Asana Trigger node.","title":"Asana Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.asanaTrigger/#asana-trigger","text":"Asana is a web and mobile application designed to help teams organize, track, and manage their work. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Asana Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.asanaTrigger/#example-usage","text":"This workflow allows you to receive updates when an event occurs in Asana. You can also find the workflow on n8n.io. This example usage workflow would use the following node. - Asana Trigger The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/trigger-nodes/n8n-nodes-base.asanaTrigger/#1-asana-trigger-node","text":"First of all, you'll have to enter credentials for the Asana Trigger node. You can find out how to do that here . Enter the name of the resource in the Resource field. Enter the name of the workspace in the Workspace field. Click on Execute Node to run the node. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Asana Trigger node.","title":"1. Asana Trigger node"},{"location":"integrations/trigger-nodes/n8n-nodes-base.autopilotTrigger/","text":"Autopilot Trigger # Autopilot is a visual marketing software that allows you to automate and personalize your marketing across the entire customer journey. \ud83d\udd11 Credentials You can find authentication information for this node here . Events # Contact added Contact added to a list Contact entered to a segment Contact left a segment Contact removed from a list Contact unsubscribed Contact updated Example Usage # This workflow allows you to receive updates when a new contact gets added in Autopilot and add them to a base in Airtable. You can also find the workflow on n8n.io. This example usage workflow would use the following node. - Autopilot Trigger - Set - Airtable The final workflow should look like the following image. 1. Autopilot Trigger # The Autopilot Trigger node will trigger the workflow when a new contact gets added in Autopilot. First of all, you'll have to enter credentials for the Autopilot Trigger node. You can find out how to do that here . Select 'Contact Added' from the Events dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the information of the new contact that was added to Autopilot. This output gets passed on to the next node in the workflow. 2. Set node # We will use the Set node to ensure that only the data that we set in this node gets passed on to the next nodes in the workflow. Click on Add Value and select 'String' from the dropdown list. Enter First Name in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > contact > FirstName. You can also add the following expression: {{$json[\"contact\"][\"FirstName\"]}} . Enter First Name in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > contact > LastName. You can also add the following expression: {{$json[\"contact\"][\"LastName\"]}} . Click on Add Value and select 'String' from the dropdown list. Enter Email in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > contact > Email. You can also add the following expression: {{$json[\"contact\"][\"Email\"]}} . Toggle Keep Only Set to true . We set this option to true to ensure that only the data that we have set in this node get passed on to the next nodes in the workflow. Click on Execute Node to run the node. In the screenshot below, you will notice that the node uses the data from the previous node and returns the data that we set for the workflow. 3. Airtable node # This node will store the data coming from the previous node in a table in Airtable. First of all, you'll have to enter credentials for the Airtable node. You can find out how to do that here . Select 'Append' from the Operation dropdown list. Enter the base ID in the Base ID field. For obtaining the Base ID, head over to their API page and select the correct base. You\u2019ll find the Base ID under the Introduction section. In n8n, paste the ID of the base in the Base ID field. Enter the table name in the Table name field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node adds the information of a new contact from the previous node in a table in Airtable. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Autopilot Trigger node.","title":"Autopilot Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.autopilotTrigger/#autopilot-trigger","text":"Autopilot is a visual marketing software that allows you to automate and personalize your marketing across the entire customer journey. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Autopilot Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.autopilotTrigger/#events","text":"Contact added Contact added to a list Contact entered to a segment Contact left a segment Contact removed from a list Contact unsubscribed Contact updated","title":"Events"},{"location":"integrations/trigger-nodes/n8n-nodes-base.autopilotTrigger/#example-usage","text":"This workflow allows you to receive updates when a new contact gets added in Autopilot and add them to a base in Airtable. You can also find the workflow on n8n.io. This example usage workflow would use the following node. - Autopilot Trigger - Set - Airtable The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/trigger-nodes/n8n-nodes-base.autopilotTrigger/#1-autopilot-trigger","text":"The Autopilot Trigger node will trigger the workflow when a new contact gets added in Autopilot. First of all, you'll have to enter credentials for the Autopilot Trigger node. You can find out how to do that here . Select 'Contact Added' from the Events dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the information of the new contact that was added to Autopilot. This output gets passed on to the next node in the workflow.","title":"1. Autopilot Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.autopilotTrigger/#2-set-node","text":"We will use the Set node to ensure that only the data that we set in this node gets passed on to the next nodes in the workflow. Click on Add Value and select 'String' from the dropdown list. Enter First Name in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > contact > FirstName. You can also add the following expression: {{$json[\"contact\"][\"FirstName\"]}} . Enter First Name in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > contact > LastName. You can also add the following expression: {{$json[\"contact\"][\"LastName\"]}} . Click on Add Value and select 'String' from the dropdown list. Enter Email in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > contact > Email. You can also add the following expression: {{$json[\"contact\"][\"Email\"]}} . Toggle Keep Only Set to true . We set this option to true to ensure that only the data that we have set in this node get passed on to the next nodes in the workflow. Click on Execute Node to run the node. In the screenshot below, you will notice that the node uses the data from the previous node and returns the data that we set for the workflow.","title":"2. Set node"},{"location":"integrations/trigger-nodes/n8n-nodes-base.autopilotTrigger/#3-airtable-node","text":"This node will store the data coming from the previous node in a table in Airtable. First of all, you'll have to enter credentials for the Airtable node. You can find out how to do that here . Select 'Append' from the Operation dropdown list. Enter the base ID in the Base ID field. For obtaining the Base ID, head over to their API page and select the correct base. You\u2019ll find the Base ID under the Introduction section. In n8n, paste the ID of the base in the Base ID field. Enter the table name in the Table name field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node adds the information of a new contact from the previous node in a table in Airtable. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Autopilot Trigger node.","title":"3. Airtable node"},{"location":"integrations/trigger-nodes/n8n-nodes-base.awsSnsTrigger/","text":"AWS SNS Trigger # AWS SNS is a notification service provided as part of Amazon Web Services. It provides a low-cost infrastructure for the mass delivery of messages, predominantly to mobile users. \ud83d\udd11 Credentials You can find authentication information for this node here . Example Usage # This workflow allows you to receive updates for events in AWS SNS. You can also find the workflow on the website. This example usage workflow would use the following node. - AWS SNS Trigger The final workflow should look like the following image. 1. AWS SNS Trigger node # First of all, you'll have to enter credentials for the AWS SNS Trigger node. You can find out how to do that here . Select the topic you want to listen for in the Topic dropdown list. Click on Execute Node to run the workflow. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the AWS SNS Trigger node.","title":"AWS SNS Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.awsSnsTrigger/#aws-sns-trigger","text":"AWS SNS is a notification service provided as part of Amazon Web Services. It provides a low-cost infrastructure for the mass delivery of messages, predominantly to mobile users. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"AWS SNS Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.awsSnsTrigger/#example-usage","text":"This workflow allows you to receive updates for events in AWS SNS. You can also find the workflow on the website. This example usage workflow would use the following node. - AWS SNS Trigger The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/trigger-nodes/n8n-nodes-base.awsSnsTrigger/#1-aws-sns-trigger-node","text":"First of all, you'll have to enter credentials for the AWS SNS Trigger node. You can find out how to do that here . Select the topic you want to listen for in the Topic dropdown list. Click on Execute Node to run the workflow. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the AWS SNS Trigger node.","title":"1. AWS SNS Trigger node"},{"location":"integrations/trigger-nodes/n8n-nodes-base.bitbucketTrigger/","text":"Bitbucket Trigger # Bitbucket is a web-based version control repository hosting service owned by Atlassian, for source code and development projects that use either Mercurial or Git revision control systems. \ud83d\udd11 Credentials You can find authentication information for this node here . Example Usage # This workflow allows you to receive updates when events occur in a Bitbucket repository. You can also find the workflow on the website. This example usage workflow would use the following node. - Bitbucket Trigger The final workflow should look like the following image. 1. Bitbucket Trigger node # First of all, you'll have to enter credentials for the Bitbucket Trigger node. You can find out how to do that here . Select 'Repository' from the Resource dropdown list. Select the repository you want to receive updates for from the Repository dropdown list. Select the events you want to receive updates for from the Events dropdown list. Click on Execute Node to run the workflow. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Bitbucket Trigger node.","title":"Bitbucket Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.bitbucketTrigger/#bitbucket-trigger","text":"Bitbucket is a web-based version control repository hosting service owned by Atlassian, for source code and development projects that use either Mercurial or Git revision control systems. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Bitbucket Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.bitbucketTrigger/#example-usage","text":"This workflow allows you to receive updates when events occur in a Bitbucket repository. You can also find the workflow on the website. This example usage workflow would use the following node. - Bitbucket Trigger The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/trigger-nodes/n8n-nodes-base.bitbucketTrigger/#1-bitbucket-trigger-node","text":"First of all, you'll have to enter credentials for the Bitbucket Trigger node. You can find out how to do that here . Select 'Repository' from the Resource dropdown list. Select the repository you want to receive updates for from the Repository dropdown list. Select the events you want to receive updates for from the Events dropdown list. Click on Execute Node to run the workflow. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Bitbucket Trigger node.","title":"1. Bitbucket Trigger node"},{"location":"integrations/trigger-nodes/n8n-nodes-base.boxTrigger/","text":"Box Trigger # Box is a cloud computing company which provides file sharing, collaborating, and other tools for working with files that are uploaded to its servers. \ud83d\udd11 Credentials You can find authentication information for this node here . Example Usage # This workflow allows you to receive updates when events occur in Box. You can also find the workflow on the website. This example usage workflow would use the following node. - Box Trigger The final workflow should look like the following image. 1. Box Trigger node # First of all, you'll have to enter credentials for the Box Trigger node. You can find out how to do that here . Select the events for which you want to receive updates for from the Events dropdown list. Select the type of item that will trigger an update from the Target Type dropdown list. Enter the target ID of the file/folder to be monitored for updates in the Target ID field. Click on Execute Node to run the workflow. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Box Trigger node. FAQs # How do I find my Target ID in Box? # Open the file/folder that you would like to monitor. Copy the string of charatcters after folder/ in your URL. This is the target ID. For example, if the URL is https://app.box.com/folder/12345 , then 12345 is the target ID. Paste it in the Target ID field in n8n.","title":"Box Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.boxTrigger/#box-trigger","text":"Box is a cloud computing company which provides file sharing, collaborating, and other tools for working with files that are uploaded to its servers. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Box Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.boxTrigger/#example-usage","text":"This workflow allows you to receive updates when events occur in Box. You can also find the workflow on the website. This example usage workflow would use the following node. - Box Trigger The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/trigger-nodes/n8n-nodes-base.boxTrigger/#1-box-trigger-node","text":"First of all, you'll have to enter credentials for the Box Trigger node. You can find out how to do that here . Select the events for which you want to receive updates for from the Events dropdown list. Select the type of item that will trigger an update from the Target Type dropdown list. Enter the target ID of the file/folder to be monitored for updates in the Target ID field. Click on Execute Node to run the workflow. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Box Trigger node.","title":"1. Box Trigger node"},{"location":"integrations/trigger-nodes/n8n-nodes-base.boxTrigger/#faqs","text":"","title":"FAQs"},{"location":"integrations/trigger-nodes/n8n-nodes-base.boxTrigger/#how-do-i-find-my-target-id-in-box","text":"Open the file/folder that you would like to monitor. Copy the string of charatcters after folder/ in your URL. This is the target ID. For example, if the URL is https://app.box.com/folder/12345 , then 12345 is the target ID. Paste it in the Target ID field in n8n.","title":"How do I find my Target ID in Box?"},{"location":"integrations/trigger-nodes/n8n-nodes-base.calendlyTrigger/","text":"Calendly Trigger # Calendly is an automated scheduling software that is designed to make the process of finding meeting times easy. \ud83d\udd11 Credentials You can find authentication information for this node here . Example Usage # This workflow allows you to receive updates for events in Calendly. You can also find the workflow on the website. This example usage workflow would use the following node. - Calendly Trigger The final workflow should look like the following image. 1. Calendly Trigger node # First of all, you'll have to enter credentials for the Calendly Trigger node. You can find out how to do that here . Select the events you want to receive updates for from the Events dropdown list. Click on Execute Node to run the workflow. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Calendly Trigger node.","title":"Calendly Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.calendlyTrigger/#calendly-trigger","text":"Calendly is an automated scheduling software that is designed to make the process of finding meeting times easy. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Calendly Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.calendlyTrigger/#example-usage","text":"This workflow allows you to receive updates for events in Calendly. You can also find the workflow on the website. This example usage workflow would use the following node. - Calendly Trigger The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/trigger-nodes/n8n-nodes-base.calendlyTrigger/#1-calendly-trigger-node","text":"First of all, you'll have to enter credentials for the Calendly Trigger node. You can find out how to do that here . Select the events you want to receive updates for from the Events dropdown list. Click on Execute Node to run the workflow. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Calendly Trigger node.","title":"1. Calendly Trigger node"},{"location":"integrations/trigger-nodes/n8n-nodes-base.chargebeeTrigger/","text":"Chargebee Trigger # Chargebee is a billing platform for subscription based SaaS and eCommerce businesses. Chargebee integrates with payment gateways to let you automate recurring payment collection along with invoicing, taxes, accounting, email notifications, SaaS Metrics and customer management. \ud83d\udd11 Credentials You can find authentication information for this node here . Example Usage # This workflow allows you to receive updates for events in Chargebee. You can also find the workflow on the website. This example usage workflow would use the following node. - Chargebee Trigger The final workflow should look like the following image. 1. Chargebee Trigger node # First of all, you'll have to add the webhook URL in Chargebee. You can find instructions on how to do that in the FAQs below. Select the * option in the Events field to receive updates when any event is triggered. Click on Execute Node to run the workflow. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Chargebee Trigger node. FAQs # How do I add my webhook URL in Chargebee? # Open your Chargebee dashboard. Click on \"Settings\". Click on \"Configure Chargebee\". Scroll down and click on \"Webhooks\". Click on the Add Webhook button. Enter the Webhook Name and the Webhook URL. Click on the Create button.","title":"Chargebee Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.chargebeeTrigger/#chargebee-trigger","text":"Chargebee is a billing platform for subscription based SaaS and eCommerce businesses. Chargebee integrates with payment gateways to let you automate recurring payment collection along with invoicing, taxes, accounting, email notifications, SaaS Metrics and customer management. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Chargebee Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.chargebeeTrigger/#example-usage","text":"This workflow allows you to receive updates for events in Chargebee. You can also find the workflow on the website. This example usage workflow would use the following node. - Chargebee Trigger The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/trigger-nodes/n8n-nodes-base.chargebeeTrigger/#1-chargebee-trigger-node","text":"First of all, you'll have to add the webhook URL in Chargebee. You can find instructions on how to do that in the FAQs below. Select the * option in the Events field to receive updates when any event is triggered. Click on Execute Node to run the workflow. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Chargebee Trigger node.","title":"1. Chargebee Trigger node"},{"location":"integrations/trigger-nodes/n8n-nodes-base.chargebeeTrigger/#faqs","text":"","title":"FAQs"},{"location":"integrations/trigger-nodes/n8n-nodes-base.chargebeeTrigger/#how-do-i-add-my-webhook-url-in-chargebee","text":"Open your Chargebee dashboard. Click on \"Settings\". Click on \"Configure Chargebee\". Scroll down and click on \"Webhooks\". Click on the Add Webhook button. Enter the Webhook Name and the Webhook URL. Click on the Create button.","title":"How do I add my webhook URL in Chargebee?"},{"location":"integrations/trigger-nodes/n8n-nodes-base.ciscoWebexTrigger/","text":"Webex by Cisco Trigger # Webex by Cisco is a web conferencing and videoconferencing application. \ud83d\udd11 Credentials You can find authentication information for this node here . Example usage # This workflow allows you to receive updates when meeting events occur in your Webex account. This example usage workflow uses the following node: Webex by Cisco Trigger The final workflow should look like the following image. 1. Webex by Cisco Trigger node # First enter your credentials for node. You can find out how to do that here . Select 'Meeting' from the Resource dropdown list. Select the events you want to receive updates for from the Events dropdown list. Click on Execute Node to run the workflow. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Webex by Cisco Trigger node.","title":"Webex by Cisco Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.ciscoWebexTrigger/#webex-by-cisco-trigger","text":"Webex by Cisco is a web conferencing and videoconferencing application. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Webex by Cisco Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.ciscoWebexTrigger/#example-usage","text":"This workflow allows you to receive updates when meeting events occur in your Webex account. This example usage workflow uses the following node: Webex by Cisco Trigger The final workflow should look like the following image.","title":"Example usage"},{"location":"integrations/trigger-nodes/n8n-nodes-base.ciscoWebexTrigger/#1-webex-by-cisco-trigger-node","text":"First enter your credentials for node. You can find out how to do that here . Select 'Meeting' from the Resource dropdown list. Select the events you want to receive updates for from the Events dropdown list. Click on Execute Node to run the workflow. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Webex by Cisco Trigger node.","title":"1. Webex by Cisco Trigger node"},{"location":"integrations/trigger-nodes/n8n-nodes-base.clickUpTrigger/","text":"ClickUp Trigger # ClickUp is a cloud-based collaboration and project management tool suitable for businesses of all sizes and industries. Features include communication and collaboration tools, task assignments and statuses, alerts and a task toolbar. \ud83d\udd11 Credentials You can find authentication information for this node here . Example Usage # This workflow allows you to receive updates for events in ClickUp. You can also find the workflow on the website. This example usage workflow would use the following node. - ClickUp Trigger The final workflow should look like the following image. 1. ClickUp Trigger node # First of all, you'll have to enter credentials for the ClickUp Trigger node. You can find out how to do that here . Select your team from the Team dropdown list. Select the * option in the Events field to receive updates for all the events. Click on Execute Node to run the workflow. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the ClickUp Trigger node.","title":"ClickUp Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.clickUpTrigger/#clickup-trigger","text":"ClickUp is a cloud-based collaboration and project management tool suitable for businesses of all sizes and industries. Features include communication and collaboration tools, task assignments and statuses, alerts and a task toolbar. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"ClickUp Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.clickUpTrigger/#example-usage","text":"This workflow allows you to receive updates for events in ClickUp. You can also find the workflow on the website. This example usage workflow would use the following node. - ClickUp Trigger The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/trigger-nodes/n8n-nodes-base.clickUpTrigger/#1-clickup-trigger-node","text":"First of all, you'll have to enter credentials for the ClickUp Trigger node. You can find out how to do that here . Select your team from the Team dropdown list. Select the * option in the Events field to receive updates for all the events. Click on Execute Node to run the workflow. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the ClickUp Trigger node.","title":"1. ClickUp Trigger node"},{"location":"integrations/trigger-nodes/n8n-nodes-base.clockifyTrigger/","text":"Clockify Trigger # Clockify is a free time tracker and timesheet app for tracking work hours across projects. \ud83d\udd11 Credentials You can find authentication information for this node here . Note: This node uses the workflow timezone setting to specify the range of time entries starting time. You have to configure the workflow timezone setting if you want this Trigger node to retrieve the right time entries. Example Usage # This workflow allows you to get new time entries from Clockify. You can also find the workflow on the website. This example usage workflow would use the following node. - Clockify Trigger The final workflow should look like the following image. 1. Clockify Trigger node # First enter your credentials for the Clockify Trigger node. You can find out how to do that here . Select the Workspace you want to receive updates for using the dropdown list. Click on Execute Node to run the workflow. Note: This node uses polling to get new time entries. You have to use the Add Poll Time button if you want this Trigger node to run and retrieve new time entries regularly. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Clockify Trigger node.","title":"Clockify Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.clockifyTrigger/#clockify-trigger","text":"Clockify is a free time tracker and timesheet app for tracking work hours across projects. \ud83d\udd11 Credentials You can find authentication information for this node here . Note: This node uses the workflow timezone setting to specify the range of time entries starting time. You have to configure the workflow timezone setting if you want this Trigger node to retrieve the right time entries.","title":"Clockify Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.clockifyTrigger/#example-usage","text":"This workflow allows you to get new time entries from Clockify. You can also find the workflow on the website. This example usage workflow would use the following node. - Clockify Trigger The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/trigger-nodes/n8n-nodes-base.clockifyTrigger/#1-clockify-trigger-node","text":"First enter your credentials for the Clockify Trigger node. You can find out how to do that here . Select the Workspace you want to receive updates for using the dropdown list. Click on Execute Node to run the workflow. Note: This node uses polling to get new time entries. You have to use the Add Poll Time button if you want this Trigger node to run and retrieve new time entries regularly. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Clockify Trigger node.","title":"1. Clockify Trigger node"},{"location":"integrations/trigger-nodes/n8n-nodes-base.convertkitTrigger/","text":"ConvertKit Trigger # ConvertKit is a fully-featured email marketing platform. ConvertKit can be used to build an email list, send email broadcasts, automate sequences, create segments, and build landing pages. \ud83d\udd11 Credentials You can find authentication information for this node here . Example Usage # This workflow allows you to receive updates when a subscriber is added through a form in ConvertKit. You can also find the workflow on n8n.io. This example usage workflow would use the following node. - ConvertKit Trigger The final workflow should look like the following image. 1. ConvertKit Trigger node # First of all, you'll have to enter credentials for the ConvertKit Trigger node. You can find out how to do that here . Select 'Form Subscribe' from the Event dropdown list. Select the form from the Form ID dropdown list. Click on Execute Node to run the node. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the ConvertKit Trigger node.","title":"ConvertKit Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.convertkitTrigger/#convertkit-trigger","text":"ConvertKit is a fully-featured email marketing platform. ConvertKit can be used to build an email list, send email broadcasts, automate sequences, create segments, and build landing pages. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"ConvertKit Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.convertkitTrigger/#example-usage","text":"This workflow allows you to receive updates when a subscriber is added through a form in ConvertKit. You can also find the workflow on n8n.io. This example usage workflow would use the following node. - ConvertKit Trigger The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/trigger-nodes/n8n-nodes-base.convertkitTrigger/#1-convertkit-trigger-node","text":"First of all, you'll have to enter credentials for the ConvertKit Trigger node. You can find out how to do that here . Select 'Form Subscribe' from the Event dropdown list. Select the form from the Form ID dropdown list. Click on Execute Node to run the node. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the ConvertKit Trigger node.","title":"1. ConvertKit Trigger node"},{"location":"integrations/trigger-nodes/n8n-nodes-base.copperTrigger/","text":"Copper Trigger # Copper is a CRM that focuses on strong integration with Google's G Suite. It is mainly targeted towards small and medium-sized businesses. \ud83d\udd11 Credentials You can find authentication information for this node here . Example Usage # This workflow allows you to receive an update when a new project is created in Copper. You can also find the workflow on the website. This example usage workflow would use the following node. - Copper Trigger The final workflow should look like the following image. 1. Copper Trigger node # First of all, you'll have to enter credentials for the Copper Trigger node. You can find out how to do that here . Select 'Project' from the Resource dropdown list. Select 'New' from the Event dropdown list. Click on Execute Node to run the workflow. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Copper Trigger node.","title":"Copper Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.copperTrigger/#copper-trigger","text":"Copper is a CRM that focuses on strong integration with Google's G Suite. It is mainly targeted towards small and medium-sized businesses. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Copper Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.copperTrigger/#example-usage","text":"This workflow allows you to receive an update when a new project is created in Copper. You can also find the workflow on the website. This example usage workflow would use the following node. - Copper Trigger The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/trigger-nodes/n8n-nodes-base.copperTrigger/#1-copper-trigger-node","text":"First of all, you'll have to enter credentials for the Copper Trigger node. You can find out how to do that here . Select 'Project' from the Resource dropdown list. Select 'New' from the Event dropdown list. Click on Execute Node to run the workflow. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Copper Trigger node.","title":"1. Copper Trigger node"},{"location":"integrations/trigger-nodes/n8n-nodes-base.customerIoTrigger/","text":"Customer.io Trigger # Customer.io enables users to send newsletters to selected segments of customers using their website data. You can send targeted emails, push notifications, and SMS to lower churn, create stronger relationships, and drive subscriptions. \ud83d\udd11 Credentials You can find authentication information for this node here . Example Usage # This workflow allows you to receive updates when a subscriber unsubscribes in Customer.io. You can also find the workflow on n8n.io. This example usage workflow would use the following node. - Customer.io Trigger The final workflow should look like the following image. 1. Customer.io Trigger node # First of all, you'll have to enter credentials for the Customer.io Trigger node. You can find out how to do that here . Select 'Customer Unsubscribe' from the Event dropdown list. Click on Execute Node to run the node. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Customer.io Trigger node.","title":"Customer.io Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.customerIoTrigger/#customerio-trigger","text":"Customer.io enables users to send newsletters to selected segments of customers using their website data. You can send targeted emails, push notifications, and SMS to lower churn, create stronger relationships, and drive subscriptions. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Customer.io Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.customerIoTrigger/#example-usage","text":"This workflow allows you to receive updates when a subscriber unsubscribes in Customer.io. You can also find the workflow on n8n.io. This example usage workflow would use the following node. - Customer.io Trigger The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/trigger-nodes/n8n-nodes-base.customerIoTrigger/#1-customerio-trigger-node","text":"First of all, you'll have to enter credentials for the Customer.io Trigger node. You can find out how to do that here . Select 'Customer Unsubscribe' from the Event dropdown list. Click on Execute Node to run the node. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Customer.io Trigger node.","title":"1. Customer.io Trigger node"},{"location":"integrations/trigger-nodes/n8n-nodes-base.emeliaTrigger/","text":"Emelia Trigger # Emelia is a cold-mailing tool. \ud83d\udd11 Credentials You can find authentication information for this node here . Events # Email Bounced Email Opened Email Replied Email Sent Link Clicked Unsubscribed Contact Example Usage # This workflow allows you to send a message on Mattermost when a lead replies to your email. You can also find the workflow on n8n.io. This example usage workflow would use the following node. - Emelia Trigger - Mattermost The final workflow should look like the following image. 1. Emelia Trigger # The Emelia Trigger node will trigger the workflow when a lead sends a reply to the campaign n8n . If you have a different campaign, use that instead. First of all, you'll have to enter credentials for the Emelia Trigger node. You can find out how to do that here . Select a campaign from the Campaign dropdown list. Select 'Email Replied' from the Events dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node triggers the workflow when a lead sends a reply. This output is passed on to the next node in the workflow. 2. Mattermost node (post: message) # This node will send a message to the Leads channel in Mattermost. If you have a different channel, use that instead. First of all, you'll have to enter credentials for the Mattermost node. You can find out how to enter credentials for this node here . Select a channel from the Channel ID dropdown list. Click on the gears icon next to the Message field click on Add Expression . Enter the following message in the Expression field. {{$json[\"contact\"][\"firstName\"]}} from {{$json[\"contact\"][\"company\"]}} has replied back to your campaign. Click on Execute Node to run the workflow. In the screenshot below, you will notice that the node sends a message with a reply to the Leads channel in Mattermost. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Emelia Trigger node.","title":"Emelia Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.emeliaTrigger/#emelia-trigger","text":"Emelia is a cold-mailing tool. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Emelia Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.emeliaTrigger/#events","text":"Email Bounced Email Opened Email Replied Email Sent Link Clicked Unsubscribed Contact","title":"Events"},{"location":"integrations/trigger-nodes/n8n-nodes-base.emeliaTrigger/#example-usage","text":"This workflow allows you to send a message on Mattermost when a lead replies to your email. You can also find the workflow on n8n.io. This example usage workflow would use the following node. - Emelia Trigger - Mattermost The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/trigger-nodes/n8n-nodes-base.emeliaTrigger/#1-emelia-trigger","text":"The Emelia Trigger node will trigger the workflow when a lead sends a reply to the campaign n8n . If you have a different campaign, use that instead. First of all, you'll have to enter credentials for the Emelia Trigger node. You can find out how to do that here . Select a campaign from the Campaign dropdown list. Select 'Email Replied' from the Events dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node triggers the workflow when a lead sends a reply. This output is passed on to the next node in the workflow.","title":"1. Emelia Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.emeliaTrigger/#2-mattermost-node-post-message","text":"This node will send a message to the Leads channel in Mattermost. If you have a different channel, use that instead. First of all, you'll have to enter credentials for the Mattermost node. You can find out how to enter credentials for this node here . Select a channel from the Channel ID dropdown list. Click on the gears icon next to the Message field click on Add Expression . Enter the following message in the Expression field. {{$json[\"contact\"][\"firstName\"]}} from {{$json[\"contact\"][\"company\"]}} has replied back to your campaign. Click on Execute Node to run the workflow. In the screenshot below, you will notice that the node sends a message with a reply to the Leads channel in Mattermost. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Emelia Trigger node.","title":"2. Mattermost node (post: message)"},{"location":"integrations/trigger-nodes/n8n-nodes-base.eventbriteTrigger/","text":"Eventbrite Trigger # Eventbrite is an event management and ticketing website. The service allows users to browse, create, and promote local events. \ud83d\udd11 Credentials You can find authentication information for this node here . Example Usage # This workflow allows you to get updates for an Eventbrite event. You can also find the workflow on the website. This example usage workflow would use the following node. - Eventbrite Trigger The final workflow should look like the following image. 1. Eventbrite Trigger node # First of all, you'll have to enter credentials for the Eventbrite Trigger node. You can find out how to do that here . Select the profile that contains your event from the Organization dropdown list. Select the event you want to receive updates for from the Event dropdown list. Select the actions that you want to receive updates for from the Actions dropdown list. Click on Execute Node to run the workflow. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Eventbrite Trigger node.","title":"Eventbrite Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.eventbriteTrigger/#eventbrite-trigger","text":"Eventbrite is an event management and ticketing website. The service allows users to browse, create, and promote local events. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Eventbrite Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.eventbriteTrigger/#example-usage","text":"This workflow allows you to get updates for an Eventbrite event. You can also find the workflow on the website. This example usage workflow would use the following node. - Eventbrite Trigger The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/trigger-nodes/n8n-nodes-base.eventbriteTrigger/#1-eventbrite-trigger-node","text":"First of all, you'll have to enter credentials for the Eventbrite Trigger node. You can find out how to do that here . Select the profile that contains your event from the Organization dropdown list. Select the event you want to receive updates for from the Event dropdown list. Select the actions that you want to receive updates for from the Actions dropdown list. Click on Execute Node to run the workflow. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Eventbrite Trigger node.","title":"1. Eventbrite Trigger node"},{"location":"integrations/trigger-nodes/n8n-nodes-base.facebookTrigger/","text":"Facebook Trigger # Facebook is a social networking site that makes it easy to connect and share with family and friends online. \ud83d\udd11 Credentials You can find authentication information for this node here . Object # Get updates about an Ad Account Get updates about the app Get updates about Certificate Transparency Get updates about activity in groups and events in groups of Workplace Get updates about the comments on your media Get updates about the links for rich previews by an external provider Page updates Updates regarding granting or revoking permissions User profile updates Get updates about Whatsapp business account Get updates about Workplace security Example Usage # This workflow allows you to receive a Mattermost message when a user updates their profile on Facebook. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Facebook Trigger - Mattermost The final workflow should look like the following image. 1. Facebook Trigger node # The Facebook Trigger node will trigger the workflow when a user updates their profile on Facebook. First of all, you'll have to enter credentials for the Facebook Trigger node. You can find out how to do that here . Select 'User' from the Object dropdown list. Enter your app ID in the App ID field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the updated information of the user from Facebook. This output is passed on to the next node in the workflow. 2. Mattermost node (post: message) # This node will send a message of the updated information in the channel Information Updated in Mattermost. If you have a different channel, use that instead. First of all, you'll have to enter credentials for the Mattermost node. You can find out how to do that here . Select a channel from the Channel ID dropdown list. Click on the gears icon next to the Message field and click on Add Expression . Enter the following message in the Expression field: The user with uid {{$node[\"Facebook Trigger\"].json[\"uid\"]}} changed their {{$node[\"Facebook Trigger\"].json[\"changes\"][0][\"field\"]}} to {{$node[\"Facebook Trigger\"].json[\"changes\"][0][\"value\"][\"page\"]}}. . Click on Execute Node to run the node. In the screenshot below, you will notice that the node sends a message about the updated information to the Information Updated channel in Mattermost. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Facebook Trigger node.","title":"Facebook Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.facebookTrigger/#facebook-trigger","text":"Facebook is a social networking site that makes it easy to connect and share with family and friends online. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Facebook Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.facebookTrigger/#object","text":"Get updates about an Ad Account Get updates about the app Get updates about Certificate Transparency Get updates about activity in groups and events in groups of Workplace Get updates about the comments on your media Get updates about the links for rich previews by an external provider Page updates Updates regarding granting or revoking permissions User profile updates Get updates about Whatsapp business account Get updates about Workplace security","title":"Object"},{"location":"integrations/trigger-nodes/n8n-nodes-base.facebookTrigger/#example-usage","text":"This workflow allows you to receive a Mattermost message when a user updates their profile on Facebook. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Facebook Trigger - Mattermost The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/trigger-nodes/n8n-nodes-base.facebookTrigger/#1-facebook-trigger-node","text":"The Facebook Trigger node will trigger the workflow when a user updates their profile on Facebook. First of all, you'll have to enter credentials for the Facebook Trigger node. You can find out how to do that here . Select 'User' from the Object dropdown list. Enter your app ID in the App ID field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the updated information of the user from Facebook. This output is passed on to the next node in the workflow.","title":"1. Facebook Trigger node"},{"location":"integrations/trigger-nodes/n8n-nodes-base.facebookTrigger/#2-mattermost-node-post-message","text":"This node will send a message of the updated information in the channel Information Updated in Mattermost. If you have a different channel, use that instead. First of all, you'll have to enter credentials for the Mattermost node. You can find out how to do that here . Select a channel from the Channel ID dropdown list. Click on the gears icon next to the Message field and click on Add Expression . Enter the following message in the Expression field: The user with uid {{$node[\"Facebook Trigger\"].json[\"uid\"]}} changed their {{$node[\"Facebook Trigger\"].json[\"changes\"][0][\"field\"]}} to {{$node[\"Facebook Trigger\"].json[\"changes\"][0][\"value\"][\"page\"]}}. . Click on Execute Node to run the node. In the screenshot below, you will notice that the node sends a message about the updated information to the Information Updated channel in Mattermost. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Facebook Trigger node.","title":"2. Mattermost node (post: message)"},{"location":"integrations/trigger-nodes/n8n-nodes-base.figmaTrigger/","text":"Figma Trigger (Beta) # Figma is a prototyping tool which is primarily web-based, with additional offline features enabled by desktop applications for macOS and Windows. \ud83d\udd11 Credentials You can find authentication information for this node here . Supported Figma Plans Figma does not support webhooks on the free \"Starter\" plan. Your team would need to be on the \"Professional\" plan to use this node. Trigger Events # File Commented : Triggers when someone comments on a file. File Deleted : Triggers when an individual file is deleted, but not when an entire folder with all files is deleted. File Updated : Triggers when a file is saved or deleted. A save occurs when a file is closed or within 30 seconds after changes have been made. File Version Updated : Triggers when a named version is created in the version history of a file. Library Publish : Triggers when a library file is published.","title":"Figma Trigger (Beta)"},{"location":"integrations/trigger-nodes/n8n-nodes-base.figmaTrigger/#figma-trigger-beta","text":"Figma is a prototyping tool which is primarily web-based, with additional offline features enabled by desktop applications for macOS and Windows. \ud83d\udd11 Credentials You can find authentication information for this node here . Supported Figma Plans Figma does not support webhooks on the free \"Starter\" plan. Your team would need to be on the \"Professional\" plan to use this node.","title":"Figma Trigger (Beta)"},{"location":"integrations/trigger-nodes/n8n-nodes-base.figmaTrigger/#trigger-events","text":"File Commented : Triggers when someone comments on a file. File Deleted : Triggers when an individual file is deleted, but not when an entire folder with all files is deleted. File Updated : Triggers when a file is saved or deleted. A save occurs when a file is closed or within 30 seconds after changes have been made. File Version Updated : Triggers when a named version is created in the version history of a file. Library Publish : Triggers when a library file is published.","title":"Trigger Events"},{"location":"integrations/trigger-nodes/n8n-nodes-base.flowTrigger/","text":"Flow Trigger # Flow is modern task and project management software for teams. It brings together tasks, projects, timelines, and conversations, and integrates with a lot of tools. \ud83d\udd11 Credentials You can find authentication information for this node here . Example Usage # This workflow allows you to receive updates for specified tasks in Flow. You can also find the workflow on the website. This example usage workflow would use the following node. - Flow Trigger The final workflow should look like the following image. 1. Flow Trigger node # First of all, you'll have to enter credentials for the Flow Trigger node. You can find out how to do that here . Select 'Task' from the Resource dropdown list. Enter one or more task IDs separated by commas in the Task ID field. You can find the task ID by clicking on the task in Flow and copying the number after tasks/ in the URL. Click on Execute Node to run the workflow. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Flow Trigger node.","title":"Flow Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.flowTrigger/#flow-trigger","text":"Flow is modern task and project management software for teams. It brings together tasks, projects, timelines, and conversations, and integrates with a lot of tools. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Flow Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.flowTrigger/#example-usage","text":"This workflow allows you to receive updates for specified tasks in Flow. You can also find the workflow on the website. This example usage workflow would use the following node. - Flow Trigger The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/trigger-nodes/n8n-nodes-base.flowTrigger/#1-flow-trigger-node","text":"First of all, you'll have to enter credentials for the Flow Trigger node. You can find out how to do that here . Select 'Task' from the Resource dropdown list. Enter one or more task IDs separated by commas in the Task ID field. You can find the task ID by clicking on the task in Flow and copying the number after tasks/ in the URL. Click on Execute Node to run the workflow. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Flow Trigger node.","title":"1. Flow Trigger node"},{"location":"integrations/trigger-nodes/n8n-nodes-base.formIoTrigger/","text":"Form.io Trigger # Form.io is an enterprise class combined form and API data management platform for building complex form-based business process applications. \ud83d\udd11 Credentials You can find authentication information for this node here . Example Usage # This workflow allows you to receive updates for newly created submissions in Form.io. This example workflow uses the following node: Form.io Trigger The final workflow should look like the following image. 1. Form.io Trigger node # First enter credentials for the Form.io Trigger node. You can find out how to do that here . Select the project you want to receive updates for using the Project Name/ID dropdown list. Select the form you want to receive updates for using the Form Name/ID dropdown list. Select Submission Created from the Trigger Events dropdown list. Click on Execute Node to run the workflow. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Form.io Trigger node.","title":"Form.io Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.formIoTrigger/#formio-trigger","text":"Form.io is an enterprise class combined form and API data management platform for building complex form-based business process applications. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Form.io Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.formIoTrigger/#example-usage","text":"This workflow allows you to receive updates for newly created submissions in Form.io. This example workflow uses the following node: Form.io Trigger The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/trigger-nodes/n8n-nodes-base.formIoTrigger/#1-formio-trigger-node","text":"First enter credentials for the Form.io Trigger node. You can find out how to do that here . Select the project you want to receive updates for using the Project Name/ID dropdown list. Select the form you want to receive updates for using the Form Name/ID dropdown list. Select Submission Created from the Trigger Events dropdown list. Click on Execute Node to run the workflow. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Form.io Trigger node.","title":"1. Form.io Trigger node"},{"location":"integrations/trigger-nodes/n8n-nodes-base.formstackTrigger/","text":"Formstack Trigger # Formstack is a workplace productivity platform that helps organizations streamline digital work through no-code online forms, documents, and signatures. \ud83d\udd11 Credentials You can find authentication information for this node here . Example Usage # This workflow allows you to receive updates for newly created submissions in Formstack forms. This example workflow uses the following node: Formstack Trigger The final workflow should look like the following image. 1. Formstack Trigger node # First enter credentials for the Formstack Trigger node. You can find out how to do that here . Enter the form you want to receive updates for using the Form Name/ID field. Click on Execute Node to run the workflow. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Form.io Trigger node.","title":"Formstack Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.formstackTrigger/#formstack-trigger","text":"Formstack is a workplace productivity platform that helps organizations streamline digital work through no-code online forms, documents, and signatures. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Formstack Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.formstackTrigger/#example-usage","text":"This workflow allows you to receive updates for newly created submissions in Formstack forms. This example workflow uses the following node: Formstack Trigger The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/trigger-nodes/n8n-nodes-base.formstackTrigger/#1-formstack-trigger-node","text":"First enter credentials for the Formstack Trigger node. You can find out how to do that here . Enter the form you want to receive updates for using the Form Name/ID field. Click on Execute Node to run the workflow. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Form.io Trigger node.","title":"1. Formstack Trigger node"},{"location":"integrations/trigger-nodes/n8n-nodes-base.getResponseTrigger/","text":"GetResponse Trigger # GetResponse is an online platform that offers email marketing software, landing page creator, webinar hosting, and much more. \ud83d\udd11 Credentials You can find authentication information for this node here . Events # Receive notifications when a customer is subscribed to a list Receive notifications when a customer is unsubscribed from a list Receive notifications when an email is opened Receive notifications when an email is clicked Receive notifications when a survey is submitted Example Usage # This workflow allows you to receive updates when a customer gets subscribed to a list in GetResponse and add them to a base in Airtable. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - GetResponse Trigger - Set - Airtable The final workflow should look like the following image. 1. GetResponse Trigger # The GetResponse Trigger node will trigger the workflow when a customer is subscribed to a list in GetResponse. First of all, you'll have to enter credentials for the GetResponse Trigger node. You can find out how to do that here . Select 'Customer Subscribed' from the Events dropdown list. Select a list from the List IDs dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the information of the customer that gets subscribed to a list in GetResponse. This output is passed on to the next node in the workflow. 2. Set node # We will use the Set node to ensure that only the data that we set in this node gets passed on to the next nodes in the workflow. Click on Add Value and select 'String' from the dropdown list. Enter Name in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > contact_name. You can also add the following expression: {{$json[\"contact_name\"]}} . Click on Add Value and select 'String' from the dropdown list. Enter Email in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > contact_email. You can also add the following expression: {{$json[\"contact_email\"]}} . Toggle Keep Only Set to true . We set this option to true to ensure that only the data that we have set in this node get passed on to the next nodes in the workflow. Click on Execute Node to run the node. In the screenshot below, you will notice that the node uses the data from the previous node and returns the data that we set for the workflow. 3. Airtable node (Append) # This node will store the data coming from the previous node in a table in Airtable. Create a table like this in your Airtable base. First of all, you'll have to enter credentials for the Airtable node. You can find out how to do that here . Select 'Append' from the Operation dropdown list. Enter the base ID in the Base ID field. For obtaining the Base ID, head over to their API page and select the correct base. You\u2019ll find the Base ID under the Introduction section. In n8n, paste the ID of the base in the Base ID field. Enter the table name in the Table name field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node adds the information of the customer from the previous node in a table in Airtable. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the GetResponse Trigger node.","title":"GetResponse Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.getResponseTrigger/#getresponse-trigger","text":"GetResponse is an online platform that offers email marketing software, landing page creator, webinar hosting, and much more. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"GetResponse Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.getResponseTrigger/#events","text":"Receive notifications when a customer is subscribed to a list Receive notifications when a customer is unsubscribed from a list Receive notifications when an email is opened Receive notifications when an email is clicked Receive notifications when a survey is submitted","title":"Events"},{"location":"integrations/trigger-nodes/n8n-nodes-base.getResponseTrigger/#example-usage","text":"This workflow allows you to receive updates when a customer gets subscribed to a list in GetResponse and add them to a base in Airtable. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - GetResponse Trigger - Set - Airtable The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/trigger-nodes/n8n-nodes-base.getResponseTrigger/#1-getresponse-trigger","text":"The GetResponse Trigger node will trigger the workflow when a customer is subscribed to a list in GetResponse. First of all, you'll have to enter credentials for the GetResponse Trigger node. You can find out how to do that here . Select 'Customer Subscribed' from the Events dropdown list. Select a list from the List IDs dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the information of the customer that gets subscribed to a list in GetResponse. This output is passed on to the next node in the workflow.","title":"1. GetResponse Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.getResponseTrigger/#2-set-node","text":"We will use the Set node to ensure that only the data that we set in this node gets passed on to the next nodes in the workflow. Click on Add Value and select 'String' from the dropdown list. Enter Name in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > contact_name. You can also add the following expression: {{$json[\"contact_name\"]}} . Click on Add Value and select 'String' from the dropdown list. Enter Email in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > contact_email. You can also add the following expression: {{$json[\"contact_email\"]}} . Toggle Keep Only Set to true . We set this option to true to ensure that only the data that we have set in this node get passed on to the next nodes in the workflow. Click on Execute Node to run the node. In the screenshot below, you will notice that the node uses the data from the previous node and returns the data that we set for the workflow.","title":"2. Set node"},{"location":"integrations/trigger-nodes/n8n-nodes-base.getResponseTrigger/#3-airtable-node-append","text":"This node will store the data coming from the previous node in a table in Airtable. Create a table like this in your Airtable base. First of all, you'll have to enter credentials for the Airtable node. You can find out how to do that here . Select 'Append' from the Operation dropdown list. Enter the base ID in the Base ID field. For obtaining the Base ID, head over to their API page and select the correct base. You\u2019ll find the Base ID under the Introduction section. In n8n, paste the ID of the base in the Base ID field. Enter the table name in the Table name field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node adds the information of the customer from the previous node in a table in Airtable. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the GetResponse Trigger node.","title":"3. Airtable node (Append)"},{"location":"integrations/trigger-nodes/n8n-nodes-base.githubTrigger/","text":"GitHub Trigger # GitHub provides hosting for software development and version control using Git. It offers the distributed version control and source code management (SCM) functionality of Git, access control and several collaboration features such as bug tracking, feature requests, task management, and wikis for every project. \ud83d\udd11 Credentials You can find authentication information for this node here . Example Usage # This workflow allows you to receive updates for GitHub events. You can also find the workflow on the website. This example usage workflow would use the following node. - GitHub Trigger The final workflow should look like the following image. 1. GitHub Trigger node # First of all, you'll have to enter credentials for the GitHub Trigger node. You can find out how to do that here . Enter the repository owner in the Repository Owner field. Enter the repository name in the Repository Name field. Select the * option in the Events field to receive updates when any event is triggered. Click on Execute Node to run the workflow. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the GitHub Trigger node.","title":"GitHub Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.githubTrigger/#github-trigger","text":"GitHub provides hosting for software development and version control using Git. It offers the distributed version control and source code management (SCM) functionality of Git, access control and several collaboration features such as bug tracking, feature requests, task management, and wikis for every project. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"GitHub Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.githubTrigger/#example-usage","text":"This workflow allows you to receive updates for GitHub events. You can also find the workflow on the website. This example usage workflow would use the following node. - GitHub Trigger The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/trigger-nodes/n8n-nodes-base.githubTrigger/#1-github-trigger-node","text":"First of all, you'll have to enter credentials for the GitHub Trigger node. You can find out how to do that here . Enter the repository owner in the Repository Owner field. Enter the repository name in the Repository Name field. Select the * option in the Events field to receive updates when any event is triggered. Click on Execute Node to run the workflow. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the GitHub Trigger node.","title":"1. GitHub Trigger node"},{"location":"integrations/trigger-nodes/n8n-nodes-base.gitlabTrigger/","text":"GitLab Trigger # GitLab is a web-based DevOps lifecycle tool that provides a Git-repository manager providing wiki, issue-tracking, and continuous integration/continuous installation pipeline features. \ud83d\udd11 Credentials You can find authentication information for this node here . Example Usage # This workflow allows you to receive updates for GitLab events. You can also find the workflow on the website. This example usage workflow would use the following node. - GitLab Trigger The final workflow should look like the following image. 1. GitLab Trigger node # First of all, you'll have to enter credentials for the GitLab Trigger node. You can find out how to do that here . Enter the repository owner in the Repository Owner field. Enter the repository name in the Repository Name field. Select the * option in the Events field to receive updates when any event is triggered. Click on Execute Node to run the workflow. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the GitLab Trigger node.","title":"GitLab Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.gitlabTrigger/#gitlab-trigger","text":"GitLab is a web-based DevOps lifecycle tool that provides a Git-repository manager providing wiki, issue-tracking, and continuous integration/continuous installation pipeline features. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"GitLab Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.gitlabTrigger/#example-usage","text":"This workflow allows you to receive updates for GitLab events. You can also find the workflow on the website. This example usage workflow would use the following node. - GitLab Trigger The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/trigger-nodes/n8n-nodes-base.gitlabTrigger/#1-gitlab-trigger-node","text":"First of all, you'll have to enter credentials for the GitLab Trigger node. You can find out how to do that here . Enter the repository owner in the Repository Owner field. Enter the repository name in the Repository Name field. Select the * option in the Events field to receive updates when any event is triggered. Click on Execute Node to run the workflow. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the GitLab Trigger node.","title":"1. GitLab Trigger node"},{"location":"integrations/trigger-nodes/n8n-nodes-base.googleCalendarTrigger/","text":"Google Calendar Trigger # Google Calendar is a time-management and scheduling calendar service developed by Google. \ud83d\udd11 Credentials You can find authentication information for this node here . Events # Event Created Event Ended Event Started Event Updated","title":"Google Calendar Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.googleCalendarTrigger/#google-calendar-trigger","text":"Google Calendar is a time-management and scheduling calendar service developed by Google. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Google Calendar Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.googleCalendarTrigger/#events","text":"Event Created Event Ended Event Started Event Updated","title":"Events"},{"location":"integrations/trigger-nodes/n8n-nodes-base.googleDriveTrigger/","text":"Google Drive Trigger # Google Drive is a file storage and synchronization service developed by Google. It allows users to store files on their servers, synchronize files across devices, and share files. \ud83d\udd11 Credentials You can find authentication information for this node here . Manual Executions vs. Activation On manual executions this node will return the last event matching its search criteria. If no event matches the criteria (for example because you are watching for files to be created but no files have been created so far), an error is thrown. Once saved and activated, the node will regularly check for any matching events and will trigger your workflow for each event found. Example Usage # This workflow sends out email notifications when a new file has been uploaded to Google Drive. It uses two nodes: Google Drive Trigger Send Email The final workflow should look like the image below. 1. Google Drive Trigger node # Enter valid credentials for the Google Drive Trigger node. You can find out how to do so here . Select the Changes involving a Specific Folder option in the Trigger On field. Paste the URL of a Google Drive folder in the Folder URL or ID field. Select File Created in the Watch For field. Click on Execute Node to execute the node. In the screenshot below you can see the file returned by the node. 2. Send Email node # Enter valid credentials for the Send Email node. You can find out how to do so here . Enter valid emails in the From Email and To Email fields. Enter File Created in the Subject field. Click on the gear icon next to the Text field and choose Add Expression . Enter A file in your Google Drive file folder has been created: {{$json[\"name\"]}} and close the expression editor. Click on ** Execute Node to execute the node.","title":"Google Drive Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.googleDriveTrigger/#google-drive-trigger","text":"Google Drive is a file storage and synchronization service developed by Google. It allows users to store files on their servers, synchronize files across devices, and share files. \ud83d\udd11 Credentials You can find authentication information for this node here . Manual Executions vs. Activation On manual executions this node will return the last event matching its search criteria. If no event matches the criteria (for example because you are watching for files to be created but no files have been created so far), an error is thrown. Once saved and activated, the node will regularly check for any matching events and will trigger your workflow for each event found.","title":"Google Drive Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.googleDriveTrigger/#example-usage","text":"This workflow sends out email notifications when a new file has been uploaded to Google Drive. It uses two nodes: Google Drive Trigger Send Email The final workflow should look like the image below.","title":"Example Usage"},{"location":"integrations/trigger-nodes/n8n-nodes-base.googleDriveTrigger/#1-google-drive-trigger-node","text":"Enter valid credentials for the Google Drive Trigger node. You can find out how to do so here . Select the Changes involving a Specific Folder option in the Trigger On field. Paste the URL of a Google Drive folder in the Folder URL or ID field. Select File Created in the Watch For field. Click on Execute Node to execute the node. In the screenshot below you can see the file returned by the node.","title":"1. Google Drive Trigger node"},{"location":"integrations/trigger-nodes/n8n-nodes-base.googleDriveTrigger/#2-send-email-node","text":"Enter valid credentials for the Send Email node. You can find out how to do so here . Enter valid emails in the From Email and To Email fields. Enter File Created in the Subject field. Click on the gear icon next to the Text field and choose Add Expression . Enter A file in your Google Drive file folder has been created: {{$json[\"name\"]}} and close the expression editor. Click on ** Execute Node to execute the node.","title":"2. Send Email node"},{"location":"integrations/trigger-nodes/n8n-nodes-base.gumroadTrigger/","text":"Gumroad Trigger # Gumroad is an online platform that enables creators to sell products directly to consumers. \ud83d\udd11 Credentials You can find authentication information for this node here . Example Usage # This workflow allows you to receive updates when a sale is made in Gumroad. You can also find the workflow on n8n.io. This example usage workflow would use the following node. - Gumroad Trigger The final workflow should look like the following image. 1. Gumroad Trigger node # First of all, you'll have to enter credentials for the Gumroad Trigger node. You can find out how to do that here . Select 'Sale' from the Resource dropdown list. Click on Execute Node to run the node. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Gumroad Trigger node.","title":"Gumroad Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.gumroadTrigger/#gumroad-trigger","text":"Gumroad is an online platform that enables creators to sell products directly to consumers. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Gumroad Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.gumroadTrigger/#example-usage","text":"This workflow allows you to receive updates when a sale is made in Gumroad. You can also find the workflow on n8n.io. This example usage workflow would use the following node. - Gumroad Trigger The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/trigger-nodes/n8n-nodes-base.gumroadTrigger/#1-gumroad-trigger-node","text":"First of all, you'll have to enter credentials for the Gumroad Trigger node. You can find out how to do that here . Select 'Sale' from the Resource dropdown list. Click on Execute Node to run the node. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Gumroad Trigger node.","title":"1. Gumroad Trigger node"},{"location":"integrations/trigger-nodes/n8n-nodes-base.helpScoutTrigger/","text":"Help Scout Trigger # Help Scout is a help desk software that provides an email-based customer support platform, knowledge base tool, and an embeddable search/contact widget for customer service professionals. \ud83d\udd11 Credentials You can find authentication information for this node here . Example Usage # This workflow allows you to receive updates when a customer is created in Help Scout. You can also find the workflow on n8n.io. This example usage workflow would use the following node. - Help Scout Trigger The final workflow should look like the following image. 1. Help Scout Trigger node # First of all, you'll have to enter credentials for the Help Scout Trigger node. You can find out how to do that here . Select 'Customer - Created' from the Events dropdown list. Click on Execute Node to run the node. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Help Scout Trigger node.","title":"Help Scout Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.helpScoutTrigger/#help-scout-trigger","text":"Help Scout is a help desk software that provides an email-based customer support platform, knowledge base tool, and an embeddable search/contact widget for customer service professionals. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Help Scout Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.helpScoutTrigger/#example-usage","text":"This workflow allows you to receive updates when a customer is created in Help Scout. You can also find the workflow on n8n.io. This example usage workflow would use the following node. - Help Scout Trigger The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/trigger-nodes/n8n-nodes-base.helpScoutTrigger/#1-help-scout-trigger-node","text":"First of all, you'll have to enter credentials for the Help Scout Trigger node. You can find out how to do that here . Select 'Customer - Created' from the Events dropdown list. Click on Execute Node to run the node. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Help Scout Trigger node.","title":"1. Help Scout Trigger node"},{"location":"integrations/trigger-nodes/n8n-nodes-base.hubspotTrigger/","text":"HubSpot Trigger # HubSpot provides tools for social media marketing, content management, web analytics, landing pages, customer support, and search engine optimization. \ud83d\udd11 Credentials For this node, you will have to retrieve the App ID and Client secret from the 'Using OAuth' section as well as the Developer API Key from the 'Using Developer API Key' section. You can find authentication information for this node here . Webhooks If you activate a second trigger, the previous trigger stops working. This is because the trigger registers a new webhook with HubSpot when activated. HubSpot only allows one webhook at a time. Example Usage # This workflow allows you to receive updates when a new contact is created in HubSpot. You can also find the workflow on the website. This example usage workflow would use the following node. - HubSpot Trigger The final workflow should look like the following image. 1. HubSpot Trigger node # First of all, you'll have to enter credentials for the HubSpot Trigger node. You can find out how to do that here . Enter the HubSpot App ID in the App ID field. You can find out how to obtain the App ID in the link above. Click on Execute Node to run the workflow. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the HubSpot Trigger node.","title":"HubSpot Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.hubspotTrigger/#hubspot-trigger","text":"HubSpot provides tools for social media marketing, content management, web analytics, landing pages, customer support, and search engine optimization. \ud83d\udd11 Credentials For this node, you will have to retrieve the App ID and Client secret from the 'Using OAuth' section as well as the Developer API Key from the 'Using Developer API Key' section. You can find authentication information for this node here . Webhooks If you activate a second trigger, the previous trigger stops working. This is because the trigger registers a new webhook with HubSpot when activated. HubSpot only allows one webhook at a time.","title":"HubSpot Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.hubspotTrigger/#example-usage","text":"This workflow allows you to receive updates when a new contact is created in HubSpot. You can also find the workflow on the website. This example usage workflow would use the following node. - HubSpot Trigger The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/trigger-nodes/n8n-nodes-base.hubspotTrigger/#1-hubspot-trigger-node","text":"First of all, you'll have to enter credentials for the HubSpot Trigger node. You can find out how to do that here . Enter the HubSpot App ID in the App ID field. You can find out how to obtain the App ID in the link above. Click on Execute Node to run the workflow. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the HubSpot Trigger node.","title":"1. HubSpot Trigger node"},{"location":"integrations/trigger-nodes/n8n-nodes-base.invoiceNinjaTrigger/","text":"Invoice Ninja Trigger # Invoice Ninja is a free open-source online invoicing app for freelancers & businesses. It offers invoicing, payments, expense tracking, & time-tasks. \ud83d\udd11 Credentials You can find authentication information for this node here . Example Usage # This workflow allows you to receive updates when new invoices are created in Invoice Ninja. You can also find the workflow on the website. This example usage workflow would use the following node. - Invoice Ninja Trigger The final workflow should look like the following image. 1. Invoice Ninja Trigger node # First of all, you'll have to enter credentials for the Invoice Ninja Trigger node. You can find out how to do that here . Select the 'Invoice Created' option from the Event dropdown list to receive updates when a new invoice is created. Click on Execute Node to run the workflow. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Invoice Ninja Trigger node.","title":"Invoice Ninja Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.invoiceNinjaTrigger/#invoice-ninja-trigger","text":"Invoice Ninja is a free open-source online invoicing app for freelancers & businesses. It offers invoicing, payments, expense tracking, & time-tasks. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Invoice Ninja Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.invoiceNinjaTrigger/#example-usage","text":"This workflow allows you to receive updates when new invoices are created in Invoice Ninja. You can also find the workflow on the website. This example usage workflow would use the following node. - Invoice Ninja Trigger The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/trigger-nodes/n8n-nodes-base.invoiceNinjaTrigger/#1-invoice-ninja-trigger-node","text":"First of all, you'll have to enter credentials for the Invoice Ninja Trigger node. You can find out how to do that here . Select the 'Invoice Created' option from the Event dropdown list to receive updates when a new invoice is created. Click on Execute Node to run the workflow. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Invoice Ninja Trigger node.","title":"1. Invoice Ninja Trigger node"},{"location":"integrations/trigger-nodes/n8n-nodes-base.jiraTrigger/","text":"Jira Trigger # Jira is a proprietary issue tracking product developed by Atlassian that allows bug tracking and agile project management. \ud83d\udd11 Credentials You can find authentication information for this node here . Example Usage # This workflow allows you to receive updates for Jira events. You can also find the workflow on the website. This example usage workflow would use the following node. - Jira Trigger The final workflow should look like the following image. 1. Jira Trigger node # First of all, you'll have to enter credentials for the Jira Trigger node. You can find out how to do that here . Select the * option in the Events field to receive updates when any event is triggered. Click on Execute Node to run the workflow. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Jira Trigger node.","title":"Jira Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.jiraTrigger/#jira-trigger","text":"Jira is a proprietary issue tracking product developed by Atlassian that allows bug tracking and agile project management. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Jira Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.jiraTrigger/#example-usage","text":"This workflow allows you to receive updates for Jira events. You can also find the workflow on the website. This example usage workflow would use the following node. - Jira Trigger The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/trigger-nodes/n8n-nodes-base.jiraTrigger/#1-jira-trigger-node","text":"First of all, you'll have to enter credentials for the Jira Trigger node. You can find out how to do that here . Select the * option in the Events field to receive updates when any event is triggered. Click on Execute Node to run the workflow. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Jira Trigger node.","title":"1. Jira Trigger node"},{"location":"integrations/trigger-nodes/n8n-nodes-base.jotFormTrigger/","text":"JotForm Trigger # JotForm is an online form building service. JotForm's software creates forms with a drag and drop creation tool and an option to encrypt user data. \ud83d\udd11 Credentials You can find authentication information for this node here . Example Usage # This workflow allows you to receive updates for form events in JotForm. You can also find the workflow on the website. This example usage workflow would use the following node. - JotForm Trigger The final workflow should look like the following image. 1. JotForm Trigger node # First of all, you'll have to enter credentials for the JotForm Trigger node. You can find out how to do that here . Select the form you want to receive updates for from the Form dropdown list. Click on Execute Node to run the workflow. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the JotForm Trigger node.","title":"JotForm Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.jotFormTrigger/#jotform-trigger","text":"JotForm is an online form building service. JotForm's software creates forms with a drag and drop creation tool and an option to encrypt user data. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"JotForm Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.jotFormTrigger/#example-usage","text":"This workflow allows you to receive updates for form events in JotForm. You can also find the workflow on the website. This example usage workflow would use the following node. - JotForm Trigger The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/trigger-nodes/n8n-nodes-base.jotFormTrigger/#1-jotform-trigger-node","text":"First of all, you'll have to enter credentials for the JotForm Trigger node. You can find out how to do that here . Select the form you want to receive updates for from the Form dropdown list. Click on Execute Node to run the workflow. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the JotForm Trigger node.","title":"1. JotForm Trigger node"},{"location":"integrations/trigger-nodes/n8n-nodes-base.kafkaTrigger/","text":"Kafka Trigger # Kafka is an open-source distributed event streaming platform that one can use for high-performance data pipelines, streaming analytics, data integration, and mission-critical applications. \ud83d\udd11 Credentials You can find authentication information for this node here . Example Usage # This workflow allows you to receive messages from a topic and send an SMS if the value of the temperature is greater than 50. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Kafka Trigger - IF - Vonage - No Operation, do nothing The final workflow should look like the following image. 1. Kafka Trigger node # This node will trigger the workflow when a new message is sent to the topic test_topic . If you're using a different topic, use that instead. We are sending the message { \"id\": 1, \"temp\": 100 } to test_topic . First of all, you'll have to enter credentials for the Kafka Trigger node. You can find out how to do that here . Enter the name of the topic in the Topic field. Enter the group ID in the Group ID field. Click on Add Option and select 'JSON Parse Message'. Toggle JSON Parse Message to true . Click on Execute Node to run the node. In the screenshot below, you will notice that the node gets triggered when a new message is sent to the topic_test topic in Kafka. 2. IF node # This node will compare the value of temp that we received in the message from the previous node. If the value is greater than 50, it will return true otherwise false. Click on Add Condition and select 'Number' from the dropdown list. Click on the gears icon next to the Value 1 field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Kafka Trigger > Output Data > JSON > message > temp. You can also add the following expression: {{$node[\"Kafka Trigger\"].json[\"message\"][\"temp\"]}} . Select 'Larger' from the Operation dropdown list. Set Value 2 to 50. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns output for true when the temperature is greater than 50. 3. Vonage node (send: sms) # This node sends an SMS to the specified phone number when the value of temp is greater than 50 . Create a Vonage node connected to the 'true' output of the IF node. You'll have to enter credentials for the Vonage node. You can find out how to do that here . Enter the name of the sender in the From field. If you're using a number, enter the number instead. Enter the receiver's phone number in the To field. Click on the gears icon next to the Message field and click on Add Expression . Enter the following in the Expression field. 1 2 Alert! The value of temp is {{$node[\"Kafka Trigger\"].json[\"message\"][\"temp\"]}}. Click on Execute Node to run the node. In the screenshot below, you will notice that the node sends an SMS with the value of temp that we received from the Kafka Trigger node. 4. NoOp node # Adding this node here is optional, as the absence of this node won't make a difference to the functioning of the workflow. Create a NoOp node connected to the 'false' output of the IF node. Click on Execute Node to run the node. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Kafka Trigger node.","title":"Kafka Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.kafkaTrigger/#kafka-trigger","text":"Kafka is an open-source distributed event streaming platform that one can use for high-performance data pipelines, streaming analytics, data integration, and mission-critical applications. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Kafka Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.kafkaTrigger/#example-usage","text":"This workflow allows you to receive messages from a topic and send an SMS if the value of the temperature is greater than 50. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Kafka Trigger - IF - Vonage - No Operation, do nothing The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/trigger-nodes/n8n-nodes-base.kafkaTrigger/#1-kafka-trigger-node","text":"This node will trigger the workflow when a new message is sent to the topic test_topic . If you're using a different topic, use that instead. We are sending the message { \"id\": 1, \"temp\": 100 } to test_topic . First of all, you'll have to enter credentials for the Kafka Trigger node. You can find out how to do that here . Enter the name of the topic in the Topic field. Enter the group ID in the Group ID field. Click on Add Option and select 'JSON Parse Message'. Toggle JSON Parse Message to true . Click on Execute Node to run the node. In the screenshot below, you will notice that the node gets triggered when a new message is sent to the topic_test topic in Kafka.","title":"1. Kafka Trigger node"},{"location":"integrations/trigger-nodes/n8n-nodes-base.kafkaTrigger/#2-if-node","text":"This node will compare the value of temp that we received in the message from the previous node. If the value is greater than 50, it will return true otherwise false. Click on Add Condition and select 'Number' from the dropdown list. Click on the gears icon next to the Value 1 field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Kafka Trigger > Output Data > JSON > message > temp. You can also add the following expression: {{$node[\"Kafka Trigger\"].json[\"message\"][\"temp\"]}} . Select 'Larger' from the Operation dropdown list. Set Value 2 to 50. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns output for true when the temperature is greater than 50.","title":"2. IF node"},{"location":"integrations/trigger-nodes/n8n-nodes-base.kafkaTrigger/#3-vonage-node-send-sms","text":"This node sends an SMS to the specified phone number when the value of temp is greater than 50 . Create a Vonage node connected to the 'true' output of the IF node. You'll have to enter credentials for the Vonage node. You can find out how to do that here . Enter the name of the sender in the From field. If you're using a number, enter the number instead. Enter the receiver's phone number in the To field. Click on the gears icon next to the Message field and click on Add Expression . Enter the following in the Expression field. 1 2 Alert! The value of temp is {{$node[\"Kafka Trigger\"].json[\"message\"][\"temp\"]}}. Click on Execute Node to run the node. In the screenshot below, you will notice that the node sends an SMS with the value of temp that we received from the Kafka Trigger node.","title":"3. Vonage node (send: sms)"},{"location":"integrations/trigger-nodes/n8n-nodes-base.kafkaTrigger/#4-noop-node","text":"Adding this node here is optional, as the absence of this node won't make a difference to the functioning of the workflow. Create a NoOp node connected to the 'false' output of the IF node. Click on Execute Node to run the node. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Kafka Trigger node.","title":"4. NoOp node"},{"location":"integrations/trigger-nodes/n8n-nodes-base.keapTrigger/","text":"Keap Trigger # Keap is an e-mail marketing and sales platform for small businesses, including products to manage and optimize the customer lifecycle, customer relationship management, marketing automation, lead capture, and e-commerce. \ud83d\udd11 Credentials You can find authentication information for this node here . Example Usage # This workflow allows you to receive updates when new contacts are created in Keap. You can also find the workflow on the website. This example usage workflow would use the following node. - Keap Trigger The final workflow should look like the following image. 1. Keap Trigger node # First of all, you'll have to enter credentials for the Keap Trigger node. You can find out how to do that here . Select the 'Contact Add' option from the Event dropdown list to receive updates when a new contact is created. Click on Execute Node to run the workflow. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Keap Trigger node.","title":"Keap Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.keapTrigger/#keap-trigger","text":"Keap is an e-mail marketing and sales platform for small businesses, including products to manage and optimize the customer lifecycle, customer relationship management, marketing automation, lead capture, and e-commerce. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Keap Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.keapTrigger/#example-usage","text":"This workflow allows you to receive updates when new contacts are created in Keap. You can also find the workflow on the website. This example usage workflow would use the following node. - Keap Trigger The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/trigger-nodes/n8n-nodes-base.keapTrigger/#1-keap-trigger-node","text":"First of all, you'll have to enter credentials for the Keap Trigger node. You can find out how to do that here . Select the 'Contact Add' option from the Event dropdown list to receive updates when a new contact is created. Click on Execute Node to run the workflow. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Keap Trigger node.","title":"1. Keap Trigger node"},{"location":"integrations/trigger-nodes/n8n-nodes-base.lemlistTrigger/","text":"Lemlist Trigger # Lemlist is an email outreach platform that allows you to automatically generate personalized images and videos and send personalized cold emails. \ud83d\udd11 Credentials You can find authentication information for this node here . Events # Email Bounced Email Clicked Email Opened Email Replied Email Send Failed Email Sent Email Unsubscribed Example Usage # This workflow allows you to send a message on Mattermost when a lead replies to your email. You can also find the workflow on n8n.io. This example usage workflow would use the following node. - Lemlist Trigger - Mattermost The final workflow should look like the following image. 1. Lemlist Trigger # The Lemlist Trigger node will trigger the workflow when a lead sends a reply to the campaign Docs campaign . If you have a different campaign, use that instead. First of all, you'll have to enter credentials for the Lemlist Trigger node. You can find out how to do that here . Select 'Email Replied' from the Events dropdown list. Click on Add Field and select 'Campaign ID'. Select 'Docs campaign' from the Campaign ID dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the information of the reply that was sent by a lead. This output is passed on to the next node in the workflow. 2. Mattermost node (post: message) # This node will send a message to the Leads channel in Mattermost. If you have a different channel, use that instead. First of all, you'll have to enter credentials for the Mattermost node. You can find out how to enter credentials for this node here . Select a channel from the Channel ID dropdown list. Click on the gears icon next to the Message field click on Add Expression . Enter the following message in the Expression field: 1 2 {{$json[\"firstName\"]}} has replied back to your {{$json[\"campaignName\"]}}. Below is the reply: > {{$json[\"text\"]}} Click on Execute Node to run the workflow. In the screenshot below, you will notice that the node sends a message with a reply to the Leads channel in Mattermost. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Lemlist Trigger node.","title":"Lemlist Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.lemlistTrigger/#lemlist-trigger","text":"Lemlist is an email outreach platform that allows you to automatically generate personalized images and videos and send personalized cold emails. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Lemlist Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.lemlistTrigger/#events","text":"Email Bounced Email Clicked Email Opened Email Replied Email Send Failed Email Sent Email Unsubscribed","title":"Events"},{"location":"integrations/trigger-nodes/n8n-nodes-base.lemlistTrigger/#example-usage","text":"This workflow allows you to send a message on Mattermost when a lead replies to your email. You can also find the workflow on n8n.io. This example usage workflow would use the following node. - Lemlist Trigger - Mattermost The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/trigger-nodes/n8n-nodes-base.lemlistTrigger/#1-lemlist-trigger","text":"The Lemlist Trigger node will trigger the workflow when a lead sends a reply to the campaign Docs campaign . If you have a different campaign, use that instead. First of all, you'll have to enter credentials for the Lemlist Trigger node. You can find out how to do that here . Select 'Email Replied' from the Events dropdown list. Click on Add Field and select 'Campaign ID'. Select 'Docs campaign' from the Campaign ID dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the information of the reply that was sent by a lead. This output is passed on to the next node in the workflow.","title":"1. Lemlist Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.lemlistTrigger/#2-mattermost-node-post-message","text":"This node will send a message to the Leads channel in Mattermost. If you have a different channel, use that instead. First of all, you'll have to enter credentials for the Mattermost node. You can find out how to enter credentials for this node here . Select a channel from the Channel ID dropdown list. Click on the gears icon next to the Message field click on Add Expression . Enter the following message in the Expression field: 1 2 {{$json[\"firstName\"]}} has replied back to your {{$json[\"campaignName\"]}}. Below is the reply: > {{$json[\"text\"]}} Click on Execute Node to run the workflow. In the screenshot below, you will notice that the node sends a message with a reply to the Leads channel in Mattermost. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Lemlist Trigger node.","title":"2. Mattermost node (post: message)"},{"location":"integrations/trigger-nodes/n8n-nodes-base.linearTrigger/","text":"Linear Trigger # Linear is a SaaS issue tracking tool. \ud83d\udd11 Credentials You can find authentication information for this node here . Events # Comment Reaction Cycle Issue Issue Comment Issue Label Project","title":"Linear Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.linearTrigger/#linear-trigger","text":"Linear is a SaaS issue tracking tool. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Linear Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.linearTrigger/#events","text":"Comment Reaction Cycle Issue Issue Comment Issue Label Project","title":"Events"},{"location":"integrations/trigger-nodes/n8n-nodes-base.mailchimpTrigger/","text":"Mailchimp Trigger # Mailchimp is an integrated marketing platform that allows business owners to automate their email campaigns and track user engagement. \ud83d\udd11 Credentials You can find authentication information for this node here . Example Usage # This workflow allows you to receive updates when Subscribe events occur in a MailChimp list. You can also find the workflow on the website. This example usage workflow would use the following node. - Mailchimp Trigger The final workflow should look like the following image. 1. Mailchimp Trigger node # First of all, you'll have to enter credentials for the Mailchimp Trigger node. You can find out how to do that here . Select the list you want to listen to from the List dropdown list. Select 'Subscribe' from the Events dropdown list. Select 'API', 'Admin', and 'User' from the Sources dropdown list. Click on Execute Node to run the workflow. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Mailchimp Trigger node.","title":"Mailchimp Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.mailchimpTrigger/#mailchimp-trigger","text":"Mailchimp is an integrated marketing platform that allows business owners to automate their email campaigns and track user engagement. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Mailchimp Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.mailchimpTrigger/#example-usage","text":"This workflow allows you to receive updates when Subscribe events occur in a MailChimp list. You can also find the workflow on the website. This example usage workflow would use the following node. - Mailchimp Trigger The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/trigger-nodes/n8n-nodes-base.mailchimpTrigger/#1-mailchimp-trigger-node","text":"First of all, you'll have to enter credentials for the Mailchimp Trigger node. You can find out how to do that here . Select the list you want to listen to from the List dropdown list. Select 'Subscribe' from the Events dropdown list. Select 'API', 'Admin', and 'User' from the Sources dropdown list. Click on Execute Node to run the workflow. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Mailchimp Trigger node.","title":"1. Mailchimp Trigger node"},{"location":"integrations/trigger-nodes/n8n-nodes-base.mailerLiteTrigger/","text":"MailerLite Trigger # MailerLite is an email marketing solution that provides you with a user-friendly content editor, simplified subscriber management, and campaign reports with the most important statistics. \ud83d\udd11 Credentials You can find authentication information for this node here . Events # Campaign Sent Subscriber Added to Group Subscriber Added through Webform Subscriber Autonomation Completed Subscriber Autonomation Triggered Subscriber Bounced Subscriber Created Subscriber Complained Subscriber Removed from Group Subscriber Unsubscribe Subscriber Updated Example Usage # This workflow allows you to receive updates when a subscriber is added to a group in MailerLite and add them to a base in Airtable. You can also find the workflow on n8n.io. This example usage workflow would use the following node. - MailerLite Trigger - Set - Airtable The final workflow should look like the following image. 1. MailerLite Trigger # The MailerLite Trigger node will trigger the workflow when a subscriber is added to a group in MailerLite. First of all, you'll have to enter credentials for the MailerLite Trigger node. You can find out how to do that here . Select 'Subscriber Added to Group' from the Events dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the information of the subscriber that was added to a group in MailerLite. This output is passed on to the next node in the workflow. 2. Set node # We will use the Set node to ensure that only the data that we set in this node gets passed on to the next nodes in the workflow. Click on Add Value and select 'String' from the dropdown list. Enter Name in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > MailerLite Trigger > Output Data > JSON > data > subscriber > name. You can also add the following expression: {{$node[\"MailerLite Trigger\"].json[\"data\"][\"subscriber\"][\"name\"]}} . Click on Add Value and select 'String' from the dropdown list. Enter Email in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > MailerLite Trigger > Output Data > JSON > data > subscriber > email. You can also add the following expression: {{$node[\"MailerLite Trigger\"].json[\"data\"][\"subscriber\"][\"email\"]}} . Toggle Keep Only Set to true . We set this option to true to ensure that only the data that we have set in this node get passed on to the next nodes in the workflow. Click on Execute Node to run the node. In the screenshot below, you will notice that the node uses the data from the previous node and returns the data that we set for the workflow. 3. Airtable node # This node will store the data coming from the previous node in a table in Airtable. First of all, you'll have to enter credentials for the Airtable node. You can find out how to do that here . Select 'Append' from the Operation dropdown list. Enter the base ID in the Base ID field. For obtaining the Base ID, head over to their API page and select the correct base. You\u2019ll find the Base ID under the Introduction section. In n8n, paste the ID of the base in the Base ID field. Enter the table name in the Table name field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node adds the information of the subscriber from the previous node in a table in Airtable. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the MailerLite Trigger node.","title":"MailerLite Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.mailerLiteTrigger/#mailerlite-trigger","text":"MailerLite is an email marketing solution that provides you with a user-friendly content editor, simplified subscriber management, and campaign reports with the most important statistics. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"MailerLite Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.mailerLiteTrigger/#events","text":"Campaign Sent Subscriber Added to Group Subscriber Added through Webform Subscriber Autonomation Completed Subscriber Autonomation Triggered Subscriber Bounced Subscriber Created Subscriber Complained Subscriber Removed from Group Subscriber Unsubscribe Subscriber Updated","title":"Events"},{"location":"integrations/trigger-nodes/n8n-nodes-base.mailerLiteTrigger/#example-usage","text":"This workflow allows you to receive updates when a subscriber is added to a group in MailerLite and add them to a base in Airtable. You can also find the workflow on n8n.io. This example usage workflow would use the following node. - MailerLite Trigger - Set - Airtable The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/trigger-nodes/n8n-nodes-base.mailerLiteTrigger/#1-mailerlite-trigger","text":"The MailerLite Trigger node will trigger the workflow when a subscriber is added to a group in MailerLite. First of all, you'll have to enter credentials for the MailerLite Trigger node. You can find out how to do that here . Select 'Subscriber Added to Group' from the Events dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the information of the subscriber that was added to a group in MailerLite. This output is passed on to the next node in the workflow.","title":"1. MailerLite Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.mailerLiteTrigger/#2-set-node","text":"We will use the Set node to ensure that only the data that we set in this node gets passed on to the next nodes in the workflow. Click on Add Value and select 'String' from the dropdown list. Enter Name in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > MailerLite Trigger > Output Data > JSON > data > subscriber > name. You can also add the following expression: {{$node[\"MailerLite Trigger\"].json[\"data\"][\"subscriber\"][\"name\"]}} . Click on Add Value and select 'String' from the dropdown list. Enter Email in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Nodes > MailerLite Trigger > Output Data > JSON > data > subscriber > email. You can also add the following expression: {{$node[\"MailerLite Trigger\"].json[\"data\"][\"subscriber\"][\"email\"]}} . Toggle Keep Only Set to true . We set this option to true to ensure that only the data that we have set in this node get passed on to the next nodes in the workflow. Click on Execute Node to run the node. In the screenshot below, you will notice that the node uses the data from the previous node and returns the data that we set for the workflow.","title":"2. Set node"},{"location":"integrations/trigger-nodes/n8n-nodes-base.mailerLiteTrigger/#3-airtable-node","text":"This node will store the data coming from the previous node in a table in Airtable. First of all, you'll have to enter credentials for the Airtable node. You can find out how to do that here . Select 'Append' from the Operation dropdown list. Enter the base ID in the Base ID field. For obtaining the Base ID, head over to their API page and select the correct base. You\u2019ll find the Base ID under the Introduction section. In n8n, paste the ID of the base in the Base ID field. Enter the table name in the Table name field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node adds the information of the subscriber from the previous node in a table in Airtable. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the MailerLite Trigger node.","title":"3. Airtable node"},{"location":"integrations/trigger-nodes/n8n-nodes-base.mailjetTrigger/","text":"Mailjet Trigger # Mailjet is a cloud-based email sending and tracking system. The platform allows professionals to send both marketing emails and transactional emails. It includes tools for designing emails, sending massive volumes and tracking these messages. \ud83d\udd11 Credentials You can find authentication information for this node here . Example Usage # This workflow allows you to receive updates when emails are sent in Mailjet. You can also find the workflow on the website. This example usage workflow would use the following node. - Mailjet Trigger The final workflow should look like the following image. 1. Mailjet Trigger node # First of all, you'll have to enter credentials for the Mailjet Trigger node. You can find out how to do that here . Select the email.sent option from the Event dropdown list to receive updates when an email is sent. Click on Execute Node to run the workflow. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Mailjet Trigger node.","title":"Mailjet Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.mailjetTrigger/#mailjet-trigger","text":"Mailjet is a cloud-based email sending and tracking system. The platform allows professionals to send both marketing emails and transactional emails. It includes tools for designing emails, sending massive volumes and tracking these messages. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Mailjet Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.mailjetTrigger/#example-usage","text":"This workflow allows you to receive updates when emails are sent in Mailjet. You can also find the workflow on the website. This example usage workflow would use the following node. - Mailjet Trigger The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/trigger-nodes/n8n-nodes-base.mailjetTrigger/#1-mailjet-trigger-node","text":"First of all, you'll have to enter credentials for the Mailjet Trigger node. You can find out how to do that here . Select the email.sent option from the Event dropdown list to receive updates when an email is sent. Click on Execute Node to run the workflow. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Mailjet Trigger node.","title":"1. Mailjet Trigger node"},{"location":"integrations/trigger-nodes/n8n-nodes-base.mauticTrigger/","text":"Mautic Trigger # Mautic is an open-source marketing automation software that helps online businesses automate their repetitive marketing tasks such as lead generation, contact scoring, contact segmentation, and marketing campaigns. \ud83d\udd11 Credentials You can find authentication information for this node here . Example Usage # This workflow allows you to receive updates when a form is submitted in Mautic using the Mautic Trigger node and send an SMS confirmation to the submitter. You can also find the workflow on n8n.io. This example usage workflow would use the following node. - Mautic Trigger - Twilio The final workflow should look like the following image. 1. Mautic Trigger node # The Mautic Trigger node will trigger the workflow when a Mautic form is submitted. First of all, you'll have to enter credentials for the Mautic Trigger node. You can find out how to do that here . Select 'Form Submit Event' from the Events dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the data that was submitted to the Mautic form. This output is passed on to the next nodes in the workflow. 2. Twilio node (send: sms) # This node sends a registration confirmation SMS to the users who filled out the Mautic form. We get the phone number of the submitter from the previous node. First of all, you'll have to enter credentials for the Twilio node. You can find out how to do that here . Enter the Twilio phone number in the From field. Click on the gears icon next to the To field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Mautic Trigger > Output Data > JSON > mautic.form_on_submit > [item: 0] > submission > results > phone_number. You can also add the following expression: {{$node[\"Mautic Trigger\"].json[\"mautic.form_on_submit\"][0][\"submission\"][\"results\"][\"phone_number\"]}} . Click on the gears icon next to the Message field and click on Add Expression . Enter the following message in the Expression field. 1 2 3 Hey, {{$node[\"Mautic Trigger\"].json[\"mautic.form_on_submit\"][0][\"submission\"][\"results\"][\"first_name\"]}} \ud83d\udc4b Thank you for signing up for the Webinar - Getting Started with n8n. The webinar will start at 1800 CEST on 31st October 2020. See you there! Click on Execute Node to run the node. In the screenshot below, you will notice that the node sends an SMS to the submitter whose name and phone number are returned by the Mautic Trigger node. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Mautic Trigger node.","title":"Mautic Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.mauticTrigger/#mautic-trigger","text":"Mautic is an open-source marketing automation software that helps online businesses automate their repetitive marketing tasks such as lead generation, contact scoring, contact segmentation, and marketing campaigns. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Mautic Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.mauticTrigger/#example-usage","text":"This workflow allows you to receive updates when a form is submitted in Mautic using the Mautic Trigger node and send an SMS confirmation to the submitter. You can also find the workflow on n8n.io. This example usage workflow would use the following node. - Mautic Trigger - Twilio The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/trigger-nodes/n8n-nodes-base.mauticTrigger/#1-mautic-trigger-node","text":"The Mautic Trigger node will trigger the workflow when a Mautic form is submitted. First of all, you'll have to enter credentials for the Mautic Trigger node. You can find out how to do that here . Select 'Form Submit Event' from the Events dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the data that was submitted to the Mautic form. This output is passed on to the next nodes in the workflow.","title":"1. Mautic Trigger node"},{"location":"integrations/trigger-nodes/n8n-nodes-base.mauticTrigger/#2-twilio-node-send-sms","text":"This node sends a registration confirmation SMS to the users who filled out the Mautic form. We get the phone number of the submitter from the previous node. First of all, you'll have to enter credentials for the Twilio node. You can find out how to do that here . Enter the Twilio phone number in the From field. Click on the gears icon next to the To field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Mautic Trigger > Output Data > JSON > mautic.form_on_submit > [item: 0] > submission > results > phone_number. You can also add the following expression: {{$node[\"Mautic Trigger\"].json[\"mautic.form_on_submit\"][0][\"submission\"][\"results\"][\"phone_number\"]}} . Click on the gears icon next to the Message field and click on Add Expression . Enter the following message in the Expression field. 1 2 3 Hey, {{$node[\"Mautic Trigger\"].json[\"mautic.form_on_submit\"][0][\"submission\"][\"results\"][\"first_name\"]}} \ud83d\udc4b Thank you for signing up for the Webinar - Getting Started with n8n. The webinar will start at 1800 CEST on 31st October 2020. See you there! Click on Execute Node to run the node. In the screenshot below, you will notice that the node sends an SMS to the submitter whose name and phone number are returned by the Mautic Trigger node. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Mautic Trigger node.","title":"2. Twilio node (send: sms)"},{"location":"integrations/trigger-nodes/n8n-nodes-base.mqttTrigger/","text":"MQTT Trigger # MQTT is an open OASIS and ISO standard lightweight, publish-subscribe network protocol that transports messages between devices. \ud83d\udd11 Credentials You can find authentication information for this node here . Example Usage # This workflow allows you to receive messages from a queue using the MQTT Trigger node. You can also find the workflow on the website. This example usage workflow would use the following node. - MQTT Trigger The final workflow should look like the following image. 1. MQTT Trigger node # First of all, you'll have to enter credentials for the MQTT Trigger node. You can find out how to do that here . Enter the name of the topic in the Topics field. Click on Execute Node to run the workflow. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the MQTT Trigger node.","title":"MQTT Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.mqttTrigger/#mqtt-trigger","text":"MQTT is an open OASIS and ISO standard lightweight, publish-subscribe network protocol that transports messages between devices. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"MQTT Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.mqttTrigger/#example-usage","text":"This workflow allows you to receive messages from a queue using the MQTT Trigger node. You can also find the workflow on the website. This example usage workflow would use the following node. - MQTT Trigger The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/trigger-nodes/n8n-nodes-base.mqttTrigger/#1-mqtt-trigger-node","text":"First of all, you'll have to enter credentials for the MQTT Trigger node. You can find out how to do that here . Enter the name of the topic in the Topics field. Click on Execute Node to run the workflow. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the MQTT Trigger node.","title":"1. MQTT Trigger node"},{"location":"integrations/trigger-nodes/n8n-nodes-base.netlifyTrigger/","text":"Netlify Trigger # Netlify offers hosting and serverless backend services for web applications and static websites. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Netlify Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.netlifyTrigger/#netlify-trigger","text":"Netlify offers hosting and serverless backend services for web applications and static websites. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Netlify Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.notionTrigger/","text":"Notion Trigger # Notion is an all-in-one workspace for your notes, tasks, wikis, and databases. \ud83d\udd11 Credentials You can find authentication information for this node here . Example Usage # This workflow allows you to receive a message on Mattermost when new meeting notes get added to the Notion. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Notion Trigger - IF - Mattermost - No Operation, do nothing The final workflow should look like the following image. 1. Notion Trigger node # The Notion Trigger node will trigger the workflow when new data gets added to Notion. First of all, you'll have to enter credentials for the Notion Trigger node. You can find out how to do that here . Click on Add Poll Time and select 'Every Hour' from the Mode dropdown list. This will check Notion every hour for new meeting notes. Select 'Page Added to Database' from the Event dropdown list. Select the database that contains the meeting notes from the Database dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the new data from Notion. This output gets passed on to the next node in the workflow. Note: Make sure to add a field with the Created Time property type in your Notion database. 2. IF node # This node will check if the notes belong to the Marketing team. If the team is Marketing the node will return true , otherwise false . Click on Add Condition and select 'String'. Click on the gears icon next to the Value 1 field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > properties > Team. You can also add the following expression: {{$json[\"properties\"][\"Team\"]}} . Enter Marketing in the Value 2 field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node checks the team that we received from the previous node and returns true if the value equals Marketing . 3. Mattermost node (post: message) # This node will send a message about the new data in the channel 'Marketing' in Mattermost. If you have a different channel, use that instead. First of all, you'll have to enter credentials for the Mattermost node. You can find out how to do that here . Select a channel from the Channel ID dropdown list. Click on the gears icon next to the Message field and click on Add Expression . Enter the following message in the Expression field: 1 2 3 New meeting notes got added. Agenda: {{$json[\"properties\"][\"Agenda\"][\"content\"]}} Date: {{$json[\"properties\"][\"created time\"]}} Click on Execute Node to run the node. In the screenshot below, you will notice that the node sends a message in Mattermost about the new data that got added to Notion. 5. NoOp node # Adding this node here is optional, as the absence of this node won't make a difference to the functioning of the workflow. Create a NoOp node connected to the 'false' output of the IF node. Click on Execute Node to run the node. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Notion Trigger node.","title":"Notion Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.notionTrigger/#notion-trigger","text":"Notion is an all-in-one workspace for your notes, tasks, wikis, and databases. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Notion Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.notionTrigger/#example-usage","text":"This workflow allows you to receive a message on Mattermost when new meeting notes get added to the Notion. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Notion Trigger - IF - Mattermost - No Operation, do nothing The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/trigger-nodes/n8n-nodes-base.notionTrigger/#1-notion-trigger-node","text":"The Notion Trigger node will trigger the workflow when new data gets added to Notion. First of all, you'll have to enter credentials for the Notion Trigger node. You can find out how to do that here . Click on Add Poll Time and select 'Every Hour' from the Mode dropdown list. This will check Notion every hour for new meeting notes. Select 'Page Added to Database' from the Event dropdown list. Select the database that contains the meeting notes from the Database dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the new data from Notion. This output gets passed on to the next node in the workflow. Note: Make sure to add a field with the Created Time property type in your Notion database.","title":"1. Notion Trigger node"},{"location":"integrations/trigger-nodes/n8n-nodes-base.notionTrigger/#2-if-node","text":"This node will check if the notes belong to the Marketing team. If the team is Marketing the node will return true , otherwise false . Click on Add Condition and select 'String'. Click on the gears icon next to the Value 1 field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > properties > Team. You can also add the following expression: {{$json[\"properties\"][\"Team\"]}} . Enter Marketing in the Value 2 field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node checks the team that we received from the previous node and returns true if the value equals Marketing .","title":"2. IF node"},{"location":"integrations/trigger-nodes/n8n-nodes-base.notionTrigger/#3-mattermost-node-post-message","text":"This node will send a message about the new data in the channel 'Marketing' in Mattermost. If you have a different channel, use that instead. First of all, you'll have to enter credentials for the Mattermost node. You can find out how to do that here . Select a channel from the Channel ID dropdown list. Click on the gears icon next to the Message field and click on Add Expression . Enter the following message in the Expression field: 1 2 3 New meeting notes got added. Agenda: {{$json[\"properties\"][\"Agenda\"][\"content\"]}} Date: {{$json[\"properties\"][\"created time\"]}} Click on Execute Node to run the node. In the screenshot below, you will notice that the node sends a message in Mattermost about the new data that got added to Notion.","title":"3. Mattermost node (post: message)"},{"location":"integrations/trigger-nodes/n8n-nodes-base.notionTrigger/#5-noop-node","text":"Adding this node here is optional, as the absence of this node won't make a difference to the functioning of the workflow. Create a NoOp node connected to the 'false' output of the IF node. Click on Execute Node to run the node. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Notion Trigger node.","title":"5. NoOp node"},{"location":"integrations/trigger-nodes/n8n-nodes-base.onfleetTrigger/","text":"Onfleet trigger # Onfleet is a logistics platform offering a last-mile delivery solution. Credentials You can find authentication information for this node here . Operations # Trigger a workflow on: SMS recipient opt out SMS recipient response missed Task arrival Task assigned Task cloned Task completed Task created Task delayed Task ETA Task failed Task started Task unassigned Task updated Worker created Worker deleted Worker duty","title":"Onfleet trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.onfleetTrigger/#onfleet-trigger","text":"Onfleet is a logistics platform offering a last-mile delivery solution. Credentials You can find authentication information for this node here .","title":"Onfleet trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.onfleetTrigger/#operations","text":"Trigger a workflow on: SMS recipient opt out SMS recipient response missed Task arrival Task assigned Task cloned Task completed Task created Task delayed Task ETA Task failed Task started Task unassigned Task updated Worker created Worker deleted Worker duty","title":"Operations"},{"location":"integrations/trigger-nodes/n8n-nodes-base.payPalTrigger/","text":"PayPal Trigger # PayPal is a digital payment service that supports online fund transfers that customers can use when shopping online. \ud83d\udd11 Credentials You can find authentication information for this node here . Example Usage # This workflow allows you to receive updates when a billing plan is activated in PayPal. You can also find the workflow on n8n.io. This example usage workflow would use the following node. - PayPal Trigger The final workflow should look like the following image. 1. PayPal Trigger node # First of all, you'll have to enter credentials for the PayPal Trigger node. You can find out how to do that here . Select 'Billing Plan Activated' from the Events dropdown list. Click on Execute Node to run the node. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the PayPal Trigger node.","title":"PayPal Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.payPalTrigger/#paypal-trigger","text":"PayPal is a digital payment service that supports online fund transfers that customers can use when shopping online. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"PayPal Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.payPalTrigger/#example-usage","text":"This workflow allows you to receive updates when a billing plan is activated in PayPal. You can also find the workflow on n8n.io. This example usage workflow would use the following node. - PayPal Trigger The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/trigger-nodes/n8n-nodes-base.payPalTrigger/#1-paypal-trigger-node","text":"First of all, you'll have to enter credentials for the PayPal Trigger node. You can find out how to do that here . Select 'Billing Plan Activated' from the Events dropdown list. Click on Execute Node to run the node. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the PayPal Trigger node.","title":"1. PayPal Trigger node"},{"location":"integrations/trigger-nodes/n8n-nodes-base.pipedriveTrigger/","text":"Pipedrive Trigger # Pipedrive is a cloud-based sales software company that aims to improve the productivity of businesses through the use of their software. \ud83d\udd11 Credentials You can find authentication information for this node here . Example Usage # This workflow allows you to receive updates for all changes in Pipedrive. You can also find the workflow on the website. This example usage workflow would use the following node. - Pipedrive Trigger The final workflow should look like the following image. 1. Pipedrive Trigger node # First of all, you'll have to enter credentials for the Pipedrive Trigger node. You can find out how to do that here . Click on Execute Node to run the workflow. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Pipedrive Trigger node.","title":"Pipedrive Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.pipedriveTrigger/#pipedrive-trigger","text":"Pipedrive is a cloud-based sales software company that aims to improve the productivity of businesses through the use of their software. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Pipedrive Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.pipedriveTrigger/#example-usage","text":"This workflow allows you to receive updates for all changes in Pipedrive. You can also find the workflow on the website. This example usage workflow would use the following node. - Pipedrive Trigger The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/trigger-nodes/n8n-nodes-base.pipedriveTrigger/#1-pipedrive-trigger-node","text":"First of all, you'll have to enter credentials for the Pipedrive Trigger node. You can find out how to do that here . Click on Execute Node to run the workflow. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Pipedrive Trigger node.","title":"1. Pipedrive Trigger node"},{"location":"integrations/trigger-nodes/n8n-nodes-base.postmarkTrigger/","text":"Postmark Trigger # Postmark helps deliver and track application email. You can track statistics such as the number of emails sent or processed, opens, bounces and, spam complaints. \ud83d\udd11 Credentials You can find authentication information for this node here . Example Usage # This workflow allows you to receive updates when an email is bounced or opened using the Postmark Trigger Node. You can also find the workflow on n8n.io. This example usage workflow would use the following node. - Postmark Trigger The final workflow should look like the following image. 1. Postmark Trigger node # First of all, you'll have to enter credentials for the Postmark Trigger node. You can find out how to do that here . Select 'Bounce' from the Events dropdown list. Select 'Open' from the Events dropdown list. Toggle the Include Content field to true. Click on Execute Node to run the node. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Postmark Trigger node.","title":"Postmark Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.postmarkTrigger/#postmark-trigger","text":"Postmark helps deliver and track application email. You can track statistics such as the number of emails sent or processed, opens, bounces and, spam complaints. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Postmark Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.postmarkTrigger/#example-usage","text":"This workflow allows you to receive updates when an email is bounced or opened using the Postmark Trigger Node. You can also find the workflow on n8n.io. This example usage workflow would use the following node. - Postmark Trigger The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/trigger-nodes/n8n-nodes-base.postmarkTrigger/#1-postmark-trigger-node","text":"First of all, you'll have to enter credentials for the Postmark Trigger node. You can find out how to do that here . Select 'Bounce' from the Events dropdown list. Select 'Open' from the Events dropdown list. Toggle the Include Content field to true. Click on Execute Node to run the node. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Postmark Trigger node.","title":"1. Postmark Trigger node"},{"location":"integrations/trigger-nodes/n8n-nodes-base.pushcutTrigger/","text":"Pushcut Trigger # Pushcut is an app for iOS that lets you create smart notifications to kick off shortcuts, URLs, and online automation. \ud83d\udd11 Credentials You can find authentication information for this node here . Example Usage # This workflow allows you to send an SMS to a number whenever you go out. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Pushcut Trigger - Twilio The final workflow should look like the following image. 1. Pushcut Trigger node # Whenever you leave your house, Pushcut will send you a notification with an action Leaving Home . The Pushcut Trigger node will trigger the workflow when this action is selected. To create an action in the Pushcut app, follow the instructions mentioned in FAQs . First of all, you'll have to enter credentials for the Pushcut Trigger node. You can find out how to do that here . Enter an action name in the Action Name field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node triggers the workflow whenever the Leaving Home action is selected. 2. Twilio node (send: sms) # This node will send an SMS to a specified phone number notifying the recipient that you are going out. First of all, you'll have to enter credentials for the Twilio node. You can find out how to do that here . Enter the Twilio phone number in the From field. Enter the receiver's phone number in the To field. Click on the gears icon next to the Message field and click on Add Expression . Enter I'm {{$node[\"Pushcut Trigger\"].json[\"input\"]}} in the Expression field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node sends an SMS with the input that we received from the Pushcut Trigger node. FAQs # How to configure a Pushcut action? # Follow the steps mentioned below to configure your Pushcut Trigger node with your Pushcut app. In your Puschcut app, select a notification from the Notifications screen. Click on the Add Action button. Enter an action name in the Label field. Select the Server tab. Select the Integration tab. Click on Integration Trigger . In n8n, enter a name for the action and click on Execute Node . Select this action under the Select Integration Trigger screen in your Pushcut app. Click on Done on the top right to save the action. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Pushcut Trigger node.","title":"Pushcut Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.pushcutTrigger/#pushcut-trigger","text":"Pushcut is an app for iOS that lets you create smart notifications to kick off shortcuts, URLs, and online automation. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Pushcut Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.pushcutTrigger/#example-usage","text":"This workflow allows you to send an SMS to a number whenever you go out. You can also find the workflow on n8n.io. This example usage workflow uses the following nodes. - Pushcut Trigger - Twilio The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/trigger-nodes/n8n-nodes-base.pushcutTrigger/#1-pushcut-trigger-node","text":"Whenever you leave your house, Pushcut will send you a notification with an action Leaving Home . The Pushcut Trigger node will trigger the workflow when this action is selected. To create an action in the Pushcut app, follow the instructions mentioned in FAQs . First of all, you'll have to enter credentials for the Pushcut Trigger node. You can find out how to do that here . Enter an action name in the Action Name field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node triggers the workflow whenever the Leaving Home action is selected.","title":"1. Pushcut Trigger node"},{"location":"integrations/trigger-nodes/n8n-nodes-base.pushcutTrigger/#2-twilio-node-send-sms","text":"This node will send an SMS to a specified phone number notifying the recipient that you are going out. First of all, you'll have to enter credentials for the Twilio node. You can find out how to do that here . Enter the Twilio phone number in the From field. Enter the receiver's phone number in the To field. Click on the gears icon next to the Message field and click on Add Expression . Enter I'm {{$node[\"Pushcut Trigger\"].json[\"input\"]}} in the Expression field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node sends an SMS with the input that we received from the Pushcut Trigger node.","title":"2. Twilio node (send: sms)"},{"location":"integrations/trigger-nodes/n8n-nodes-base.pushcutTrigger/#faqs","text":"","title":"FAQs"},{"location":"integrations/trigger-nodes/n8n-nodes-base.pushcutTrigger/#how-to-configure-a-pushcut-action","text":"Follow the steps mentioned below to configure your Pushcut Trigger node with your Pushcut app. In your Puschcut app, select a notification from the Notifications screen. Click on the Add Action button. Enter an action name in the Label field. Select the Server tab. Select the Integration tab. Click on Integration Trigger . In n8n, enter a name for the action and click on Execute Node . Select this action under the Select Integration Trigger screen in your Pushcut app. Click on Done on the top right to save the action. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Pushcut Trigger node.","title":"How to configure a Pushcut action?"},{"location":"integrations/trigger-nodes/n8n-nodes-base.rabbitmqTrigger/","text":"RabbitMQ Trigger # RabbitMQ is an open-source message broker that accepts and forwards messages. \ud83d\udd11 Credentials You can find authentication information for this node here . Example Usage # This workflow allows you to receive messages from a queue and send an SMS if the value of the temperature is greater than 50. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - RabbitMQ Trigger - IF - Vonage - No Operation, do nothing The final workflow should look like the following image. 1. RabbitMQ Trigger node # This node will trigger the workflow when a new message is sent to the queue temp . If you're using a different queue, use that instead. We are sending the message { \"id\": 1, \"temp\": 100 } to temp . First of all, you'll have to enter credentials for the RabbitMQ Trigger node. You can find out how to do that here . Enter the name of the queue or topic in the Queue / Topic field. Click on Add Option and select 'JSON Parse Body'. Toggle JSON Parse Body to true . By setting this value to true, the node returns the body as JSON instead of a string. Click on Add Option and select 'Only Content'. Toggle Only Content to true . By setting this to true, the node only returns the message. Click on Execute Node to run the node. In the screenshot below, you will notice that the node gets triggered when a new message is sent to the temp queue in RabbitMQ. 2. IF node # This node will compare the value of temp that we received in the message from the previous node. If the value is greater than 50, it will return true otherwise false. Click on Add Condition and select 'Number' from the dropdown list. Click on the gears icon next to the Value 1 field and click on Add Expression . Select the following in the Variable Selector section: Nodes > RabbitMQ > Output Data > JSON > temp. You can also add the following expression: {{$node[\"RabbitMQ\"].json[\"temp\"]}} . Select 'Larger' from the Operation dropdown list. Set Value 2 to 50. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns output for true when the temperature is greater than 50. 3. Vonage node (send: sms) # This node sends an SMS to the specified phone number when the value of temp is greater than 50 . Create a Vonage node connected to the 'true' output of the IF node. You'll have to enter credentials for the Vonage node. You can find out how to do that here . Enter the name of the sender in the From field. If you're using a number, enter the number instead. Enter the receiver's phone number in the To field. Click on the gears icon next to the Message field and click on Add Expression . Enter the following in the Expression field. 1 2 Alert! The value of temp is {{$node[\"RabbitMQ\"].json[\"temp\"]}}. Click on Execute Node to run the node. In the screenshot below, you will notice that the node sends an SMS with the value of temp that we received from the RabbitMQ Trigger node. 4. NoOp node # Adding this node here is optional, as the absence of this node won't make a difference to the functioning of the workflow. Create a NoOp node connected to the 'false' output of the IF node. Click on Execute Node to run the node. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the RabbitMQ Trigger node.","title":"RabbitMQ Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.rabbitmqTrigger/#rabbitmq-trigger","text":"RabbitMQ is an open-source message broker that accepts and forwards messages. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"RabbitMQ Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.rabbitmqTrigger/#example-usage","text":"This workflow allows you to receive messages from a queue and send an SMS if the value of the temperature is greater than 50. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - RabbitMQ Trigger - IF - Vonage - No Operation, do nothing The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/trigger-nodes/n8n-nodes-base.rabbitmqTrigger/#1-rabbitmq-trigger-node","text":"This node will trigger the workflow when a new message is sent to the queue temp . If you're using a different queue, use that instead. We are sending the message { \"id\": 1, \"temp\": 100 } to temp . First of all, you'll have to enter credentials for the RabbitMQ Trigger node. You can find out how to do that here . Enter the name of the queue or topic in the Queue / Topic field. Click on Add Option and select 'JSON Parse Body'. Toggle JSON Parse Body to true . By setting this value to true, the node returns the body as JSON instead of a string. Click on Add Option and select 'Only Content'. Toggle Only Content to true . By setting this to true, the node only returns the message. Click on Execute Node to run the node. In the screenshot below, you will notice that the node gets triggered when a new message is sent to the temp queue in RabbitMQ.","title":"1. RabbitMQ Trigger node"},{"location":"integrations/trigger-nodes/n8n-nodes-base.rabbitmqTrigger/#2-if-node","text":"This node will compare the value of temp that we received in the message from the previous node. If the value is greater than 50, it will return true otherwise false. Click on Add Condition and select 'Number' from the dropdown list. Click on the gears icon next to the Value 1 field and click on Add Expression . Select the following in the Variable Selector section: Nodes > RabbitMQ > Output Data > JSON > temp. You can also add the following expression: {{$node[\"RabbitMQ\"].json[\"temp\"]}} . Select 'Larger' from the Operation dropdown list. Set Value 2 to 50. Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns output for true when the temperature is greater than 50.","title":"2. IF node"},{"location":"integrations/trigger-nodes/n8n-nodes-base.rabbitmqTrigger/#3-vonage-node-send-sms","text":"This node sends an SMS to the specified phone number when the value of temp is greater than 50 . Create a Vonage node connected to the 'true' output of the IF node. You'll have to enter credentials for the Vonage node. You can find out how to do that here . Enter the name of the sender in the From field. If you're using a number, enter the number instead. Enter the receiver's phone number in the To field. Click on the gears icon next to the Message field and click on Add Expression . Enter the following in the Expression field. 1 2 Alert! The value of temp is {{$node[\"RabbitMQ\"].json[\"temp\"]}}. Click on Execute Node to run the node. In the screenshot below, you will notice that the node sends an SMS with the value of temp that we received from the RabbitMQ Trigger node.","title":"3. Vonage node (send: sms)"},{"location":"integrations/trigger-nodes/n8n-nodes-base.rabbitmqTrigger/#4-noop-node","text":"Adding this node here is optional, as the absence of this node won't make a difference to the functioning of the workflow. Create a NoOp node connected to the 'false' output of the IF node. Click on Execute Node to run the node. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the RabbitMQ Trigger node.","title":"4. NoOp node"},{"location":"integrations/trigger-nodes/n8n-nodes-base.redisTrigger/","text":"Redis trigger # Redis is an open-source, in-memory data structure store, used as a database, cache and message broker. Credentials You can find authentication information for this node here . Use the Redis trigger node to subscribe to a Redis channel. The workflow starts whenever the channel receives a new message.","title":"Redis trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.redisTrigger/#redis-trigger","text":"Redis is an open-source, in-memory data structure store, used as a database, cache and message broker. Credentials You can find authentication information for this node here . Use the Redis trigger node to subscribe to a Redis channel. The workflow starts whenever the channel receives a new message.","title":"Redis trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.seaTableTrigger/","text":"SeaTable Trigger # SeaTable is a collaborative database application with a spreadsheet interface. \ud83d\udd11 Credentials You can find authentication information for this node here . Example usage # This workflow allows you to receive updates when new rows are created in a Table. This example usage workflow would use the following node. - SeaTable Trigger The final workflow should look like the following image. 1. SeaTable Trigger node # First enter your credentials for the SeaTable Trigger node. You can find out how to do that here . Select the Table you want to receive updates for. From the Events dropdown select Row Created . Click on Execute Node to run the workflow. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the node.","title":"SeaTable Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.seaTableTrigger/#seatable-trigger","text":"SeaTable is a collaborative database application with a spreadsheet interface. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"SeaTable Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.seaTableTrigger/#example-usage","text":"This workflow allows you to receive updates when new rows are created in a Table. This example usage workflow would use the following node. - SeaTable Trigger The final workflow should look like the following image.","title":"Example usage"},{"location":"integrations/trigger-nodes/n8n-nodes-base.seaTableTrigger/#1-seatable-trigger-node","text":"First enter your credentials for the SeaTable Trigger node. You can find out how to do that here . Select the Table you want to receive updates for. From the Events dropdown select Row Created . Click on Execute Node to run the workflow. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the node.","title":"1. SeaTable Trigger node"},{"location":"integrations/trigger-nodes/n8n-nodes-base.shopifyTrigger/","text":"Shopify Trigger # Shopify is an e-commerce platform that allows users to set up an online store and sell their products. \ud83d\udd11 Credentials You can find authentication information for this node here . Example Usage # This workflow allows you to receive updates when a new order is created in Shopify. You can also find the workflow on the website. This example usage workflow would use the following node. - Shopify Trigger The final workflow should look like the following image. 1. Shopify Trigger node # First of all, you'll have to enter credentials for the Shopify Trigger node. You can find out how to do that here . Select 'Orders create' from the Topic dropdown list. Click on Execute Node to run the workflow. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Shopify Trigger node.","title":"Shopify Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.shopifyTrigger/#shopify-trigger","text":"Shopify is an e-commerce platform that allows users to set up an online store and sell their products. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Shopify Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.shopifyTrigger/#example-usage","text":"This workflow allows you to receive updates when a new order is created in Shopify. You can also find the workflow on the website. This example usage workflow would use the following node. - Shopify Trigger The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/trigger-nodes/n8n-nodes-base.shopifyTrigger/#1-shopify-trigger-node","text":"First of all, you'll have to enter credentials for the Shopify Trigger node. You can find out how to do that here . Select 'Orders create' from the Topic dropdown list. Click on Execute Node to run the workflow. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Shopify Trigger node.","title":"1. Shopify Trigger node"},{"location":"integrations/trigger-nodes/n8n-nodes-base.stravaTrigger/","text":"Strava Trigger # Strava is an internet service for tracking human exercise which incorporates social network features. \ud83d\udd11 Credentials You can find authentication information for this node here . Events # * - * - Created - Deleted - Updated Activity - * - Created - Deleted - Updated Athlete - * - Created - Deleted - Updated Example Usage # This workflow allows you to receive updates when a new activity gets created in Strava using the Strava Trigger node. It also allows you to tweet about the activity that was created in Strava using the Twitter node. You can also find the workflow on n8n.io. This example usage workflow would use the following node. - Strava Trigger - Twitter The final workflow should look like the following image. 1. Strava Trigger node # This node will trigger the workflow when a new activity gets created in Strava. First of all, you'll have to enter credentials for the Strava Trigger node. You can find out how to do that here . Select 'Activity' from the Object dropdown list. Select 'created' from the Event dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node triggers the workflow when a new activity gets created in Strava. 2. Twitter node (create: tweet) # This node will tweet about the activity that gets created in Strava. First of all, you'll have to enter credentials for the Twitter node. You can find out how to do that here . Click on the gears icon next to the Text field and click on Add Expression . Enter the following text in the Expression field: I ran {{$node[\"Strava Trigger\"].json[\"object_data\"][\"distance\"]}} meters and completed my {{$node[\"Strava Trigger\"].json[\"object_data\"][\"name\"]}}! Click on Execute Node to run the node. In the screenshot below, you will notice that this node gets the information of the activity in Strava from the previous node and tweets about it. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Strava Trigger node.","title":"Strava Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.stravaTrigger/#strava-trigger","text":"Strava is an internet service for tracking human exercise which incorporates social network features. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Strava Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.stravaTrigger/#events","text":"* - * - Created - Deleted - Updated Activity - * - Created - Deleted - Updated Athlete - * - Created - Deleted - Updated","title":"Events"},{"location":"integrations/trigger-nodes/n8n-nodes-base.stravaTrigger/#example-usage","text":"This workflow allows you to receive updates when a new activity gets created in Strava using the Strava Trigger node. It also allows you to tweet about the activity that was created in Strava using the Twitter node. You can also find the workflow on n8n.io. This example usage workflow would use the following node. - Strava Trigger - Twitter The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/trigger-nodes/n8n-nodes-base.stravaTrigger/#1-strava-trigger-node","text":"This node will trigger the workflow when a new activity gets created in Strava. First of all, you'll have to enter credentials for the Strava Trigger node. You can find out how to do that here . Select 'Activity' from the Object dropdown list. Select 'created' from the Event dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node triggers the workflow when a new activity gets created in Strava.","title":"1. Strava Trigger node"},{"location":"integrations/trigger-nodes/n8n-nodes-base.stravaTrigger/#2-twitter-node-create-tweet","text":"This node will tweet about the activity that gets created in Strava. First of all, you'll have to enter credentials for the Twitter node. You can find out how to do that here . Click on the gears icon next to the Text field and click on Add Expression . Enter the following text in the Expression field: I ran {{$node[\"Strava Trigger\"].json[\"object_data\"][\"distance\"]}} meters and completed my {{$node[\"Strava Trigger\"].json[\"object_data\"][\"name\"]}}! Click on Execute Node to run the node. In the screenshot below, you will notice that this node gets the information of the activity in Strava from the previous node and tweets about it. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Strava Trigger node.","title":"2. Twitter node (create: tweet)"},{"location":"integrations/trigger-nodes/n8n-nodes-base.stripeTrigger/","text":"Stripe Trigger # Stripe is a suite of payment APIs that powers commerce for online businesses. \ud83d\udd11 Credentials You can find authentication information for this node here . Example Usage # This workflow allows you to receive updates for Stripe events. You can also find the workflow on the website. This example usage workflow would use the following node. - Stripe Trigger The final workflow should look like the following image. 1. Stripe Trigger node # First of all, you'll have to enter credentials for the Stripe Trigger node. You can find out how to do that here . Select the * option in the Events field to receive updates when any event is triggered. Click on Execute Node to run the workflow. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Stripe Trigger node.","title":"Stripe Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.stripeTrigger/#stripe-trigger","text":"Stripe is a suite of payment APIs that powers commerce for online businesses. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Stripe Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.stripeTrigger/#example-usage","text":"This workflow allows you to receive updates for Stripe events. You can also find the workflow on the website. This example usage workflow would use the following node. - Stripe Trigger The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/trigger-nodes/n8n-nodes-base.stripeTrigger/#1-stripe-trigger-node","text":"First of all, you'll have to enter credentials for the Stripe Trigger node. You can find out how to do that here . Select the * option in the Events field to receive updates when any event is triggered. Click on Execute Node to run the workflow. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Stripe Trigger node.","title":"1. Stripe Trigger node"},{"location":"integrations/trigger-nodes/n8n-nodes-base.surveyMonkeyTrigger/","text":"SurveyMonkey Trigger # SurveyMonkey is an online cloud-based SaaS survey platform that also provides a suite of paid back-end programs. \ud83d\udd11 Credentials You can find authentication information for this node here . Example Usage # This workflow allows you to receive updates when responses are created for SurveyMonkey surveys. You can also find the workflow on the website. This example usage workflow would use the following node. - SurveyMonkey Trigger The final workflow should look like the following image. 1. SurveyMonkey Trigger node # First of all, you'll have to enter credentials for the SurveyMonkey Trigger node. You can find out how to do that here . Select the 'Survey' option from the Type dropdown list. Select 'Response Created' from the Event dropdown list. Select the surveys you want to receive updates for from the Survey IDs dropdown list. Click on Execute Node to run the workflow. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the SurveyMonkey Trigger node.","title":"SurveyMonkey Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.surveyMonkeyTrigger/#surveymonkey-trigger","text":"SurveyMonkey is an online cloud-based SaaS survey platform that also provides a suite of paid back-end programs. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"SurveyMonkey Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.surveyMonkeyTrigger/#example-usage","text":"This workflow allows you to receive updates when responses are created for SurveyMonkey surveys. You can also find the workflow on the website. This example usage workflow would use the following node. - SurveyMonkey Trigger The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/trigger-nodes/n8n-nodes-base.surveyMonkeyTrigger/#1-surveymonkey-trigger-node","text":"First of all, you'll have to enter credentials for the SurveyMonkey Trigger node. You can find out how to do that here . Select the 'Survey' option from the Type dropdown list. Select 'Response Created' from the Event dropdown list. Select the surveys you want to receive updates for from the Survey IDs dropdown list. Click on Execute Node to run the workflow. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the SurveyMonkey Trigger node.","title":"1. SurveyMonkey Trigger node"},{"location":"integrations/trigger-nodes/n8n-nodes-base.taigaTrigger/","text":"Taiga Trigger # Taiga is a free and open-source project management platform for startups, agile developers, and designers. \ud83d\udd11 Credentials You can find authentication information for this node here . Example Usage # This workflow allows you to receive updates when an event occurs in Taiga. You can also find the workflow on n8n.io. This example usage workflow would use the following node. - Taiga Trigger The final workflow should look like the following image. 1. Taiga Trigger node # First of all, you'll have to enter credentials for the Taiga Trigger node. You can find out how to do that here . Select the project ID from the Project ID dropdown list. Click on Execute Node to run the node. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Taiga Trigger node.","title":"Taiga Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.taigaTrigger/#taiga-trigger","text":"Taiga is a free and open-source project management platform for startups, agile developers, and designers. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Taiga Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.taigaTrigger/#example-usage","text":"This workflow allows you to receive updates when an event occurs in Taiga. You can also find the workflow on n8n.io. This example usage workflow would use the following node. - Taiga Trigger The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/trigger-nodes/n8n-nodes-base.taigaTrigger/#1-taiga-trigger-node","text":"First of all, you'll have to enter credentials for the Taiga Trigger node. You can find out how to do that here . Select the project ID from the Project ID dropdown list. Click on Execute Node to run the node. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Taiga Trigger node.","title":"1. Taiga Trigger node"},{"location":"integrations/trigger-nodes/n8n-nodes-base.telegramTrigger/","text":"Telegram Trigger # Telegram is a cloud-based instant messaging and voice over IP service. Users can send messages and exchange photos, videos, stickers, audio, and files of any type. \ud83d\udd11 Credentials You can find authentication information for this node here . Updates # * : All updates message : Trigger on a new incoming message of any kind- text, photo, sticker, etc edited_message : Trigger on a new version of a channel post that is known to the bot and was edited channel_post : Trigger on a new incoming channel post of any kind - text, photo, sticker, etc edited_channel_post : Trigger on a new version of a channel post that is known to the bot and was edited inline_query : Trigger on a new incoming inline query callback_query : Trigger on a new incoming callback query shipping_query : Trigger on a new incoming shipping query. Only for invoices with flexible price pre_checkout_query : Trigger on a new incoming pre-checkout query. Contains full information about checkout poll : Trigger on a new poll state. Bots receive only updates about stopped polls and polls which are sent by the bot Example Usage # This workflow allows you to receive messages using the Telegram Trigger node and send an image of a cocktail when a message is received. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Telegram Trigger - HTTP Request - Telegram The final workflow should look like the following image. 1. Telegram Trigger node # This node will trigger the workflow when a user sends a new message. First of all, you'll have to enter credentials for the Telegram Trigger node. You can find out how to do that here . Select 'message' from the Updates dropdown list. This will trigger the workflow when a user sends a message. Click on Execute Node to run the node. In the screenshot below, you will notice that the node triggers the workflow when a user sends a new message. 2. HTTP Request node (GET) # This node will make a GET request to the API https://www.thecocktaildb.com/api/json/v1/1/random.php to fetch a random cocktail. This information gets passed on to the next node in the workflow. Enter https://www.thecocktaildb.com/api/json/v1/1/random.php in the URL field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node makes a GET request to the API and returns information about a random cocktail. 3. Telegram node (sendPhoto: message) # This node will send a reply to the message with the name and image of the cocktail that we got from the previous node. Select the credentials that you entered in the Telegram Trigger node. Select 'Send Photo' from the Operation dropdown list. Click on the gears icon next to the Chat ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Telegram Trigger > Output Data > JSON > message > chat > id. You can also add the following expression: {{$node[\"Telegram Trigger\"].json[\"message\"][\"chat\"][\"id\"]}} . Click on the gears icon next to the Photo field and click on Add Expression . Select the following in the Variable Selector section: Nodes > HTTP Request > Output Data > JSON > drinks > [item: 0] > strDrinkThumb. You can also add the following expression: {{$node[\"HTTP Request\"].json[\"drinks\"][0][\"strDrinkThumb\"]}} . Click on Add Field and select 'Caption' from the dropdown list. Click on the gears icon next to the Caption field and click on Add Expression . Select the following in the Variable Selector section: Nodes > HTTP Request > Output Data > JSON > drinks > [item: 0] > strDrink. You can also add the following expression: {{$node[\"HTTP Request\"].json[\"drinks\"][0][\"strDrink\"]}} . Click on Add Field and select 'Reply To Message ID' from the dropdown list. Click on the gears icon next to the Reply To Message ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Telegram Trigger > Output Data > JSON > message > message_id. You can also add the following expression: {{$node[\"Telegram Trigger\"].json[\"message\"][\"message_id\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node sends a reply to the message with the name and image of the cocktail that we got from the previous node. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Telegram Trigger node.","title":"Telegram Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.telegramTrigger/#telegram-trigger","text":"Telegram is a cloud-based instant messaging and voice over IP service. Users can send messages and exchange photos, videos, stickers, audio, and files of any type. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Telegram Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.telegramTrigger/#updates","text":"* : All updates message : Trigger on a new incoming message of any kind- text, photo, sticker, etc edited_message : Trigger on a new version of a channel post that is known to the bot and was edited channel_post : Trigger on a new incoming channel post of any kind - text, photo, sticker, etc edited_channel_post : Trigger on a new version of a channel post that is known to the bot and was edited inline_query : Trigger on a new incoming inline query callback_query : Trigger on a new incoming callback query shipping_query : Trigger on a new incoming shipping query. Only for invoices with flexible price pre_checkout_query : Trigger on a new incoming pre-checkout query. Contains full information about checkout poll : Trigger on a new poll state. Bots receive only updates about stopped polls and polls which are sent by the bot","title":"Updates"},{"location":"integrations/trigger-nodes/n8n-nodes-base.telegramTrigger/#example-usage","text":"This workflow allows you to receive messages using the Telegram Trigger node and send an image of a cocktail when a message is received. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Telegram Trigger - HTTP Request - Telegram The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/trigger-nodes/n8n-nodes-base.telegramTrigger/#1-telegram-trigger-node","text":"This node will trigger the workflow when a user sends a new message. First of all, you'll have to enter credentials for the Telegram Trigger node. You can find out how to do that here . Select 'message' from the Updates dropdown list. This will trigger the workflow when a user sends a message. Click on Execute Node to run the node. In the screenshot below, you will notice that the node triggers the workflow when a user sends a new message.","title":"1. Telegram Trigger node"},{"location":"integrations/trigger-nodes/n8n-nodes-base.telegramTrigger/#2-http-request-node-get","text":"This node will make a GET request to the API https://www.thecocktaildb.com/api/json/v1/1/random.php to fetch a random cocktail. This information gets passed on to the next node in the workflow. Enter https://www.thecocktaildb.com/api/json/v1/1/random.php in the URL field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node makes a GET request to the API and returns information about a random cocktail.","title":"2. HTTP Request node (GET)"},{"location":"integrations/trigger-nodes/n8n-nodes-base.telegramTrigger/#3-telegram-node-sendphoto-message","text":"This node will send a reply to the message with the name and image of the cocktail that we got from the previous node. Select the credentials that you entered in the Telegram Trigger node. Select 'Send Photo' from the Operation dropdown list. Click on the gears icon next to the Chat ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Telegram Trigger > Output Data > JSON > message > chat > id. You can also add the following expression: {{$node[\"Telegram Trigger\"].json[\"message\"][\"chat\"][\"id\"]}} . Click on the gears icon next to the Photo field and click on Add Expression . Select the following in the Variable Selector section: Nodes > HTTP Request > Output Data > JSON > drinks > [item: 0] > strDrinkThumb. You can also add the following expression: {{$node[\"HTTP Request\"].json[\"drinks\"][0][\"strDrinkThumb\"]}} . Click on Add Field and select 'Caption' from the dropdown list. Click on the gears icon next to the Caption field and click on Add Expression . Select the following in the Variable Selector section: Nodes > HTTP Request > Output Data > JSON > drinks > [item: 0] > strDrink. You can also add the following expression: {{$node[\"HTTP Request\"].json[\"drinks\"][0][\"strDrink\"]}} . Click on Add Field and select 'Reply To Message ID' from the dropdown list. Click on the gears icon next to the Reply To Message ID field and click on Add Expression . Select the following in the Variable Selector section: Nodes > Telegram Trigger > Output Data > JSON > message > message_id. You can also add the following expression: {{$node[\"Telegram Trigger\"].json[\"message\"][\"message_id\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node sends a reply to the message with the name and image of the cocktail that we got from the previous node. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Telegram Trigger node.","title":"3. Telegram node (sendPhoto: message)"},{"location":"integrations/trigger-nodes/n8n-nodes-base.theHiveTrigger/","text":"TheHive is a scalable open-source and free security incident response platform. Example Usage # This workflow allows you to receive updates when an event occurs in TheHive. You can also find the workflow on the website. This example usage workflow would use the following node. - TheHive Trigger The final workflow should look like the following image. 1. TheHive Trigger node # This node will trigger the workflow whenever a new event occurs in TheHive. To trigger the workflow for a specific event, select that event instead. First of all, you'll have to add the webhook URL in TheHive instance configuration. Refer to the FAQs to learn how to configure a webhook in TheHive. Select the * from the Events dropdown list. This will trigger the workflow for all the events. Click on Execute Node to run the node. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the TheHive Trigger node. FAQs # How to configure a Webhook in TheHive? # To configure the webhook for your TheHive instance follow the steps mentioned below. 1. Copy the webhook URL from TheHive Trigger node. 2. Add the following lines to the application.conf file. This is TheHive configuration file. 1 2 3 4 5 6 7 8 9 10 notification.webhook.endpoints = [ { name: WEBHOOK_NAME url: WEBHOOK_URL version: 0 wsConfig: {} includedTheHiveOrganisations: [\"ORGANIZATION_NAME\"] excludedTheHiveOrganisations: [] } ] 3. Replace WEBHOOK_URL with the URL you copied in the previous step. 4. Replace ORGANIZATION_NAME with your organization name. 5. Execute the following cURL command to enable notifications. 1 2 3 4 5 6 7 8 9 10 curl -XPUT -uTHEHIVE_USERNAME:THEHIVE_PASSWORD -H 'Content-type: application/json' THEHIVE_URL/api/config/organisation/notification -d ' { \"value\": [ { \"delegate\": false, \"trigger\": { \"name\": \"AnyEvent\"}, \"notifier\": { \"name\": \"webhook\", \"endpoint\": \"WEBHOOK_NAME\" } } ] }'","title":"n8n nodes base.theHiveTrigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.theHiveTrigger/#example-usage","text":"This workflow allows you to receive updates when an event occurs in TheHive. You can also find the workflow on the website. This example usage workflow would use the following node. - TheHive Trigger The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/trigger-nodes/n8n-nodes-base.theHiveTrigger/#1-thehive-trigger-node","text":"This node will trigger the workflow whenever a new event occurs in TheHive. To trigger the workflow for a specific event, select that event instead. First of all, you'll have to add the webhook URL in TheHive instance configuration. Refer to the FAQs to learn how to configure a webhook in TheHive. Select the * from the Events dropdown list. This will trigger the workflow for all the events. Click on Execute Node to run the node. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the TheHive Trigger node.","title":"1. TheHive Trigger node"},{"location":"integrations/trigger-nodes/n8n-nodes-base.theHiveTrigger/#faqs","text":"","title":"FAQs"},{"location":"integrations/trigger-nodes/n8n-nodes-base.theHiveTrigger/#how-to-configure-a-webhook-in-thehive","text":"To configure the webhook for your TheHive instance follow the steps mentioned below. 1. Copy the webhook URL from TheHive Trigger node. 2. Add the following lines to the application.conf file. This is TheHive configuration file. 1 2 3 4 5 6 7 8 9 10 notification.webhook.endpoints = [ { name: WEBHOOK_NAME url: WEBHOOK_URL version: 0 wsConfig: {} includedTheHiveOrganisations: [\"ORGANIZATION_NAME\"] excludedTheHiveOrganisations: [] } ] 3. Replace WEBHOOK_URL with the URL you copied in the previous step. 4. Replace ORGANIZATION_NAME with your organization name. 5. Execute the following cURL command to enable notifications. 1 2 3 4 5 6 7 8 9 10 curl -XPUT -uTHEHIVE_USERNAME:THEHIVE_PASSWORD -H 'Content-type: application/json' THEHIVE_URL/api/config/organisation/notification -d ' { \"value\": [ { \"delegate\": false, \"trigger\": { \"name\": \"AnyEvent\"}, \"notifier\": { \"name\": \"webhook\", \"endpoint\": \"WEBHOOK_NAME\" } } ] }'","title":"How to configure a Webhook in TheHive?"},{"location":"integrations/trigger-nodes/n8n-nodes-base.togglTrigger/","text":"Toggl Trigger # Toggl is a time tracking app that offers online time tracking and reporting services through their website along with mobile and desktop applications. \ud83d\udd11 Credentials You can find authentication information for this node here . Example Usage # This workflow allows you to get new time entries from Toggl. You can also find the workflow on the website. This example usage workflow would use the following node. - Toggl Trigger The final workflow should look like the following image. 1. Toggl Trigger node # First of all, you'll have to enter credentials for the Toggl Trigger node. You can find out how to do that here . Click on Execute Node to run the workflow. Note: This node uses polling to get new time entries. You'll have to use the Add Poll Time button if you want this Trigger node to run regularly to retrieve new time entries. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Toggl Trigger node.","title":"Toggl Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.togglTrigger/#toggl-trigger","text":"Toggl is a time tracking app that offers online time tracking and reporting services through their website along with mobile and desktop applications. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Toggl Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.togglTrigger/#example-usage","text":"This workflow allows you to get new time entries from Toggl. You can also find the workflow on the website. This example usage workflow would use the following node. - Toggl Trigger The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/trigger-nodes/n8n-nodes-base.togglTrigger/#1-toggl-trigger-node","text":"First of all, you'll have to enter credentials for the Toggl Trigger node. You can find out how to do that here . Click on Execute Node to run the workflow. Note: This node uses polling to get new time entries. You'll have to use the Add Poll Time button if you want this Trigger node to run regularly to retrieve new time entries. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Toggl Trigger node.","title":"1. Toggl Trigger node"},{"location":"integrations/trigger-nodes/n8n-nodes-base.trelloTrigger/","text":"Trello Trigger # Trello is a web-based Kanban-style list-making application which is a subsidiary of Atlassian. Users can create their task boards with different columns and move the tasks between them. \ud83d\udd11 Credentials You can find authentication information for this node here . Example Usage # This workflow allows you to receive updates for changes in the specified list in Trello. You can also find the workflow on the website. This example usage workflow would use the following node. - Trello Trigger The final workflow should look like the following image. 1. Trello Trigger node # First of all, you'll have to enter credentials for the Trello Trigger node. You can find out how to do that here . Enter the ID of the list in the Model ID field. You can find instructions on how to do that in the FAQs below. Click on Execute Node to run the workflow. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Trello Trigger node. FAQs # How do I find the Model ID? # For this specific example, the List ID would be the Model ID. Open the Trello board that contains the list. If the list doesn't have any cards, add a card to the list. Open the card, add '.json' at the end of the URL, and press enter. In the JSON file, you will see a field called idList . Copy idList and paste it in the Model ID field in n8n. What is the Model ID? # It is the ID of any model in Trello. Depending on the use-case, it could be the User ID, List ID, and so on.","title":"Trello Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.trelloTrigger/#trello-trigger","text":"Trello is a web-based Kanban-style list-making application which is a subsidiary of Atlassian. Users can create their task boards with different columns and move the tasks between them. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Trello Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.trelloTrigger/#example-usage","text":"This workflow allows you to receive updates for changes in the specified list in Trello. You can also find the workflow on the website. This example usage workflow would use the following node. - Trello Trigger The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/trigger-nodes/n8n-nodes-base.trelloTrigger/#1-trello-trigger-node","text":"First of all, you'll have to enter credentials for the Trello Trigger node. You can find out how to do that here . Enter the ID of the list in the Model ID field. You can find instructions on how to do that in the FAQs below. Click on Execute Node to run the workflow. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Trello Trigger node.","title":"1. Trello Trigger node"},{"location":"integrations/trigger-nodes/n8n-nodes-base.trelloTrigger/#faqs","text":"","title":"FAQs"},{"location":"integrations/trigger-nodes/n8n-nodes-base.trelloTrigger/#how-do-i-find-the-model-id","text":"For this specific example, the List ID would be the Model ID. Open the Trello board that contains the list. If the list doesn't have any cards, add a card to the list. Open the card, add '.json' at the end of the URL, and press enter. In the JSON file, you will see a field called idList . Copy idList and paste it in the Model ID field in n8n.","title":"How do I find the Model ID?"},{"location":"integrations/trigger-nodes/n8n-nodes-base.trelloTrigger/#what-is-the-model-id","text":"It is the ID of any model in Trello. Depending on the use-case, it could be the User ID, List ID, and so on.","title":"What is the Model ID?"},{"location":"integrations/trigger-nodes/n8n-nodes-base.typeformTrigger/","text":"Typeform Trigger # Typeform is an online software as a service company that specializes in online form building and online surveys. Its main software creates dynamic forms based on user needs. \ud83d\udd11 Credentials You can find authentication information for this node here . Example Usage # This workflow allows you to store the response of a form submission to Airtable and send a message to a channel on Slack. You can also find the workflow on the website. This example usage workflow would use the following nodes. - Typeform Trigger - Set - Airtable - Slack The final workflow should look like the following image. 1. Typeform Trigger node # This node will trigger the workflow when a form response is submitted. This example workflow uses a Typeform to collect name and email address. Create a form exactly like this for the example workflow. Here are the questions and their question types for the form. Question Type Let's start with your name. Short Text What's your email address? Email First of all, you'll have to enter credentials for the Typeform Trigger node. You can find out how to do that here . Select your form from the Form dropdown list. Click on Execute Node to run the workflow. In the screenshot below, you will notice that the Typeform Trigger node triggers the workflow and returns the response submitted by a user. 2. Set node # We will use the Set node to ensure that only the data that we set in this node gets passed on to the next nodes in the workflow. We will set the value of Name and Email in this node. Click on Add Value and select 'String' from the dropdown list. Enter Name in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > Let's start with your name.. You can also add the following expression: {{$json[\"Let's start with your name.\"]}} . Click on Add Value and select 'String' from the dropdown list. Enter Email in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > What's your email address?. You can also add the following expression: {{$json[\"What's your email address?\"]}} . Toggle Keep Only Set to true . We set this option to true to ensure that only the data that we have set in this node get passed on to the next nodes in the workflow. Click on Execute Node to run the node. In the screenshot below, you will notice that the node sets the values of Name and Email . These values are passed to the next node in the workflow. 3. Airtable node (Append) # This node will append the data that we set in the previous node to a table. Create a table like this in your Airtable base. First of all, you'll have to enter credentials for the Airtable node. You can find out how to do that here . Select 'Append' from the Operation dropdown list. Enter the Base ID in the Base ID field. For obtaining the Base ID, head over to their API page and select the correct base. You\u2019ll find the Base ID there. Enter the name of your table in the Table field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node appends the data that we had set in the previous node. 4. Slack node (post: message) # This node will send a message about the new form submission to a channel in a Slack workspace. First of all, you'll have to enter credentials for the Slack node. You can find out how to do that here . Enter the name of a channel in the Channel field. Click on the gears icon next to the Text field and click on Add Expression . Enter the following text in the Expression Editor 1 2 3 *New Submission* Name: {{$node[\"Set\"].json[\"Name\"]}} Email: {{$node[\"Set\"].json[\"Email\"]}} Click on Execute Node to run the node. In the screenshot below, you will notice that the node sends a message with the new form response on Slack. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Typeform Trigger node.","title":"Typeform Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.typeformTrigger/#typeform-trigger","text":"Typeform is an online software as a service company that specializes in online form building and online surveys. Its main software creates dynamic forms based on user needs. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Typeform Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.typeformTrigger/#example-usage","text":"This workflow allows you to store the response of a form submission to Airtable and send a message to a channel on Slack. You can also find the workflow on the website. This example usage workflow would use the following nodes. - Typeform Trigger - Set - Airtable - Slack The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/trigger-nodes/n8n-nodes-base.typeformTrigger/#1-typeform-trigger-node","text":"This node will trigger the workflow when a form response is submitted. This example workflow uses a Typeform to collect name and email address. Create a form exactly like this for the example workflow. Here are the questions and their question types for the form. Question Type Let's start with your name. Short Text What's your email address? Email First of all, you'll have to enter credentials for the Typeform Trigger node. You can find out how to do that here . Select your form from the Form dropdown list. Click on Execute Node to run the workflow. In the screenshot below, you will notice that the Typeform Trigger node triggers the workflow and returns the response submitted by a user.","title":"1. Typeform Trigger node"},{"location":"integrations/trigger-nodes/n8n-nodes-base.typeformTrigger/#2-set-node","text":"We will use the Set node to ensure that only the data that we set in this node gets passed on to the next nodes in the workflow. We will set the value of Name and Email in this node. Click on Add Value and select 'String' from the dropdown list. Enter Name in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > Let's start with your name.. You can also add the following expression: {{$json[\"Let's start with your name.\"]}} . Click on Add Value and select 'String' from the dropdown list. Enter Email in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > What's your email address?. You can also add the following expression: {{$json[\"What's your email address?\"]}} . Toggle Keep Only Set to true . We set this option to true to ensure that only the data that we have set in this node get passed on to the next nodes in the workflow. Click on Execute Node to run the node. In the screenshot below, you will notice that the node sets the values of Name and Email . These values are passed to the next node in the workflow.","title":"2. Set node"},{"location":"integrations/trigger-nodes/n8n-nodes-base.typeformTrigger/#3-airtable-node-append","text":"This node will append the data that we set in the previous node to a table. Create a table like this in your Airtable base. First of all, you'll have to enter credentials for the Airtable node. You can find out how to do that here . Select 'Append' from the Operation dropdown list. Enter the Base ID in the Base ID field. For obtaining the Base ID, head over to their API page and select the correct base. You\u2019ll find the Base ID there. Enter the name of your table in the Table field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node appends the data that we had set in the previous node.","title":"3. Airtable node (Append)"},{"location":"integrations/trigger-nodes/n8n-nodes-base.typeformTrigger/#4-slack-node-post-message","text":"This node will send a message about the new form submission to a channel in a Slack workspace. First of all, you'll have to enter credentials for the Slack node. You can find out how to do that here . Enter the name of a channel in the Channel field. Click on the gears icon next to the Text field and click on Add Expression . Enter the following text in the Expression Editor 1 2 3 *New Submission* Name: {{$node[\"Set\"].json[\"Name\"]}} Email: {{$node[\"Set\"].json[\"Email\"]}} Click on Execute Node to run the node. In the screenshot below, you will notice that the node sends a message with the new form response on Slack. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Typeform Trigger node.","title":"4. Slack node (post: message)"},{"location":"integrations/trigger-nodes/n8n-nodes-base.webflowTrigger/","text":"Webflow Trigger # Webflow is an application that allows you to build responsive websites with browser-based visual editing software. \ud83d\udd11 Credentials You can find authentication information for this node here . Example Usage # This workflow allows you to receive updates when a form submission occurs in your Webflow website. You can also find the workflow on n8n.io. This example usage workflow would use the following node. - Webflow Trigger The final workflow should look like the following image. 1. Webflow Trigger node # First of all, you'll have to enter credentials for the Webflow Trigger node. You can find out how to do that here . Select your website from the Site dropdown list. Click on Execute Node to run the node. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Webflow Trigger node.","title":"Webflow Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.webflowTrigger/#webflow-trigger","text":"Webflow is an application that allows you to build responsive websites with browser-based visual editing software. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Webflow Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.webflowTrigger/#example-usage","text":"This workflow allows you to receive updates when a form submission occurs in your Webflow website. You can also find the workflow on n8n.io. This example usage workflow would use the following node. - Webflow Trigger The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/trigger-nodes/n8n-nodes-base.webflowTrigger/#1-webflow-trigger-node","text":"First of all, you'll have to enter credentials for the Webflow Trigger node. You can find out how to do that here . Select your website from the Site dropdown list. Click on Execute Node to run the node. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Webflow Trigger node.","title":"1. Webflow Trigger node"},{"location":"integrations/trigger-nodes/n8n-nodes-base.wiseTrigger/","text":"Wise Trigger # Wise allows you to transfer money abroad with low-cost money transfers, receive money with international account details, and track transactions on your phone. \ud83d\udd11 Credentials You can find authentication information for this node here . Events # Triggered every time a balance account is credited Triggered every time a transfer's list of active cases is updated Triggered every time a transfer's status is updated Example Usage # This workflow allows you to receive updates from Wise and add information of a transfer to a base in Airtable. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Wise Trigger - Wise - Set - Airtable The final workflow should look like the following image. 1. Wise Trigger node (transferStateChange) # This node will trigger the workflow when the status of your transfer changes. First of all, you'll have to enter credentials for the Wise Trigger node. You can find out how to do that here . Select 'Personal' from the Profile dropdown list. Select 'Transfer State Changed' from the Event dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node triggers the workflow when a new order gets created. 2. Wise node (get: transfer) # This node will get the information about the transfer. Select the credentials that you entered in the previous node. Select 'Transfer' from the Resource dropdown list. Select 'Get' from the Operation dropdown list. Click on the gears icon next to the Transfer ID field. Select the following in the Variable Selector section: Current Node > Input Data > JSON > data > resource > id. You can also add the following expression: {{$json[\"data\"][\"resource\"][\"id\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the information of the transfer. 3. Set node # We will use the Set node to ensure that only the data that we set in this node gets passed on to the next nodes in the workflow. We will set the value of Transfer ID , Date , Reference , and Amount in this node. Click on Add Value and select 'String' from the dropdown list. Enter Transfer ID in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > id. You can also add the following expression: {{$json[\"id\"]}} . Click on Add Value and select 'String' from the dropdown list. Enter Date in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > created. You can also add the following expression: {{$json[\"created\"]}} . Click on Add Value and select 'String' from the dropdown list. Enter Reference in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > reference. You can also add the following expression: {{$json[\"reference\"]}} . Click on Add Value and select 'String' from the dropdown list. Enter Amount in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > sourceValue. You can also add the following expression: {{$json[\"sourceValue\"]}} . Toggle Keep Only Set to true . We set this option to true to ensure that only the data that we have set in this node get passed on to the next nodes in the workflow. Click on Execute Node to run the node. In the screenshot below, you will notice that the node sets the values of Transfer ID , Date , Reference , and Amount . These values are passed to the next node in the workflow. 4. Airtable node (Append) # This node will append the data that we set in the previous node to a table. Create a table like this in your Airtable base. First of all, you'll have to enter credentials for the Airtable node. You can find out how to do that here . Select 'Append' from the Operation dropdown list. Enter the Base ID in the Base ID field. For obtaining the Base ID, head over to their API page and select the correct base. You\u2019ll find the Base ID there. Enter the name of your table in the Table field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node appends the data that we had set in the previous node. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Wise Trigger node.","title":"Wise Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.wiseTrigger/#wise-trigger","text":"Wise allows you to transfer money abroad with low-cost money transfers, receive money with international account details, and track transactions on your phone. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Wise Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.wiseTrigger/#events","text":"Triggered every time a balance account is credited Triggered every time a transfer's list of active cases is updated Triggered every time a transfer's status is updated","title":"Events"},{"location":"integrations/trigger-nodes/n8n-nodes-base.wiseTrigger/#example-usage","text":"This workflow allows you to receive updates from Wise and add information of a transfer to a base in Airtable. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - Wise Trigger - Wise - Set - Airtable The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/trigger-nodes/n8n-nodes-base.wiseTrigger/#1-wise-trigger-node-transferstatechange","text":"This node will trigger the workflow when the status of your transfer changes. First of all, you'll have to enter credentials for the Wise Trigger node. You can find out how to do that here . Select 'Personal' from the Profile dropdown list. Select 'Transfer State Changed' from the Event dropdown list. Click on Execute Node to run the node. In the screenshot below, you will notice that the node triggers the workflow when a new order gets created.","title":"1. Wise Trigger node (transferStateChange)"},{"location":"integrations/trigger-nodes/n8n-nodes-base.wiseTrigger/#2-wise-node-get-transfer","text":"This node will get the information about the transfer. Select the credentials that you entered in the previous node. Select 'Transfer' from the Resource dropdown list. Select 'Get' from the Operation dropdown list. Click on the gears icon next to the Transfer ID field. Select the following in the Variable Selector section: Current Node > Input Data > JSON > data > resource > id. You can also add the following expression: {{$json[\"data\"][\"resource\"][\"id\"]}} . Click on Execute Node to run the node. In the screenshot below, you will notice that the node returns the information of the transfer.","title":"2. Wise node (get: transfer)"},{"location":"integrations/trigger-nodes/n8n-nodes-base.wiseTrigger/#3-set-node","text":"We will use the Set node to ensure that only the data that we set in this node gets passed on to the next nodes in the workflow. We will set the value of Transfer ID , Date , Reference , and Amount in this node. Click on Add Value and select 'String' from the dropdown list. Enter Transfer ID in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > id. You can also add the following expression: {{$json[\"id\"]}} . Click on Add Value and select 'String' from the dropdown list. Enter Date in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > created. You can also add the following expression: {{$json[\"created\"]}} . Click on Add Value and select 'String' from the dropdown list. Enter Reference in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > reference. You can also add the following expression: {{$json[\"reference\"]}} . Click on Add Value and select 'String' from the dropdown list. Enter Amount in the Name field. Click on the gears icon next to the Value field and click on Add Expression . Select the following in the Variable Selector section: Current Node > Input Data > JSON > sourceValue. You can also add the following expression: {{$json[\"sourceValue\"]}} . Toggle Keep Only Set to true . We set this option to true to ensure that only the data that we have set in this node get passed on to the next nodes in the workflow. Click on Execute Node to run the node. In the screenshot below, you will notice that the node sets the values of Transfer ID , Date , Reference , and Amount . These values are passed to the next node in the workflow.","title":"3. Set node"},{"location":"integrations/trigger-nodes/n8n-nodes-base.wiseTrigger/#4-airtable-node-append","text":"This node will append the data that we set in the previous node to a table. Create a table like this in your Airtable base. First of all, you'll have to enter credentials for the Airtable node. You can find out how to do that here . Select 'Append' from the Operation dropdown list. Enter the Base ID in the Base ID field. For obtaining the Base ID, head over to their API page and select the correct base. You\u2019ll find the Base ID there. Enter the name of your table in the Table field. Click on Execute Node to run the node. In the screenshot below, you will notice that the node appends the data that we had set in the previous node. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Wise Trigger node.","title":"4. Airtable node (Append)"},{"location":"integrations/trigger-nodes/n8n-nodes-base.wooCommerceTrigger/","text":"WooCommerce Trigger # WooCommerce is a customizable, open-source e-commerce plugin for WordPress. \ud83d\udd11 Credentials You can find authentication information for this node here . Events # coupon.created coupon.updated coupon.deleted customer.created customer.updated customer.deleted order.created order.updated order.deleted product.created product.updated product.deleted Example Usage # This workflow allows you to send a message on Mattermost when an order is created in WooCommerce. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - WooCommerce Trigger - Mattermost The final workflow should look like the following image. 1. WooCommerce Trigger node # This node will trigger the workflow when an order is created in your WooCommerce store. First of all, you'll have to enter credentials for the WooCommerce Trigger node. You can find out how to do that here . Select 'order.created' from the Event dropdown list. This will trigger the workflow when a user sends a message. Click on Execute Node to run the node. In the screenshot below, you will notice that the node triggers the workflow when a new order gets created. 2. Mattermost (post: message) # This node will send a message to a Mattermost channel sharing the details of the order that was created in WooCommerce. First of all, you'll have to enter credentials for the Mattermost node. You can find out how to do that here . Select the channel from the Channel ID dropdown list. Click on the gears icon next to Message field. Enter the following message in the Expression editor 1 {{$node[\"WooCommerce Trigger\"].json[\"billing\"][\"first_name\"]}} bought {{$node[\"WooCommerce Trigger\"].json[\"line_items\"][0][\"name\"]}}! Click on Execute Node to run the node. In the screenshot below, you will notice that the node sends a message to the Sales channel on Mattermost about the order that was created in WooCommerce. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the WooCommerce Trigger node.","title":"WooCommerce Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.wooCommerceTrigger/#woocommerce-trigger","text":"WooCommerce is a customizable, open-source e-commerce plugin for WordPress. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"WooCommerce Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.wooCommerceTrigger/#events","text":"coupon.created coupon.updated coupon.deleted customer.created customer.updated customer.deleted order.created order.updated order.deleted product.created product.updated product.deleted","title":"Events"},{"location":"integrations/trigger-nodes/n8n-nodes-base.wooCommerceTrigger/#example-usage","text":"This workflow allows you to send a message on Mattermost when an order is created in WooCommerce. You can also find the workflow on n8n.io. This example usage workflow would use the following nodes. - WooCommerce Trigger - Mattermost The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/trigger-nodes/n8n-nodes-base.wooCommerceTrigger/#1-woocommerce-trigger-node","text":"This node will trigger the workflow when an order is created in your WooCommerce store. First of all, you'll have to enter credentials for the WooCommerce Trigger node. You can find out how to do that here . Select 'order.created' from the Event dropdown list. This will trigger the workflow when a user sends a message. Click on Execute Node to run the node. In the screenshot below, you will notice that the node triggers the workflow when a new order gets created.","title":"1. WooCommerce Trigger node"},{"location":"integrations/trigger-nodes/n8n-nodes-base.wooCommerceTrigger/#2-mattermost-post-message","text":"This node will send a message to a Mattermost channel sharing the details of the order that was created in WooCommerce. First of all, you'll have to enter credentials for the Mattermost node. You can find out how to do that here . Select the channel from the Channel ID dropdown list. Click on the gears icon next to Message field. Enter the following message in the Expression editor 1 {{$node[\"WooCommerce Trigger\"].json[\"billing\"][\"first_name\"]}} bought {{$node[\"WooCommerce Trigger\"].json[\"line_items\"][0][\"name\"]}}! Click on Execute Node to run the node. In the screenshot below, you will notice that the node sends a message to the Sales channel on Mattermost about the order that was created in WooCommerce. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the WooCommerce Trigger node.","title":"2. Mattermost (post: message)"},{"location":"integrations/trigger-nodes/n8n-nodes-base.workableTrigger/","text":"Workable Trigger # Workable is a recruiting platform. \ud83d\udd11 Credentials You can find authentication information for this node here . Trigger Events # Candidate Created Candidate Moved","title":"Workable Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.workableTrigger/#workable-trigger","text":"Workable is a recruiting platform. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Workable Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.workableTrigger/#trigger-events","text":"Candidate Created Candidate Moved","title":"Trigger Events"},{"location":"integrations/trigger-nodes/n8n-nodes-base.wufooTrigger/","text":"Wufoo Trigger # Wufoo is an online form builder that helps you create custom HTML forms without writing code. \ud83d\udd11 Credentials You can find authentication information for this node here . Example Usage # This workflow allows you to receive updates when a form is submitted in Wufoo. You can also find the workflow on n8n.io. This example usage workflow would use the following node. - Wufoo Trigger The final workflow should look like the following image. 1. Wufoo Trigger node # First of all, you'll have to enter credentials for the Wufoo Trigger node. You can find out how to do that here . Select a form from the Forms dropdown list. Click on Execute Node to run the node. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Wufoo Trigger node.","title":"Wufoo Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.wufooTrigger/#wufoo-trigger","text":"Wufoo is an online form builder that helps you create custom HTML forms without writing code. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Wufoo Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.wufooTrigger/#example-usage","text":"This workflow allows you to receive updates when a form is submitted in Wufoo. You can also find the workflow on n8n.io. This example usage workflow would use the following node. - Wufoo Trigger The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/trigger-nodes/n8n-nodes-base.wufooTrigger/#1-wufoo-trigger-node","text":"First of all, you'll have to enter credentials for the Wufoo Trigger node. You can find out how to do that here . Select a form from the Forms dropdown list. Click on Execute Node to run the node. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Wufoo Trigger node.","title":"1. Wufoo Trigger node"},{"location":"integrations/trigger-nodes/n8n-nodes-base.zendeskTrigger/","text":"Zendesk Trigger # Zendesk is a support ticketing system, designed to help track, prioritize, and solve customer support interactions. More than just a help desk, Zendesk Support helps nurture customer relationships with personalized, responsive support across any channel. \ud83d\udd11 Credentials You can find authentication information for this node here . Example Usage # This workflow allows you to receive updates for support in Zendesk. You can also find the workflow on n8n.io. This example usage workflow would use the following node. - Zendesk Trigger The final workflow should look like the following image. 1. Zendesk Trigger node # First of all, you'll have to enter credentials for the Zendesk Trigger node. You can find out how to do that here . Click on the Add Condition button and select 'All' from the dropdown list. Select 'Open' from the Value dropdown list. Click on Execute Node to run the node. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Zendesk Trigger node.","title":"Zendesk Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.zendeskTrigger/#zendesk-trigger","text":"Zendesk is a support ticketing system, designed to help track, prioritize, and solve customer support interactions. More than just a help desk, Zendesk Support helps nurture customer relationships with personalized, responsive support across any channel. \ud83d\udd11 Credentials You can find authentication information for this node here .","title":"Zendesk Trigger"},{"location":"integrations/trigger-nodes/n8n-nodes-base.zendeskTrigger/#example-usage","text":"This workflow allows you to receive updates for support in Zendesk. You can also find the workflow on n8n.io. This example usage workflow would use the following node. - Zendesk Trigger The final workflow should look like the following image.","title":"Example Usage"},{"location":"integrations/trigger-nodes/n8n-nodes-base.zendeskTrigger/#1-zendesk-trigger-node","text":"First of all, you'll have to enter credentials for the Zendesk Trigger node. You can find out how to do that here . Click on the Add Condition button and select 'All' from the dropdown list. Select 'Open' from the Value dropdown list. Click on Execute Node to run the node. Activate workflow for production You'll need to save the workflow and then click on the Activate toggle on the top right of the screen to activate the workflow. Your workflow will then be triggered as specified by the settings in the Zendesk Trigger node.","title":"1. Zendesk Trigger node"},{"location":"reference/","text":"Overview # This section provides reference information about n8n, including: Release notes CLI commands Keyboard shortcuts Glossary License Data collection","title":"Overview"},{"location":"reference/#overview","text":"This section provides reference information about n8n, including: Release notes CLI commands Keyboard shortcuts Glossary License Data collection","title":"Overview"},{"location":"reference/cli-commands/","text":"CLI commands for n8n # Start a workflow # Workflows can not only be started by triggers, webhooks, or manually via the Editor. It is also possible to start them directly via the CLI. Execute a saved workflow by its ID: 1 n8n execute --id <ID> Execute a workflow from a workflow file: 1 n8n execute --file <WORKFLOW_FILE> Change the active status of a workflow # You can change the active status of a workflow via the CLI. Set the active status of a workflow by its ID to false: 1 n8n update:workflow --id = <ID> --active = false Set the active status of a workflow by its ID to true: 1 n8n update:workflow --id = <ID> --active = true Set the active status to false for all the workflows: 1 n8n update:workflow --all --active = false Set the active status to true for all the workflows: 1 n8n update:workflow --all --active = true Export workflows and credentials # You can export your workflows and credentials from n8n via the CLI. There are a couple of flags available for this. Flag Description --help Help prompt. --all Exports all workflows/credentials. --backup Sets --all --pretty --separate for simple backups. Only --output has to be set additionally. --id The ID of the workflow to export. --output Outputs file name or directory if using separate files. --pretty Formats the output in an easier to read fashion. --separate Exports one file per workflow (useful for versioning). Must inform a directory via --output. --decrypted Exports the credentials in a decrypted (plain text) format. Workflows # Export all your workflows to the standard output (terminal): 1 n8n export:workflow --all Export a workflow by its ID and specify the output file name: 1 n8n export:workflow --id = <ID> --output = file.json Export all workflows to a specific directory in a single file: 1 n8n export:workflow --all --output = backups/latest/ Export all the workflows to a specific directory using the --backup flag (details above): 1 n8n export:workflow --backup --output = backups/latest/ Credentials # Export all your credentials to the standard output (terminal): 1 n8n export:credentials --all Export credentials by their ID and specify the output file name: 1 n8n export:credentials --id = <ID> --output = file.json Export all credentials to a specific directory in a single file: 1 n8n export:credentials --all --output = backups/latest/ Export all the credentials to a specific directory using the --backup flag (details above): 1 n8n export:credentials --backup --output = backups/latest/ Export all the credentials in a decrypted (plain text) format. This can be used to migrate from one installation to another that has a different secret key (in the config file). Note: All sensitive information will be visible in the files. 1 n8n export:credentials --all --decrypted --output = backups/decrypted.json Import workflows and credentials # You can import your workflows and credentials from n8n via the CLI. Update the IDs When exporting workflows and credentials, their IDs also get exported. If you have workflows and credentials with the same IDs in your existing database, they will get overwritten. To avoid this, delete or change the IDs before importing. There are a couple of flags available for this. Flag Description --help Help prompt. --input Input file name or directory if --separate is used. --separate Imports *.json files from directory provided by --input. Migrating to different database systems Workflow and credential names are limited to 128 characters, but SQLite does not enforce size limits correctly. This might result in errors like Data too long for column name during the import process. In this case, you can edit the names from the n8n interface and export again or edit the JSON file directly before importing. Workflows # Import workflows from a specific file: 1 n8n import:workflow --input = file.json Import all the workflow files (*.json) from the specified directory: 1 n8n import:workflow --separate --input = backups/latest/ Credentials # Import credentials from a specific file: 1 n8n import:credentials --input = file.json Import all the credentials files (*.json) from the specified directory: 1 n8n import:credentials --separate --input = backups/latest/","title":"CLI commands"},{"location":"reference/cli-commands/#cli-commands-for-n8n","text":"","title":"CLI commands for n8n"},{"location":"reference/cli-commands/#start-a-workflow","text":"Workflows can not only be started by triggers, webhooks, or manually via the Editor. It is also possible to start them directly via the CLI. Execute a saved workflow by its ID: 1 n8n execute --id <ID> Execute a workflow from a workflow file: 1 n8n execute --file <WORKFLOW_FILE>","title":"Start a workflow"},{"location":"reference/cli-commands/#change-the-active-status-of-a-workflow","text":"You can change the active status of a workflow via the CLI. Set the active status of a workflow by its ID to false: 1 n8n update:workflow --id = <ID> --active = false Set the active status of a workflow by its ID to true: 1 n8n update:workflow --id = <ID> --active = true Set the active status to false for all the workflows: 1 n8n update:workflow --all --active = false Set the active status to true for all the workflows: 1 n8n update:workflow --all --active = true","title":"Change the active status of a workflow"},{"location":"reference/cli-commands/#export-workflows-and-credentials","text":"You can export your workflows and credentials from n8n via the CLI. There are a couple of flags available for this. Flag Description --help Help prompt. --all Exports all workflows/credentials. --backup Sets --all --pretty --separate for simple backups. Only --output has to be set additionally. --id The ID of the workflow to export. --output Outputs file name or directory if using separate files. --pretty Formats the output in an easier to read fashion. --separate Exports one file per workflow (useful for versioning). Must inform a directory via --output. --decrypted Exports the credentials in a decrypted (plain text) format.","title":"Export workflows and credentials"},{"location":"reference/cli-commands/#workflows","text":"Export all your workflows to the standard output (terminal): 1 n8n export:workflow --all Export a workflow by its ID and specify the output file name: 1 n8n export:workflow --id = <ID> --output = file.json Export all workflows to a specific directory in a single file: 1 n8n export:workflow --all --output = backups/latest/ Export all the workflows to a specific directory using the --backup flag (details above): 1 n8n export:workflow --backup --output = backups/latest/","title":"Workflows"},{"location":"reference/cli-commands/#credentials","text":"Export all your credentials to the standard output (terminal): 1 n8n export:credentials --all Export credentials by their ID and specify the output file name: 1 n8n export:credentials --id = <ID> --output = file.json Export all credentials to a specific directory in a single file: 1 n8n export:credentials --all --output = backups/latest/ Export all the credentials to a specific directory using the --backup flag (details above): 1 n8n export:credentials --backup --output = backups/latest/ Export all the credentials in a decrypted (plain text) format. This can be used to migrate from one installation to another that has a different secret key (in the config file). Note: All sensitive information will be visible in the files. 1 n8n export:credentials --all --decrypted --output = backups/decrypted.json","title":"Credentials"},{"location":"reference/cli-commands/#import-workflows-and-credentials","text":"You can import your workflows and credentials from n8n via the CLI. Update the IDs When exporting workflows and credentials, their IDs also get exported. If you have workflows and credentials with the same IDs in your existing database, they will get overwritten. To avoid this, delete or change the IDs before importing. There are a couple of flags available for this. Flag Description --help Help prompt. --input Input file name or directory if --separate is used. --separate Imports *.json files from directory provided by --input. Migrating to different database systems Workflow and credential names are limited to 128 characters, but SQLite does not enforce size limits correctly. This might result in errors like Data too long for column name during the import process. In this case, you can edit the names from the n8n interface and export again or edit the JSON file directly before importing.","title":"Import workflows and credentials"},{"location":"reference/cli-commands/#workflows_1","text":"Import workflows from a specific file: 1 n8n import:workflow --input = file.json Import all the workflow files (*.json) from the specified directory: 1 n8n import:workflow --separate --input = backups/latest/","title":"Workflows"},{"location":"reference/cli-commands/#credentials_1","text":"Import credentials from a specific file: 1 n8n import:credentials --input = file.json Import all the credentials files (*.json) from the specified directory: 1 n8n import:credentials --separate --input = backups/latest/","title":"Credentials"},{"location":"reference/data-collection/","text":"Data collection # n8n collects selected usage and performance data to help us diagnose problems and improve the platform. We take care to keep this data anonymous and to avoid collecting sensitive data. Read about how this information is stored and processed in our privacy policy . What we collect # Error codes and messages of failed executions (excluding any payload data, and not for custom nodes) The graph of a workflow (types of nodes used and how they are connected) From node parameters, only: The 'resource' and 'operation' that a node is set to (if applicable) The domain for HTTP nodes (but no path, query parameters or other information) The number of workflow executions and their status Details on how the UI is used (e.g. navigation, nodes panel searches) Diagnostic information n8n version Selected settings: DB_TYPE N8N_VERSION_NOTIFICATIONS_ENABLED N8N_DISABLE_PRODUCTION_MAIN_PROCESS Execution variables N8N_BASIC_AUTH_ACTIVE OS, RAM, and CPUs Anonymous instance ID What we don\u2019t collect # We do not collect private or sensitive information, such as: Personally identifiable information Credential information Node parameters (except 'resource' and 'operation') Execution data Sensitive settings (e.g. endpoints, ports, DB connections, username/password) Error payloads How collection works # Telemetry is collected anonymously, with most data sent to n8n as events that generate it occur. Workflow execution counts and an instance pulse are sent periodically (every 6 hours). Opting out of telemetry # Telemetry collection is enabled by default. To disable it you can configure the following environment variables. To opt out of telemetry events: 1 export N8N_DIAGNOSTICS_ENABLED = false To opt out of checking for new versions of n8n: 1 export N8N_VERSION_NOTIFICATIONS_ENABLED = false See configuration for more info on how to set environment variables.","title":"Data collection"},{"location":"reference/data-collection/#data-collection","text":"n8n collects selected usage and performance data to help us diagnose problems and improve the platform. We take care to keep this data anonymous and to avoid collecting sensitive data. Read about how this information is stored and processed in our privacy policy .","title":"Data collection"},{"location":"reference/data-collection/#what-we-collect","text":"Error codes and messages of failed executions (excluding any payload data, and not for custom nodes) The graph of a workflow (types of nodes used and how they are connected) From node parameters, only: The 'resource' and 'operation' that a node is set to (if applicable) The domain for HTTP nodes (but no path, query parameters or other information) The number of workflow executions and their status Details on how the UI is used (e.g. navigation, nodes panel searches) Diagnostic information n8n version Selected settings: DB_TYPE N8N_VERSION_NOTIFICATIONS_ENABLED N8N_DISABLE_PRODUCTION_MAIN_PROCESS Execution variables N8N_BASIC_AUTH_ACTIVE OS, RAM, and CPUs Anonymous instance ID","title":"What we collect"},{"location":"reference/data-collection/#what-we-dont-collect","text":"We do not collect private or sensitive information, such as: Personally identifiable information Credential information Node parameters (except 'resource' and 'operation') Execution data Sensitive settings (e.g. endpoints, ports, DB connections, username/password) Error payloads","title":"What we don\u2019t collect"},{"location":"reference/data-collection/#how-collection-works","text":"Telemetry is collected anonymously, with most data sent to n8n as events that generate it occur. Workflow execution counts and an instance pulse are sent periodically (every 6 hours).","title":"How collection works"},{"location":"reference/data-collection/#opting-out-of-telemetry","text":"Telemetry collection is enabled by default. To disable it you can configure the following environment variables. To opt out of telemetry events: 1 export N8N_DIAGNOSTICS_ENABLED = false To opt out of checking for new versions of n8n: 1 export N8N_VERSION_NOTIFICATIONS_ENABLED = false See configuration for more info on how to set environment variables.","title":"Opting out of telemetry"},{"location":"reference/glossary/","text":"Glossary # .env File # A special file which contains configuration information in the form of environment variables . n8n uses the .env file to control how n8n works. You can set items such as username and password for the editor or your timezone using this file. See the n8n docs for more details. To learn more about the .env file, read Manage Environment Variables in your NodeJS Application with dotenv . Account # Service which allows a user to connect to a product. User's identity is confirmed through shared credentials . Also known as a user account . Many of the nodes in n8n require you to have an account with the service for which the node was built. For example, Typeform. API # An acronym for Application Programming Interface , it is a framework for sharing text information by providing a specifically formatted URL to retrieve desired information. APIs are a critical part of many n8n nodes and workflows . The nodes talk to the API that is provided by a service on the internet. n8n workflows allow these APIs to talk to each other. For a more detailed understanding of APIs, see What is API: Definition, Types, Specifications, Documentation . See also: - Header Certificate # A file or character string that is used to encrypt and decrypt information between two entities (e.g. computers, applications, users, etc.). It is used to ensure that anyone who intercepts the information between the two entities will not be able to read the information. n8n uses certificates to keep user information safe when working in the Editor UI . You can also customize the certificate that you use in n8n. For further information, see What are certificates? . See also: - Encryption Key - SSL CLI # An acronym for Command Line Interface , it is a text-based form of processing computer commands. It is possible to start a workflow or change its status using the CLI in n8n. To learn more, see What is Command Line Interface (CLI)? . Connection # A link between two or more nodes that allows data to flow from one node to another. This is a core concept in n8n. Credentials # Unique pieces of information that identifies a user or a service. A common form of credentials is a username and password pair. n8n stores encrypted credentials so that it can automate tasks that require this information to run properly. For more information, see Credentials . See also: - Token Docker # A system to build, run and share applications with all of the services bundled to support the application in one package. n8n has created a docker image so that users who have a docker environment can quickly install and run n8n. For more information, read Docker overview and A Docker Tutorial for Beginners . Editor UI # In n8n, this is the web interface used to create workflows . It is accessed through a web browser at a designated website address. To learn more about user interfaces, see User interface . Encryption Key # A piece of data, either string or binary, which is used to encode information so that it cannot be easily read. Encryption keys are often long string of seemingly random characters. n8n will sometimes use encryption keys for accessing APIs when required. It also uses a personal encryption key to secure credentials. For more information, see What are encryption keys and how do they work? \ud83d\udd10 See also: - SSL - Certificate Environment Variables # Environment variables are predetermined values that typically get used to provide the ability to configure your program from outside of your application. An environment variable consists of a key-value pair. For example, N8N_BASIC_AUTH_USER=user . Here, N8N_BASIC_AUTH_USER is the key and user is the value. n8n uses environment variables that help you configure your self-hosted n8n instance. You can use environment variables to set username and password for your n8n instance, configure the timezone, and a lot more. Refer to the configuration page to learn more about the environment variables used in n8n. Execution # A completed run of a workflow from start to finish. n8n logs workflow executions and allows the user to see if the workflow completed successfully or not. n8n also has the ability to execute one workflow from another workflow. To learn more, see Execution (computing) . Expression # A string of characters and symbols in a programming language that represents a value depending upon its input. n8n uses expressions extensively when a node is referring to another node for input. Find out more about expressions by reading Expression . Fair-code # A software model very similar to open source which allows developers to receive remuneration for use in a for profit product. n8n is licensed under the fair-code model. See faircode.io for more details. Function # In programming, a set of reusable commands designed to be run together and launched by other commands in the code. It may or may not receive input from the command that launches it. Many of the nodes in n8n behave like functions, receiving specific input to generate a specific output. To learn more about functions , see Computer Programming - Functions . IP Address # A string of numbers and letters which represents the location of an electronic device on a TCP/IP network. n8n will often refer to IP addresses when accessing information on a system other than itself. This is more common when the service is on the local network rather than on the internet. If you want to learn more about IP addresses , see What Is an IP Address? . JavaScript # A modern programming language popular with web platforms used to create interactive web interfaces. While n8n is written in TypeScript, the final code generated is JavaScript and the Function node uses JavaScript to create customized nodes . JavaScript is used in the n8n's Function nodes. To learn more about Javascript, visit Javascript Tutorial . JSON # An open standard file and data format commonly used with JavaScript . It is easy for humans to read and for computers to parse. The majority of data that is transferred from one node to another in n8n is most likely in the JSON format. For further reading, please see Introducing JSON . Header # Section of an HTTP request message that defines allows extra information to be passed between the transmitter and receiver. n8n has the ability to send custom header information to many APIs , specifically in the HTTP Request node . For further information, see Request header . Node # The basic building block for n8n. Each node is designed with a specific purpose of receiving, processing or outputting data. For more information, see Node Basics . NodeJS # A package of JavaScript file used to provide everything needed to run JavaScript code without a web browser. n8n runs on top of NodeJS and uses its libraries extensively. Read more at About Node.js . See also: - TypeScript npm # A program that installs, updates and removes JavaScript Packages . n8n is installed and updated using npm. Find out more at About npm . See also: - npx npx # A program that will download, run, then delete a JavaScript Packages . Often used for quickly testing what a package will do without completely installing it. You can try out n8n without installing it to your system using npx. For more information about npx , see npx documentation . See also: - npm Package # A group of JavaScript files which are designed to work together for a specific purpose. n8n is also distributed as an npm package. For more information, see software package . See also: - npx Parameter # Data that is passed to a program or script which is used for processing and directly effects the output or results generated. Many n8n nodes accept parameters to customize their output. The n8n CLI also accepts parameters so that it knows how to properly execute. For more information, see Functions, procedures nad modules . Password # A secret string of characters provided to prove one's identity. Often used to gain access to restricted applications and systems. The n8n Editor UI can be password protected so that only authorized users can access the interface. n8n also stores passwords as a part of credentials for some services. To read more about passwords , see The Importance of passwords . See also: - Username - Token REST API # See API Root User # In *NIX operating system, the user account that has no restrictions placed upon it within the system. The root user is typically only used for performing maintenance and upgrade tasks as improperly run applications using the root user account can cause significant damage to the system. For the protection of the system, it is generally not recommended that n8n be run by the root user. For more information about root , see root Definition . SSL # An acronym for Secure Socket Layer , it is the primary way that web based services are secured. A SSL certificate is often used on websites to encrypt the information that is travelling between a web server and a web page. n8n uses SSL certificates to secure the n8n UI so that any information that is passed between the n8n server and the user's web browser is encrypted and cannot be spied upon when it is travelling between the two. It is possible to customize the SSL installation. For further reading, see SSL and SSL Certificates Explained For Beginners . Token # A unique identifier, typically a long string of characters, used to increase the security of systems that request or transmit data. It is usually a shared secret between the sender and the receiver to allow either system to determine if they should be requesting/transmitting data. Tokens can also sometimes be used as encryption keys to make the data which is transmitted illegible to thoses without the token. n8n uses tokens often when requesting or sending data using APIs or webhooks . For more information, see token . Trigger # A specific type of node that starts a workflow when it receives data from a source outside of the workflow itself. A good example of a trigger node in n8n is a webhook . It listens for data coming into it and then starts a workflow when it sees data. For more information about triggers , see Event Driven Programming . Tunnel # An encrypted session between two systems used to secure data transmission. n8n uses a tunnel to allow external users to access n8n installations that are behind firewalls, typically for triggering webhooks . This setup is recommended for testing use only. For further reading, see VPN Tunnels explained: what are they and how can they keep your internet data secure . TypeScript # An open source programming language that extends the JavaScript programming language. n8n is written in TypeScript. Read more at Typescript . UI # An acronym for User Interface , it is the method or tool a person uses to interact with a computer system and its software. n8n has a web based UI, meaning that you program and interact with n8n using a web browser. Learn more at user interface (UI) . URL # An acronym for Universal Resource Locator , it is a string of characters that represents a network location. Most people's experience with URLs is in the form of a website address (e.g. https://n8n.io) n8n's Editor UI is accessed via an URL entered into a web browser (often https://localhost:5678). Some nodes in n8n access resources on the internet using an URL. Read more at What is a URL? . Username # A character string representing an account on a computer system. It is often paired with a password to allow a person to access information and services that the person has permissions to use. n8n also stores usernames as a part of credentials for some services. Read more at Username . See also: - Token Variable # In computer programming, a variable represents a piece of data that can be changed or manipulated by the computer code. Variables are used to temporarily store information for processing. n8n uses variables extensively throughout its programming and nodes. Read more at Computer Programming - Variables . See also: - .env Webhook # A service that listens for data input from an external source used to trigger an action in a system. Webhooks allow external systems to provide real-time alerts and updates to the system that does not limit the updates to regular polling intervals. Webhooks are often referenced by push notifications. n8n has the ability to create webhooks that can be used to start workflows and receive data from systems outside of the n8n system itself. To learn more about webhooks , see What's a Webhook? . Workflow # A collection of nodes connected together to produce a specific outcome. n8n's primary form of programming uses a workflow model to represent both code and data flow. For more information, see Workflow application .","title":"Glossary"},{"location":"reference/glossary/#glossary","text":"","title":"Glossary"},{"location":"reference/glossary/#env-file","text":"A special file which contains configuration information in the form of environment variables . n8n uses the .env file to control how n8n works. You can set items such as username and password for the editor or your timezone using this file. See the n8n docs for more details. To learn more about the .env file, read Manage Environment Variables in your NodeJS Application with dotenv .","title":".env File"},{"location":"reference/glossary/#account","text":"Service which allows a user to connect to a product. User's identity is confirmed through shared credentials . Also known as a user account . Many of the nodes in n8n require you to have an account with the service for which the node was built. For example, Typeform.","title":"Account"},{"location":"reference/glossary/#api","text":"An acronym for Application Programming Interface , it is a framework for sharing text information by providing a specifically formatted URL to retrieve desired information. APIs are a critical part of many n8n nodes and workflows . The nodes talk to the API that is provided by a service on the internet. n8n workflows allow these APIs to talk to each other. For a more detailed understanding of APIs, see What is API: Definition, Types, Specifications, Documentation . See also: - Header","title":"API"},{"location":"reference/glossary/#certificate","text":"A file or character string that is used to encrypt and decrypt information between two entities (e.g. computers, applications, users, etc.). It is used to ensure that anyone who intercepts the information between the two entities will not be able to read the information. n8n uses certificates to keep user information safe when working in the Editor UI . You can also customize the certificate that you use in n8n. For further information, see What are certificates? . See also: - Encryption Key - SSL","title":"Certificate"},{"location":"reference/glossary/#cli","text":"An acronym for Command Line Interface , it is a text-based form of processing computer commands. It is possible to start a workflow or change its status using the CLI in n8n. To learn more, see What is Command Line Interface (CLI)? .","title":"CLI"},{"location":"reference/glossary/#connection","text":"A link between two or more nodes that allows data to flow from one node to another. This is a core concept in n8n.","title":"Connection"},{"location":"reference/glossary/#credentials","text":"Unique pieces of information that identifies a user or a service. A common form of credentials is a username and password pair. n8n stores encrypted credentials so that it can automate tasks that require this information to run properly. For more information, see Credentials . See also: - Token","title":"Credentials"},{"location":"reference/glossary/#docker","text":"A system to build, run and share applications with all of the services bundled to support the application in one package. n8n has created a docker image so that users who have a docker environment can quickly install and run n8n. For more information, read Docker overview and A Docker Tutorial for Beginners .","title":"Docker"},{"location":"reference/glossary/#editor-ui","text":"In n8n, this is the web interface used to create workflows . It is accessed through a web browser at a designated website address. To learn more about user interfaces, see User interface .","title":"Editor UI"},{"location":"reference/glossary/#encryption-key","text":"A piece of data, either string or binary, which is used to encode information so that it cannot be easily read. Encryption keys are often long string of seemingly random characters. n8n will sometimes use encryption keys for accessing APIs when required. It also uses a personal encryption key to secure credentials. For more information, see What are encryption keys and how do they work? \ud83d\udd10 See also: - SSL - Certificate","title":"Encryption Key"},{"location":"reference/glossary/#environment-variables","text":"Environment variables are predetermined values that typically get used to provide the ability to configure your program from outside of your application. An environment variable consists of a key-value pair. For example, N8N_BASIC_AUTH_USER=user . Here, N8N_BASIC_AUTH_USER is the key and user is the value. n8n uses environment variables that help you configure your self-hosted n8n instance. You can use environment variables to set username and password for your n8n instance, configure the timezone, and a lot more. Refer to the configuration page to learn more about the environment variables used in n8n.","title":"Environment Variables"},{"location":"reference/glossary/#execution","text":"A completed run of a workflow from start to finish. n8n logs workflow executions and allows the user to see if the workflow completed successfully or not. n8n also has the ability to execute one workflow from another workflow. To learn more, see Execution (computing) .","title":"Execution"},{"location":"reference/glossary/#expression","text":"A string of characters and symbols in a programming language that represents a value depending upon its input. n8n uses expressions extensively when a node is referring to another node for input. Find out more about expressions by reading Expression .","title":"Expression"},{"location":"reference/glossary/#fair-code","text":"A software model very similar to open source which allows developers to receive remuneration for use in a for profit product. n8n is licensed under the fair-code model. See faircode.io for more details.","title":"Fair-code"},{"location":"reference/glossary/#function","text":"In programming, a set of reusable commands designed to be run together and launched by other commands in the code. It may or may not receive input from the command that launches it. Many of the nodes in n8n behave like functions, receiving specific input to generate a specific output. To learn more about functions , see Computer Programming - Functions .","title":"Function"},{"location":"reference/glossary/#ip-address","text":"A string of numbers and letters which represents the location of an electronic device on a TCP/IP network. n8n will often refer to IP addresses when accessing information on a system other than itself. This is more common when the service is on the local network rather than on the internet. If you want to learn more about IP addresses , see What Is an IP Address? .","title":"IP Address"},{"location":"reference/glossary/#javascript","text":"A modern programming language popular with web platforms used to create interactive web interfaces. While n8n is written in TypeScript, the final code generated is JavaScript and the Function node uses JavaScript to create customized nodes . JavaScript is used in the n8n's Function nodes. To learn more about Javascript, visit Javascript Tutorial .","title":"JavaScript"},{"location":"reference/glossary/#json","text":"An open standard file and data format commonly used with JavaScript . It is easy for humans to read and for computers to parse. The majority of data that is transferred from one node to another in n8n is most likely in the JSON format. For further reading, please see Introducing JSON .","title":"JSON"},{"location":"reference/glossary/#header","text":"Section of an HTTP request message that defines allows extra information to be passed between the transmitter and receiver. n8n has the ability to send custom header information to many APIs , specifically in the HTTP Request node . For further information, see Request header .","title":"Header"},{"location":"reference/glossary/#node","text":"The basic building block for n8n. Each node is designed with a specific purpose of receiving, processing or outputting data. For more information, see Node Basics .","title":"Node"},{"location":"reference/glossary/#nodejs","text":"A package of JavaScript file used to provide everything needed to run JavaScript code without a web browser. n8n runs on top of NodeJS and uses its libraries extensively. Read more at About Node.js . See also: - TypeScript","title":"NodeJS"},{"location":"reference/glossary/#npm","text":"A program that installs, updates and removes JavaScript Packages . n8n is installed and updated using npm. Find out more at About npm . See also: - npx","title":"npm"},{"location":"reference/glossary/#npx","text":"A program that will download, run, then delete a JavaScript Packages . Often used for quickly testing what a package will do without completely installing it. You can try out n8n without installing it to your system using npx. For more information about npx , see npx documentation . See also: - npm","title":"npx"},{"location":"reference/glossary/#package","text":"A group of JavaScript files which are designed to work together for a specific purpose. n8n is also distributed as an npm package. For more information, see software package . See also: - npx","title":"Package"},{"location":"reference/glossary/#parameter","text":"Data that is passed to a program or script which is used for processing and directly effects the output or results generated. Many n8n nodes accept parameters to customize their output. The n8n CLI also accepts parameters so that it knows how to properly execute. For more information, see Functions, procedures nad modules .","title":"Parameter"},{"location":"reference/glossary/#password","text":"A secret string of characters provided to prove one's identity. Often used to gain access to restricted applications and systems. The n8n Editor UI can be password protected so that only authorized users can access the interface. n8n also stores passwords as a part of credentials for some services. To read more about passwords , see The Importance of passwords . See also: - Username - Token","title":"Password"},{"location":"reference/glossary/#rest-api","text":"See API","title":"REST API"},{"location":"reference/glossary/#root-user","text":"In *NIX operating system, the user account that has no restrictions placed upon it within the system. The root user is typically only used for performing maintenance and upgrade tasks as improperly run applications using the root user account can cause significant damage to the system. For the protection of the system, it is generally not recommended that n8n be run by the root user. For more information about root , see root Definition .","title":"Root User"},{"location":"reference/glossary/#ssl","text":"An acronym for Secure Socket Layer , it is the primary way that web based services are secured. A SSL certificate is often used on websites to encrypt the information that is travelling between a web server and a web page. n8n uses SSL certificates to secure the n8n UI so that any information that is passed between the n8n server and the user's web browser is encrypted and cannot be spied upon when it is travelling between the two. It is possible to customize the SSL installation. For further reading, see SSL and SSL Certificates Explained For Beginners .","title":"SSL"},{"location":"reference/glossary/#token","text":"A unique identifier, typically a long string of characters, used to increase the security of systems that request or transmit data. It is usually a shared secret between the sender and the receiver to allow either system to determine if they should be requesting/transmitting data. Tokens can also sometimes be used as encryption keys to make the data which is transmitted illegible to thoses without the token. n8n uses tokens often when requesting or sending data using APIs or webhooks . For more information, see token .","title":"Token"},{"location":"reference/glossary/#trigger","text":"A specific type of node that starts a workflow when it receives data from a source outside of the workflow itself. A good example of a trigger node in n8n is a webhook . It listens for data coming into it and then starts a workflow when it sees data. For more information about triggers , see Event Driven Programming .","title":"Trigger"},{"location":"reference/glossary/#tunnel","text":"An encrypted session between two systems used to secure data transmission. n8n uses a tunnel to allow external users to access n8n installations that are behind firewalls, typically for triggering webhooks . This setup is recommended for testing use only. For further reading, see VPN Tunnels explained: what are they and how can they keep your internet data secure .","title":"Tunnel"},{"location":"reference/glossary/#typescript","text":"An open source programming language that extends the JavaScript programming language. n8n is written in TypeScript. Read more at Typescript .","title":"TypeScript"},{"location":"reference/glossary/#ui","text":"An acronym for User Interface , it is the method or tool a person uses to interact with a computer system and its software. n8n has a web based UI, meaning that you program and interact with n8n using a web browser. Learn more at user interface (UI) .","title":"UI"},{"location":"reference/glossary/#url","text":"An acronym for Universal Resource Locator , it is a string of characters that represents a network location. Most people's experience with URLs is in the form of a website address (e.g. https://n8n.io) n8n's Editor UI is accessed via an URL entered into a web browser (often https://localhost:5678). Some nodes in n8n access resources on the internet using an URL. Read more at What is a URL? .","title":"URL"},{"location":"reference/glossary/#username","text":"A character string representing an account on a computer system. It is often paired with a password to allow a person to access information and services that the person has permissions to use. n8n also stores usernames as a part of credentials for some services. Read more at Username . See also: - Token","title":"Username"},{"location":"reference/glossary/#variable","text":"In computer programming, a variable represents a piece of data that can be changed or manipulated by the computer code. Variables are used to temporarily store information for processing. n8n uses variables extensively throughout its programming and nodes. Read more at Computer Programming - Variables . See also: - .env","title":"Variable"},{"location":"reference/glossary/#webhook","text":"A service that listens for data input from an external source used to trigger an action in a system. Webhooks allow external systems to provide real-time alerts and updates to the system that does not limit the updates to regular polling intervals. Webhooks are often referenced by push notifications. n8n has the ability to create webhooks that can be used to start workflows and receive data from systems outside of the n8n system itself. To learn more about webhooks , see What's a Webhook? .","title":"Webhook"},{"location":"reference/glossary/#workflow","text":"A collection of nodes connected together to produce a specific outcome. n8n's primary form of programming uses a workflow model to represent both code and data flow. For more information, see Workflow application .","title":"Workflow"},{"location":"reference/keyboard-shortcuts/","text":"Keyboard Shortcuts # The following keyboard shortcuts can be used: General # Ctrl + Left Mouse Button : Move/Pan Node View Ctrl + a : Select all nodes Ctrl + Alt + n : Create new workflow Ctrl + o : Open workflow Ctrl + s : Save the current workflow Ctrl + v : Paste nodes Node panel # Tab : Open the Node Panel Enter : Insert selected node into workflow Escape : Close Node panel Node panel categories # Enter : Insert node into workflow, collapse/expand category, open subcategory ArrowRight : Expand category, open subcategory ArrowLeft : Collapse category, close subcategory view With nodes selected in canvas # ArrowDown : Select sibling node below the current one ArrowLeft : Select node left of the current one ArrowRight : Select node right of the current one ArrowUp : Select sibling node above the current one Ctrl + c : Copy nodes Ctrl + x : Cut nodes d : Deactivate nodes Delete : Delete nodes F2 : Rename node Shift + ArrowLeft : Select all nodes left of the current one Shift + ArrowRight : Select all nodes right of the current one Canvas zoom # + or = : Zoom in - or _ : Zoom out 0 : Reset zoom level 1 : Zoom to fit workflow Ctrl + Mouse wheel : Zoom in/out","title":"Keyboard shortcuts"},{"location":"reference/keyboard-shortcuts/#keyboard-shortcuts","text":"The following keyboard shortcuts can be used:","title":"Keyboard Shortcuts"},{"location":"reference/keyboard-shortcuts/#general","text":"Ctrl + Left Mouse Button : Move/Pan Node View Ctrl + a : Select all nodes Ctrl + Alt + n : Create new workflow Ctrl + o : Open workflow Ctrl + s : Save the current workflow Ctrl + v : Paste nodes","title":"General"},{"location":"reference/keyboard-shortcuts/#node-panel","text":"Tab : Open the Node Panel Enter : Insert selected node into workflow Escape : Close Node panel","title":"Node panel"},{"location":"reference/keyboard-shortcuts/#node-panel-categories","text":"Enter : Insert node into workflow, collapse/expand category, open subcategory ArrowRight : Expand category, open subcategory ArrowLeft : Collapse category, close subcategory view","title":"Node panel categories"},{"location":"reference/keyboard-shortcuts/#with-nodes-selected-in-canvas","text":"ArrowDown : Select sibling node below the current one ArrowLeft : Select node left of the current one ArrowRight : Select node right of the current one ArrowUp : Select sibling node above the current one Ctrl + c : Copy nodes Ctrl + x : Cut nodes d : Deactivate nodes Delete : Delete nodes F2 : Rename node Shift + ArrowLeft : Select all nodes left of the current one Shift + ArrowRight : Select all nodes right of the current one","title":"With nodes selected in canvas"},{"location":"reference/keyboard-shortcuts/#canvas-zoom","text":"+ or = : Zoom in - or _ : Zoom out 0 : Reset zoom level 1 : Zoom to fit workflow Ctrl + Mouse wheel : Zoom in/out","title":"Canvas zoom"},{"location":"reference/license/","text":"License # n8n is fair-code licensed under the Sustainable Use License License FAQs # What license do you use? # n8n uses the Sustainable Use License . What source code is covered by the Sustainable Use License? # The Sustainable Use License applies to all our source code hosted in our main GitHub repository . What is the Sustainable Use License? # The Sustainable Use License is a fair-code software license created by n8n in 2022. You can read more about why we did this here . The license allows you the free right to use, modify, create derivative works, and redistribute, with three limitations: You may use or modify the software only for your own internal business purposes or for non-commercial or personal use. You may distribute the software or provide it to others only if you do so free of charge for non-commercial purposes. You may not alter, remove, or obscure any licensing, copyright, or other notices of the licensor in the software. Any use of the licensor's trademarks is subject to applicable law. We encourage anyone who wants to use the Sustainable Use License. If you are building something out in the open, it makes sense to think about licensing earlier in order to avoid problems later. Contact us on license@n8n.io if you would like to ask any questions about it. Can you give some examples of what is and isn't allowed under the license in the context of n8n's product? # All of the following examples are allowed under our license: Using n8n to sync the data you control as a company, for example from a CRM to an internal database Using n8n workflows to create backend logic for a product, with other code handling all interfaces with your users Creating an n8n node for your product, or any other integration between your product and n8n Providing consulting services related to n8n, for example building workflows, custom features closely connect to n8n, or code that gets executed by n8n Supporting n8n, for example by setting it up or maintaining it on an internal company server These examples would not be allowed under our license, meaning you would need to contact us to create a separate agreement: Using credentials of your customers in workflows (for example, to send your customers Slack notifications based on events in your system) Using the source code to provide embedded one-click integrations to your users' other services Hosting n8n and charging people money to access it Bundling n8n with another product, and distributing it for money To do anything not allowed under the license, you will need a separate agreement with us. What if I want to use n8n for something that is not permitted by the license? # You must sign a separate commercial agreement with us. We actively encourage software creators to embed n8n within their products; we just ask them to sign an agreement laying out the terms of use, and the fees owed to n8n for using the product in this way. We call this mode of use n8n.embed. You can learn more, and contact us about it here . If you are unsure whether the use case you have in mind constitutes an internal business purpose or not, take a look at the examples , and if you're still unclear, email us at license@n8n.io . Why do you not use an open source license? # n8n's mission is to give everyone who uses a computer technical superpowers. We've decided the best way for us to achieve this mission is to make n8n as widely and freely available as possible for users, while ensuring we can build a sustainable, viable business. By making our product free to use, easy to distribute, and source-available we help everyone access the product. By operating as a business, we can continue to release features, fix bugs and provide reliable software at scale long-term. Why did you create a license? # Creating a license was our least favorite option. We only went down this path after reviewing the possible existing licenses, and deciding nothing fit our specific needs. There are two ways in which we try to mitigate the pain and friction of using a proprietary license: (1) by using plain English, and keeping it as short as possible and (2) by promoting fair-code with the goal of making it a well-known umbrella term to describe software models like ours. Our goals when we created the Sustainable Use License were (1) to be as permissive as possible while (2) safeguarding our ability to build a business, and (3) being as clear as possible what use was permitted or not. My company has a policy against using code that restricts commercial use \u2013 can I still use n8n? # Provided you are using n8n for internal business purposes, and not making n8n available to your customers for them to connect their accounts and build workflows, you should be able to use n8n. If you are unsure whether the use case you have in mind constitutes an internal business purpose or not, take a look at the examples , and if you're still unclear, email us at license@n8n.io . What happens to the code I contribute to n8n in light of the Sustainable Use License? # Any code you contribute on GitHub is subject to GitHub's terms of use . In simple terms, this means you own, and are responsible for, anything you contribute, but that you grant other GitHub users certain rights to use this code. When you contribute code to a repository containing notice of a license, you license the code under the same terms. n8n asks every contributor to sign our Contributor License Agreement . In addition to the above, this gives n8n the ability to change its license without seeking additional permission. It also means you are not liable for your contributions (e.g. in case they cause damage to someone else's business). It's easy to get started contributing code to n8n here , and we've listed broader ways of participating in our community here . Why did you switch to the Sustainable Use License from your previous license arrangement (Apache 2.0 with Commons Clause)? # n8n was until 17 March 2022 licensed under Apache 2.0 with Commons Clause. Commons Clause was initiated by various software companies wanting to protect their rights against cloud providers. The concept involved adding a commercial restriction on top of an existing open source license. However, the use of the Commons Clause as an additional condition to an open source license, as well as the use of wording that is open to interpretation, created some confusion and uncertainty regarding the terms of use. The Commons Clause also restricted people's ability to offer consulting and support services: we realized these services are critical in enabling people to get value from n8n, so we wanted to remove this restriction. We created the Sustainable Use License to be more permissive and more clear about what use is allowed, while continuing to ensure n8n gets the funding needed to build and improve our product. What are the main differences between the Sustainable Use License and your previous license arrangement (Apache 2.0 with Commons Clause)? # There are two main differences between the Sustainable Use License and our previous license arrangement. The first is that we have tightened the definition of how you can use the software. Previously the Commons Clause restricted users ability to \"sell\" the software; we have redefined this to restrict use to internal business purposes. The second difference is that our previous license restricted people's ability to charge fees for consulting or support services related to the software: we have lifted that restriction altogether. That means you are now free to offer commercial consulting or support services (e.g. building n8n workflows) without the need for a separate license agreement with us. If you are interested in joining our community of n8n experts providing these services, you can learn more here. Is n8n open source? # Although n8n's source code is available under the Sustainable Use License, according to the Open Source Initiative (OSI), open source licenses cannot include limitations on use, so we do not call ourselves open source. In practice, n8n offers most users many of the same benefits as OSI-approved open source. We coined the term 'fair-code' as a way of describing our licensing model, and the model of other companies who are source-available, but restrict commercial use of their source code. What is fair-code, and how does the Sustainable Use License relate to it? # Fair-code is not a software license. It describes a software model where software: is generally free to use and can be distributed by anybody has its source code openly available can be extended by anybody in public and private communities is commercially restricted by its authors The Sustainable Use License is a fair-code license. You can read more about it, and see other examples of fair-code licenses here . We're always excited to talk about software licenses, fair-code and other principles around sharing code with interested parties. To get in touch to chat, email license@n8n.io.","title":"License"},{"location":"reference/license/#license","text":"n8n is fair-code licensed under the Sustainable Use License","title":"License"},{"location":"reference/license/#license-faqs","text":"","title":"License FAQs"},{"location":"reference/license/#what-license-do-you-use","text":"n8n uses the Sustainable Use License .","title":"What license do you use?"},{"location":"reference/license/#what-source-code-is-covered-by-the-sustainable-use-license","text":"The Sustainable Use License applies to all our source code hosted in our main GitHub repository .","title":"What source code is covered by the Sustainable Use License?"},{"location":"reference/license/#what-is-the-sustainable-use-license","text":"The Sustainable Use License is a fair-code software license created by n8n in 2022. You can read more about why we did this here . The license allows you the free right to use, modify, create derivative works, and redistribute, with three limitations: You may use or modify the software only for your own internal business purposes or for non-commercial or personal use. You may distribute the software or provide it to others only if you do so free of charge for non-commercial purposes. You may not alter, remove, or obscure any licensing, copyright, or other notices of the licensor in the software. Any use of the licensor's trademarks is subject to applicable law. We encourage anyone who wants to use the Sustainable Use License. If you are building something out in the open, it makes sense to think about licensing earlier in order to avoid problems later. Contact us on license@n8n.io if you would like to ask any questions about it.","title":"What is the Sustainable Use License?"},{"location":"reference/license/#can-you-give-some-examples-of-what-is-and-isnt-allowed-under-the-license-in-the-context-of-n8ns-product","text":"All of the following examples are allowed under our license: Using n8n to sync the data you control as a company, for example from a CRM to an internal database Using n8n workflows to create backend logic for a product, with other code handling all interfaces with your users Creating an n8n node for your product, or any other integration between your product and n8n Providing consulting services related to n8n, for example building workflows, custom features closely connect to n8n, or code that gets executed by n8n Supporting n8n, for example by setting it up or maintaining it on an internal company server These examples would not be allowed under our license, meaning you would need to contact us to create a separate agreement: Using credentials of your customers in workflows (for example, to send your customers Slack notifications based on events in your system) Using the source code to provide embedded one-click integrations to your users' other services Hosting n8n and charging people money to access it Bundling n8n with another product, and distributing it for money To do anything not allowed under the license, you will need a separate agreement with us.","title":"Can you give some examples of what is and isn't allowed under the license in the context of n8n's product?"},{"location":"reference/license/#what-if-i-want-to-use-n8n-for-something-that-is-not-permitted-by-the-license","text":"You must sign a separate commercial agreement with us. We actively encourage software creators to embed n8n within their products; we just ask them to sign an agreement laying out the terms of use, and the fees owed to n8n for using the product in this way. We call this mode of use n8n.embed. You can learn more, and contact us about it here . If you are unsure whether the use case you have in mind constitutes an internal business purpose or not, take a look at the examples , and if you're still unclear, email us at license@n8n.io .","title":"What if I want to use n8n for something that is not permitted by the license?"},{"location":"reference/license/#why-do-you-not-use-an-open-source-license","text":"n8n's mission is to give everyone who uses a computer technical superpowers. We've decided the best way for us to achieve this mission is to make n8n as widely and freely available as possible for users, while ensuring we can build a sustainable, viable business. By making our product free to use, easy to distribute, and source-available we help everyone access the product. By operating as a business, we can continue to release features, fix bugs and provide reliable software at scale long-term.","title":"Why do you not use an open source license?"},{"location":"reference/license/#why-did-you-create-a-license","text":"Creating a license was our least favorite option. We only went down this path after reviewing the possible existing licenses, and deciding nothing fit our specific needs. There are two ways in which we try to mitigate the pain and friction of using a proprietary license: (1) by using plain English, and keeping it as short as possible and (2) by promoting fair-code with the goal of making it a well-known umbrella term to describe software models like ours. Our goals when we created the Sustainable Use License were (1) to be as permissive as possible while (2) safeguarding our ability to build a business, and (3) being as clear as possible what use was permitted or not.","title":"Why did you create a license?"},{"location":"reference/license/#my-company-has-a-policy-against-using-code-that-restricts-commercial-use-can-i-still-use-n8n","text":"Provided you are using n8n for internal business purposes, and not making n8n available to your customers for them to connect their accounts and build workflows, you should be able to use n8n. If you are unsure whether the use case you have in mind constitutes an internal business purpose or not, take a look at the examples , and if you're still unclear, email us at license@n8n.io .","title":"My company has a policy against using code that restricts commercial use \u2013 can I still use n8n?"},{"location":"reference/license/#what-happens-to-the-code-i-contribute-to-n8n-in-light-of-the-sustainable-use-license","text":"Any code you contribute on GitHub is subject to GitHub's terms of use . In simple terms, this means you own, and are responsible for, anything you contribute, but that you grant other GitHub users certain rights to use this code. When you contribute code to a repository containing notice of a license, you license the code under the same terms. n8n asks every contributor to sign our Contributor License Agreement . In addition to the above, this gives n8n the ability to change its license without seeking additional permission. It also means you are not liable for your contributions (e.g. in case they cause damage to someone else's business). It's easy to get started contributing code to n8n here , and we've listed broader ways of participating in our community here .","title":"What happens to the code I contribute to n8n in light of the Sustainable Use License?"},{"location":"reference/license/#why-did-you-switch-to-the-sustainable-use-license-from-your-previous-license-arrangement-apache-20-with-commons-clause","text":"n8n was until 17 March 2022 licensed under Apache 2.0 with Commons Clause. Commons Clause was initiated by various software companies wanting to protect their rights against cloud providers. The concept involved adding a commercial restriction on top of an existing open source license. However, the use of the Commons Clause as an additional condition to an open source license, as well as the use of wording that is open to interpretation, created some confusion and uncertainty regarding the terms of use. The Commons Clause also restricted people's ability to offer consulting and support services: we realized these services are critical in enabling people to get value from n8n, so we wanted to remove this restriction. We created the Sustainable Use License to be more permissive and more clear about what use is allowed, while continuing to ensure n8n gets the funding needed to build and improve our product.","title":"Why did you switch to the Sustainable Use License from your previous license arrangement (Apache 2.0 with Commons Clause)?"},{"location":"reference/license/#what-are-the-main-differences-between-the-sustainable-use-license-and-your-previous-license-arrangement-apache-20-with-commons-clause","text":"There are two main differences between the Sustainable Use License and our previous license arrangement. The first is that we have tightened the definition of how you can use the software. Previously the Commons Clause restricted users ability to \"sell\" the software; we have redefined this to restrict use to internal business purposes. The second difference is that our previous license restricted people's ability to charge fees for consulting or support services related to the software: we have lifted that restriction altogether. That means you are now free to offer commercial consulting or support services (e.g. building n8n workflows) without the need for a separate license agreement with us. If you are interested in joining our community of n8n experts providing these services, you can learn more here.","title":"What are the main differences between the Sustainable Use License and your previous license arrangement (Apache 2.0 with Commons Clause)?"},{"location":"reference/license/#is-n8n-open-source","text":"Although n8n's source code is available under the Sustainable Use License, according to the Open Source Initiative (OSI), open source licenses cannot include limitations on use, so we do not call ourselves open source. In practice, n8n offers most users many of the same benefits as OSI-approved open source. We coined the term 'fair-code' as a way of describing our licensing model, and the model of other companies who are source-available, but restrict commercial use of their source code.","title":"Is n8n open source?"},{"location":"reference/license/#what-is-fair-code-and-how-does-the-sustainable-use-license-relate-to-it","text":"Fair-code is not a software license. It describes a software model where software: is generally free to use and can be distributed by anybody has its source code openly available can be extended by anybody in public and private communities is commercially restricted by its authors The Sustainable Use License is a fair-code license. You can read more about it, and see other examples of fair-code licenses here . We're always excited to talk about software licenses, fair-code and other principles around sharing code with interested parties. To get in touch to chat, email license@n8n.io.","title":"What is fair-code, and how does the Sustainable Use License relate to it?"},{"location":"reference/release-notes/","text":"Release notes # n8n@0.172.0 # View the commits for this version. Release date: 2022-04-11 Enhancements # Changes to the data output display in nodes. Node enhancements # Magento 2 Node: text=\"Added credential tests. PayPal Node: Added credential tests and updated the API URL. Bug fixes # core : Luxon now applies the correct timezone. Refer to Luxon for more information. core : fixed an issue with localization that was preventing i18n files from loading. Action Network Node: Fix a pagination issue and add credentials test. Contributors # Paolo Rechia n8n@0.171.1 # View the commits for this version. Release date: 2022-04-06 This is a small bug fix release. Bug fixes # core : fix issue with current executions not displaying. core : fix an issue causing n8n to falsely skip some authentication. WooCommerce Node: Fix a pagination issue with the GetAll operation. n8n@0.171.0 # View the commits for this version. Release date: 2022-04-03 Breaking changes Please note that this version contains breaking changes. You can read more about them here . This release focuses on bug fixes and node enhancements, with one new feature, and one breaking change to the GraphQL node. Breaking change to GraphQL node # The GraphQL node now errors when the response includes an error. If you use this node, you can choose to: Do nothing: a GraphQL response containing an error will now cause the workflow to fail. Update your GraphQL node settings: set Continue on Fail to true to allow the workflow to continue even when the GraphQL response contains an error. New features # You can now download binary data from individual nodes in your workflow. Enhanced nodes # Emelia Node: Add Campaign > Duplicate functionality. FTP Node: Add option to recursively create directories on rename. Mautic Node: Add credential test and allow trailing slash in host. Microsoft Teams Node: Add chat message support. Mocean Node: Add 'Delivery Report URL' option and credential tests. ServiceNow Node: Add basicAuth support and fix getColumns loadOptions. Strava Node: Add 'Get Streams' operation. Bug fixes # core: Fix crash on webhook when last node did not return data EmailReadImap Node: Fix issue that crashed process if node was configured wrong. Google Tasks Node: Fix 'Show Completed' option and hide title field where not needed. NocoDB Node: Fix pagination. Salesforce Node: Fix issue that 'status' did not get used for Case => Create & Update Contributors # Charles Lecalier d3no Ketan Somvanshi Luis Cipriani pemontto Rhys Williams n8n@0.170.0 # View the commits for this version. Release date: 2022-03-27 This release focuses on bug fixes and adding functionality to existing nodes. Enhanced nodes # Crypto Node: Add Generate operation to generate random values. HTTP Request Node: Add support for OPTIONS method. Jira Node: Add Simplify Output option to Issue > Get. Reddit Node: Add possibility to query saved posts. Zendesk Node: Add ticket status On-hold. Bug fixes # core: Add logs and error catches for possible failures in queue mode. AWS Lambda Node: Fix Invocation Type > Continue Workflow. Supabase Node: Send token also via Authorization Bearer; fix Row > Get operation. Xero Node: Fix some operations and add support for setting address and phone number. Wise Node: Fix issue when executing a transfer. Contributors # FFTDB Fred Jasper Zonneveld pemontto Sergio TheFSilver Valentin Mocanu Yassine Fathi n8n@0.169.0 # View the commits for this version. Release date: 2022-03-20 This release includes: New functionality for existing nodes A new node for Linear Bug fixes And a license change! New license # This release changes n8n's license, from Apache 2.0 with Commons Clause to Sustainable Use License . This change aims to clarify our license terms, and our position as a fair-code project. Read more about the new license in License . New nodes # Linear Node: Add Linear Node. Enhanced nodes # HTTP Request Node: Allow Delete requests with body. KoBoToolbox Node: Add KoBoToolbox Regular and Trigger Node. Mailjet Node: Add credential tests and support for sandbox, JSON parameters & variables. Mattermost Node: Add support for Channel search. Other improvements # Add support for reading IDs from file with executeBatch command. Bug fixes # GitHub node: Fix credential tests and File List operation. Telegram node: Fix sending binary data when disable notification is set. Contributors # Manuel Marcin Kozey Matthew Walther Yann Jouanique n8n@0.168.2 # For a comprehensive list of changes, view the commits for this version. Release date: 2022-03-16 This release contains an important bug fix for 0.168.0. Users on 0.168.0 or 0.168.1 should upgrade to this. n8n@0.168.1 # For a comprehensive list of changes, view the commits for this version. Release date: 2022-03-15 A bug fix for user management: fixed an issue with email templates that was preventing owners from inviting members. n8n@0.168.0 # For a comprehensive list of changes, view the commits for this version. Release date: 2022-03-14 New feature: user management # User management in n8n allows you to invite people to work in your self-hosted n8n instance. It includes: Login and password management Adding and removing users Two account types: owner and member Check out the user management documentation for more information. n8n@0.167.0 # For a comprehensive list of changes, view the commits for this version. Release date: 2022-03-13 Highlights # Luxon and JMESPath # 0.167.0 adds support for two new libraries: Luxon : a JavaScript library for working with date and time JMESPath : a query language for JSON You can use Luxon and JMESPath in the code editor and in expressions. New expressions variables # We've added two new variables to simplify working with date and time in expressions: $now : a Luxon object containing the current timestamp. Equivalent to DateTime.now(). $today : a Luxon object containing the current timestamp, rounded down to the day. Equivalent to DateTime.now().set({ hour: 0, minute: 0, second: 0, millisecond: 0 }). Negative operations in If and Switch nodes # Made it easier to perform negative operations on strings. This release adds one new operation for numbers: Is Not Empty And the following new operations for strings: Not Ends With Regex Not Match Not Starts With Is Not Empty Additionally, Regex is now labelled Regex Match. New node: Redis Trigger # Added a Redis Trigger node, so you can now start workflows based on a Redis event. Redis Trigger: Added a Redis Trigger node. Core functionality # Added support for Luxon and JMESPath . Added two new expressions variables, $now and $today . Added more negative operations for numbers and strings. Added a link to the course from the help menu. Nodes # Facebook Graph API: Added suport for Facebook Graph API 13. Hubspot: Added suport for private app token authentication. MongoDB: Added the aggregate operation. Redis Trigger: Added a Redis Trigger node. Redis: Added support for publish operations. Strapi: Added support for Strapi 4. WordPress: Added status as an option to getAll post requests. Bugfixes # The Google Calendar node now correctly applies timezones when creating, updating, and scheduling all day events. Fixed a bug that occasionally caused n8n to crash, or shut down workflows unexpectedly. You can now use long credential type names with Postgres. Contributors # Luiz Eduardo de Oliveira Fonseca Vitaliy Fratkin sol vcrwr FFTDB n8n@0.166.0 # For a comprehensive list of changes, view the commits for this version. Release date: 2022-03-08 New nodes # Odoo Enhanced nodes # Function: Added support for items without a JSON key. Core functionality # Added new environment variable N8N_HIRING_BANNER_ENABLED to enable/disable the hiring banner. Fixed a bug preventing keyboard shortcuts from working as expected. Fixed a bug causing tooltips to be hidden behind other elements. Fixed a bug causing some credentials to be hidden from the credentials list. Bug fixes # Baserow: Fixed a bug preventing the Sorting option of the Get All operation from working as expected. HTTP Request: Fixed a bug causing Digest Authentication to fail in some scenarios. Wise: Fixed a bug causing API requests requiring Strong Customer Authentication (SCA) to fail. Contributors # pemontto n8n@0.165.0 # For a comprehensive list of changes, view the commits for this version. Release date: 2022-02-28 Breaking changes Please note that this version contains breaking changes. You can read more about them here . New nodes # Onfleet Enhanced nodes # Asana: Added Create operation to the Project resource. Mautic: Added Edit Contact Points, Edit Do Not Contact List, Send Email operations to Contact resource. Also added new Segment Email resource. Notion (Beta): Added support for rollup fields to the Simplify Output option. Also added the Parent ID to the Get All operation of the Block resource. Pipedrive: Added Marketing Status field to the Create operation of the Person resource, also added User ID field to the Create and Update operations of the Person resource. Core functionality # Added support for workflow templates. Fixed a bug causing credentials tests to fail for versioned nodes. Fixed a build problem by addind dependencies @types/lodash.set to the workflow package and @types/uuid to the core package. Fixed an error causing some resources to ignore a non-standard N8N_PATH value. Fixed an error preventing the placeholder text from being shown when entering credentials. Improved error handling for telemetry-related errors. Bug fixes # Orbit: Fixed a bug causing API requests to use an incorrect workspace identifier. TheHive: Fixed a bug causing the Ignore SSL Issues option to be applied incorrectly. Contributors # alexwitkowski , I\u00f1aki Breinbauer , lsemaj , Luiz Eduardo de Oliveira Fonseca , Rodrigo Correia , Santiago Botero Ruiz , Saurabh Kashyap , Ugo Bataillard n8n@0.164.1 # For a comprehensive list of changes, check out the commits for this version. Release date: 2022-02-20 Core Functionality # Fixed a bug preventing webhooks from working as expected in some scenarios. n8n@0.164.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2022-02-20 New nodes # Google Chat Enhanced nodes # Grist: Added support for self-hosted Grist instances. Telegram Trigger: Added new Extra Large option to Image Size field. Webhook: Added new No Response Body option. Also added support for DELETE, PATCH and PUT methods. Core Functionality # Added new database indices to improve the performance when querying past executions. Fixed a bug causing the base portion of a URL not to be prepended as expected in some scenarios. Fixed a bug cuasing expressions to resolve incorrectly when referencing non-existent nodes or parameters. Contributors # Jhalter5Stones , Valentina Lilova , thorstenfreitag n8n@0.163.1 # For a comprehensive list of changes, check out the commits for this version. Release date: 2022-02-13 Core Functionality # Fixed a bug preventing OAuth2 authentication from working as expected in some scenarios. n8n@0.163.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2022-02-13 New nodes # HaloPSA Linear Trigger Zammad Enhanced nodes # GitHub: Added Reference option to the Get operation of the File resource. Twilio: Added Status Callbacks option. uProc: Sanitized Data Webhook field description. Core Functionality # Added automatic sorting by relative position to the node list inside the expression editor. Added new /workflows/demo page to allow read-only rendering of workflows inside an iframe. Added optional /healthz health check endpoint to worker instances. Fixed unwanted list autofill behaviour inside the expression editor. Improved the GitHub actions used by the nightly Docker image. Bug fixes # Function: Fixed a bug leaving the code editor size unchanged after resizing the window. Function Item: Fixed a bug leaving the code editor size unchanged after resizing the window. IF: Removed the empty sections left after removing a condition. Item Lists: Fixed an erroneous placeholder text. Contributors # I\u00f1aki Breinbauer , Manuel , pemontto n8n@0.162.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2022-02-06 Enhanced nodes # GitHub: Added new List operation to File resource. Core Functionality # Added configurable debug logging for telemetry. Added support for defining nodes through JSON. This functionality is in alpha state and breaking changes to the interface can take place in upcoming versions. Added telemetry support to page events occuring before telemetry is initialized. Fixed a bug preventing errors in sub-workflows from appearing in parent executions. Fixed a bug where node versioning would not work as expected. Fixed a bug where remote parameters would not load as expected. Fixed a bug where unkown node types would not work as expected. Prevented the node details view from opening automatically after duplicating a node. Removed dependency fibers which is incompatible with the current LTS version 16 of Node.js. Bug fixes # XML: Fixed a bug causing the node to alter incoming data. Contributors # pemontto n8n@0.161.1 # For a comprehensive list of changes, check out the commits for this version. Release date: 2022-02-01 Core Functionality # Added optional debug logging to health check functionality. n8n@0.161.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2022-01-30 Core Functionality # Added default polling interval for trigger nodes using polling. Added support for additional hints below parameter fields. Fixed a bug preventing default values from being used when testing credentials. Improved the wording in the Save your Changes? dialog. Bug fixes # Airtable: Improved field description. Airtable Trigger: Improved field description. erpNext: Prevented the node from throwing an error when no data is found. Gmail: Fixed a bug causing the BCC field to be ignored. Move Binary Data: Fixed a bug causing the binary data to JSON conversion to fail when using filesystem-based binary data handling. Slack: Fixed a typo in the Type field. Contributors # fabian wohlgemuth n8n@0.160.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2022-01-22 New nodes # BambooHR Core Functionality # Fixed a bug preventing the binary data preview from using the full available height and width. Fixed a build problem by pinning chokidar version 3.5.2. Prevent workflow activation when no trigger is presentand introduced a modal explaining production data handling. Fixed Filter by tags placeholder text used in the Open Workflow modal. Bug fixes # HTTP Request: Fixed a bug causing custom headers from being ignored. Mautic: Fixed a bug preventing all items from being returned in some situations. Microsoft OneDrive: Fixed a bug preventing more than 200 items from being returned. Spotify: Fixed a bug causing the execution to fail if there are more than 1000 search results, also fixed a bug preventing the Get New Releases operation of the Album resource from working as expected. Contributors # fabian wohlgemuth n8n@0.159.1 # For a comprehensive list of changes, check out the commits for this version. Release date: 2022-01-18 Core Functionality # Temporarily removed debug logging for axios requests. n8n@0.159.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2022-01-16 New nodes # Jenkins Enhanced nodes # GraphQL: Added support for additional authentication methods Basic Auth, Digest Auth, OAuth1, OAuth2, and Query Auth. Core Functionality # Added support for executing workflows without an ID through the CLI. Fixed a build problem. Fixed a bug preventing the tag description from being shown on the canvas. Improved build performance by skipping the node-dev package during build. Bug fixes # Box: Fixed a bug causing some files to be corrupted during download. Philips Hue: Fixed a bug preventing the node from connecting to Philips Hue. Salesforce: Fixed a bug preventing filters on date and datetime fields from working as expected. Supabase: Fixed an errorneous documentation link. Contributors # Phil Clifford n8n@0.158.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2022-01-09 New nodes # Microsoft Graph Security SyncroMSP Supabase Enhanced nodes # Edit Image: Added Transparent operation. Kafka: Added Use Schema Registry option. Kafka Trigger: Added Use Schema Registry option. Redis: Added database field to credentials. Salesforce: Added Account Number field. Core Functionality # Added new external hook when active workflows finished initializing. Fixed a bug preventing the personalisation survey from showing up. Improved telemetry. Bug fixes # Edit Image: Fixed a bug causing two items to be returned. iCalendar: Fixed a bug preventing dates in January from working as expected. Merge: Fixed causing empty binary data to overwrite other binary data on merge. Contributors # Ricardo Georgel , Pierre , Vahid Sebto n8n@0.157.1 # For a comprehensive list of changes, check out the commits for this version. Release date: 2022-01-03 Core Functionality # Fixed a bug where not all nodes could use the new binary data handling. n8n@0.157.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2022-01-02 Enhanced nodes # Function: The node now prevents unsupported data from being returned. Function Item: The node now prevents unsupported data from being returned. HubSpot: Added Engagement resource with Create, Delete, Get, and Get All operations. Notion (Beta): Upgraded the Notion node: Added Search operation for the Database resource, Get operation for Database Page resource, Archive operation for the Page resource. Also added Simplify Output option and test for credential validity. Wait: Added new Ignore Bots option. Webhook: Added new Ignore Bots option. Core Functionality # Fixed a bug where a wrong number suffix was used after duplicating nodes. Bug fixes # HTTP Request: Fixed a bug where using Digest Auth would fail. Contributors # pemontto n8n@0.156.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-12-25 Enhanced nodes # GitLab Trigger: Added new trigger events: Confidential Issue, Confidential Comment, Deployment, Release. Google Drive: Added support for downloading and converting native Google files. Kitemaker: Added Space ID field to Create operation of Work Item resource. Raindrop: Added Parse Metadata option to Create, Update operations of the Bookmark resource. Core Functionality # Added execution ID to workflow.postExecute hook Added response body to UI for failed Axios requests Added support for automatically removing new lines from Google Service Account credentials Added support for disabling the UI via environment variable Fixed a bug causing the wrong expression result to be shown for items from an output other than the first Improved binary data management Introduced Monaco as new UI code editor Contributors # Arpad Gabor , Leo Lou , Manuel n8n@0.155.2 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-12-19 Core Functionality # Added support for internationalization (i18n). This functionality is currently in alpha status and breaking changes are to be expected. n8n@0.154.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-12-19 Enhanced nodes # Plivo: Added user agent to all API requests. Core Functionality # Allow deletion of nodes from the canvas using the backspace key Fixed an issue causing clicks in the value survey to impact the main view Fixed an issue preventing the update panel from closing Bug fixes # Todoist: Fixed a bug where using the additional field Due Date Time on the Task resource would cause the Create operation to fail. Contributors # Mohammed Huzaif , \u041b\u0435\u0431\u0435\u0434\u0435\u0432 \u0418\u0432\u0430\u043d n8n@0.153.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-12-11 New nodes # Figma Trigger (Beta) Workable Trigger Enhanced nodes # Google Contacts: Added Query option to Get All operation, also prevented the node from failing when no contacts are found. HTTP Request: Added support for query-based authentication. Home Assistant: Added support for loading possible options in the Domain, Service, and Entity ID fields. One Simple API: Added support for Social Profile resources. PagerDuty: Write scope is now requested upon authentication against the PagerDuty OAuth2 API. Core Functionality # Added frontend for value surveys Fixed an issue preventing the recommendation logic from working as expected after selecting a work area Fixed an issue where a wrong exit code was sent when running n8n on an unsupported version of Node.js Fixed an issue where node options would disappear on hovering when a node is not selected Fixed an issue where the execution id was missing when running n8n in queue mode Fixed an issue where execution data was missing when waiting for a webhook in queue mode Improved error handling when the n8n port is already in use Improved diagnostic events Removed toast notification on webhook deletion, added toast notification after node is copied Removed default trigger tooltip for polling trigger nodes Bug fixes # APITemplate.io: Fixed a bug where the Create operation on the Image resource would fail when the Download option is not enabled. HubSpot: Fixed authentication for new Hubspot applications by using granular scopes when authenticating against the Hubspot OAuth2 API. HubSpot Trigger: Fixed authentication for new Hubspot applications by using granular scopes when authenticating against the Hubspot Developer API. Jira Software: Fixed an issue where the Reporter field would not work as expected on Jira Server instances. Salesforce: Fixed a typo preventing the value in the amount field of from being saved. Contributors # pemontto , Jascha L\u00fclsdorf , Jonathan Bennetts n8n@0.152.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-12-04 New nodes # Google Calendar Trigger Enhanced nodes # Telegram Trigger: Added support for downloading images to channel_post updates. Core Functionality # Added a plus (+) connector to end nodes Allowed opening workflows and executions in a new window when using Ctrl + Click Enforced type checking for all node parameters Fixed a build issue in the custom n8n docker image Fixed a memory leak in the UI which could occur when renaming nodes or navigate to another workflow Improved stability of internal test workflows Improved expression security Introduced redirect to a new page and UI error message when trying to open a deleted workflow Introduced support for multiple arguments when logging Updated the onboarding survey Bug fixes # Google BigQuery: Fixed a bug preventing pagination from working as expected when the Return All option is enabled. RabbitMQ Trigger: Added Trigger to the name of the trigger node. Salesforce: Fixed a typo affecting the Type field of the Opportunity resource. Contributors # Zvonimir Erdelja , m2scared n8n@0.151.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-11-26 New nodes # DHL Grafana Core Functionality # Fixed a bug causing connections between nodes to disappear when renaming a newly added node after drawing a connection to its endpoints. Fixed a build issue by adding TypeScript definitions for validator.js to CLI package, also fixed a linting issue by removing an unused import. Improved the waiting state of trigger nodes to explain when an external event is required. Loops are now drawn below their source node. Bug fixes # Edit Image: Fixed an issue preventing the Composite operation from working correctly in some cases. Contributors # Jonathan Bennetts n8n@0.150.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-11-19 Enhanced nodes # Jira Software: Added Components as an additional field. Core Functionality # Fixed a build issue by pinning rudder-sdk-node version 1.0.6 in CLI package. Fixed an issue preventing the n8n import:workflow --separate CLI command from finding workflows on Windows. Further improved the expression security. Moved all nodes into separate directories in preparation for internationalization. Removing default headers for PUT and PATCH operations when using axios. Revamped the workflow canvas. Bug fixes # HTTP Request: Fixed an issue causing the wrong Content-Type header to be set when downloading a file. ServiceNow: Fixed incorrect mapping of incident urgency and impact values. Start: Fixed an issue causing the node to be disabled in a new workflow. Xero: Fixed an issue causing the node to only fetch the first page when querying the Xero API. n8n@0.149.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-11-13 New nodes # One Simple API Enhanced nodes # Edit Image: Added Circle Primitive to Draw operation. Also added Composite operation. Zendesk: Added check for API credentials validity. Zulip: Added additional field Role to the Update operation of the User resource. Core Functionality # Fixed an issue causing an error message to be thrown when executing a workflow through the CLI. Improved expression security by limiting the available process properties. Improved the behaviour of internal tests executed through the CLI. Updated the owner of the node user's home directory in the custom docker image. Bug fixes # Google Tasks: Fixed an issue where the Due Date field had no effect (Update operation) or was unavailable (Create operation). HTTP Request: Fixed an issue where the Content-Length header was not calculated and sent when using the a Body Content Type of Form-Data Multipart. Stripe Trigger: Fixed an issue preventing the node from being activated when a previously created webhook no longer exists. Toggl Trigger: Updated the API URL used by the node. Contributors # GeylaniBerk , Jonathan Bennetts n8n@0.148.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-11-05 New nodes # Dropcontact Respond to Webhook Enhanced nodes # Lemlist: Added additional fields to Create operation of Lead resource. Slack: Added User Group resource. Todoist: Added Update operation to Task resource. Wait: Improved descriptions of available Respond options. WooCommerce: Added password field to Crate operation of Customer resource. Core Functionality # Added a hook after workflow creation. Fixed a build issue with npm v7 by overriding unwanted behaviour through the .npmrc file. Fixed an issue preventing unknown node types from being imported. Fixed an issue with the UI falsely indicating a credential cannot be selected when using SQLite and multiple credentials with the same name exist. Bug fixes # Stripe: Fixed an issue where setting additional Metadata fields would not have the expected effect. Also fixed an issue where pagination would not work as expected. Zendesk: Fixed an issue preventing the additional field External ID from being evaulated correctly. Contributors # mizzimizzi , nikozila , Pauline n8n@0.147.1 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-11-03 Core Functionality # Fixed a build issue by moving the chokidar dependency to a regular dependency. n8n@0.147.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-11-03 New nodes # Local File Trigger Core Functionality # Improved the database migration process to reduce memory footprint. Fixed an issue with telemetry by adding an anonymous ID. n8n@0.146.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-10-29 New nodes # Microsoft Dynamics CRM Enhanced nodes # Agile CRM: Added Filters to Get All operation of Contact and Company resources. Date & Time: Ensuring the return values are always of type string. IF: Added support for moment types to Date & Time condition. Core Functionality # Added name and ID of a workflow to its settings. Added parameter inputs to be multi-line. Fixed an issue with declaring proxies when axios is used. Fixed an issue with serializing arrays and special characters. Fixed an issue with updating expressions after renaming a node. Bug fixes # HTTP Request: Fixed an issue with the Full Response option not taking effect when used with the Ignore Response Code option. Contributors # Valentina Lilova , Oliver Trajceski n8n@0.145.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-10-22 New nodes # AWS Textract Google Drive Trigger Enhanced nodes # Bitbucket Trigger: Added check for credentials validity. Removed deprecated User and Team resources, and added the Workspace resource. GitHub: Added check for API credentials validity. Home Assistant: Added check for credentials validity. Jira Software: Added check for credentials validity. Microsoft OneDrive: Added functionality to create folder hierarchy automatically upon subfolder creation. Pipedrive: Added All Users option to Get All operation of Activity resource. Slack: Increase the Slack default query limit from 5 to 100 in order to reduce number of requests. Twitter: Added Tweet Mode additional field to the Search operation of Tweet resource. Core Functionality # Changed vm2 library version from 3.9.3 to 3.9.5 . Fixed an issue with ignoring the response code. Fixed an issue with overwriting credentials via environment variables. Fixed an issue with using query strings combined with the x-www-form-urlencoded content type. Introduced telemetry. Bug fixes # Jira Software: Fixed an issue with the Expand option for the Issue resource. Also fixed an issue with using custom fields on Jira Server. Slack: Fixed an issue with pagination when loading more than 1,000 channels. Strapi: Fixed an issue using the Where option of the Get All operation. WooCommerce: Fixed an issue where a wrong postcode field name was used for the Order resource. Contributors # pemontto , rdd2 , robertodamiani , Rodrigo Correia n8n@0.144.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-10-15 Enhanced nodes # Nextcloud: Added Share operation to the File and Folder resources. Zendesk: Added support for deleting, listing, getting, and recovering suspended tickets. Added the query option for regular tickets. Added assignee emails, internal notes, and public replies options to the update ticket operation. Core Functionality # Improved the autofill behaviour on Google Chrome when entering credentials. Bug fixes # Airtable: Fixed an issue with the sort field. Cron: Set the version of the cron library to 1.7.2. Contributors # Jonathan Bennetts n8n@0.143.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-10-14 Enhanced nodes # Pipedrive: Added support for getting activities from deal ID. Facebook Graph API: Added support for Facebook Graph API versions 11 and 12. Core Functionality # Fixed a build issue affecting a number of AWS nodes. Changed workflows to use credential ids primarily (instead of names), allowing users to have different credentials with the same name. Bug fixes # FTP: Fixed error when opening FTP/SFTP credentials. Contributors # Rodrigo Correia n8n@0.142.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-10-07 New nodes # Stop and Error Core Functionality # Fixed overlapping buttons when viewing on mobile. Fixed issue with partial workflow executions when Wait node was last. Fixed issue with broken non-JSON requests. Node errors now only displayed for executing nodes, not disconnected nodes. Automatic save when executing new workflows with Webhook node. Fixed an issue with how arrays were serialized for certain nodes. Fixed an issue where executions could not be cancelled when running in Main mode. Duplicated workflows now open in a new window. Bug fixes # HTTP Request: Fixed 'Ignore response code' flag. Rundeck: Fixed issue with async loading of credentials. SeaTable: Fixed issue when entering a Baser URI with a trailing slash. Contributors # G\u00fcnther , Tom Klingenberg n8n@0.141.1 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-10-01 Core Functionality # Fixed issue with body formatting of x-form-www-urlencoded requests. n8n@0.141.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-09-30 New nodes # Grist SeaTable SeaTable Trigger urlscan.io Core Functionality # Performance improvements in Editor UI Improved error reporting Contributors # Alex Hall , Tom Klingenberg n8n@0.140.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-09-29 New nodes # Splunk Enhanced nodes # Telegram: Added binary data support to the Send Animation, Send Audio, Send Document, Send Photo, Send Video, and Send Sticker operations. Core Functionality # Fixed startup behavior when running n8n in scaled mode (i.e. skipWebhoooksDeregistrationOnShutdown is enabled). Fixed behavior around handling empty response bodies. Fixed an issue with handling of refresh tokens. Contributors # pemontto n8n@0.139.1 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-09-23 Core Functionality # Bug fixes and improvements for Editor UI. n8n@0.139.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-09-22 New nodes # Elastic Security Misp Netlify Netlify Trigger Enhanced nodes # HubSpot Trigger: Authentication method changed to OAuth2. Wait: Added improved status messages for Wait behavior. Core Functionality # Updated node design to include support for versioned nodes. Bug fixes # SendGrid: Fixed issue with adding contacts to lists. Contributors # Mat\u00edas Aguirre n8n@0.138.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-09-15 New nodes # Item Lists Magento 2 Enhanced nodes # Baserow: Added the following filter options: Contains, Contains Not, Date Before Date, Date After Date, Filename Contains, Is Empty, Is Not Empty, Link Row Has, Link Row Does Not Have, Single Select Equal, and Single Select Not Equal. Pipedrive: Added support for Notes on Leads. Wekan: Added Sort field to the Card resource. Core Functionality # General UX improvements to the Editor UI. Fixed an issue with the PayloadTooLargeError . Bug fixes # Lemlist: Fixed issue where events were not sent in the correct property. Notion: Fixed issue listed unnamed databases. Contributors # bramknuever , Chris Magnuson n8n@0.137.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-09-05 New nodes # Freshservice Enhanced nodes # Clockify: Added Task resource. Hubspot: Added dropdown selection for Properties and Properties with History filters for Get All Deals operations. Mautic: Added Campaign Contact resource. MongoDB: Added ability to query documents by '_id'. MQTT: Added SSL/TLS support to authentication. MQTT Trigger: Added SSL/TLS support to authentication. Salesforce: Added File Extension option to the Document resource. Added Type field to Task resource. Sms77: Added Voice Call resource. Added the following options to SMS resource: Debug, Delay, Foreign ID, Flash, Label, No Reload, Performance Tracking, TTL. Zendesk: Added Organization resource. Added Get Organizations and Get Related Data operations to User resource. Core Functionality # Added execution ID to logs of queue processes. Added description to operation errors. Added ability for webhook processes to wake waiting executions. Bug fixes # Hubspot: Fixed issue with 'RequestAllItems' API. Wordpress: Fixed issue with 'RequestAllItems' API only returning the first 10 items. Contributors # Andr\u00e9 Matthies , DeskYT , Frederic Alix , Jonathan Bennetts , Ketan Somvanshi , Luiz Eduardo de Oliveira Fonseca , TheFSilver n8n@0.136.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-08-30 Enhanced nodes # Notion: Added handling of Rich Text when simplifying data. Core Functionality # General UI design improvements. Improved errors messages during debugging of custom nodes. All packages upgraded to TypeScript 4.3.5, improved linting and formatting. Bug fixes # FTP: Fixed issue where incorrect paths were displayed when using the node. Wait: Fixed issue when receiving multiple files using On Webhook Call operation. Webhook: Fixed issue when receiving multiple files. n8n@0.135.3 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-08-27 Core Functionality # Fixed Canvas UI inconsistencies when duplicating workflows. Added log message during upgrade to indicate database migration has started. General improvements to parameter labels and tooltips. Contributors # Kyle Mohr n8n@0.135.2 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-08-26 Core Functionality # Added expression support for credentials. Fixed performance issues when loading credentials. n8n@0.135.1 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-08-23 Core Functionality # Fixed an issue where if n8n was shutdown during database migration while upgrading versions, errors would result upon next startup. n8n@0.135.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-08-22 Breaking changes Please note that this version contains breaking changes. You can read more about it here . The features that introduced the breaking changes have been flagged below. New nodes # Form.io Trigger Formstack Trigger Wait Core Functionality # In-node method for accessing binary data is now asynchronous and a helper function for this has been implemented. Credentials are now loaded from the database on-demand. Webhook UUIDs are automatically updated when duplicating a workflow. Fixed an issue when referencing values before loops. Bug fixes # Interval: Fixed issue where entering too large a value (> 2147483647ms) resulted in an interval of 1sec being used rather than an error. Contributors # Aniruddha Adhikary , lublak , parthibanbalaji n8n@0.134.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-08-15 Enhanced nodes # AWS DynamoDB: Added Scan option to Item > Get All operation. Google Drive: Added File Name option to File > Update operation. Mautic: Added the following fields to Company resource: Address, Annual Revenue, Company Email, Custom Fields, Description, Fax, Industry, Number of Employees, Phone, Website. Notion: Added Timezone option when inserting Date fields. Pipedrive: Added the following Filters options to the Deal > Get All operation: Predefined Filter, Stage ID, Status, and User ID. QuickBooks: Added the Transaction resource and Get Report operation. Core Functionality # Integrated Nodelinter in n8n. Fix to add a trailing slash ( / ) to all webhook URLs for proper functionality. Bug fixes # AWS SES: Fixed issue where special characters in the message were not encoded. Baserow: Fixed issue where Create operation inserted null values. Hubspot: Fixed issue when sending context parameter. Contributors # calvintwr , CFarcy , Jeremie Dokime , Michael Hirschler , Rodrigo Correia , sol n8n@0.133.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-08-08 New nodes # Monica CRM Enhanced nodes # HTTP Request: Added Follow All Redirects option. Salesforce: Added Record Type ID field. Core Functionality # Fixed UI lag when editing large workflows. Bug fixes # Nextcloud: Fixed issue where List operation on an empty Folder returned an error. Spotify: Fixed issues with pagination and infinite executions. Contributors # Jacob Burrell , \u041b\u0435\u0431\u0435\u0434\u0435\u0432 \u0418\u0432\u0430\u043d n8n@0.132.2 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-08-02 Bug fixes # Interval: Fixed issue with infinite executions. Contributors # \u041b\u0435\u0431\u0435\u0434\u0435\u0432 \u0418\u0432\u0430\u043d n8n@0.132.1 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-08-02 Core Functionality # Changed TypeORM version to 0.2.34 n8n@0.132.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-08-01 New nodes # Freshworks CRM Google Perspective Marketstack NocoDB Enhanced nodes # Facebook Trigger: Added Fields parameter. Gmail: Added Sender Name parameter. Home Assistant: Added Event resource. Pipedrive: Added Deal Product resource. Salesforce: Added Document resource with Upload operation. WooCommerce: Added Customer resource. Core Functionality # Fixed an issue for large internal values. Contributors # Ed Linklater , Rodrigo Correia n8n@0.131.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-07-24 Breaking change Please note that this version contains a breaking change. You can read more about it here . The features that introduced the breaking changes have been flagged below. New nodes # Webex by Cisco Webex by Cisco Trigger Enhanced nodes # Pipedrive: Added Lead resource. Added Search operation to Organization resource. Taiga Trigger: Added Resource and Operations filters. Core Functionality # Added Continue-on-fail support to all nodes. Added new version notifications. Added Refresh List for remote options lists. Added $position expression variable to return the index of an item within a list. Bug fixes # Spreadsheet File: Fixed issue when saving dates. Contributors # Anthr@x , Felipe Cecagno n8n@0.130.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-07-18 Breaking change Please note that this version contains a breaking change. You can read more about it here . The features that introduced the breaking changes have been flagged below. New nodes # AWS DynamoDB Elasticsearch ServiceNow Enhanced nodes # Kafka Trigger: Added Read Messages From Beginning option. Salesforce: Added Sandbox Environment Type for OAuth2 credentials. Taiga: Added Epic, Task, and User Story operations. TheHive: Added Custom Fields option to the available Additional Fields. Core Functionality # Fixed an issue where failed workflows were displayed as \"running\". Fixes issues with uncaught errors. Bug fixes # Notion: Fixed issue when filtering field data type. Contributors # Michael Hirschler , Mika Luhta , Pierre Lanvin n8n@0.129.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-07-12 New nodes # Baserow Bug fixes # SSH: Fixed issue with access rights when downloading files. Contributors # J\u00e9r\u00e9mie Pardou-Piquemal n8n@0.128.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-07-11 New nodes # Home Assistant Stripe Enhanced nodes # HTTP Request: Added support for arrays in Querystring. Any parameter appearing multiple times with the same name is grouped into an array. Mautic: Added Contact Segment resource. Telegram: Added Delete operation to the Message resource. Core Functionality # Performance improvement for loading of historical executions (> 3mil) when using Postgres. Fixed error handling for unending workflows and display of \"unknown\" workflow status. Fixed format of Workflow ID when downloading from UI Editor to enable compatibility with importing from CLI. Bug fixes # Microsoft SQL: Fixed an issue with sending the connectionTimeout parameter, and creating and updating data using columns with spaces. Contributors # Kaito Udagawa , Rodrigo Correia n8n@0.127.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-07-04 Breaking change Please note that this version contains a breaking change. You can read more about it here . The features that introduced the breaking changes have been flagged below. Enhanced nodes # Airtable: Added Bulk Size option to all Operations. Box: Added Share operation to File and Folder resources. Salesforce: Added Last Name field to Update operation on Contact resource. Zoho CRM: Added Account, Contact, Deal, Invoice, Product, Purchase, Quote, Sales Order, and Vendor resources. Core Functionality # Added a workflow testing framework via a new CLI command to execute all desired workflows. Run n8n executeBatch --help for details. Added support to display binary video content in Editor UI. Bug fixes # Google Sheets: Fixed an issue with handling 0 value that resulted in empty cells. SSH: Fixed an issue with setting passphrases. Contributors # flybluewolf , Kaito Udagawa n8n@0.126.1 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-06-29 Core Functionality # Fixed issues with keyboard shortcuts when a modal was open. Bug fixes # Microsoft SQL: Fixed an issue with handling of Boolean values when inserting. Pipedrive: Fixed an issue with the node icon. n8n@0.126.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-06-27 New nodes # Action Network Google Docs Enhanced nodes # AWS S3: Added Delete operation to the Bucket Resource. Google Analytics: Added Dimension Filters to the available Additional Fields. HTTP Request: Added Split Into Items option. MQTT: Added mqqts protocol for MQTT credentials. QuickBooks: Added Purchase resource with Get and Get All operations. Core Functionality # Templates from the n8n Workflows page can now be directly imported by appending /workflows/templates/<templateId> to your instance base URL. For example, localhost:5678/workflows/templates/1142 . Added new Editor UI shortcuts. See Keyboard Shortcuts for details. Fixed an issue causing console errors when deleting a node from the canvas. Bug fixes # Ghost: Fixed an issue with the Get All operation functionality. Google Analytics: Fixed an issue that caused an error when attempting to sort with no data present. Microsoft SQL: Fixed an issue when escaping single quotes and mapping empty fields. Notion: Fixed an issue with pagination of databases and users. Contributors # calvintwr , Jan Baykara n8n@0.125.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-06-20 Enhanced nodes # Spotify: Added Search operation to Album, Artist, Playlist, and Track resources, and Resume and Volume operations to Player resource. Core Functionality # Implemented new design of the Nodes Panel, adding categories and subcategories, along with improved search. For full details, see the commits . Bug fixes # MySQL: Fixed an issue where n8n was unable to save data due to collation, resulting in workflows ending with Unknown status. Contributors # Amudhan Manivasagam , Carlos Alexandro Becker , Kaito Udagawa n8n@0.124.1 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-06-16 Core Functionality # Improved error log messages Fixed an issue where the tags got removed when deactivating the workflow or updating settings Removed the circular references for the error caused by the request library n8n@0.124.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-06-13 Enhanced nodes # Google Drive: Added APP Properties and Properties options to the Upload operation of the File resource HTTP Request: Added the functionlaity to log the request to the browser console for testing Notion: Added the Include Time parameter date field types Salesforce: Added Upsert operation to Account, Contact, Custom Object, Lead, and Opportunity resources Todoist: Added the Description option to the Task resource Core Functionality # Implemented the functionality to display the error details in a toast message for trigger nodes Improved error handling by removing circular references from API errors Bug fixes # Jira: Fixed an issues with the API version and fixed an issue with fetching the custom fields for the Issue resource Contributors # Jean M , romaincolombo-daily , Thomas Jost , Vincent n8n@0.123.1 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-06-06 Core Functionality # Fixed a build issue for missing node icons n8n@0.123.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-06-06 New nodes # Git Microsoft To Do Enhanced nodes # Pipedrive: Added a feature to fetch data from the Pipedrive API, added Search operation to the Deals resource, and added custom fields option Spotify: Added My Data resource Core Functionality # Fixed issues with NodeViewNew navigation handling Fixed an issue with the view crashing with large requests Bug fixes # ASW Transcribe: Fixed issues with options Contributors # Rodrigo Correia , Sam Roquitte n8n@0.122.3 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-06-04 Core Functionality # Fixed error messages for the Textarea field Added the missing winston dependency Fixed an issue with adding values via the Variable selector. The deleted values don't reappear Fixed an issue with the Error Workflows not getting executed in the queue mode Bug fixes # Notion: Fixed an issue with parsing the last edited time n8n@0.122.2 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-05-31 Enhanced nodes # Function: Added console.log support for writing to browser console Function Item: Added console.log support for writing to browser console Core Functionality # Fixed an issue that enables clicks on tags Fixed an issue with escaping workflow name Fixed an issue with selecting variables in the Expression Editor n8n@0.122.1 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-05-30 Core Functionality # Fixed an issue with the order in migration rollback n8n@0.122.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-05-30 New nodes # AWS Transcribe SSH UptimeRobot Enhanced nodes # DeepL: Added support for Free API Function: Added the functionality to log console.log messages to the browser console Function Item: Added the functionality to log console.log messages to the browser console Core Functionality # Changed bcrypt library from @node-rs/bcrypt to bcryptjs Fixed an issue with optional parameters that have the same name Added the functionality to tag workflows Fixed errors in the Expression Editor Fixed an issue with nodes that only get connected to the second input. This solves the issue of copying and pasting the workflows where only one output of the IF node gets connected to a node Bug fixes # Google Drive: Fixed an issue with the Drive resource Notion: Fixed an issue with the filtering fields type and fixed an issue with the link option Switch: Fixed an issue with the Expression mode Contributors # Alexander Mustafin n8n@0.121.1 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-06-01 Core Functionality # Fixed an issue with copying the output values Fixed issues with the Expression Editor Made improvements to the Expression Editor n8n@0.121.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-05-20 New nodes # Notion Notion Trigger Enhanced nodes # GraphQL: Added Header Auth authentication method Twilio: Added API Key authentication method Bug fixes # HubSpot: Fixed an issue with pagination for Deals resource Keap: Fixed an issue with the data type of the Order Title field Orbit: Fixed an issue with the activity type in Post operation Slack: Fixed an issue with the Get Profile operation Strava: Fixed an issue with the paging parameter Contributors # Jacob Spizziri n8n@0.120.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-05-17 New nodes # iCalendar Enhanced nodes # Google Cloud Firestore: Added the functionality for GeoPoint parsing and added ISO-8601 format for date validation IMAP Email: Added the Force reconnect option Paddle: Added the Use Sandbox environment API parameter Spotify: Added the Position parameter to the Add operation of the Playlist resource WooCommerce: Added the Include Credentials in Query parameter Core Functionality # Added await to hooks to fix issues with the Unknown status of the workflows Changed the data type of the credentials_entity field for MySQL database to fix issues with long credentials Fixed an issue with the ordering of the executions when the list is auto-refreshed Added the functionality that allows reading sibling parameters Bug fixes # Clockify Trigger: Fixed an issue that occurred when the node returned an empty array Google Cloud Firestore: Fixed an issue with parsing empty document, and an issue with the detection of date HubSpot: Fixed an issue with the Return All option Contributors # DeskYT , Daniel Lazaro , DerEnderKeks , mdasmendel n8n@0.119.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-05-09 Enhanced nodes # AWS Comprehend: Added the Detect Entities operation AWS Lambda: Added the ability to list functions recursively if the number of functions exceeds 50 Google Analytics: Added pagination to the Report resource Mailjet: Added Reply To parameter Redis: Added the Increment operation Spreadsheet File: Added the Header Row option Webflow Trigger: Added Collection Item Created, Collection Item Updated, and Collection Item Deleted events Core Functionality # Implemented timeout for subworkflows Removed the deregistration webhooks functionality from the webhook process Bug fixes # Google Cloud Firestore: Fixed an issue with parsing null value Google Sheets: Fixed an issue with the Key Row parameter HubSpot: Fixed an issue with the authentication Contributors # Nikita n8n@0.118.1 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-05-05 Core Functionality # Fixed an issue with error workflows n8n@0.118.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-05-02 Breaking change Please note that this version contains a breaking change. You can read more about it here . The features that introduced the breaking changes have been flagged below. New nodes # Kitemaker MQTT Enhanced nodes # CrateDB: Added query parameters. The Execute Query operation returns the result from all queries executed instead of just one of the results. ERPNext: Added support for self-hosted ERPNext instances FTP: Added the functionality to delete folders Google Calendar: Added the Continue on Fail functionality Google Drive: Added the functionality to add file name when downloading files Gmail: Added functionality to handle multiple binary properties Microsoft Outlook: Added Is Read and Move option to the Message resource Postgres: Added query parameters. The Execute Query operation returns the result from all queries executed instead of just one of the results. QuestDB: Added query parameters. The Execute Query operation returns the result from all queries executed instead of just one of the results. QuickBase: Added option to use Field IDs TimescaleDB: Added query parameters. The Execute Query operation returns the result from all queries executed instead of just one of the results. Twist: Added Get, Get All, Delete, and Update operations to the Message Conversation resource. Added Archive, Unarchive, and Delete operations to the Channel resource. Added Thread and Comment resource Core Functionality # Implemented the native fs/promise library where possible Added the functionality to output logs to the console or a file We have updated the minimum required version for Node.js to v14.15. For more details, check out the entry in the breaking changes page Bug fixes # GetResponse Trigger: Fixed an issue with error handling GitHub Trigger: Fixed an issue with error handling GitLab Trigger: Fixed an issue with error handling Google Sheets: Fixed an issue with the Lookup operation for returning empty rows Orbit: Fixed issues with the Post resource Redis: Fixed an issue with the node not returning an error Xero: Fixed an issue with the Create operation for the Contact resource Contributors # Gustavo Arjones , lublak , Colton Anglin , Mika Luhta n8n@0.117.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-04-24 Breaking change Please note that this version contains a breaking change. You can read more about it here . The features that introduced the breaking changes have been flagged below. New nodes # Mailcheck n8n Trigger Workflow Trigger Enhanced nodes # CrateDB: Added the Mode option that allows you to execute queries as transactions Nextcloud: Added Delete, Get, Get All, and Update operation to the User resource Postgres: Added the Mode option that allows you to execute queries as transactions QuestDB: Added the Mode option that allows you to execute queries as transactions Salesforce: Added Owner option to the Case and Lead resources. Added custom fields to Create and Update operations of the Case resource Sentry.io: Added Delete and Update operations to Project, Release, and Team resources TimescaleDB: Added the Mode option that allows you to execute queries as transactions Zendesk Trigger: Added support to retrieve custom fields Core Functionality # The Activation Trigger node has been deprecated. It has been replaced by two new nodes - the n8n Trigger and the Workflow Trigger node. For more details, check out the entry in the breaking changes page Added the functionality to open the New Credentials dropdown by default Bug fixes # Google Sheets: Fixed an issue with the Lookup operation for returning multiple empty rows Intercom: Fixed an issue with the User operation in the Company resource Mautic: Fixed an issue with sending the lastActive parameter Contributors # Bart Vollebregt , Ivan Timoshenko , Konstantin Nosov , lublak , Umair Kamran , n8n@0.116.1 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-04-20 Core Functionality # Fixed a timeout issue with the workflows in the main process n8n@0.116.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-04-17 New nodes # Google BigQuery Webflow Enhanced nodes # Date & Time: Added Calculate a Date action that allows you to add or subtract time from a date GitLab: Added Get, Get All, Update, and Delete operations to the Release resource Microsoft OneDrive: Added Delete operation to the Folder resource Monday: Added support for OAuth2 authentication MongoDB: Added Limit, Skip, and Sort options to the Find operation and added Upsert parameter to the Update operation. Added the functionality to close the connection after use MySQL: Added support for insert modifiers and added support for SSL RabbitMQ: Added the functionality to close the connection after use and added support for AMPQS Core Functionality # Changed bcrypt library from bcryptjs to @node-rs/bcrypt Improved node error handling. Status codes and error messages in API responses have been standardized Added global timeout setting for all HTTP requests (except HTTP Request node) Implemented timeout for workers and corrected timeout for sub workflows Bug fixes # AWS SQS: Fixed an issue with API version and casing IMAP: Fixed re-connection issue Keap: Fixed an issue with the Opt In Reason parameter Salesforce: Fixed an issue with loading custom fields Contributors # Allan Daemon , Anton Romanov , Bart Vollebregt , Cassiano Vailati , entrailz , Konstantin Nosov , LongYinan n8n@0.115.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-04-10 New nodes # Google Slides Enhanced nodes # GitHub: Added Release resource TheHive: Added support to fetch observable data types RabbitMQ: Added header parameters Core Functionality # Fixed an issue with expressions not being displayed in read-only mode Fixed an issue that didn't allow editing JavaScript code in read-only mode Added support for configuring the maximum payload size Added support to dynamically add menu items Bug fixes # Jira: Fixed an issue with loading issue types with classic project type RabbitMQ Trigger: Fixed an issue with the node reusing the same item SendGrid: Fixed an issue with the dynamic field generation Contributors # Mika Luhta , Loran , stwonary n8n@0.114.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-04-03 New nodes # AWS SQS Copper ERPNext Oura Enhanced nodes # Google Drive: Added support for creating folders for shared drives Google Sheets: Added Create and Remove operation to the Sheet resource Harvest: Added Update operation to the Task resource Jira: Added Reporter field to the Issue resource Postgres: Added support for type casting Core Functionality # Fixed an issue with the Redis connection to prevent memory leaks Bug fixes # Bitwarden: Fixed an issue with the Update operation of the Group resource Cortex: Fixed an issue where only the last item got returned Invoice Ninja: Fixed an issue with the Project parameter Salesforce: Fixed an issue with the Get All operation of the Custom Object resource Contributors # Agata M , Allan Daemon , Craig McElroy , mjysci n8n@0.113.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-03-26 New nodes Activation Trigger Plivo Enhanced nodes ClickUp: Added Space Tag, Task List, and Task Tag resource GitHub: Added pagination to Get Issues and Get Repositories operations Mattermost: Added Reaction resource and Post Ephemeral operation Move Binary Data: Added Encoding and Add BOM option to JSON to Binary mode and Strip BOM to Binary to JSON mode SendGrid: Added Mail resource Spotify: Added Library resource Telegram: Added Answer Inline Query operation to the Callback resource uProc: Added Get ASIN code by EAN code, Get EAN code by ASIN code, Get Email by Social Profile, Get Email by Fullname and Company's domain, and Get Email by Fullname and Company's name operations Bug fixes Clearbit: Fixed an issue with the autocomplete URI Dropbox: Fixed an issue with the Dropbox credentials by adding the APP Access Type parameter in the credentials. For more details, check out the entry in the breaking changes page Spotify: Fixed an issue with the Delete operation of the Playlist resource The variable selector now displays empty arrays Fixed a permission issue with the Raspberry Pi Docker image n8n@0.112.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-03-19 New nodes DeepL Enhanced nodes TheHive: Added Mark as Read and Mark as Unread operations and added Ignore SSL Issues parameter to the credentials Bug fixes AWS SES: Fixed an issue to map CC addresses correctly Salesforce: Fixed an issue with custom object for Get All operations and fixed an issue with the first name field for the Create and Update operations for the Lead resource Strava: Fixed an issue with the access tokens not getting refreshed TheHive: Fixed an issue with the case resolution status Fixed an issue with importing separate decrypted credentials Fixed issues with the sub-workflows not finishing Fixed an issue with the sub-workflows running on the main process Fixed concurrency issues with sub-workflows n8n@0.111.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-03-12 New nodes Autopilot Autopilot Trigger Wise Wise Trigger Enhanced nodes Box: Added Get operation to the Folder resource Dropbox: Added Search operation to the File resource. All operations are now performed relative to the user's root directory. For more details, check out the entry in the breaking changes page Facebook Graph API: Added new API versions Google Drive: Added Update operation to the File resource HubSpot: Added the Deal Description option Kafka: Added the SASL mechanism Monday.com: Added Move operation to Board Item resource MongoDB: Added Date field to the Insert and Update operations Micrsoft SQL: Added connection timeout parameter to credentials Salesforce: Added Mobile Phone field to the Lead resource Spotify: Added Create a Playlist operation to Playlist resource and Get New Releases to the Album resource Bug fixes Airtable: Fixed a bug with updating and deleting records Added the functionality to expose metrics to Prometheus. Read more about that here Updated fallback values to match the value type Added the functionality to display debugging information for pending workflows on exit Fixed an issue with queue mode for the executions that should not be saved Fixed an issue with workflows crashing and displaying Unknown status in the execution list Fixed an issue to prevent crashing while saving execution data when the data field has over 64KB in MySQL Updated jws-rsa to version 1.12.1 n8n@0.110.3 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-03-04 Bug fixes APITemplate.io: Fixed an issue with the naming of the node n8n@0.110.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-03-04 New nodes APITemplate.io Bubble Lemlist Lemlist Trigger Enhanced nodes Microsoft Teams: Added option to reply to a message Bug fixes Dropbox: Fixed an issue with parsing the response with the Upload operation Gmail: Fixed an issue with the scope for the Service Account authentication method and fixed an issue with the label filter Google Drive: Fixed an issue with the missing Parent ID field for the Create operation and fixed an issue with the Permissions field HelpScout: Fixed an issue with sending tags when creating a conversation HTTP Request: Fixed an issue with the raw data and file response HubSpot: Fixed an issue with the OAuth2 credentials Added support for Date & Time in the IF node and the Switch node Fixed an issue with mouse selection when zooming in or out Fixed an issue with current executing workflows when using queues for Postgres Fixed naming and description for the N8N_SKIP_WEBHOOK_DEREGISTRATION_SHUTDOWN environment variable Fixed an issue with auto-refresh of the execution list n8n@0.109.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-02-22 New nodes Bitwarden Emelia Emelia Trigger GoToWebinar Raindrop Enhanced nodes AWS Rekognition: Added the Detect Text type to the Ananlyze operation for the Image resource Google Calendar: Added RRULE parameter to the Get All operation for the Event resource Jira: Added User resource and operations Reddit: Added the Search operation for the Post resource Telegram: Added the Send Location operation Bug fixes RocketChat: Fixed error responses Fixed the issue which caused the execution history of subworkflows (workflows started via the Execute Workflow node) not to be saved Added an option to export the credential data in plain text format using the CLI n8n@0.108.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-02-15 New nodes Demio PostHog QuickBooks Enhanced nodes Trello: Added Create Checklist Item operation to the Checklist resource Webhook: Removed trailing slash in routes and updated logic to select dynamic webhook Bug fixes Google Drive: Fixed an issue with returning the fields the user selects for the Folder and File resources Twitter: Fixed a typo in the description Webhook: Fixed logic for static route matching Added the functionality to sort the values that you add in the IF node, Rename node, and the Set node Added the functionality to optionally save execution data after each node Added queue mode to scale workflow execution Separated webhook from the core to scale webhook separately Fixed an issue with current execution query for unsaved running workflows Fixed an issue with the regex that detected node names n8n now generates a unified execution ID instead of two separate IDs for currently running and saved executions n8n@0.107.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-02-08 New nodes AWS Comprehend GetResponse Trigger Peekalink Stackby Enhanced nodes AWS SES: Added Custom Verification Email resource Microsoft Teams: Added Task resource Twitter: Added Delete operation to the Tweet resource Bug fixes Google Drive: Fixed an issue with the Delete and Share operations Filemaker: Fixed an issue with the script list parsing Updated Node.js version of Docker images to 14.15 Added a shortcut CTRL + scroll to zoom n8n@0.106.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-02-05 New nodes Reddit Tapfiliate Enhanced nodes Airtable Trigger: Added Download Attachment option HubSpot: Added Custom Properties option to the Create and Update operations of the Company resource MySQL: Added Connection Timeout parameter to the credentials Telegram: Added Pin Chat Message and Unpin Chat Message operations for the Message resource Bug fixes Typeform: Fixed an issue with the OAuth2 authentication method Added support for s and u flags for regex in the IF node and the Switch node n8n@0.105.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-02-01 New nodes Discourse SecurityScorecard TimescaleDB Enhanced nodes Affinity: Added List and List Entry resource Asana: Added Project IDs option to the Create operation of the Task resource Hubspot Trigger: Added support for multiple subscriptions Jira: Added Issue Attachment resource and added custom fields to Create and Update operations of the Issue resource Todoist: Added Section option Bug fixes SIGNL4: Fixed an issue with the attachment functionality Added variable $mode to check the mode in which the workflow is being executed n8n@0.104.2 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-01-27 Fixed an issue with the credentials parameters that have the same name n8n@0.104.1 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-01-26 Fixed a bug with expressions in credentials n8n@0.104.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-01-26 New nodes Compression Enhanced nodes GitHub: Added Invite operation to the User resource EmailReadImap: Increased the authentication timeout Mautic: Added Custom Fields option to the Create and Update operations of the Contact resource. Also, the Mautic OAuth credentials have been updated. Now you don't have to enter the Authorization URL and the Access Token URL Nextcloud: Added User resource Slack: Added Get Permalink and Delete operations to the Message resource Webhook: Added support for request parameters in webhook paths Bug fixes Google Drive: Fixed the default value for the Send Notification Email option Added support for expressions to credentials Removed support for MongoDB as a database for n8n. For more details, check out the entry in the breaking changes page n8n@0.103.1 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-01-21 Bug fixes Trello: Fixed the icon n8n@0.103.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-01-21 New nodes SendGrid Enhanced nodes AMQP: Added Container ID, Reconnect, and Reconnect limit options AMQP Trigger: Added Container ID, Reconnect, and Reconnect Limit options GitHub: Added Review resource Google Drive: Added Drive resource Trello: Added Get All and Get Cards operation to the List resource Bug fixes AWS Lambda: Fixed an issue with signature AWS SNS: Fixed an issue with signature Fixed an issue with nodes not executing if two input gets passed and one of them didn't return any data The code editor does not get closed when clicked anywhere outside the editor Added CLI commands to export and import credentials and workflows The title in the browser tab now resets for new workflows n8n@0.102.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-01-15 New nodes Beeminder Enhanced nodes Crypto: Added hash type SHA384 Google Books: Added support for user impersonification Google Drive: Added support for user impersonification Google Sheets: Added support for user impersonification Gmail: Added support for user impersonification Microsoft Outlook: Added support for a shared mailbox RabbitMQ: Added Exchange mode Salesforce: Added filters to all Get All operations Slack: Made changes to the properties As User and Ephemeral . For more details, check out the entry in the breaking changes page Typeform Trigger: The node now displays the recall information in the question in square brackets. For more details, check out the entry in the breaking changes page Zendesk: Removed the Authorization URL and Access Token URL fields from the OAuth2 credentials. The node now uses the subdomain passed by a user to connect to Zendesk. Bug fixes CoinGecko: Fixed an issue to process multiple input items correctly n8n@0.101.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2021-01-07 New nodes Google Analytics Phantombuster Enhanced nodes AWS: Added support for custom endpoints Gmail: Added an option to send messages formatted as HTML Philips Hue: Added Room/Group name to Light name to make it easier to identify lights Slack: Added ephemeral message option Telegram: Removed the Bot resource as the endpoint is no longer supported Bug fixes E-goi: Fixed the name of the node Edit Image: Fixed an issue with the Border operation HTTP Request: Fixed batch sizing to work when batchSize = 1 PayPal: Fixed a typo in the Environment field Split In Batches: Fixed a typo in the description Telegram: Fixed an issue with the Send Audio operation Based on your settings, vacuum runs on SQLite on startup Updated axios to version 0.21.1 n8n@0.100.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2020-12-30 New nodes Microsoft Outlook Enhanced nodes ActiveCampaign: The node loads more options for the fields Asana: Added Subtask resource and Get All operation for the Task resource Edit Image: Added Multi Step operation HTTP Request: Added Use Querystring option IF: Added Ends With and Starts With operations Jira: Added Issue Comment resource Switch: Added Ends With and Starts With operations Telegram: Added File resource Bug fixes Box Trigger: Fixed a typo in the description Edit Image: Fixed an issue with multiple composite operations HTTP Request: Fixed an issue with the binary data getting used by multiple nodes S3: Fixed an issue with uploading files Stripe Trigger: Fixed an issue with the existing webhooks Telegram: Fixed an issue with the Send Audio operation Binary data stays visible if a node gets re-executed n8n@0.99.1 # For a comprehensive list of changes, check out the commits for this version. Release date: 2020-12-24 Fixed a bug that caused HTML to render in JSON view n8n@0.99.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2020-12-24 New nodes e-goi RabbitMQ RabbitMQ Trigger uProc Enhanced nodes ActiveCampaign: Added the functionality to load the tags for a user FTP: Added Delete and Rename operation Google Cloud Firestore: The node now gives the Collection ID in response Iterable: Added User List resource MessageBird: Added Balance resource TheHive Trigger: Added support for the TheHive3 webhook events, and added Log Updated and Log Deleted events Bug fixes Dropbox: Fixed an issue with the OAuth credentials Google Sheets: Fixed an issue with the parameters getting hidden for other operations Added functionality to easily copy the data and the path from the output Fixed an issue with the node getting selected after it was duplicated n8n@0.98.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2020-12-16 New nodes Brandfetch Pushcut Pushcut Trigger Enhanced nodes Google Sheets: Added Spreadsheet resource IF: Added Is Empty option Slack: Added Reaction and User resource, and Member operation to the Channel resource Spreadsheet File: Added the option Include Empty Cell to display empty cells Webhook: Added option to send a custom response body. The node can now also return string data Bug fixes GitLab: Fixed an issue with GitLab OAuth credentials. You can now specify your GitLab server to configure the credentials Mautic: Fixed an issue with the OAuth credentials If a workflow is using the Error Trigger node, by default, the workflow will use itself as the Error Workflow Fixed a bug that caused the Editor UI to display an incorrect (save) state upon activating or deactivating a workflow n8n@0.97.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2020-12-10 New nodes Ghost Nasa Snowflake Twist Enhanced nodes Automizy: Added options to add and remove tabs for the Update operation of the Contact resource Pipedrive: Added label field to Person, Organization, and Deal resources. Also added Update operation for the Organization resource Bug fixes Fixed a bug that caused OAuth1 requests to break Fixed Docker user mount path n8n@0.96.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2020-12-03 New nodes Cortex Iterable Kafka Trigger TheHive TheHive Trigger Yourls Enhanced nodes Hubspot: Added Contact List resource and Search operation for the Deal resource Google Calendar: You can now add multiple attendees in the Attendees field Slack: The node now loads both private and public channels Bug Fixes MQTT: Fixed an issue with the connection. The node now uses mqtt@4.2.1 Fixed a bug which caused the Trigger-Nodes to require data from the first output Added configuration to load only specific nodes n8n@0.95.1 # For a comprehensive list of changes, check out the commits for this version. Release date: 2020-11-25 Bug Fixes Airtable Trigger: Fixed the icon of the node n8n@0.95.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2020-11-25 New nodes Airtable Trigger LingvaNex OpenThesaurus ProfitWell Quick Base Spontit Enhanced nodes Airable: The Application ID field has been renamed to Base ID, and the Table ID field has been renamed to Table. The List operation now downloads attachments automatically Harvest: Moved the account field from the credentials to the node parameters. For more details, check out the entry in the breaking changes page Bug Fixes Slack: Fixed an issue with creating channels and inviting users to a channel n8n@0.94.1 # For a comprehensive list of changes, check out the commits for this version. Release date: 2020-11-20 Bug Fixes GraphQL: Fixed an issue with the variables WooCommerce Trigger: Fixed an issue with the webhook. The node now reuses a webhook if it already exists. n8n@0.94.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2020-11-19 New nodes Google Cloud Natural Language Google Firebase Cloud Firestore Google Firebase Realtime Database Humantic AI Enhanced nodes ActiveCampaign: Added Contact List and List resource Edit Image: Added support for drawing, font selection, creating a new image, and added the Composite resource FTP: Added Private Key and Passphrase fields to the SFTP credentials and made the directory creation more robust IMAP: Increased the timeout Matrix: Added option to send notice, emote, and HTML messages Segment: Made changes to the properties traits and properties . For more details, check out the entry in the breaking changes page Bug Fixes GraphQL: Fixed an issue with the variables Mailchimp: Fixed an issue with the OAuth credentials. The credentials are now sent with the body instead of the header YouTube: Fixed a typo for the Unlisted option Added horizontal scrolling n8n@0.93.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2020-11-11 New nodes GetResponse Gotify Line Strapi Enhanced nodes AMQP: Connection is now closed after a message is sent AMQP Trigger: Added Message per Cycle option to retrieve the specified number of messages from the bus for every cycle Hubspot: Added Custom Properties for the Deal resource as Additional Fields Jira: The node retrieves all the projects for the Project field instead of just 50 Mattermost: Improved the channel selection Microsoft SQL: Added TLS parameter for the credentials Pipedrive Trigger: Added OAuth authentication method. For more details, check out the entry in the breaking changes page Segment: Added Custom Traits option for the Traits field Bug Fixes Shopify Trigger: Fixed an issue with activating the workflow For custom nodes, you can now set custom documentation URLs n8n@0.92.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2020-11-04 New nodes Facebook Trigger Google Books Orbit Storyblok Enhanced nodes Google Drive: Removed duplicate parameters Twitter: Added Direct Message resource Bug Fixes Gmail: Fixed an issue with the encoding for the subject field Improved the Editor UI for the save workflow functionality n8n@0.91.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2020-10-23 New nodes Kafka MailerLite MailerLite Trigger Pushbullet Enhanced nodes Airtable: Added Ignore Fields option for the Update operation AMQP Sender: Added Azure Service Bus support Google Calendar: Added Calendar resource and an option to add a conference link G Suite Admin: Added Group resource HTTP Request: Added Batch Size and Batch Interval option Mautic: Added Company resource Salesforce: Added OAuth 2.0 JWT authentication method Bug Fixes IF: Fixed an issue with undefined expression Paddle: Fixed an issue with the Return All parameter Switch: Fixed an issue with undefined expression Added CLI commands to deactivate the workflow Added an option to get the full execution data from the server The Editor UI gives an alert if you redirect without saving a workflow The Editor UI now indicates if a workflow is saved or not Improved support for touch devices Node properties now load on demand Updated the Node.js version for the Docker images n8n@0.90.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2020-10-23 Added a check for the Node.js version on startup. For more details, check out the entry in the breaking changes page Bug Fixes Google Translate: Fixed an issue with the rendering of the image in n8n.io n8n@0.89.2 # For a comprehensive list of changes, check out the commits for this version. Release date: 2020-10-22 Bug Fixes Strava Trigger: Fixed a typo in the node name n8n@0.89.1 # For a comprehensive list of changes, check out the commits for this version. Release date: 2020-10-22 Removed debug messages n8n@0.89.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2020-10-22 New Nodes Pushover Strava Strava Trigger Google Translate Bug Fixes HTTP Request: Fixed an issue with the POST request method for the 'File' response format Fixed issue with displaying non-active workflows as active Fixed an issue related to multiple-webhooks n8n@0.88.1 # For a comprehensive list of changes, check out the commits for this version. Release date: 2020-10-16 Bug Fixes HTTP Request: Fixed an issue with the Form-Data Mutipart and the RAW/Custom Body Content Types n8n@0.88.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2020-10-16 Enhanced Fixes Matrix: Added support for specifying a Matrix Homeserver URL Salesforce: Added Custom Object resource and Custom Fields and Sort options Bug Fixes AWS SES: Fixed an issue with the Send Template operation for the Email resource AWS SNS Trigger: Fixed an issue with the Subscriptions topic n8n@0.87.2 # For a comprehensive list of changes, check out the commits for this version. Release date: 2020-10-15 Bug Fixes Google Sheets: Fixed an issue with spaces in sheet names Automizy: Fixed an issue with the default resource n8n@0.87.1 # For a comprehensive list of changes, check out the commits for this version. Release date: 2020-10-15 Bug Fixes Gmail: Fixed an issue with the Message ID HTTP Request: Fixed an issue with the GET Request Added HMAC-SHA512 signature method for OAuth 1.0 n8n@0.87.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2020-10-14 New nodes Automizy AWS Rekognition Matrix Sendy Vonage Wekan Enhanced nodes AWS SES: Added Send Template operation for the Email resource and added the Template resource ClickUp: Added Time Entry and Time Entry Tag resources Function: The Function field is now called the JavaScript Code field Mailchimp: Added Campaign resource Mindee: Added currency to the simplified response OneDrive: Added Share operation OpenWeatherMap: Added Language parameter Pipedrive: Added additional parameters to the Get All operation for the Note resource Salesforce: Added Flow resource Spreadsheet File: Added Range option for the Read from file operation Bug Fixes ClickUp Trigger: Fixed issue with creating credentials Pipedrive Trigger: Fixed issue with adding multiple webhooks to Pipedrive The link.fish Scrape node has been removed from n8n. For more details, check out the entry in the breaking changes page n8n@0.86.1 # For a comprehensive list of changes, check out the commits for this version. Release date: 2020-10-06 Enhanced nodes CoinGecko: Small fixes to the CoinGecko node n8n@0.86.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2020-10-05 New nodes Clockify CoinGecko G Suite Admin Mindee Wufoo Trigger Enhanced nodes Slack: Added User Profile resource Mattermost: Added Create and Invite operations for the User resource Bug Fixes S3: Fixed issue with uploading files Webhook ID gets refreshed on node duplication n8n@0.85.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2020-09-30 Enhanced nodes Postgres: Added Schema parameter for the Update operation Bug Fixes Jira: Fixed a bug with the Issue Type field Pipedrive Trigger: Fixed issues with the credentials Changed the bcrypt library to bcrypt.js to make it compatible with Windows The OAuth callback URLs are now generated in the backend n8n@0.84.4 # For a comprehensive list of changes, check out the commits for this version. Release date: 2020-09-23 Bug Fixes Google Sheets: Fixed issues with the update and append operations n8n@0.84.3 # For a comprehensive list of changes, check out the commits for this version. Release date: 2020-09-23 Fixed an issue with the build by setting jwks-rsa to an older version n8n@0.84.2 # For a comprehensive list of changes, check out the commits for this version. Release date: 2020-09-23 Fixed an issue with the OAuth window. The OAuth window now closes after authentication is complete n8n@0.84.1 # For a comprehensive list of changes, check out the commits for this version. Release date: 2020-09-23 Additional endpoints can be excluded from authentication checks. Multiple endpoints can be added separated by colons n8n@0.84.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2020-09-23 Enhanced nodes Twitter: Added support for auto mention of users in reply tweets Bug Fixes Google Sheets: Fixed issue with non-Latin sheet names HubSpot: Fixed naming of credentials Microsoft: Fixed naming of credentials Mandrill: Fixed attachments with JSON parameters Expressions now use short variables when selecting input data for the current node Fixed issue with renaming credentials for active workflows n8n@0.83.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2020-09-18 New nodes LinkedIn Taiga Taiga Trigger Enhanced nodes ActiveCampaign: Added multiple functions, read more here Airtable: Added typecast functionality Asana: Added OAuth2 support ClickUp: Added OAuth2 support Google Drive: Added share operation IMAP Email: Added support for custom rules when checking emails Sentry.io: Added support for self-hosted version Twitter: Added retweet, reply, and like operations WordPress: Added author field to the post resource Bug Fixes Asana Trigger: Webhook validation has been deactivated Paddle: Fixed returnData format and coupon description The ActiveCampaign node has breaking changes Fixed issues with test-webhook registration n8n@0.82.1 # For a comprehensive list of changes, check out the commits for this version. Release date: 2020-09-14 Speed for basic authentication with hashed password has been improved n8n@0.82.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2020-09-14 New nodes Microsoft Teams Enhanced nodes Freshdesk: Added Freshdesk contact resource HTTP Request: Run parallel requests in HTTP Request Node Bug Fixes Philips Hue: Added APP ID to Philips Hue node credentials Postmark Trigger: Fixed parameters for the node The default space between nodes has been increased to two units Expression support has been added to the credentials Passwords for your n8n instance can now be hashed n8n@0.81.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2020-09-09 New nodes Sentry.io Enhanced nodes Asana ClickUp Clockify Google Contacts Salesforce Segment Telegram Telegram Trigger n8n@0.80.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2020-09-02 New nodes Customer.io MQTT Trigger S3 Enhanced nodes Acuity Scheduling AWS S3 ClickUp FTP Telegram Trigger Zendesk n8n@0.79.3 # For a comprehensive list of changes, check out the commits for this version. Release date: 2020-08-30 The bug that caused the workflows to not get activated correctly has been fixed n8n@0.79.2 # For a comprehensive list of changes, check out the commits for this version. Release date: 2020-08-28 Added missing rawBody for \"application/x-www-form-urlencoded\" n8n@0.79.1 # For a comprehensive list of changes, check out the commits for this version. Release date: 2020-08-28 Enhanced nodes Contentful HTTP Request Postgres Webhook Removed Test-Webhook also in case checkExists fails HTTP Request node does not overwrite accept header if it's already set Add rawBody to every request so that n8n does not give an error if body is missing n8n@0.79.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2020-08-27 New nodes Contentful Convertkit Convertkit Trigger Paddle Enhanced nodes Airtable Coda Gmail HubSpot IMAP Email Postgres Salesforce SIGNL4 Todoist Trello YouTube The Todoist node has breaking changes Added dynamic titles on workflow execution Nodes will now display a link to associated credential documentation n8n@0.78.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2020-08-18 New nodes Gmail Google Contacts Unleashed Software YouTube Enhanced nodes AMQP AMQP Trigger Bitly Function Item Google Sheets Shopify Todoist Enhanced support for JWT based authentication Added an option to execute a node once, using data of only the first item n8n@0.76.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2020-08-05 New nodes Customer.io Trigger FTP Medium Philips Hue TravisCI Twake Enhanced nodes CrateDB Move Binary Data Nodes will now display a link to associated documentation n8n@0.75.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2020-07-26 New nodes Box Box Trigger CrateDB Jira Trigger Enhanced nodes GitLab NextCloud Pipedrive QuestDB Webhooks now support OPTIONS request n8n@0.74.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2020-07-15 New nodes Hacker News QuestDB Xero Enhanced nodes Affinity Trigger HTTP Request Mailchimp MongoDB Pipedrive Postgres Uplead Webhook Webhook URLs are now handled independently of the workflow ID by https://{hostname}/webhook/{path} instead of the older https://{hostname}/webhook/{workflow_id}/{node_name}/{path} . n8n@0.73.1 # For a comprehensive list of changes, check out the commits for this version. Release date: 2020-07-08 Enhanced nodes Microsoft SQL n8n@0.73.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2020-07-08 New nodes CircleCI Microsoft SQL Zoom Enhanced nodes Postmark Trigger Salesforce It is now possible to set default values for credentials that get prefilled, and the user cannot change. n8n@0.72.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2020-07-02 Enhanced nodes Drift Eventbrite Trigger Facebook Graph API Pipedrive Fixed credential issue for the Execute Workflow node n8n@0.71.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2020-06-25 New nodes Google Tasks SIGNL4 Spotify Enhanced nodes Hubspot Mailchimp Typeform Webflow Zendesk Added Postgres SSL support It is now possible to deploy n8n under a subfolder n8n@0.70.0 # For a comprehensive list of changes, check out the commits for this version. Release date: 2020-06-13 Enhanced nodes GitHub Mautic Trigger Monday.com MongoDB Fixed the issue with multiuser-setup","title":"Release notes"},{"location":"reference/release-notes/#release-notes","text":"","title":"Release notes"},{"location":"reference/release-notes/#n8n01720","text":"View the commits for this version. Release date: 2022-04-11","title":"n8n@0.172.0"},{"location":"reference/release-notes/#enhancements","text":"Changes to the data output display in nodes.","title":"Enhancements"},{"location":"reference/release-notes/#node-enhancements","text":"Magento 2 Node: text=\"Added credential tests. PayPal Node: Added credential tests and updated the API URL.","title":"Node enhancements"},{"location":"reference/release-notes/#bug-fixes","text":"core : Luxon now applies the correct timezone. Refer to Luxon for more information. core : fixed an issue with localization that was preventing i18n files from loading. Action Network Node: Fix a pagination issue and add credentials test.","title":"Bug fixes"},{"location":"reference/release-notes/#contributors","text":"Paolo Rechia","title":"Contributors"},{"location":"reference/release-notes/#n8n01711","text":"View the commits for this version. Release date: 2022-04-06 This is a small bug fix release.","title":"n8n@0.171.1"},{"location":"reference/release-notes/#bug-fixes_1","text":"core : fix issue with current executions not displaying. core : fix an issue causing n8n to falsely skip some authentication. WooCommerce Node: Fix a pagination issue with the GetAll operation.","title":"Bug fixes"},{"location":"reference/release-notes/#n8n01710","text":"View the commits for this version. Release date: 2022-04-03 Breaking changes Please note that this version contains breaking changes. You can read more about them here . This release focuses on bug fixes and node enhancements, with one new feature, and one breaking change to the GraphQL node.","title":"n8n@0.171.0"},{"location":"reference/release-notes/#breaking-change-to-graphql-node","text":"The GraphQL node now errors when the response includes an error. If you use this node, you can choose to: Do nothing: a GraphQL response containing an error will now cause the workflow to fail. Update your GraphQL node settings: set Continue on Fail to true to allow the workflow to continue even when the GraphQL response contains an error.","title":"Breaking change to GraphQL node"},{"location":"reference/release-notes/#new-features","text":"You can now download binary data from individual nodes in your workflow.","title":"New features"},{"location":"reference/release-notes/#enhanced-nodes","text":"Emelia Node: Add Campaign > Duplicate functionality. FTP Node: Add option to recursively create directories on rename. Mautic Node: Add credential test and allow trailing slash in host. Microsoft Teams Node: Add chat message support. Mocean Node: Add 'Delivery Report URL' option and credential tests. ServiceNow Node: Add basicAuth support and fix getColumns loadOptions. Strava Node: Add 'Get Streams' operation.","title":"Enhanced nodes"},{"location":"reference/release-notes/#bug-fixes_2","text":"core: Fix crash on webhook when last node did not return data EmailReadImap Node: Fix issue that crashed process if node was configured wrong. Google Tasks Node: Fix 'Show Completed' option and hide title field where not needed. NocoDB Node: Fix pagination. Salesforce Node: Fix issue that 'status' did not get used for Case => Create & Update","title":"Bug fixes"},{"location":"reference/release-notes/#contributors_1","text":"Charles Lecalier d3no Ketan Somvanshi Luis Cipriani pemontto Rhys Williams","title":"Contributors"},{"location":"reference/release-notes/#n8n01700","text":"View the commits for this version. Release date: 2022-03-27 This release focuses on bug fixes and adding functionality to existing nodes.","title":"n8n@0.170.0"},{"location":"reference/release-notes/#enhanced-nodes_1","text":"Crypto Node: Add Generate operation to generate random values. HTTP Request Node: Add support for OPTIONS method. Jira Node: Add Simplify Output option to Issue > Get. Reddit Node: Add possibility to query saved posts. Zendesk Node: Add ticket status On-hold.","title":"Enhanced nodes"},{"location":"reference/release-notes/#bug-fixes_3","text":"core: Add logs and error catches for possible failures in queue mode. AWS Lambda Node: Fix Invocation Type > Continue Workflow. Supabase Node: Send token also via Authorization Bearer; fix Row > Get operation. Xero Node: Fix some operations and add support for setting address and phone number. Wise Node: Fix issue when executing a transfer.","title":"Bug fixes"},{"location":"reference/release-notes/#contributors_2","text":"FFTDB Fred Jasper Zonneveld pemontto Sergio TheFSilver Valentin Mocanu Yassine Fathi","title":"Contributors"},{"location":"reference/release-notes/#n8n01690","text":"View the commits for this version. Release date: 2022-03-20 This release includes: New functionality for existing nodes A new node for Linear Bug fixes And a license change!","title":"n8n@0.169.0"},{"location":"reference/release-notes/#new-license","text":"This release changes n8n's license, from Apache 2.0 with Commons Clause to Sustainable Use License . This change aims to clarify our license terms, and our position as a fair-code project. Read more about the new license in License .","title":"New license"},{"location":"reference/release-notes/#new-nodes","text":"Linear Node: Add Linear Node.","title":"New nodes"},{"location":"reference/release-notes/#enhanced-nodes_2","text":"HTTP Request Node: Allow Delete requests with body. KoBoToolbox Node: Add KoBoToolbox Regular and Trigger Node. Mailjet Node: Add credential tests and support for sandbox, JSON parameters & variables. Mattermost Node: Add support for Channel search.","title":"Enhanced nodes"},{"location":"reference/release-notes/#other-improvements","text":"Add support for reading IDs from file with executeBatch command.","title":"Other improvements"},{"location":"reference/release-notes/#bug-fixes_4","text":"GitHub node: Fix credential tests and File List operation. Telegram node: Fix sending binary data when disable notification is set.","title":"Bug fixes"},{"location":"reference/release-notes/#contributors_3","text":"Manuel Marcin Kozey Matthew Walther Yann Jouanique","title":"Contributors"},{"location":"reference/release-notes/#n8n01682","text":"For a comprehensive list of changes, view the commits for this version. Release date: 2022-03-16 This release contains an important bug fix for 0.168.0. Users on 0.168.0 or 0.168.1 should upgrade to this.","title":"n8n@0.168.2"},{"location":"reference/release-notes/#n8n01681","text":"For a comprehensive list of changes, view the commits for this version. Release date: 2022-03-15 A bug fix for user management: fixed an issue with email templates that was preventing owners from inviting members.","title":"n8n@0.168.1"},{"location":"reference/release-notes/#n8n01680","text":"For a comprehensive list of changes, view the commits for this version. Release date: 2022-03-14","title":"n8n@0.168.0"},{"location":"reference/release-notes/#new-feature-user-management","text":"User management in n8n allows you to invite people to work in your self-hosted n8n instance. It includes: Login and password management Adding and removing users Two account types: owner and member Check out the user management documentation for more information.","title":"New feature: user management"},{"location":"reference/release-notes/#n8n01670","text":"For a comprehensive list of changes, view the commits for this version. Release date: 2022-03-13","title":"n8n@0.167.0"},{"location":"reference/release-notes/#highlights","text":"","title":"Highlights"},{"location":"reference/release-notes/#luxon-and-jmespath","text":"0.167.0 adds support for two new libraries: Luxon : a JavaScript library for working with date and time JMESPath : a query language for JSON You can use Luxon and JMESPath in the code editor and in expressions.","title":"Luxon and JMESPath"},{"location":"reference/release-notes/#new-expressions-variables","text":"We've added two new variables to simplify working with date and time in expressions: $now : a Luxon object containing the current timestamp. Equivalent to DateTime.now(). $today : a Luxon object containing the current timestamp, rounded down to the day. Equivalent to DateTime.now().set({ hour: 0, minute: 0, second: 0, millisecond: 0 }).","title":"New expressions variables"},{"location":"reference/release-notes/#negative-operations-in-if-and-switch-nodes","text":"Made it easier to perform negative operations on strings. This release adds one new operation for numbers: Is Not Empty And the following new operations for strings: Not Ends With Regex Not Match Not Starts With Is Not Empty Additionally, Regex is now labelled Regex Match.","title":"Negative operations in If and Switch nodes"},{"location":"reference/release-notes/#new-node-redis-trigger","text":"Added a Redis Trigger node, so you can now start workflows based on a Redis event. Redis Trigger: Added a Redis Trigger node.","title":"New node: Redis Trigger"},{"location":"reference/release-notes/#core-functionality","text":"Added support for Luxon and JMESPath . Added two new expressions variables, $now and $today . Added more negative operations for numbers and strings. Added a link to the course from the help menu.","title":"Core functionality"},{"location":"reference/release-notes/#nodes","text":"Facebook Graph API: Added suport for Facebook Graph API 13. Hubspot: Added suport for private app token authentication. MongoDB: Added the aggregate operation. Redis Trigger: Added a Redis Trigger node. Redis: Added support for publish operations. Strapi: Added support for Strapi 4. WordPress: Added status as an option to getAll post requests.","title":"Nodes"},{"location":"reference/release-notes/#bugfixes","text":"The Google Calendar node now correctly applies timezones when creating, updating, and scheduling all day events. Fixed a bug that occasionally caused n8n to crash, or shut down workflows unexpectedly. You can now use long credential type names with Postgres.","title":"Bugfixes"},{"location":"reference/release-notes/#contributors_4","text":"Luiz Eduardo de Oliveira Fonseca Vitaliy Fratkin sol vcrwr FFTDB","title":"Contributors"},{"location":"reference/release-notes/#n8n01660","text":"For a comprehensive list of changes, view the commits for this version. Release date: 2022-03-08","title":"n8n@0.166.0"},{"location":"reference/release-notes/#new-nodes_1","text":"Odoo","title":"New nodes"},{"location":"reference/release-notes/#enhanced-nodes_3","text":"Function: Added support for items without a JSON key.","title":"Enhanced nodes"},{"location":"reference/release-notes/#core-functionality_1","text":"Added new environment variable N8N_HIRING_BANNER_ENABLED to enable/disable the hiring banner. Fixed a bug preventing keyboard shortcuts from working as expected. Fixed a bug causing tooltips to be hidden behind other elements. Fixed a bug causing some credentials to be hidden from the credentials list.","title":"Core functionality"},{"location":"reference/release-notes/#bug-fixes_5","text":"Baserow: Fixed a bug preventing the Sorting option of the Get All operation from working as expected. HTTP Request: Fixed a bug causing Digest Authentication to fail in some scenarios. Wise: Fixed a bug causing API requests requiring Strong Customer Authentication (SCA) to fail.","title":"Bug fixes"},{"location":"reference/release-notes/#contributors_5","text":"pemontto","title":"Contributors"},{"location":"reference/release-notes/#n8n01650","text":"For a comprehensive list of changes, view the commits for this version. Release date: 2022-02-28 Breaking changes Please note that this version contains breaking changes. You can read more about them here .","title":"n8n@0.165.0"},{"location":"reference/release-notes/#new-nodes_2","text":"Onfleet","title":"New nodes"},{"location":"reference/release-notes/#enhanced-nodes_4","text":"Asana: Added Create operation to the Project resource. Mautic: Added Edit Contact Points, Edit Do Not Contact List, Send Email operations to Contact resource. Also added new Segment Email resource. Notion (Beta): Added support for rollup fields to the Simplify Output option. Also added the Parent ID to the Get All operation of the Block resource. Pipedrive: Added Marketing Status field to the Create operation of the Person resource, also added User ID field to the Create and Update operations of the Person resource.","title":"Enhanced nodes"},{"location":"reference/release-notes/#core-functionality_2","text":"Added support for workflow templates. Fixed a bug causing credentials tests to fail for versioned nodes. Fixed a build problem by addind dependencies @types/lodash.set to the workflow package and @types/uuid to the core package. Fixed an error causing some resources to ignore a non-standard N8N_PATH value. Fixed an error preventing the placeholder text from being shown when entering credentials. Improved error handling for telemetry-related errors.","title":"Core functionality"},{"location":"reference/release-notes/#bug-fixes_6","text":"Orbit: Fixed a bug causing API requests to use an incorrect workspace identifier. TheHive: Fixed a bug causing the Ignore SSL Issues option to be applied incorrectly.","title":"Bug fixes"},{"location":"reference/release-notes/#contributors_6","text":"alexwitkowski , I\u00f1aki Breinbauer , lsemaj , Luiz Eduardo de Oliveira Fonseca , Rodrigo Correia , Santiago Botero Ruiz , Saurabh Kashyap , Ugo Bataillard","title":"Contributors"},{"location":"reference/release-notes/#n8n01641","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2022-02-20","title":"n8n@0.164.1"},{"location":"reference/release-notes/#core-functionality_3","text":"Fixed a bug preventing webhooks from working as expected in some scenarios.","title":"Core Functionality"},{"location":"reference/release-notes/#n8n01640","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2022-02-20","title":"n8n@0.164.0"},{"location":"reference/release-notes/#new-nodes_3","text":"Google Chat","title":"New nodes"},{"location":"reference/release-notes/#enhanced-nodes_5","text":"Grist: Added support for self-hosted Grist instances. Telegram Trigger: Added new Extra Large option to Image Size field. Webhook: Added new No Response Body option. Also added support for DELETE, PATCH and PUT methods.","title":"Enhanced nodes"},{"location":"reference/release-notes/#core-functionality_4","text":"Added new database indices to improve the performance when querying past executions. Fixed a bug causing the base portion of a URL not to be prepended as expected in some scenarios. Fixed a bug cuasing expressions to resolve incorrectly when referencing non-existent nodes or parameters.","title":"Core Functionality"},{"location":"reference/release-notes/#contributors_7","text":"Jhalter5Stones , Valentina Lilova , thorstenfreitag","title":"Contributors"},{"location":"reference/release-notes/#n8n01631","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2022-02-13","title":"n8n@0.163.1"},{"location":"reference/release-notes/#core-functionality_5","text":"Fixed a bug preventing OAuth2 authentication from working as expected in some scenarios.","title":"Core Functionality"},{"location":"reference/release-notes/#n8n01630","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2022-02-13","title":"n8n@0.163.0"},{"location":"reference/release-notes/#new-nodes_4","text":"HaloPSA Linear Trigger Zammad","title":"New nodes"},{"location":"reference/release-notes/#enhanced-nodes_6","text":"GitHub: Added Reference option to the Get operation of the File resource. Twilio: Added Status Callbacks option. uProc: Sanitized Data Webhook field description.","title":"Enhanced nodes"},{"location":"reference/release-notes/#core-functionality_6","text":"Added automatic sorting by relative position to the node list inside the expression editor. Added new /workflows/demo page to allow read-only rendering of workflows inside an iframe. Added optional /healthz health check endpoint to worker instances. Fixed unwanted list autofill behaviour inside the expression editor. Improved the GitHub actions used by the nightly Docker image.","title":"Core Functionality"},{"location":"reference/release-notes/#bug-fixes_7","text":"Function: Fixed a bug leaving the code editor size unchanged after resizing the window. Function Item: Fixed a bug leaving the code editor size unchanged after resizing the window. IF: Removed the empty sections left after removing a condition. Item Lists: Fixed an erroneous placeholder text.","title":"Bug fixes"},{"location":"reference/release-notes/#contributors_8","text":"I\u00f1aki Breinbauer , Manuel , pemontto","title":"Contributors"},{"location":"reference/release-notes/#n8n01620","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2022-02-06","title":"n8n@0.162.0"},{"location":"reference/release-notes/#enhanced-nodes_7","text":"GitHub: Added new List operation to File resource.","title":"Enhanced nodes"},{"location":"reference/release-notes/#core-functionality_7","text":"Added configurable debug logging for telemetry. Added support for defining nodes through JSON. This functionality is in alpha state and breaking changes to the interface can take place in upcoming versions. Added telemetry support to page events occuring before telemetry is initialized. Fixed a bug preventing errors in sub-workflows from appearing in parent executions. Fixed a bug where node versioning would not work as expected. Fixed a bug where remote parameters would not load as expected. Fixed a bug where unkown node types would not work as expected. Prevented the node details view from opening automatically after duplicating a node. Removed dependency fibers which is incompatible with the current LTS version 16 of Node.js.","title":"Core Functionality"},{"location":"reference/release-notes/#bug-fixes_8","text":"XML: Fixed a bug causing the node to alter incoming data.","title":"Bug fixes"},{"location":"reference/release-notes/#contributors_9","text":"pemontto","title":"Contributors"},{"location":"reference/release-notes/#n8n01611","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2022-02-01","title":"n8n@0.161.1"},{"location":"reference/release-notes/#core-functionality_8","text":"Added optional debug logging to health check functionality.","title":"Core Functionality"},{"location":"reference/release-notes/#n8n01610","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2022-01-30","title":"n8n@0.161.0"},{"location":"reference/release-notes/#core-functionality_9","text":"Added default polling interval for trigger nodes using polling. Added support for additional hints below parameter fields. Fixed a bug preventing default values from being used when testing credentials. Improved the wording in the Save your Changes? dialog.","title":"Core Functionality"},{"location":"reference/release-notes/#bug-fixes_9","text":"Airtable: Improved field description. Airtable Trigger: Improved field description. erpNext: Prevented the node from throwing an error when no data is found. Gmail: Fixed a bug causing the BCC field to be ignored. Move Binary Data: Fixed a bug causing the binary data to JSON conversion to fail when using filesystem-based binary data handling. Slack: Fixed a typo in the Type field.","title":"Bug fixes"},{"location":"reference/release-notes/#contributors_10","text":"fabian wohlgemuth","title":"Contributors"},{"location":"reference/release-notes/#n8n01600","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2022-01-22","title":"n8n@0.160.0"},{"location":"reference/release-notes/#new-nodes_5","text":"BambooHR","title":"New nodes"},{"location":"reference/release-notes/#core-functionality_10","text":"Fixed a bug preventing the binary data preview from using the full available height and width. Fixed a build problem by pinning chokidar version 3.5.2. Prevent workflow activation when no trigger is presentand introduced a modal explaining production data handling. Fixed Filter by tags placeholder text used in the Open Workflow modal.","title":"Core Functionality"},{"location":"reference/release-notes/#bug-fixes_10","text":"HTTP Request: Fixed a bug causing custom headers from being ignored. Mautic: Fixed a bug preventing all items from being returned in some situations. Microsoft OneDrive: Fixed a bug preventing more than 200 items from being returned. Spotify: Fixed a bug causing the execution to fail if there are more than 1000 search results, also fixed a bug preventing the Get New Releases operation of the Album resource from working as expected.","title":"Bug fixes"},{"location":"reference/release-notes/#contributors_11","text":"fabian wohlgemuth","title":"Contributors"},{"location":"reference/release-notes/#n8n01591","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2022-01-18","title":"n8n@0.159.1"},{"location":"reference/release-notes/#core-functionality_11","text":"Temporarily removed debug logging for axios requests.","title":"Core Functionality"},{"location":"reference/release-notes/#n8n01590","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2022-01-16","title":"n8n@0.159.0"},{"location":"reference/release-notes/#new-nodes_6","text":"Jenkins","title":"New nodes"},{"location":"reference/release-notes/#enhanced-nodes_8","text":"GraphQL: Added support for additional authentication methods Basic Auth, Digest Auth, OAuth1, OAuth2, and Query Auth.","title":"Enhanced nodes"},{"location":"reference/release-notes/#core-functionality_12","text":"Added support for executing workflows without an ID through the CLI. Fixed a build problem. Fixed a bug preventing the tag description from being shown on the canvas. Improved build performance by skipping the node-dev package during build.","title":"Core Functionality"},{"location":"reference/release-notes/#bug-fixes_11","text":"Box: Fixed a bug causing some files to be corrupted during download. Philips Hue: Fixed a bug preventing the node from connecting to Philips Hue. Salesforce: Fixed a bug preventing filters on date and datetime fields from working as expected. Supabase: Fixed an errorneous documentation link.","title":"Bug fixes"},{"location":"reference/release-notes/#contributors_12","text":"Phil Clifford","title":"Contributors"},{"location":"reference/release-notes/#n8n01580","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2022-01-09","title":"n8n@0.158.0"},{"location":"reference/release-notes/#new-nodes_7","text":"Microsoft Graph Security SyncroMSP Supabase","title":"New nodes"},{"location":"reference/release-notes/#enhanced-nodes_9","text":"Edit Image: Added Transparent operation. Kafka: Added Use Schema Registry option. Kafka Trigger: Added Use Schema Registry option. Redis: Added database field to credentials. Salesforce: Added Account Number field.","title":"Enhanced nodes"},{"location":"reference/release-notes/#core-functionality_13","text":"Added new external hook when active workflows finished initializing. Fixed a bug preventing the personalisation survey from showing up. Improved telemetry.","title":"Core Functionality"},{"location":"reference/release-notes/#bug-fixes_12","text":"Edit Image: Fixed a bug causing two items to be returned. iCalendar: Fixed a bug preventing dates in January from working as expected. Merge: Fixed causing empty binary data to overwrite other binary data on merge.","title":"Bug fixes"},{"location":"reference/release-notes/#contributors_13","text":"Ricardo Georgel , Pierre , Vahid Sebto","title":"Contributors"},{"location":"reference/release-notes/#n8n01571","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2022-01-03","title":"n8n@0.157.1"},{"location":"reference/release-notes/#core-functionality_14","text":"Fixed a bug where not all nodes could use the new binary data handling.","title":"Core Functionality"},{"location":"reference/release-notes/#n8n01570","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2022-01-02","title":"n8n@0.157.0"},{"location":"reference/release-notes/#enhanced-nodes_10","text":"Function: The node now prevents unsupported data from being returned. Function Item: The node now prevents unsupported data from being returned. HubSpot: Added Engagement resource with Create, Delete, Get, and Get All operations. Notion (Beta): Upgraded the Notion node: Added Search operation for the Database resource, Get operation for Database Page resource, Archive operation for the Page resource. Also added Simplify Output option and test for credential validity. Wait: Added new Ignore Bots option. Webhook: Added new Ignore Bots option.","title":"Enhanced nodes"},{"location":"reference/release-notes/#core-functionality_15","text":"Fixed a bug where a wrong number suffix was used after duplicating nodes.","title":"Core Functionality"},{"location":"reference/release-notes/#bug-fixes_13","text":"HTTP Request: Fixed a bug where using Digest Auth would fail.","title":"Bug fixes"},{"location":"reference/release-notes/#contributors_14","text":"pemontto","title":"Contributors"},{"location":"reference/release-notes/#n8n01560","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-12-25","title":"n8n@0.156.0"},{"location":"reference/release-notes/#enhanced-nodes_11","text":"GitLab Trigger: Added new trigger events: Confidential Issue, Confidential Comment, Deployment, Release. Google Drive: Added support for downloading and converting native Google files. Kitemaker: Added Space ID field to Create operation of Work Item resource. Raindrop: Added Parse Metadata option to Create, Update operations of the Bookmark resource.","title":"Enhanced nodes"},{"location":"reference/release-notes/#core-functionality_16","text":"Added execution ID to workflow.postExecute hook Added response body to UI for failed Axios requests Added support for automatically removing new lines from Google Service Account credentials Added support for disabling the UI via environment variable Fixed a bug causing the wrong expression result to be shown for items from an output other than the first Improved binary data management Introduced Monaco as new UI code editor","title":"Core Functionality"},{"location":"reference/release-notes/#contributors_15","text":"Arpad Gabor , Leo Lou , Manuel","title":"Contributors"},{"location":"reference/release-notes/#n8n01552","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-12-19","title":"n8n@0.155.2"},{"location":"reference/release-notes/#core-functionality_17","text":"Added support for internationalization (i18n). This functionality is currently in alpha status and breaking changes are to be expected.","title":"Core Functionality"},{"location":"reference/release-notes/#n8n01540","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-12-19","title":"n8n@0.154.0"},{"location":"reference/release-notes/#enhanced-nodes_12","text":"Plivo: Added user agent to all API requests.","title":"Enhanced nodes"},{"location":"reference/release-notes/#core-functionality_18","text":"Allow deletion of nodes from the canvas using the backspace key Fixed an issue causing clicks in the value survey to impact the main view Fixed an issue preventing the update panel from closing","title":"Core Functionality"},{"location":"reference/release-notes/#bug-fixes_14","text":"Todoist: Fixed a bug where using the additional field Due Date Time on the Task resource would cause the Create operation to fail.","title":"Bug fixes"},{"location":"reference/release-notes/#contributors_16","text":"Mohammed Huzaif , \u041b\u0435\u0431\u0435\u0434\u0435\u0432 \u0418\u0432\u0430\u043d","title":"Contributors"},{"location":"reference/release-notes/#n8n01530","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-12-11","title":"n8n@0.153.0"},{"location":"reference/release-notes/#new-nodes_8","text":"Figma Trigger (Beta) Workable Trigger","title":"New nodes"},{"location":"reference/release-notes/#enhanced-nodes_13","text":"Google Contacts: Added Query option to Get All operation, also prevented the node from failing when no contacts are found. HTTP Request: Added support for query-based authentication. Home Assistant: Added support for loading possible options in the Domain, Service, and Entity ID fields. One Simple API: Added support for Social Profile resources. PagerDuty: Write scope is now requested upon authentication against the PagerDuty OAuth2 API.","title":"Enhanced nodes"},{"location":"reference/release-notes/#core-functionality_19","text":"Added frontend for value surveys Fixed an issue preventing the recommendation logic from working as expected after selecting a work area Fixed an issue where a wrong exit code was sent when running n8n on an unsupported version of Node.js Fixed an issue where node options would disappear on hovering when a node is not selected Fixed an issue where the execution id was missing when running n8n in queue mode Fixed an issue where execution data was missing when waiting for a webhook in queue mode Improved error handling when the n8n port is already in use Improved diagnostic events Removed toast notification on webhook deletion, added toast notification after node is copied Removed default trigger tooltip for polling trigger nodes","title":"Core Functionality"},{"location":"reference/release-notes/#bug-fixes_15","text":"APITemplate.io: Fixed a bug where the Create operation on the Image resource would fail when the Download option is not enabled. HubSpot: Fixed authentication for new Hubspot applications by using granular scopes when authenticating against the Hubspot OAuth2 API. HubSpot Trigger: Fixed authentication for new Hubspot applications by using granular scopes when authenticating against the Hubspot Developer API. Jira Software: Fixed an issue where the Reporter field would not work as expected on Jira Server instances. Salesforce: Fixed a typo preventing the value in the amount field of from being saved.","title":"Bug fixes"},{"location":"reference/release-notes/#contributors_17","text":"pemontto , Jascha L\u00fclsdorf , Jonathan Bennetts","title":"Contributors"},{"location":"reference/release-notes/#n8n01520","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-12-04","title":"n8n@0.152.0"},{"location":"reference/release-notes/#new-nodes_9","text":"Google Calendar Trigger","title":"New nodes"},{"location":"reference/release-notes/#enhanced-nodes_14","text":"Telegram Trigger: Added support for downloading images to channel_post updates.","title":"Enhanced nodes"},{"location":"reference/release-notes/#core-functionality_20","text":"Added a plus (+) connector to end nodes Allowed opening workflows and executions in a new window when using Ctrl + Click Enforced type checking for all node parameters Fixed a build issue in the custom n8n docker image Fixed a memory leak in the UI which could occur when renaming nodes or navigate to another workflow Improved stability of internal test workflows Improved expression security Introduced redirect to a new page and UI error message when trying to open a deleted workflow Introduced support for multiple arguments when logging Updated the onboarding survey","title":"Core Functionality"},{"location":"reference/release-notes/#bug-fixes_16","text":"Google BigQuery: Fixed a bug preventing pagination from working as expected when the Return All option is enabled. RabbitMQ Trigger: Added Trigger to the name of the trigger node. Salesforce: Fixed a typo affecting the Type field of the Opportunity resource.","title":"Bug fixes"},{"location":"reference/release-notes/#contributors_18","text":"Zvonimir Erdelja , m2scared","title":"Contributors"},{"location":"reference/release-notes/#n8n01510","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-11-26","title":"n8n@0.151.0"},{"location":"reference/release-notes/#new-nodes_10","text":"DHL Grafana","title":"New nodes"},{"location":"reference/release-notes/#core-functionality_21","text":"Fixed a bug causing connections between nodes to disappear when renaming a newly added node after drawing a connection to its endpoints. Fixed a build issue by adding TypeScript definitions for validator.js to CLI package, also fixed a linting issue by removing an unused import. Improved the waiting state of trigger nodes to explain when an external event is required. Loops are now drawn below their source node.","title":"Core Functionality"},{"location":"reference/release-notes/#bug-fixes_17","text":"Edit Image: Fixed an issue preventing the Composite operation from working correctly in some cases.","title":"Bug fixes"},{"location":"reference/release-notes/#contributors_19","text":"Jonathan Bennetts","title":"Contributors"},{"location":"reference/release-notes/#n8n01500","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-11-19","title":"n8n@0.150.0"},{"location":"reference/release-notes/#enhanced-nodes_15","text":"Jira Software: Added Components as an additional field.","title":"Enhanced nodes"},{"location":"reference/release-notes/#core-functionality_22","text":"Fixed a build issue by pinning rudder-sdk-node version 1.0.6 in CLI package. Fixed an issue preventing the n8n import:workflow --separate CLI command from finding workflows on Windows. Further improved the expression security. Moved all nodes into separate directories in preparation for internationalization. Removing default headers for PUT and PATCH operations when using axios. Revamped the workflow canvas.","title":"Core Functionality"},{"location":"reference/release-notes/#bug-fixes_18","text":"HTTP Request: Fixed an issue causing the wrong Content-Type header to be set when downloading a file. ServiceNow: Fixed incorrect mapping of incident urgency and impact values. Start: Fixed an issue causing the node to be disabled in a new workflow. Xero: Fixed an issue causing the node to only fetch the first page when querying the Xero API.","title":"Bug fixes"},{"location":"reference/release-notes/#n8n01490","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-11-13","title":"n8n@0.149.0"},{"location":"reference/release-notes/#new-nodes_11","text":"One Simple API","title":"New nodes"},{"location":"reference/release-notes/#enhanced-nodes_16","text":"Edit Image: Added Circle Primitive to Draw operation. Also added Composite operation. Zendesk: Added check for API credentials validity. Zulip: Added additional field Role to the Update operation of the User resource.","title":"Enhanced nodes"},{"location":"reference/release-notes/#core-functionality_23","text":"Fixed an issue causing an error message to be thrown when executing a workflow through the CLI. Improved expression security by limiting the available process properties. Improved the behaviour of internal tests executed through the CLI. Updated the owner of the node user's home directory in the custom docker image.","title":"Core Functionality"},{"location":"reference/release-notes/#bug-fixes_19","text":"Google Tasks: Fixed an issue where the Due Date field had no effect (Update operation) or was unavailable (Create operation). HTTP Request: Fixed an issue where the Content-Length header was not calculated and sent when using the a Body Content Type of Form-Data Multipart. Stripe Trigger: Fixed an issue preventing the node from being activated when a previously created webhook no longer exists. Toggl Trigger: Updated the API URL used by the node.","title":"Bug fixes"},{"location":"reference/release-notes/#contributors_20","text":"GeylaniBerk , Jonathan Bennetts","title":"Contributors"},{"location":"reference/release-notes/#n8n01480","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-11-05","title":"n8n@0.148.0"},{"location":"reference/release-notes/#new-nodes_12","text":"Dropcontact Respond to Webhook","title":"New nodes"},{"location":"reference/release-notes/#enhanced-nodes_17","text":"Lemlist: Added additional fields to Create operation of Lead resource. Slack: Added User Group resource. Todoist: Added Update operation to Task resource. Wait: Improved descriptions of available Respond options. WooCommerce: Added password field to Crate operation of Customer resource.","title":"Enhanced nodes"},{"location":"reference/release-notes/#core-functionality_24","text":"Added a hook after workflow creation. Fixed a build issue with npm v7 by overriding unwanted behaviour through the .npmrc file. Fixed an issue preventing unknown node types from being imported. Fixed an issue with the UI falsely indicating a credential cannot be selected when using SQLite and multiple credentials with the same name exist.","title":"Core Functionality"},{"location":"reference/release-notes/#bug-fixes_20","text":"Stripe: Fixed an issue where setting additional Metadata fields would not have the expected effect. Also fixed an issue where pagination would not work as expected. Zendesk: Fixed an issue preventing the additional field External ID from being evaulated correctly.","title":"Bug fixes"},{"location":"reference/release-notes/#contributors_21","text":"mizzimizzi , nikozila , Pauline","title":"Contributors"},{"location":"reference/release-notes/#n8n01471","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-11-03","title":"n8n@0.147.1"},{"location":"reference/release-notes/#core-functionality_25","text":"Fixed a build issue by moving the chokidar dependency to a regular dependency.","title":"Core Functionality"},{"location":"reference/release-notes/#n8n01470","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-11-03","title":"n8n@0.147.0"},{"location":"reference/release-notes/#new-nodes_13","text":"Local File Trigger","title":"New nodes"},{"location":"reference/release-notes/#core-functionality_26","text":"Improved the database migration process to reduce memory footprint. Fixed an issue with telemetry by adding an anonymous ID.","title":"Core Functionality"},{"location":"reference/release-notes/#n8n01460","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-10-29","title":"n8n@0.146.0"},{"location":"reference/release-notes/#new-nodes_14","text":"Microsoft Dynamics CRM","title":"New nodes"},{"location":"reference/release-notes/#enhanced-nodes_18","text":"Agile CRM: Added Filters to Get All operation of Contact and Company resources. Date & Time: Ensuring the return values are always of type string. IF: Added support for moment types to Date & Time condition.","title":"Enhanced nodes"},{"location":"reference/release-notes/#core-functionality_27","text":"Added name and ID of a workflow to its settings. Added parameter inputs to be multi-line. Fixed an issue with declaring proxies when axios is used. Fixed an issue with serializing arrays and special characters. Fixed an issue with updating expressions after renaming a node.","title":"Core Functionality"},{"location":"reference/release-notes/#bug-fixes_21","text":"HTTP Request: Fixed an issue with the Full Response option not taking effect when used with the Ignore Response Code option.","title":"Bug fixes"},{"location":"reference/release-notes/#contributors_22","text":"Valentina Lilova , Oliver Trajceski","title":"Contributors"},{"location":"reference/release-notes/#n8n01450","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-10-22","title":"n8n@0.145.0"},{"location":"reference/release-notes/#new-nodes_15","text":"AWS Textract Google Drive Trigger","title":"New nodes"},{"location":"reference/release-notes/#enhanced-nodes_19","text":"Bitbucket Trigger: Added check for credentials validity. Removed deprecated User and Team resources, and added the Workspace resource. GitHub: Added check for API credentials validity. Home Assistant: Added check for credentials validity. Jira Software: Added check for credentials validity. Microsoft OneDrive: Added functionality to create folder hierarchy automatically upon subfolder creation. Pipedrive: Added All Users option to Get All operation of Activity resource. Slack: Increase the Slack default query limit from 5 to 100 in order to reduce number of requests. Twitter: Added Tweet Mode additional field to the Search operation of Tweet resource.","title":"Enhanced nodes"},{"location":"reference/release-notes/#core-functionality_28","text":"Changed vm2 library version from 3.9.3 to 3.9.5 . Fixed an issue with ignoring the response code. Fixed an issue with overwriting credentials via environment variables. Fixed an issue with using query strings combined with the x-www-form-urlencoded content type. Introduced telemetry.","title":"Core Functionality"},{"location":"reference/release-notes/#bug-fixes_22","text":"Jira Software: Fixed an issue with the Expand option for the Issue resource. Also fixed an issue with using custom fields on Jira Server. Slack: Fixed an issue with pagination when loading more than 1,000 channels. Strapi: Fixed an issue using the Where option of the Get All operation. WooCommerce: Fixed an issue where a wrong postcode field name was used for the Order resource.","title":"Bug fixes"},{"location":"reference/release-notes/#contributors_23","text":"pemontto , rdd2 , robertodamiani , Rodrigo Correia","title":"Contributors"},{"location":"reference/release-notes/#n8n01440","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-10-15","title":"n8n@0.144.0"},{"location":"reference/release-notes/#enhanced-nodes_20","text":"Nextcloud: Added Share operation to the File and Folder resources. Zendesk: Added support for deleting, listing, getting, and recovering suspended tickets. Added the query option for regular tickets. Added assignee emails, internal notes, and public replies options to the update ticket operation.","title":"Enhanced nodes"},{"location":"reference/release-notes/#core-functionality_29","text":"Improved the autofill behaviour on Google Chrome when entering credentials.","title":"Core Functionality"},{"location":"reference/release-notes/#bug-fixes_23","text":"Airtable: Fixed an issue with the sort field. Cron: Set the version of the cron library to 1.7.2.","title":"Bug fixes"},{"location":"reference/release-notes/#contributors_24","text":"Jonathan Bennetts","title":"Contributors"},{"location":"reference/release-notes/#n8n01430","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-10-14","title":"n8n@0.143.0"},{"location":"reference/release-notes/#enhanced-nodes_21","text":"Pipedrive: Added support for getting activities from deal ID. Facebook Graph API: Added support for Facebook Graph API versions 11 and 12.","title":"Enhanced nodes"},{"location":"reference/release-notes/#core-functionality_30","text":"Fixed a build issue affecting a number of AWS nodes. Changed workflows to use credential ids primarily (instead of names), allowing users to have different credentials with the same name.","title":"Core Functionality"},{"location":"reference/release-notes/#bug-fixes_24","text":"FTP: Fixed error when opening FTP/SFTP credentials.","title":"Bug fixes"},{"location":"reference/release-notes/#contributors_25","text":"Rodrigo Correia","title":"Contributors"},{"location":"reference/release-notes/#n8n01420","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-10-07","title":"n8n@0.142.0"},{"location":"reference/release-notes/#new-nodes_16","text":"Stop and Error","title":"New nodes"},{"location":"reference/release-notes/#core-functionality_31","text":"Fixed overlapping buttons when viewing on mobile. Fixed issue with partial workflow executions when Wait node was last. Fixed issue with broken non-JSON requests. Node errors now only displayed for executing nodes, not disconnected nodes. Automatic save when executing new workflows with Webhook node. Fixed an issue with how arrays were serialized for certain nodes. Fixed an issue where executions could not be cancelled when running in Main mode. Duplicated workflows now open in a new window.","title":"Core Functionality"},{"location":"reference/release-notes/#bug-fixes_25","text":"HTTP Request: Fixed 'Ignore response code' flag. Rundeck: Fixed issue with async loading of credentials. SeaTable: Fixed issue when entering a Baser URI with a trailing slash.","title":"Bug fixes"},{"location":"reference/release-notes/#contributors_26","text":"G\u00fcnther , Tom Klingenberg","title":"Contributors"},{"location":"reference/release-notes/#n8n01411","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-10-01","title":"n8n@0.141.1"},{"location":"reference/release-notes/#core-functionality_32","text":"Fixed issue with body formatting of x-form-www-urlencoded requests.","title":"Core Functionality"},{"location":"reference/release-notes/#n8n01410","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-09-30","title":"n8n@0.141.0"},{"location":"reference/release-notes/#new-nodes_17","text":"Grist SeaTable SeaTable Trigger urlscan.io","title":"New nodes"},{"location":"reference/release-notes/#core-functionality_33","text":"Performance improvements in Editor UI Improved error reporting","title":"Core Functionality"},{"location":"reference/release-notes/#contributors_27","text":"Alex Hall , Tom Klingenberg","title":"Contributors"},{"location":"reference/release-notes/#n8n01400","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-09-29","title":"n8n@0.140.0"},{"location":"reference/release-notes/#new-nodes_18","text":"Splunk","title":"New nodes"},{"location":"reference/release-notes/#enhanced-nodes_22","text":"Telegram: Added binary data support to the Send Animation, Send Audio, Send Document, Send Photo, Send Video, and Send Sticker operations.","title":"Enhanced nodes"},{"location":"reference/release-notes/#core-functionality_34","text":"Fixed startup behavior when running n8n in scaled mode (i.e. skipWebhoooksDeregistrationOnShutdown is enabled). Fixed behavior around handling empty response bodies. Fixed an issue with handling of refresh tokens.","title":"Core Functionality"},{"location":"reference/release-notes/#contributors_28","text":"pemontto","title":"Contributors"},{"location":"reference/release-notes/#n8n01391","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-09-23","title":"n8n@0.139.1"},{"location":"reference/release-notes/#core-functionality_35","text":"Bug fixes and improvements for Editor UI.","title":"Core Functionality"},{"location":"reference/release-notes/#n8n01390","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-09-22","title":"n8n@0.139.0"},{"location":"reference/release-notes/#new-nodes_19","text":"Elastic Security Misp Netlify Netlify Trigger","title":"New nodes"},{"location":"reference/release-notes/#enhanced-nodes_23","text":"HubSpot Trigger: Authentication method changed to OAuth2. Wait: Added improved status messages for Wait behavior.","title":"Enhanced nodes"},{"location":"reference/release-notes/#core-functionality_36","text":"Updated node design to include support for versioned nodes.","title":"Core Functionality"},{"location":"reference/release-notes/#bug-fixes_26","text":"SendGrid: Fixed issue with adding contacts to lists.","title":"Bug fixes"},{"location":"reference/release-notes/#contributors_29","text":"Mat\u00edas Aguirre","title":"Contributors"},{"location":"reference/release-notes/#n8n01380","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-09-15","title":"n8n@0.138.0"},{"location":"reference/release-notes/#new-nodes_20","text":"Item Lists Magento 2","title":"New nodes"},{"location":"reference/release-notes/#enhanced-nodes_24","text":"Baserow: Added the following filter options: Contains, Contains Not, Date Before Date, Date After Date, Filename Contains, Is Empty, Is Not Empty, Link Row Has, Link Row Does Not Have, Single Select Equal, and Single Select Not Equal. Pipedrive: Added support for Notes on Leads. Wekan: Added Sort field to the Card resource.","title":"Enhanced nodes"},{"location":"reference/release-notes/#core-functionality_37","text":"General UX improvements to the Editor UI. Fixed an issue with the PayloadTooLargeError .","title":"Core Functionality"},{"location":"reference/release-notes/#bug-fixes_27","text":"Lemlist: Fixed issue where events were not sent in the correct property. Notion: Fixed issue listed unnamed databases.","title":"Bug fixes"},{"location":"reference/release-notes/#contributors_30","text":"bramknuever , Chris Magnuson","title":"Contributors"},{"location":"reference/release-notes/#n8n01370","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-09-05","title":"n8n@0.137.0"},{"location":"reference/release-notes/#new-nodes_21","text":"Freshservice","title":"New nodes"},{"location":"reference/release-notes/#enhanced-nodes_25","text":"Clockify: Added Task resource. Hubspot: Added dropdown selection for Properties and Properties with History filters for Get All Deals operations. Mautic: Added Campaign Contact resource. MongoDB: Added ability to query documents by '_id'. MQTT: Added SSL/TLS support to authentication. MQTT Trigger: Added SSL/TLS support to authentication. Salesforce: Added File Extension option to the Document resource. Added Type field to Task resource. Sms77: Added Voice Call resource. Added the following options to SMS resource: Debug, Delay, Foreign ID, Flash, Label, No Reload, Performance Tracking, TTL. Zendesk: Added Organization resource. Added Get Organizations and Get Related Data operations to User resource.","title":"Enhanced nodes"},{"location":"reference/release-notes/#core-functionality_38","text":"Added execution ID to logs of queue processes. Added description to operation errors. Added ability for webhook processes to wake waiting executions.","title":"Core Functionality"},{"location":"reference/release-notes/#bug-fixes_28","text":"Hubspot: Fixed issue with 'RequestAllItems' API. Wordpress: Fixed issue with 'RequestAllItems' API only returning the first 10 items.","title":"Bug fixes"},{"location":"reference/release-notes/#contributors_31","text":"Andr\u00e9 Matthies , DeskYT , Frederic Alix , Jonathan Bennetts , Ketan Somvanshi , Luiz Eduardo de Oliveira Fonseca , TheFSilver","title":"Contributors"},{"location":"reference/release-notes/#n8n01360","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-08-30","title":"n8n@0.136.0"},{"location":"reference/release-notes/#enhanced-nodes_26","text":"Notion: Added handling of Rich Text when simplifying data.","title":"Enhanced nodes"},{"location":"reference/release-notes/#core-functionality_39","text":"General UI design improvements. Improved errors messages during debugging of custom nodes. All packages upgraded to TypeScript 4.3.5, improved linting and formatting.","title":"Core Functionality"},{"location":"reference/release-notes/#bug-fixes_29","text":"FTP: Fixed issue where incorrect paths were displayed when using the node. Wait: Fixed issue when receiving multiple files using On Webhook Call operation. Webhook: Fixed issue when receiving multiple files.","title":"Bug fixes"},{"location":"reference/release-notes/#n8n01353","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-08-27","title":"n8n@0.135.3"},{"location":"reference/release-notes/#core-functionality_40","text":"Fixed Canvas UI inconsistencies when duplicating workflows. Added log message during upgrade to indicate database migration has started. General improvements to parameter labels and tooltips.","title":"Core Functionality"},{"location":"reference/release-notes/#contributors_32","text":"Kyle Mohr","title":"Contributors"},{"location":"reference/release-notes/#n8n01352","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-08-26","title":"n8n@0.135.2"},{"location":"reference/release-notes/#core-functionality_41","text":"Added expression support for credentials. Fixed performance issues when loading credentials.","title":"Core Functionality"},{"location":"reference/release-notes/#n8n01351","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-08-23","title":"n8n@0.135.1"},{"location":"reference/release-notes/#core-functionality_42","text":"Fixed an issue where if n8n was shutdown during database migration while upgrading versions, errors would result upon next startup.","title":"Core Functionality"},{"location":"reference/release-notes/#n8n01350","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-08-22 Breaking changes Please note that this version contains breaking changes. You can read more about it here . The features that introduced the breaking changes have been flagged below.","title":"n8n@0.135.0"},{"location":"reference/release-notes/#new-nodes_22","text":"Form.io Trigger Formstack Trigger Wait","title":"New nodes"},{"location":"reference/release-notes/#core-functionality_43","text":"In-node method for accessing binary data is now asynchronous and a helper function for this has been implemented. Credentials are now loaded from the database on-demand. Webhook UUIDs are automatically updated when duplicating a workflow. Fixed an issue when referencing values before loops.","title":"Core Functionality"},{"location":"reference/release-notes/#bug-fixes_30","text":"Interval: Fixed issue where entering too large a value (> 2147483647ms) resulted in an interval of 1sec being used rather than an error.","title":"Bug fixes"},{"location":"reference/release-notes/#contributors_33","text":"Aniruddha Adhikary , lublak , parthibanbalaji","title":"Contributors"},{"location":"reference/release-notes/#n8n01340","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-08-15","title":"n8n@0.134.0"},{"location":"reference/release-notes/#enhanced-nodes_27","text":"AWS DynamoDB: Added Scan option to Item > Get All operation. Google Drive: Added File Name option to File > Update operation. Mautic: Added the following fields to Company resource: Address, Annual Revenue, Company Email, Custom Fields, Description, Fax, Industry, Number of Employees, Phone, Website. Notion: Added Timezone option when inserting Date fields. Pipedrive: Added the following Filters options to the Deal > Get All operation: Predefined Filter, Stage ID, Status, and User ID. QuickBooks: Added the Transaction resource and Get Report operation.","title":"Enhanced nodes"},{"location":"reference/release-notes/#core-functionality_44","text":"Integrated Nodelinter in n8n. Fix to add a trailing slash ( / ) to all webhook URLs for proper functionality.","title":"Core Functionality"},{"location":"reference/release-notes/#bug-fixes_31","text":"AWS SES: Fixed issue where special characters in the message were not encoded. Baserow: Fixed issue where Create operation inserted null values. Hubspot: Fixed issue when sending context parameter.","title":"Bug fixes"},{"location":"reference/release-notes/#contributors_34","text":"calvintwr , CFarcy , Jeremie Dokime , Michael Hirschler , Rodrigo Correia , sol","title":"Contributors"},{"location":"reference/release-notes/#n8n01330","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-08-08","title":"n8n@0.133.0"},{"location":"reference/release-notes/#new-nodes_23","text":"Monica CRM","title":"New nodes"},{"location":"reference/release-notes/#enhanced-nodes_28","text":"HTTP Request: Added Follow All Redirects option. Salesforce: Added Record Type ID field.","title":"Enhanced nodes"},{"location":"reference/release-notes/#core-functionality_45","text":"Fixed UI lag when editing large workflows.","title":"Core Functionality"},{"location":"reference/release-notes/#bug-fixes_32","text":"Nextcloud: Fixed issue where List operation on an empty Folder returned an error. Spotify: Fixed issues with pagination and infinite executions.","title":"Bug fixes"},{"location":"reference/release-notes/#contributors_35","text":"Jacob Burrell , \u041b\u0435\u0431\u0435\u0434\u0435\u0432 \u0418\u0432\u0430\u043d","title":"Contributors"},{"location":"reference/release-notes/#n8n01322","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-08-02","title":"n8n@0.132.2"},{"location":"reference/release-notes/#bug-fixes_33","text":"Interval: Fixed issue with infinite executions.","title":"Bug fixes"},{"location":"reference/release-notes/#contributors_36","text":"\u041b\u0435\u0431\u0435\u0434\u0435\u0432 \u0418\u0432\u0430\u043d","title":"Contributors"},{"location":"reference/release-notes/#n8n01321","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-08-02","title":"n8n@0.132.1"},{"location":"reference/release-notes/#core-functionality_46","text":"Changed TypeORM version to 0.2.34","title":"Core Functionality"},{"location":"reference/release-notes/#n8n01320","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-08-01","title":"n8n@0.132.0"},{"location":"reference/release-notes/#new-nodes_24","text":"Freshworks CRM Google Perspective Marketstack NocoDB","title":"New nodes"},{"location":"reference/release-notes/#enhanced-nodes_29","text":"Facebook Trigger: Added Fields parameter. Gmail: Added Sender Name parameter. Home Assistant: Added Event resource. Pipedrive: Added Deal Product resource. Salesforce: Added Document resource with Upload operation. WooCommerce: Added Customer resource.","title":"Enhanced nodes"},{"location":"reference/release-notes/#core-functionality_47","text":"Fixed an issue for large internal values.","title":"Core Functionality"},{"location":"reference/release-notes/#contributors_37","text":"Ed Linklater , Rodrigo Correia","title":"Contributors"},{"location":"reference/release-notes/#n8n01310","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-07-24 Breaking change Please note that this version contains a breaking change. You can read more about it here . The features that introduced the breaking changes have been flagged below.","title":"n8n@0.131.0"},{"location":"reference/release-notes/#new-nodes_25","text":"Webex by Cisco Webex by Cisco Trigger","title":"New nodes"},{"location":"reference/release-notes/#enhanced-nodes_30","text":"Pipedrive: Added Lead resource. Added Search operation to Organization resource. Taiga Trigger: Added Resource and Operations filters.","title":"Enhanced nodes"},{"location":"reference/release-notes/#core-functionality_48","text":"Added Continue-on-fail support to all nodes. Added new version notifications. Added Refresh List for remote options lists. Added $position expression variable to return the index of an item within a list.","title":"Core Functionality"},{"location":"reference/release-notes/#bug-fixes_34","text":"Spreadsheet File: Fixed issue when saving dates.","title":"Bug fixes"},{"location":"reference/release-notes/#contributors_38","text":"Anthr@x , Felipe Cecagno","title":"Contributors"},{"location":"reference/release-notes/#n8n01300","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-07-18 Breaking change Please note that this version contains a breaking change. You can read more about it here . The features that introduced the breaking changes have been flagged below.","title":"n8n@0.130.0"},{"location":"reference/release-notes/#new-nodes_26","text":"AWS DynamoDB Elasticsearch ServiceNow","title":"New nodes"},{"location":"reference/release-notes/#enhanced-nodes_31","text":"Kafka Trigger: Added Read Messages From Beginning option. Salesforce: Added Sandbox Environment Type for OAuth2 credentials. Taiga: Added Epic, Task, and User Story operations. TheHive: Added Custom Fields option to the available Additional Fields.","title":"Enhanced nodes"},{"location":"reference/release-notes/#core-functionality_49","text":"Fixed an issue where failed workflows were displayed as \"running\". Fixes issues with uncaught errors.","title":"Core Functionality"},{"location":"reference/release-notes/#bug-fixes_35","text":"Notion: Fixed issue when filtering field data type.","title":"Bug fixes"},{"location":"reference/release-notes/#contributors_39","text":"Michael Hirschler , Mika Luhta , Pierre Lanvin","title":"Contributors"},{"location":"reference/release-notes/#n8n01290","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-07-12","title":"n8n@0.129.0"},{"location":"reference/release-notes/#new-nodes_27","text":"Baserow","title":"New nodes"},{"location":"reference/release-notes/#bug-fixes_36","text":"SSH: Fixed issue with access rights when downloading files.","title":"Bug fixes"},{"location":"reference/release-notes/#contributors_40","text":"J\u00e9r\u00e9mie Pardou-Piquemal","title":"Contributors"},{"location":"reference/release-notes/#n8n01280","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-07-11","title":"n8n@0.128.0"},{"location":"reference/release-notes/#new-nodes_28","text":"Home Assistant Stripe","title":"New nodes"},{"location":"reference/release-notes/#enhanced-nodes_32","text":"HTTP Request: Added support for arrays in Querystring. Any parameter appearing multiple times with the same name is grouped into an array. Mautic: Added Contact Segment resource. Telegram: Added Delete operation to the Message resource.","title":"Enhanced nodes"},{"location":"reference/release-notes/#core-functionality_50","text":"Performance improvement for loading of historical executions (> 3mil) when using Postgres. Fixed error handling for unending workflows and display of \"unknown\" workflow status. Fixed format of Workflow ID when downloading from UI Editor to enable compatibility with importing from CLI.","title":"Core Functionality"},{"location":"reference/release-notes/#bug-fixes_37","text":"Microsoft SQL: Fixed an issue with sending the connectionTimeout parameter, and creating and updating data using columns with spaces.","title":"Bug fixes"},{"location":"reference/release-notes/#contributors_41","text":"Kaito Udagawa , Rodrigo Correia","title":"Contributors"},{"location":"reference/release-notes/#n8n01270","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-07-04 Breaking change Please note that this version contains a breaking change. You can read more about it here . The features that introduced the breaking changes have been flagged below.","title":"n8n@0.127.0"},{"location":"reference/release-notes/#enhanced-nodes_33","text":"Airtable: Added Bulk Size option to all Operations. Box: Added Share operation to File and Folder resources. Salesforce: Added Last Name field to Update operation on Contact resource. Zoho CRM: Added Account, Contact, Deal, Invoice, Product, Purchase, Quote, Sales Order, and Vendor resources.","title":"Enhanced nodes"},{"location":"reference/release-notes/#core-functionality_51","text":"Added a workflow testing framework via a new CLI command to execute all desired workflows. Run n8n executeBatch --help for details. Added support to display binary video content in Editor UI.","title":"Core Functionality"},{"location":"reference/release-notes/#bug-fixes_38","text":"Google Sheets: Fixed an issue with handling 0 value that resulted in empty cells. SSH: Fixed an issue with setting passphrases.","title":"Bug fixes"},{"location":"reference/release-notes/#contributors_42","text":"flybluewolf , Kaito Udagawa","title":"Contributors"},{"location":"reference/release-notes/#n8n01261","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-06-29","title":"n8n@0.126.1"},{"location":"reference/release-notes/#core-functionality_52","text":"Fixed issues with keyboard shortcuts when a modal was open.","title":"Core Functionality"},{"location":"reference/release-notes/#bug-fixes_39","text":"Microsoft SQL: Fixed an issue with handling of Boolean values when inserting. Pipedrive: Fixed an issue with the node icon.","title":"Bug fixes"},{"location":"reference/release-notes/#n8n01260","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-06-27","title":"n8n@0.126.0"},{"location":"reference/release-notes/#new-nodes_29","text":"Action Network Google Docs","title":"New nodes"},{"location":"reference/release-notes/#enhanced-nodes_34","text":"AWS S3: Added Delete operation to the Bucket Resource. Google Analytics: Added Dimension Filters to the available Additional Fields. HTTP Request: Added Split Into Items option. MQTT: Added mqqts protocol for MQTT credentials. QuickBooks: Added Purchase resource with Get and Get All operations.","title":"Enhanced nodes"},{"location":"reference/release-notes/#core-functionality_53","text":"Templates from the n8n Workflows page can now be directly imported by appending /workflows/templates/<templateId> to your instance base URL. For example, localhost:5678/workflows/templates/1142 . Added new Editor UI shortcuts. See Keyboard Shortcuts for details. Fixed an issue causing console errors when deleting a node from the canvas.","title":"Core Functionality"},{"location":"reference/release-notes/#bug-fixes_40","text":"Ghost: Fixed an issue with the Get All operation functionality. Google Analytics: Fixed an issue that caused an error when attempting to sort with no data present. Microsoft SQL: Fixed an issue when escaping single quotes and mapping empty fields. Notion: Fixed an issue with pagination of databases and users.","title":"Bug fixes"},{"location":"reference/release-notes/#contributors_43","text":"calvintwr , Jan Baykara","title":"Contributors"},{"location":"reference/release-notes/#n8n01250","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-06-20","title":"n8n@0.125.0"},{"location":"reference/release-notes/#enhanced-nodes_35","text":"Spotify: Added Search operation to Album, Artist, Playlist, and Track resources, and Resume and Volume operations to Player resource.","title":"Enhanced nodes"},{"location":"reference/release-notes/#core-functionality_54","text":"Implemented new design of the Nodes Panel, adding categories and subcategories, along with improved search. For full details, see the commits .","title":"Core Functionality"},{"location":"reference/release-notes/#bug-fixes_41","text":"MySQL: Fixed an issue where n8n was unable to save data due to collation, resulting in workflows ending with Unknown status.","title":"Bug fixes"},{"location":"reference/release-notes/#contributors_44","text":"Amudhan Manivasagam , Carlos Alexandro Becker , Kaito Udagawa","title":"Contributors"},{"location":"reference/release-notes/#n8n01241","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-06-16","title":"n8n@0.124.1"},{"location":"reference/release-notes/#core-functionality_55","text":"Improved error log messages Fixed an issue where the tags got removed when deactivating the workflow or updating settings Removed the circular references for the error caused by the request library","title":"Core Functionality"},{"location":"reference/release-notes/#n8n01240","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-06-13","title":"n8n@0.124.0"},{"location":"reference/release-notes/#enhanced-nodes_36","text":"Google Drive: Added APP Properties and Properties options to the Upload operation of the File resource HTTP Request: Added the functionlaity to log the request to the browser console for testing Notion: Added the Include Time parameter date field types Salesforce: Added Upsert operation to Account, Contact, Custom Object, Lead, and Opportunity resources Todoist: Added the Description option to the Task resource","title":"Enhanced nodes"},{"location":"reference/release-notes/#core-functionality_56","text":"Implemented the functionality to display the error details in a toast message for trigger nodes Improved error handling by removing circular references from API errors","title":"Core Functionality"},{"location":"reference/release-notes/#bug-fixes_42","text":"Jira: Fixed an issues with the API version and fixed an issue with fetching the custom fields for the Issue resource","title":"Bug fixes"},{"location":"reference/release-notes/#contributors_45","text":"Jean M , romaincolombo-daily , Thomas Jost , Vincent","title":"Contributors"},{"location":"reference/release-notes/#n8n01231","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-06-06","title":"n8n@0.123.1"},{"location":"reference/release-notes/#core-functionality_57","text":"Fixed a build issue for missing node icons","title":"Core Functionality"},{"location":"reference/release-notes/#n8n01230","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-06-06","title":"n8n@0.123.0"},{"location":"reference/release-notes/#new-nodes_30","text":"Git Microsoft To Do","title":"New nodes"},{"location":"reference/release-notes/#enhanced-nodes_37","text":"Pipedrive: Added a feature to fetch data from the Pipedrive API, added Search operation to the Deals resource, and added custom fields option Spotify: Added My Data resource","title":"Enhanced nodes"},{"location":"reference/release-notes/#core-functionality_58","text":"Fixed issues with NodeViewNew navigation handling Fixed an issue with the view crashing with large requests","title":"Core Functionality"},{"location":"reference/release-notes/#bug-fixes_43","text":"ASW Transcribe: Fixed issues with options","title":"Bug fixes"},{"location":"reference/release-notes/#contributors_46","text":"Rodrigo Correia , Sam Roquitte","title":"Contributors"},{"location":"reference/release-notes/#n8n01223","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-06-04","title":"n8n@0.122.3"},{"location":"reference/release-notes/#core-functionality_59","text":"Fixed error messages for the Textarea field Added the missing winston dependency Fixed an issue with adding values via the Variable selector. The deleted values don't reappear Fixed an issue with the Error Workflows not getting executed in the queue mode","title":"Core Functionality"},{"location":"reference/release-notes/#bug-fixes_44","text":"Notion: Fixed an issue with parsing the last edited time","title":"Bug fixes"},{"location":"reference/release-notes/#n8n01222","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-05-31","title":"n8n@0.122.2"},{"location":"reference/release-notes/#enhanced-nodes_38","text":"Function: Added console.log support for writing to browser console Function Item: Added console.log support for writing to browser console","title":"Enhanced nodes"},{"location":"reference/release-notes/#core-functionality_60","text":"Fixed an issue that enables clicks on tags Fixed an issue with escaping workflow name Fixed an issue with selecting variables in the Expression Editor","title":"Core Functionality"},{"location":"reference/release-notes/#n8n01221","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-05-30","title":"n8n@0.122.1"},{"location":"reference/release-notes/#core-functionality_61","text":"Fixed an issue with the order in migration rollback","title":"Core Functionality"},{"location":"reference/release-notes/#n8n01220","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-05-30","title":"n8n@0.122.0"},{"location":"reference/release-notes/#new-nodes_31","text":"AWS Transcribe SSH UptimeRobot","title":"New nodes"},{"location":"reference/release-notes/#enhanced-nodes_39","text":"DeepL: Added support for Free API Function: Added the functionality to log console.log messages to the browser console Function Item: Added the functionality to log console.log messages to the browser console","title":"Enhanced nodes"},{"location":"reference/release-notes/#core-functionality_62","text":"Changed bcrypt library from @node-rs/bcrypt to bcryptjs Fixed an issue with optional parameters that have the same name Added the functionality to tag workflows Fixed errors in the Expression Editor Fixed an issue with nodes that only get connected to the second input. This solves the issue of copying and pasting the workflows where only one output of the IF node gets connected to a node","title":"Core Functionality"},{"location":"reference/release-notes/#bug-fixes_45","text":"Google Drive: Fixed an issue with the Drive resource Notion: Fixed an issue with the filtering fields type and fixed an issue with the link option Switch: Fixed an issue with the Expression mode","title":"Bug fixes"},{"location":"reference/release-notes/#contributors_47","text":"Alexander Mustafin","title":"Contributors"},{"location":"reference/release-notes/#n8n01211","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-06-01","title":"n8n@0.121.1"},{"location":"reference/release-notes/#core-functionality_63","text":"Fixed an issue with copying the output values Fixed issues with the Expression Editor Made improvements to the Expression Editor","title":"Core Functionality"},{"location":"reference/release-notes/#n8n01210","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-05-20","title":"n8n@0.121.0"},{"location":"reference/release-notes/#new-nodes_32","text":"Notion Notion Trigger","title":"New nodes"},{"location":"reference/release-notes/#enhanced-nodes_40","text":"GraphQL: Added Header Auth authentication method Twilio: Added API Key authentication method","title":"Enhanced nodes"},{"location":"reference/release-notes/#bug-fixes_46","text":"HubSpot: Fixed an issue with pagination for Deals resource Keap: Fixed an issue with the data type of the Order Title field Orbit: Fixed an issue with the activity type in Post operation Slack: Fixed an issue with the Get Profile operation Strava: Fixed an issue with the paging parameter","title":"Bug fixes"},{"location":"reference/release-notes/#contributors_48","text":"Jacob Spizziri","title":"Contributors"},{"location":"reference/release-notes/#n8n01200","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-05-17","title":"n8n@0.120.0"},{"location":"reference/release-notes/#new-nodes_33","text":"iCalendar","title":"New nodes"},{"location":"reference/release-notes/#enhanced-nodes_41","text":"Google Cloud Firestore: Added the functionality for GeoPoint parsing and added ISO-8601 format for date validation IMAP Email: Added the Force reconnect option Paddle: Added the Use Sandbox environment API parameter Spotify: Added the Position parameter to the Add operation of the Playlist resource WooCommerce: Added the Include Credentials in Query parameter","title":"Enhanced nodes"},{"location":"reference/release-notes/#core-functionality_64","text":"Added await to hooks to fix issues with the Unknown status of the workflows Changed the data type of the credentials_entity field for MySQL database to fix issues with long credentials Fixed an issue with the ordering of the executions when the list is auto-refreshed Added the functionality that allows reading sibling parameters","title":"Core Functionality"},{"location":"reference/release-notes/#bug-fixes_47","text":"Clockify Trigger: Fixed an issue that occurred when the node returned an empty array Google Cloud Firestore: Fixed an issue with parsing empty document, and an issue with the detection of date HubSpot: Fixed an issue with the Return All option","title":"Bug fixes"},{"location":"reference/release-notes/#contributors_49","text":"DeskYT , Daniel Lazaro , DerEnderKeks , mdasmendel","title":"Contributors"},{"location":"reference/release-notes/#n8n01190","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-05-09","title":"n8n@0.119.0"},{"location":"reference/release-notes/#enhanced-nodes_42","text":"AWS Comprehend: Added the Detect Entities operation AWS Lambda: Added the ability to list functions recursively if the number of functions exceeds 50 Google Analytics: Added pagination to the Report resource Mailjet: Added Reply To parameter Redis: Added the Increment operation Spreadsheet File: Added the Header Row option Webflow Trigger: Added Collection Item Created, Collection Item Updated, and Collection Item Deleted events","title":"Enhanced nodes"},{"location":"reference/release-notes/#core-functionality_65","text":"Implemented timeout for subworkflows Removed the deregistration webhooks functionality from the webhook process","title":"Core Functionality"},{"location":"reference/release-notes/#bug-fixes_48","text":"Google Cloud Firestore: Fixed an issue with parsing null value Google Sheets: Fixed an issue with the Key Row parameter HubSpot: Fixed an issue with the authentication","title":"Bug fixes"},{"location":"reference/release-notes/#contributors_50","text":"Nikita","title":"Contributors"},{"location":"reference/release-notes/#n8n01181","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-05-05","title":"n8n@0.118.1"},{"location":"reference/release-notes/#core-functionality_66","text":"Fixed an issue with error workflows","title":"Core Functionality"},{"location":"reference/release-notes/#n8n01180","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-05-02 Breaking change Please note that this version contains a breaking change. You can read more about it here . The features that introduced the breaking changes have been flagged below.","title":"n8n@0.118.0"},{"location":"reference/release-notes/#new-nodes_34","text":"Kitemaker MQTT","title":"New nodes"},{"location":"reference/release-notes/#enhanced-nodes_43","text":"CrateDB: Added query parameters. The Execute Query operation returns the result from all queries executed instead of just one of the results. ERPNext: Added support for self-hosted ERPNext instances FTP: Added the functionality to delete folders Google Calendar: Added the Continue on Fail functionality Google Drive: Added the functionality to add file name when downloading files Gmail: Added functionality to handle multiple binary properties Microsoft Outlook: Added Is Read and Move option to the Message resource Postgres: Added query parameters. The Execute Query operation returns the result from all queries executed instead of just one of the results. QuestDB: Added query parameters. The Execute Query operation returns the result from all queries executed instead of just one of the results. QuickBase: Added option to use Field IDs TimescaleDB: Added query parameters. The Execute Query operation returns the result from all queries executed instead of just one of the results. Twist: Added Get, Get All, Delete, and Update operations to the Message Conversation resource. Added Archive, Unarchive, and Delete operations to the Channel resource. Added Thread and Comment resource","title":"Enhanced nodes"},{"location":"reference/release-notes/#core-functionality_67","text":"Implemented the native fs/promise library where possible Added the functionality to output logs to the console or a file We have updated the minimum required version for Node.js to v14.15. For more details, check out the entry in the breaking changes page","title":"Core Functionality"},{"location":"reference/release-notes/#bug-fixes_49","text":"GetResponse Trigger: Fixed an issue with error handling GitHub Trigger: Fixed an issue with error handling GitLab Trigger: Fixed an issue with error handling Google Sheets: Fixed an issue with the Lookup operation for returning empty rows Orbit: Fixed issues with the Post resource Redis: Fixed an issue with the node not returning an error Xero: Fixed an issue with the Create operation for the Contact resource","title":"Bug fixes"},{"location":"reference/release-notes/#contributors_51","text":"Gustavo Arjones , lublak , Colton Anglin , Mika Luhta","title":"Contributors"},{"location":"reference/release-notes/#n8n01170","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-04-24 Breaking change Please note that this version contains a breaking change. You can read more about it here . The features that introduced the breaking changes have been flagged below.","title":"n8n@0.117.0"},{"location":"reference/release-notes/#new-nodes_35","text":"Mailcheck n8n Trigger Workflow Trigger","title":"New nodes"},{"location":"reference/release-notes/#enhanced-nodes_44","text":"CrateDB: Added the Mode option that allows you to execute queries as transactions Nextcloud: Added Delete, Get, Get All, and Update operation to the User resource Postgres: Added the Mode option that allows you to execute queries as transactions QuestDB: Added the Mode option that allows you to execute queries as transactions Salesforce: Added Owner option to the Case and Lead resources. Added custom fields to Create and Update operations of the Case resource Sentry.io: Added Delete and Update operations to Project, Release, and Team resources TimescaleDB: Added the Mode option that allows you to execute queries as transactions Zendesk Trigger: Added support to retrieve custom fields","title":"Enhanced nodes"},{"location":"reference/release-notes/#core-functionality_68","text":"The Activation Trigger node has been deprecated. It has been replaced by two new nodes - the n8n Trigger and the Workflow Trigger node. For more details, check out the entry in the breaking changes page Added the functionality to open the New Credentials dropdown by default","title":"Core Functionality"},{"location":"reference/release-notes/#bug-fixes_50","text":"Google Sheets: Fixed an issue with the Lookup operation for returning multiple empty rows Intercom: Fixed an issue with the User operation in the Company resource Mautic: Fixed an issue with sending the lastActive parameter","title":"Bug fixes"},{"location":"reference/release-notes/#contributors_52","text":"Bart Vollebregt , Ivan Timoshenko , Konstantin Nosov , lublak , Umair Kamran ,","title":"Contributors"},{"location":"reference/release-notes/#n8n01161","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-04-20","title":"n8n@0.116.1"},{"location":"reference/release-notes/#core-functionality_69","text":"Fixed a timeout issue with the workflows in the main process","title":"Core Functionality"},{"location":"reference/release-notes/#n8n01160","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-04-17","title":"n8n@0.116.0"},{"location":"reference/release-notes/#new-nodes_36","text":"Google BigQuery Webflow","title":"New nodes"},{"location":"reference/release-notes/#enhanced-nodes_45","text":"Date & Time: Added Calculate a Date action that allows you to add or subtract time from a date GitLab: Added Get, Get All, Update, and Delete operations to the Release resource Microsoft OneDrive: Added Delete operation to the Folder resource Monday: Added support for OAuth2 authentication MongoDB: Added Limit, Skip, and Sort options to the Find operation and added Upsert parameter to the Update operation. Added the functionality to close the connection after use MySQL: Added support for insert modifiers and added support for SSL RabbitMQ: Added the functionality to close the connection after use and added support for AMPQS","title":"Enhanced nodes"},{"location":"reference/release-notes/#core-functionality_70","text":"Changed bcrypt library from bcryptjs to @node-rs/bcrypt Improved node error handling. Status codes and error messages in API responses have been standardized Added global timeout setting for all HTTP requests (except HTTP Request node) Implemented timeout for workers and corrected timeout for sub workflows","title":"Core Functionality"},{"location":"reference/release-notes/#bug-fixes_51","text":"AWS SQS: Fixed an issue with API version and casing IMAP: Fixed re-connection issue Keap: Fixed an issue with the Opt In Reason parameter Salesforce: Fixed an issue with loading custom fields","title":"Bug fixes"},{"location":"reference/release-notes/#contributors_53","text":"Allan Daemon , Anton Romanov , Bart Vollebregt , Cassiano Vailati , entrailz , Konstantin Nosov , LongYinan","title":"Contributors"},{"location":"reference/release-notes/#n8n01150","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-04-10","title":"n8n@0.115.0"},{"location":"reference/release-notes/#new-nodes_37","text":"Google Slides","title":"New nodes"},{"location":"reference/release-notes/#enhanced-nodes_46","text":"GitHub: Added Release resource TheHive: Added support to fetch observable data types RabbitMQ: Added header parameters","title":"Enhanced nodes"},{"location":"reference/release-notes/#core-functionality_71","text":"Fixed an issue with expressions not being displayed in read-only mode Fixed an issue that didn't allow editing JavaScript code in read-only mode Added support for configuring the maximum payload size Added support to dynamically add menu items","title":"Core Functionality"},{"location":"reference/release-notes/#bug-fixes_52","text":"Jira: Fixed an issue with loading issue types with classic project type RabbitMQ Trigger: Fixed an issue with the node reusing the same item SendGrid: Fixed an issue with the dynamic field generation","title":"Bug fixes"},{"location":"reference/release-notes/#contributors_54","text":"Mika Luhta , Loran , stwonary","title":"Contributors"},{"location":"reference/release-notes/#n8n01140","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-04-03","title":"n8n@0.114.0"},{"location":"reference/release-notes/#new-nodes_38","text":"AWS SQS Copper ERPNext Oura","title":"New nodes"},{"location":"reference/release-notes/#enhanced-nodes_47","text":"Google Drive: Added support for creating folders for shared drives Google Sheets: Added Create and Remove operation to the Sheet resource Harvest: Added Update operation to the Task resource Jira: Added Reporter field to the Issue resource Postgres: Added support for type casting","title":"Enhanced nodes"},{"location":"reference/release-notes/#core-functionality_72","text":"Fixed an issue with the Redis connection to prevent memory leaks","title":"Core Functionality"},{"location":"reference/release-notes/#bug-fixes_53","text":"Bitwarden: Fixed an issue with the Update operation of the Group resource Cortex: Fixed an issue where only the last item got returned Invoice Ninja: Fixed an issue with the Project parameter Salesforce: Fixed an issue with the Get All operation of the Custom Object resource","title":"Bug fixes"},{"location":"reference/release-notes/#contributors_55","text":"Agata M , Allan Daemon , Craig McElroy , mjysci","title":"Contributors"},{"location":"reference/release-notes/#n8n01130","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-03-26 New nodes Activation Trigger Plivo Enhanced nodes ClickUp: Added Space Tag, Task List, and Task Tag resource GitHub: Added pagination to Get Issues and Get Repositories operations Mattermost: Added Reaction resource and Post Ephemeral operation Move Binary Data: Added Encoding and Add BOM option to JSON to Binary mode and Strip BOM to Binary to JSON mode SendGrid: Added Mail resource Spotify: Added Library resource Telegram: Added Answer Inline Query operation to the Callback resource uProc: Added Get ASIN code by EAN code, Get EAN code by ASIN code, Get Email by Social Profile, Get Email by Fullname and Company's domain, and Get Email by Fullname and Company's name operations Bug fixes Clearbit: Fixed an issue with the autocomplete URI Dropbox: Fixed an issue with the Dropbox credentials by adding the APP Access Type parameter in the credentials. For more details, check out the entry in the breaking changes page Spotify: Fixed an issue with the Delete operation of the Playlist resource The variable selector now displays empty arrays Fixed a permission issue with the Raspberry Pi Docker image","title":"n8n@0.113.0"},{"location":"reference/release-notes/#n8n01120","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-03-19 New nodes DeepL Enhanced nodes TheHive: Added Mark as Read and Mark as Unread operations and added Ignore SSL Issues parameter to the credentials Bug fixes AWS SES: Fixed an issue to map CC addresses correctly Salesforce: Fixed an issue with custom object for Get All operations and fixed an issue with the first name field for the Create and Update operations for the Lead resource Strava: Fixed an issue with the access tokens not getting refreshed TheHive: Fixed an issue with the case resolution status Fixed an issue with importing separate decrypted credentials Fixed issues with the sub-workflows not finishing Fixed an issue with the sub-workflows running on the main process Fixed concurrency issues with sub-workflows","title":"n8n@0.112.0"},{"location":"reference/release-notes/#n8n01110","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-03-12 New nodes Autopilot Autopilot Trigger Wise Wise Trigger Enhanced nodes Box: Added Get operation to the Folder resource Dropbox: Added Search operation to the File resource. All operations are now performed relative to the user's root directory. For more details, check out the entry in the breaking changes page Facebook Graph API: Added new API versions Google Drive: Added Update operation to the File resource HubSpot: Added the Deal Description option Kafka: Added the SASL mechanism Monday.com: Added Move operation to Board Item resource MongoDB: Added Date field to the Insert and Update operations Micrsoft SQL: Added connection timeout parameter to credentials Salesforce: Added Mobile Phone field to the Lead resource Spotify: Added Create a Playlist operation to Playlist resource and Get New Releases to the Album resource Bug fixes Airtable: Fixed a bug with updating and deleting records Added the functionality to expose metrics to Prometheus. Read more about that here Updated fallback values to match the value type Added the functionality to display debugging information for pending workflows on exit Fixed an issue with queue mode for the executions that should not be saved Fixed an issue with workflows crashing and displaying Unknown status in the execution list Fixed an issue to prevent crashing while saving execution data when the data field has over 64KB in MySQL Updated jws-rsa to version 1.12.1","title":"n8n@0.111.0"},{"location":"reference/release-notes/#n8n01103","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-03-04 Bug fixes APITemplate.io: Fixed an issue with the naming of the node","title":"n8n@0.110.3"},{"location":"reference/release-notes/#n8n01100","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-03-04 New nodes APITemplate.io Bubble Lemlist Lemlist Trigger Enhanced nodes Microsoft Teams: Added option to reply to a message Bug fixes Dropbox: Fixed an issue with parsing the response with the Upload operation Gmail: Fixed an issue with the scope for the Service Account authentication method and fixed an issue with the label filter Google Drive: Fixed an issue with the missing Parent ID field for the Create operation and fixed an issue with the Permissions field HelpScout: Fixed an issue with sending tags when creating a conversation HTTP Request: Fixed an issue with the raw data and file response HubSpot: Fixed an issue with the OAuth2 credentials Added support for Date & Time in the IF node and the Switch node Fixed an issue with mouse selection when zooming in or out Fixed an issue with current executing workflows when using queues for Postgres Fixed naming and description for the N8N_SKIP_WEBHOOK_DEREGISTRATION_SHUTDOWN environment variable Fixed an issue with auto-refresh of the execution list","title":"n8n@0.110.0"},{"location":"reference/release-notes/#n8n01090","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-02-22 New nodes Bitwarden Emelia Emelia Trigger GoToWebinar Raindrop Enhanced nodes AWS Rekognition: Added the Detect Text type to the Ananlyze operation for the Image resource Google Calendar: Added RRULE parameter to the Get All operation for the Event resource Jira: Added User resource and operations Reddit: Added the Search operation for the Post resource Telegram: Added the Send Location operation Bug fixes RocketChat: Fixed error responses Fixed the issue which caused the execution history of subworkflows (workflows started via the Execute Workflow node) not to be saved Added an option to export the credential data in plain text format using the CLI","title":"n8n@0.109.0"},{"location":"reference/release-notes/#n8n01080","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-02-15 New nodes Demio PostHog QuickBooks Enhanced nodes Trello: Added Create Checklist Item operation to the Checklist resource Webhook: Removed trailing slash in routes and updated logic to select dynamic webhook Bug fixes Google Drive: Fixed an issue with returning the fields the user selects for the Folder and File resources Twitter: Fixed a typo in the description Webhook: Fixed logic for static route matching Added the functionality to sort the values that you add in the IF node, Rename node, and the Set node Added the functionality to optionally save execution data after each node Added queue mode to scale workflow execution Separated webhook from the core to scale webhook separately Fixed an issue with current execution query for unsaved running workflows Fixed an issue with the regex that detected node names n8n now generates a unified execution ID instead of two separate IDs for currently running and saved executions","title":"n8n@0.108.0"},{"location":"reference/release-notes/#n8n01070","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-02-08 New nodes AWS Comprehend GetResponse Trigger Peekalink Stackby Enhanced nodes AWS SES: Added Custom Verification Email resource Microsoft Teams: Added Task resource Twitter: Added Delete operation to the Tweet resource Bug fixes Google Drive: Fixed an issue with the Delete and Share operations Filemaker: Fixed an issue with the script list parsing Updated Node.js version of Docker images to 14.15 Added a shortcut CTRL + scroll to zoom","title":"n8n@0.107.0"},{"location":"reference/release-notes/#n8n01060","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-02-05 New nodes Reddit Tapfiliate Enhanced nodes Airtable Trigger: Added Download Attachment option HubSpot: Added Custom Properties option to the Create and Update operations of the Company resource MySQL: Added Connection Timeout parameter to the credentials Telegram: Added Pin Chat Message and Unpin Chat Message operations for the Message resource Bug fixes Typeform: Fixed an issue with the OAuth2 authentication method Added support for s and u flags for regex in the IF node and the Switch node","title":"n8n@0.106.0"},{"location":"reference/release-notes/#n8n01050","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-02-01 New nodes Discourse SecurityScorecard TimescaleDB Enhanced nodes Affinity: Added List and List Entry resource Asana: Added Project IDs option to the Create operation of the Task resource Hubspot Trigger: Added support for multiple subscriptions Jira: Added Issue Attachment resource and added custom fields to Create and Update operations of the Issue resource Todoist: Added Section option Bug fixes SIGNL4: Fixed an issue with the attachment functionality Added variable $mode to check the mode in which the workflow is being executed","title":"n8n@0.105.0"},{"location":"reference/release-notes/#n8n01042","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-01-27 Fixed an issue with the credentials parameters that have the same name","title":"n8n@0.104.2"},{"location":"reference/release-notes/#n8n01041","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-01-26 Fixed a bug with expressions in credentials","title":"n8n@0.104.1"},{"location":"reference/release-notes/#n8n01040","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-01-26 New nodes Compression Enhanced nodes GitHub: Added Invite operation to the User resource EmailReadImap: Increased the authentication timeout Mautic: Added Custom Fields option to the Create and Update operations of the Contact resource. Also, the Mautic OAuth credentials have been updated. Now you don't have to enter the Authorization URL and the Access Token URL Nextcloud: Added User resource Slack: Added Get Permalink and Delete operations to the Message resource Webhook: Added support for request parameters in webhook paths Bug fixes Google Drive: Fixed the default value for the Send Notification Email option Added support for expressions to credentials Removed support for MongoDB as a database for n8n. For more details, check out the entry in the breaking changes page","title":"n8n@0.104.0"},{"location":"reference/release-notes/#n8n01031","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-01-21 Bug fixes Trello: Fixed the icon","title":"n8n@0.103.1"},{"location":"reference/release-notes/#n8n01030","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-01-21 New nodes SendGrid Enhanced nodes AMQP: Added Container ID, Reconnect, and Reconnect limit options AMQP Trigger: Added Container ID, Reconnect, and Reconnect Limit options GitHub: Added Review resource Google Drive: Added Drive resource Trello: Added Get All and Get Cards operation to the List resource Bug fixes AWS Lambda: Fixed an issue with signature AWS SNS: Fixed an issue with signature Fixed an issue with nodes not executing if two input gets passed and one of them didn't return any data The code editor does not get closed when clicked anywhere outside the editor Added CLI commands to export and import credentials and workflows The title in the browser tab now resets for new workflows","title":"n8n@0.103.0"},{"location":"reference/release-notes/#n8n01020","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-01-15 New nodes Beeminder Enhanced nodes Crypto: Added hash type SHA384 Google Books: Added support for user impersonification Google Drive: Added support for user impersonification Google Sheets: Added support for user impersonification Gmail: Added support for user impersonification Microsoft Outlook: Added support for a shared mailbox RabbitMQ: Added Exchange mode Salesforce: Added filters to all Get All operations Slack: Made changes to the properties As User and Ephemeral . For more details, check out the entry in the breaking changes page Typeform Trigger: The node now displays the recall information in the question in square brackets. For more details, check out the entry in the breaking changes page Zendesk: Removed the Authorization URL and Access Token URL fields from the OAuth2 credentials. The node now uses the subdomain passed by a user to connect to Zendesk. Bug fixes CoinGecko: Fixed an issue to process multiple input items correctly","title":"n8n@0.102.0"},{"location":"reference/release-notes/#n8n01010","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2021-01-07 New nodes Google Analytics Phantombuster Enhanced nodes AWS: Added support for custom endpoints Gmail: Added an option to send messages formatted as HTML Philips Hue: Added Room/Group name to Light name to make it easier to identify lights Slack: Added ephemeral message option Telegram: Removed the Bot resource as the endpoint is no longer supported Bug fixes E-goi: Fixed the name of the node Edit Image: Fixed an issue with the Border operation HTTP Request: Fixed batch sizing to work when batchSize = 1 PayPal: Fixed a typo in the Environment field Split In Batches: Fixed a typo in the description Telegram: Fixed an issue with the Send Audio operation Based on your settings, vacuum runs on SQLite on startup Updated axios to version 0.21.1","title":"n8n@0.101.0"},{"location":"reference/release-notes/#n8n01000","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2020-12-30 New nodes Microsoft Outlook Enhanced nodes ActiveCampaign: The node loads more options for the fields Asana: Added Subtask resource and Get All operation for the Task resource Edit Image: Added Multi Step operation HTTP Request: Added Use Querystring option IF: Added Ends With and Starts With operations Jira: Added Issue Comment resource Switch: Added Ends With and Starts With operations Telegram: Added File resource Bug fixes Box Trigger: Fixed a typo in the description Edit Image: Fixed an issue with multiple composite operations HTTP Request: Fixed an issue with the binary data getting used by multiple nodes S3: Fixed an issue with uploading files Stripe Trigger: Fixed an issue with the existing webhooks Telegram: Fixed an issue with the Send Audio operation Binary data stays visible if a node gets re-executed","title":"n8n@0.100.0"},{"location":"reference/release-notes/#n8n0991","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2020-12-24 Fixed a bug that caused HTML to render in JSON view","title":"n8n@0.99.1"},{"location":"reference/release-notes/#n8n0990","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2020-12-24 New nodes e-goi RabbitMQ RabbitMQ Trigger uProc Enhanced nodes ActiveCampaign: Added the functionality to load the tags for a user FTP: Added Delete and Rename operation Google Cloud Firestore: The node now gives the Collection ID in response Iterable: Added User List resource MessageBird: Added Balance resource TheHive Trigger: Added support for the TheHive3 webhook events, and added Log Updated and Log Deleted events Bug fixes Dropbox: Fixed an issue with the OAuth credentials Google Sheets: Fixed an issue with the parameters getting hidden for other operations Added functionality to easily copy the data and the path from the output Fixed an issue with the node getting selected after it was duplicated","title":"n8n@0.99.0"},{"location":"reference/release-notes/#n8n0980","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2020-12-16 New nodes Brandfetch Pushcut Pushcut Trigger Enhanced nodes Google Sheets: Added Spreadsheet resource IF: Added Is Empty option Slack: Added Reaction and User resource, and Member operation to the Channel resource Spreadsheet File: Added the option Include Empty Cell to display empty cells Webhook: Added option to send a custom response body. The node can now also return string data Bug fixes GitLab: Fixed an issue with GitLab OAuth credentials. You can now specify your GitLab server to configure the credentials Mautic: Fixed an issue with the OAuth credentials If a workflow is using the Error Trigger node, by default, the workflow will use itself as the Error Workflow Fixed a bug that caused the Editor UI to display an incorrect (save) state upon activating or deactivating a workflow","title":"n8n@0.98.0"},{"location":"reference/release-notes/#n8n0970","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2020-12-10 New nodes Ghost Nasa Snowflake Twist Enhanced nodes Automizy: Added options to add and remove tabs for the Update operation of the Contact resource Pipedrive: Added label field to Person, Organization, and Deal resources. Also added Update operation for the Organization resource Bug fixes Fixed a bug that caused OAuth1 requests to break Fixed Docker user mount path","title":"n8n@0.97.0"},{"location":"reference/release-notes/#n8n0960","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2020-12-03 New nodes Cortex Iterable Kafka Trigger TheHive TheHive Trigger Yourls Enhanced nodes Hubspot: Added Contact List resource and Search operation for the Deal resource Google Calendar: You can now add multiple attendees in the Attendees field Slack: The node now loads both private and public channels Bug Fixes MQTT: Fixed an issue with the connection. The node now uses mqtt@4.2.1 Fixed a bug which caused the Trigger-Nodes to require data from the first output Added configuration to load only specific nodes","title":"n8n@0.96.0"},{"location":"reference/release-notes/#n8n0951","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2020-11-25 Bug Fixes Airtable Trigger: Fixed the icon of the node","title":"n8n@0.95.1"},{"location":"reference/release-notes/#n8n0950","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2020-11-25 New nodes Airtable Trigger LingvaNex OpenThesaurus ProfitWell Quick Base Spontit Enhanced nodes Airable: The Application ID field has been renamed to Base ID, and the Table ID field has been renamed to Table. The List operation now downloads attachments automatically Harvest: Moved the account field from the credentials to the node parameters. For more details, check out the entry in the breaking changes page Bug Fixes Slack: Fixed an issue with creating channels and inviting users to a channel","title":"n8n@0.95.0"},{"location":"reference/release-notes/#n8n0941","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2020-11-20 Bug Fixes GraphQL: Fixed an issue with the variables WooCommerce Trigger: Fixed an issue with the webhook. The node now reuses a webhook if it already exists.","title":"n8n@0.94.1"},{"location":"reference/release-notes/#n8n0940","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2020-11-19 New nodes Google Cloud Natural Language Google Firebase Cloud Firestore Google Firebase Realtime Database Humantic AI Enhanced nodes ActiveCampaign: Added Contact List and List resource Edit Image: Added support for drawing, font selection, creating a new image, and added the Composite resource FTP: Added Private Key and Passphrase fields to the SFTP credentials and made the directory creation more robust IMAP: Increased the timeout Matrix: Added option to send notice, emote, and HTML messages Segment: Made changes to the properties traits and properties . For more details, check out the entry in the breaking changes page Bug Fixes GraphQL: Fixed an issue with the variables Mailchimp: Fixed an issue with the OAuth credentials. The credentials are now sent with the body instead of the header YouTube: Fixed a typo for the Unlisted option Added horizontal scrolling","title":"n8n@0.94.0"},{"location":"reference/release-notes/#n8n0930","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2020-11-11 New nodes GetResponse Gotify Line Strapi Enhanced nodes AMQP: Connection is now closed after a message is sent AMQP Trigger: Added Message per Cycle option to retrieve the specified number of messages from the bus for every cycle Hubspot: Added Custom Properties for the Deal resource as Additional Fields Jira: The node retrieves all the projects for the Project field instead of just 50 Mattermost: Improved the channel selection Microsoft SQL: Added TLS parameter for the credentials Pipedrive Trigger: Added OAuth authentication method. For more details, check out the entry in the breaking changes page Segment: Added Custom Traits option for the Traits field Bug Fixes Shopify Trigger: Fixed an issue with activating the workflow For custom nodes, you can now set custom documentation URLs","title":"n8n@0.93.0"},{"location":"reference/release-notes/#n8n0920","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2020-11-04 New nodes Facebook Trigger Google Books Orbit Storyblok Enhanced nodes Google Drive: Removed duplicate parameters Twitter: Added Direct Message resource Bug Fixes Gmail: Fixed an issue with the encoding for the subject field Improved the Editor UI for the save workflow functionality","title":"n8n@0.92.0"},{"location":"reference/release-notes/#n8n0910","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2020-10-23 New nodes Kafka MailerLite MailerLite Trigger Pushbullet Enhanced nodes Airtable: Added Ignore Fields option for the Update operation AMQP Sender: Added Azure Service Bus support Google Calendar: Added Calendar resource and an option to add a conference link G Suite Admin: Added Group resource HTTP Request: Added Batch Size and Batch Interval option Mautic: Added Company resource Salesforce: Added OAuth 2.0 JWT authentication method Bug Fixes IF: Fixed an issue with undefined expression Paddle: Fixed an issue with the Return All parameter Switch: Fixed an issue with undefined expression Added CLI commands to deactivate the workflow Added an option to get the full execution data from the server The Editor UI gives an alert if you redirect without saving a workflow The Editor UI now indicates if a workflow is saved or not Improved support for touch devices Node properties now load on demand Updated the Node.js version for the Docker images","title":"n8n@0.91.0"},{"location":"reference/release-notes/#n8n0900","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2020-10-23 Added a check for the Node.js version on startup. For more details, check out the entry in the breaking changes page Bug Fixes Google Translate: Fixed an issue with the rendering of the image in n8n.io","title":"n8n@0.90.0"},{"location":"reference/release-notes/#n8n0892","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2020-10-22 Bug Fixes Strava Trigger: Fixed a typo in the node name","title":"n8n@0.89.2"},{"location":"reference/release-notes/#n8n0891","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2020-10-22 Removed debug messages","title":"n8n@0.89.1"},{"location":"reference/release-notes/#n8n0890","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2020-10-22 New Nodes Pushover Strava Strava Trigger Google Translate Bug Fixes HTTP Request: Fixed an issue with the POST request method for the 'File' response format Fixed issue with displaying non-active workflows as active Fixed an issue related to multiple-webhooks","title":"n8n@0.89.0"},{"location":"reference/release-notes/#n8n0881","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2020-10-16 Bug Fixes HTTP Request: Fixed an issue with the Form-Data Mutipart and the RAW/Custom Body Content Types","title":"n8n@0.88.1"},{"location":"reference/release-notes/#n8n0880","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2020-10-16 Enhanced Fixes Matrix: Added support for specifying a Matrix Homeserver URL Salesforce: Added Custom Object resource and Custom Fields and Sort options Bug Fixes AWS SES: Fixed an issue with the Send Template operation for the Email resource AWS SNS Trigger: Fixed an issue with the Subscriptions topic","title":"n8n@0.88.0"},{"location":"reference/release-notes/#n8n0872","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2020-10-15 Bug Fixes Google Sheets: Fixed an issue with spaces in sheet names Automizy: Fixed an issue with the default resource","title":"n8n@0.87.2"},{"location":"reference/release-notes/#n8n0871","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2020-10-15 Bug Fixes Gmail: Fixed an issue with the Message ID HTTP Request: Fixed an issue with the GET Request Added HMAC-SHA512 signature method for OAuth 1.0","title":"n8n@0.87.1"},{"location":"reference/release-notes/#n8n0870","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2020-10-14 New nodes Automizy AWS Rekognition Matrix Sendy Vonage Wekan Enhanced nodes AWS SES: Added Send Template operation for the Email resource and added the Template resource ClickUp: Added Time Entry and Time Entry Tag resources Function: The Function field is now called the JavaScript Code field Mailchimp: Added Campaign resource Mindee: Added currency to the simplified response OneDrive: Added Share operation OpenWeatherMap: Added Language parameter Pipedrive: Added additional parameters to the Get All operation for the Note resource Salesforce: Added Flow resource Spreadsheet File: Added Range option for the Read from file operation Bug Fixes ClickUp Trigger: Fixed issue with creating credentials Pipedrive Trigger: Fixed issue with adding multiple webhooks to Pipedrive The link.fish Scrape node has been removed from n8n. For more details, check out the entry in the breaking changes page","title":"n8n@0.87.0"},{"location":"reference/release-notes/#n8n0861","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2020-10-06 Enhanced nodes CoinGecko: Small fixes to the CoinGecko node","title":"n8n@0.86.1"},{"location":"reference/release-notes/#n8n0860","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2020-10-05 New nodes Clockify CoinGecko G Suite Admin Mindee Wufoo Trigger Enhanced nodes Slack: Added User Profile resource Mattermost: Added Create and Invite operations for the User resource Bug Fixes S3: Fixed issue with uploading files Webhook ID gets refreshed on node duplication","title":"n8n@0.86.0"},{"location":"reference/release-notes/#n8n0850","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2020-09-30 Enhanced nodes Postgres: Added Schema parameter for the Update operation Bug Fixes Jira: Fixed a bug with the Issue Type field Pipedrive Trigger: Fixed issues with the credentials Changed the bcrypt library to bcrypt.js to make it compatible with Windows The OAuth callback URLs are now generated in the backend","title":"n8n@0.85.0"},{"location":"reference/release-notes/#n8n0844","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2020-09-23 Bug Fixes Google Sheets: Fixed issues with the update and append operations","title":"n8n@0.84.4"},{"location":"reference/release-notes/#n8n0843","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2020-09-23 Fixed an issue with the build by setting jwks-rsa to an older version","title":"n8n@0.84.3"},{"location":"reference/release-notes/#n8n0842","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2020-09-23 Fixed an issue with the OAuth window. The OAuth window now closes after authentication is complete","title":"n8n@0.84.2"},{"location":"reference/release-notes/#n8n0841","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2020-09-23 Additional endpoints can be excluded from authentication checks. Multiple endpoints can be added separated by colons","title":"n8n@0.84.1"},{"location":"reference/release-notes/#n8n0840","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2020-09-23 Enhanced nodes Twitter: Added support for auto mention of users in reply tweets Bug Fixes Google Sheets: Fixed issue with non-Latin sheet names HubSpot: Fixed naming of credentials Microsoft: Fixed naming of credentials Mandrill: Fixed attachments with JSON parameters Expressions now use short variables when selecting input data for the current node Fixed issue with renaming credentials for active workflows","title":"n8n@0.84.0"},{"location":"reference/release-notes/#n8n0830","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2020-09-18 New nodes LinkedIn Taiga Taiga Trigger Enhanced nodes ActiveCampaign: Added multiple functions, read more here Airtable: Added typecast functionality Asana: Added OAuth2 support ClickUp: Added OAuth2 support Google Drive: Added share operation IMAP Email: Added support for custom rules when checking emails Sentry.io: Added support for self-hosted version Twitter: Added retweet, reply, and like operations WordPress: Added author field to the post resource Bug Fixes Asana Trigger: Webhook validation has been deactivated Paddle: Fixed returnData format and coupon description The ActiveCampaign node has breaking changes Fixed issues with test-webhook registration","title":"n8n@0.83.0"},{"location":"reference/release-notes/#n8n0821","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2020-09-14 Speed for basic authentication with hashed password has been improved","title":"n8n@0.82.1"},{"location":"reference/release-notes/#n8n0820","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2020-09-14 New nodes Microsoft Teams Enhanced nodes Freshdesk: Added Freshdesk contact resource HTTP Request: Run parallel requests in HTTP Request Node Bug Fixes Philips Hue: Added APP ID to Philips Hue node credentials Postmark Trigger: Fixed parameters for the node The default space between nodes has been increased to two units Expression support has been added to the credentials Passwords for your n8n instance can now be hashed","title":"n8n@0.82.0"},{"location":"reference/release-notes/#n8n0810","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2020-09-09 New nodes Sentry.io Enhanced nodes Asana ClickUp Clockify Google Contacts Salesforce Segment Telegram Telegram Trigger","title":"n8n@0.81.0"},{"location":"reference/release-notes/#n8n0800","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2020-09-02 New nodes Customer.io MQTT Trigger S3 Enhanced nodes Acuity Scheduling AWS S3 ClickUp FTP Telegram Trigger Zendesk","title":"n8n@0.80.0"},{"location":"reference/release-notes/#n8n0793","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2020-08-30 The bug that caused the workflows to not get activated correctly has been fixed","title":"n8n@0.79.3"},{"location":"reference/release-notes/#n8n0792","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2020-08-28 Added missing rawBody for \"application/x-www-form-urlencoded\"","title":"n8n@0.79.2"},{"location":"reference/release-notes/#n8n0791","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2020-08-28 Enhanced nodes Contentful HTTP Request Postgres Webhook Removed Test-Webhook also in case checkExists fails HTTP Request node does not overwrite accept header if it's already set Add rawBody to every request so that n8n does not give an error if body is missing","title":"n8n@0.79.1"},{"location":"reference/release-notes/#n8n0790","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2020-08-27 New nodes Contentful Convertkit Convertkit Trigger Paddle Enhanced nodes Airtable Coda Gmail HubSpot IMAP Email Postgres Salesforce SIGNL4 Todoist Trello YouTube The Todoist node has breaking changes Added dynamic titles on workflow execution Nodes will now display a link to associated credential documentation","title":"n8n@0.79.0"},{"location":"reference/release-notes/#n8n0780","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2020-08-18 New nodes Gmail Google Contacts Unleashed Software YouTube Enhanced nodes AMQP AMQP Trigger Bitly Function Item Google Sheets Shopify Todoist Enhanced support for JWT based authentication Added an option to execute a node once, using data of only the first item","title":"n8n@0.78.0"},{"location":"reference/release-notes/#n8n0760","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2020-08-05 New nodes Customer.io Trigger FTP Medium Philips Hue TravisCI Twake Enhanced nodes CrateDB Move Binary Data Nodes will now display a link to associated documentation","title":"n8n@0.76.0"},{"location":"reference/release-notes/#n8n0750","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2020-07-26 New nodes Box Box Trigger CrateDB Jira Trigger Enhanced nodes GitLab NextCloud Pipedrive QuestDB Webhooks now support OPTIONS request","title":"n8n@0.75.0"},{"location":"reference/release-notes/#n8n0740","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2020-07-15 New nodes Hacker News QuestDB Xero Enhanced nodes Affinity Trigger HTTP Request Mailchimp MongoDB Pipedrive Postgres Uplead Webhook Webhook URLs are now handled independently of the workflow ID by https://{hostname}/webhook/{path} instead of the older https://{hostname}/webhook/{workflow_id}/{node_name}/{path} .","title":"n8n@0.74.0"},{"location":"reference/release-notes/#n8n0731","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2020-07-08 Enhanced nodes Microsoft SQL","title":"n8n@0.73.1"},{"location":"reference/release-notes/#n8n0730","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2020-07-08 New nodes CircleCI Microsoft SQL Zoom Enhanced nodes Postmark Trigger Salesforce It is now possible to set default values for credentials that get prefilled, and the user cannot change.","title":"n8n@0.73.0"},{"location":"reference/release-notes/#n8n0720","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2020-07-02 Enhanced nodes Drift Eventbrite Trigger Facebook Graph API Pipedrive Fixed credential issue for the Execute Workflow node","title":"n8n@0.72.0"},{"location":"reference/release-notes/#n8n0710","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2020-06-25 New nodes Google Tasks SIGNL4 Spotify Enhanced nodes Hubspot Mailchimp Typeform Webflow Zendesk Added Postgres SSL support It is now possible to deploy n8n under a subfolder","title":"n8n@0.71.0"},{"location":"reference/release-notes/#n8n0700","text":"For a comprehensive list of changes, check out the commits for this version. Release date: 2020-06-13 Enhanced nodes GitHub Mautic Trigger Monday.com MongoDB Fixed the issue with multiuser-setup","title":"n8n@0.70.0"},{"location":"workflows/","text":"Overview # Learn about the key components of an automation in n8n: Workflows Connections Nodes Items","title":"Overview"},{"location":"workflows/#overview","text":"Learn about the key components of an automation in n8n: Workflows Connections Nodes Items","title":"Overview"},{"location":"workflows/connections/","text":"Connection # A connection establishes a link between nodes to route data through the workflow. A connection between two nodes passes data from one node's output to another node's input. Each node can have one or multiple connections. To create a connection between two nodes, click on the grey dot on the right side of the node and slide the arrow to the grey rectangle on the left side of the following node. Example # An IF node has two connections to different nodes: one for when the statement is true and one for when the statement is false.","title":"Connections"},{"location":"workflows/connections/#connection","text":"A connection establishes a link between nodes to route data through the workflow. A connection between two nodes passes data from one node's output to another node's input. Each node can have one or multiple connections. To create a connection between two nodes, click on the grey dot on the right side of the node and slide the arrow to the grey rectangle on the left side of the following node.","title":"Connection"},{"location":"workflows/connections/#example","text":"An IF node has two connections to different nodes: one for when the statement is true and one for when the statement is false.","title":"Example"},{"location":"workflows/items/","text":"Items # Data sent from one node to another is sent as an array of JSON objects. Each element in this collection is called an Item . A node performs its action on each item of incoming data. Nodes do not only process one \"item\", they process multiple ones. For example, if the Trello node is set to Create-Card and it has an expression set for Name to be set depending on name property, it will create a card for each item, always choosing the name-property-value of the current one. This data would, for example, create two cards. One named test1 the other one named test2 : 1 2 3 4 5 6 7 8 [ { na me : \"test1\" }, { na me : \"test2\" } ]","title":"Items"},{"location":"workflows/items/#items","text":"Data sent from one node to another is sent as an array of JSON objects. Each element in this collection is called an Item . A node performs its action on each item of incoming data. Nodes do not only process one \"item\", they process multiple ones. For example, if the Trello node is set to Create-Card and it has an expression set for Name to be set depending on name property, it will create a card for each item, always choosing the name-property-value of the current one. This data would, for example, create two cards. One named test1 the other one named test2 : 1 2 3 4 5 6 7 8 [ { na me : \"test1\" }, { na me : \"test2\" } ]","title":"Items"},{"location":"workflows/nodes/","text":"Node # A node is an entry point for retrieving data, a function to process data, or an exit for sending data. The data process performed by nodes can include filtering, recomposing, and changing data. There may be one or several nodes for your API, service, or app. By connecting multiple nodes, you can create simple and complex workflows. When you add a node to the Editor UI, the node is automatically activated and requires you to configure it (by adding credentials, selecting operations, writing expressions, etc.). There are three types of nodes: Core Nodes Regular Nodes Trigger Nodes Core nodes # Core nodes are functions or services that can be used to control how workflows are run or to provide generic API support. Use the Start node when you want to manually trigger the workflow with the Execute Workflow button at the bottom of the Editor UI. This way of starting the workflow is useful when creating and testing new workflows. If an application you need does not have a dedicated Node yet, you can access the data by using the HTTP Request node or the Webhook node . You can also read about creating nodes and make a node for your desired application. Regular nodes # Regular nodes perform an action, like fetching data or creating an entry in a calendar. Regular nodes are named for the application they represent and are listed under Regular Nodes in the Editor UI. Example # A Google Sheets node can be used to retrieve or write data to a Google Sheet. Trigger nodes # Trigger nodes start workflows and supply the initial data. Trigger nodes can be app or core nodes. Core Trigger nodes start the workflow at a specific time, at a time interval, or on a webhook call. For example, to get all users from a Postgres database every 10 minutes, use the Interval Trigger node with the Postgres node. App Trigger nodes start the workflow when an event happens in an app. App Trigger nodes are named like the application they represent followed by \"Trigger\" and are listed under Trigger Nodes in the Editor. For example, a Telegram trigger node can be used to trigger a workflow when a message is sent in a Telegram chat. Node settings # Nodes come with global operations and settings , as well as app-specific parameters that can be configured. Operations # The node operations are illustrated with icons that appear on top of the node when you hover on it: * Delete : Remove the selected node from the workflow * Pause : Deactivate the selected node * Copy : Duplicate the selected node * Play : Run the selected node To access the node parameters and settings, double-click on the node. Parameters # The node parameters allow you to define the operations the node should perform. Find the available parameters of each node in the node reference . Settings # The node settings allow you to configure the look and execution of the node. The following options are available: Notes : Optional note to save with the node Display note in flow : If active, the note above will be displayed in the workflow as a subtitle Always Output Data : If active, the node will return an empty item even if the node returns no data during an initial execution. Be careful setting this on IF nodes, as it could cause an infinite loop. Execute Once : If active, the node executes only once, with data from the first item it receives. Retry On Fail : If active, the node tries to execute a failed attempt multiple times until it succeeds Continue On Fail : If active, the workflow continues even if the execution of the node fails. When this happens, the node passes along input data from previous nodes, so the workflow should account for unexpected output data. If a node is not correctly configured or is missing some required information, a warning sign is displayed on the top right corner of the node. To see what parameters are incorrect, double-click on the node and have a look at fields marked with red and the error message displayed in the respective warning symbol. Pausing nodes # Sometimes when creating and debugging a workflow, it is helpful to not execute specific nodes. To do that without disconnecting each node, you can pause them. When a node gets paused, the data passes through the node without being changed. There are two ways to pause a node. You can either press the pause button which gets displayed above the node when hovering over it or select the node and press \"d\".","title":"Nodes"},{"location":"workflows/nodes/#node","text":"A node is an entry point for retrieving data, a function to process data, or an exit for sending data. The data process performed by nodes can include filtering, recomposing, and changing data. There may be one or several nodes for your API, service, or app. By connecting multiple nodes, you can create simple and complex workflows. When you add a node to the Editor UI, the node is automatically activated and requires you to configure it (by adding credentials, selecting operations, writing expressions, etc.). There are three types of nodes: Core Nodes Regular Nodes Trigger Nodes","title":"Node"},{"location":"workflows/nodes/#core-nodes","text":"Core nodes are functions or services that can be used to control how workflows are run or to provide generic API support. Use the Start node when you want to manually trigger the workflow with the Execute Workflow button at the bottom of the Editor UI. This way of starting the workflow is useful when creating and testing new workflows. If an application you need does not have a dedicated Node yet, you can access the data by using the HTTP Request node or the Webhook node . You can also read about creating nodes and make a node for your desired application.","title":"Core nodes"},{"location":"workflows/nodes/#regular-nodes","text":"Regular nodes perform an action, like fetching data or creating an entry in a calendar. Regular nodes are named for the application they represent and are listed under Regular Nodes in the Editor UI.","title":"Regular nodes"},{"location":"workflows/nodes/#example","text":"A Google Sheets node can be used to retrieve or write data to a Google Sheet.","title":"Example"},{"location":"workflows/nodes/#trigger-nodes","text":"Trigger nodes start workflows and supply the initial data. Trigger nodes can be app or core nodes. Core Trigger nodes start the workflow at a specific time, at a time interval, or on a webhook call. For example, to get all users from a Postgres database every 10 minutes, use the Interval Trigger node with the Postgres node. App Trigger nodes start the workflow when an event happens in an app. App Trigger nodes are named like the application they represent followed by \"Trigger\" and are listed under Trigger Nodes in the Editor. For example, a Telegram trigger node can be used to trigger a workflow when a message is sent in a Telegram chat.","title":"Trigger nodes"},{"location":"workflows/nodes/#node-settings","text":"Nodes come with global operations and settings , as well as app-specific parameters that can be configured.","title":"Node settings"},{"location":"workflows/nodes/#operations","text":"The node operations are illustrated with icons that appear on top of the node when you hover on it: * Delete : Remove the selected node from the workflow * Pause : Deactivate the selected node * Copy : Duplicate the selected node * Play : Run the selected node To access the node parameters and settings, double-click on the node.","title":"Operations"},{"location":"workflows/nodes/#parameters","text":"The node parameters allow you to define the operations the node should perform. Find the available parameters of each node in the node reference .","title":"Parameters"},{"location":"workflows/nodes/#settings","text":"The node settings allow you to configure the look and execution of the node. The following options are available: Notes : Optional note to save with the node Display note in flow : If active, the note above will be displayed in the workflow as a subtitle Always Output Data : If active, the node will return an empty item even if the node returns no data during an initial execution. Be careful setting this on IF nodes, as it could cause an infinite loop. Execute Once : If active, the node executes only once, with data from the first item it receives. Retry On Fail : If active, the node tries to execute a failed attempt multiple times until it succeeds Continue On Fail : If active, the workflow continues even if the execution of the node fails. When this happens, the node passes along input data from previous nodes, so the workflow should account for unexpected output data. If a node is not correctly configured or is missing some required information, a warning sign is displayed on the top right corner of the node. To see what parameters are incorrect, double-click on the node and have a look at fields marked with red and the error message displayed in the respective warning symbol.","title":"Settings"},{"location":"workflows/nodes/#pausing-nodes","text":"Sometimes when creating and debugging a workflow, it is helpful to not execute specific nodes. To do that without disconnecting each node, you can pause them. When a node gets paused, the data passes through the node without being changed. There are two ways to pause a node. You can either press the pause button which gets displayed above the node when hovering over it or select the node and press \"d\".","title":"Pausing nodes"},{"location":"workflows/workflow-notes/","text":"Workflow notes # Workflow notes allow you to annotate and comment on your workflows. We encourage using workflow notes heavily, especially on template workflows, to help other users understand your workflow. Create a note # Workflow notes are a type of core node. To add a new note: Open the nodes panel. Search for note . Click the Note node. n8n adds a new note to the canvas. Edit a note # Double click the note you want to edit. Write your note. This guide explains how to format your text with Markdown. n8n uses markdown-it , which implements the CommonMark specification. Click away from the note, or press Esc , to stop editing. Note positioning # You can: Drag a note anywhere on the canvas. Drag notes behind nodes. You can use this to visually group nodes. Resize notes by hovering over the edge of the note and dragging to resize.","title":"Workflow notes"},{"location":"workflows/workflow-notes/#workflow-notes","text":"Workflow notes allow you to annotate and comment on your workflows. We encourage using workflow notes heavily, especially on template workflows, to help other users understand your workflow.","title":"Workflow notes"},{"location":"workflows/workflow-notes/#create-a-note","text":"Workflow notes are a type of core node. To add a new note: Open the nodes panel. Search for note . Click the Note node. n8n adds a new note to the canvas.","title":"Create a note"},{"location":"workflows/workflow-notes/#edit-a-note","text":"Double click the note you want to edit. Write your note. This guide explains how to format your text with Markdown. n8n uses markdown-it , which implements the CommonMark specification. Click away from the note, or press Esc , to stop editing.","title":"Edit a note"},{"location":"workflows/workflow-notes/#note-positioning","text":"You can: Drag a note anywhere on the canvas. Drag notes behind nodes. You can use this to visually group nodes. Resize notes by hovering over the edge of the note and dragging to resize.","title":"Note positioning"},{"location":"workflows/workflows/","text":"Workflow # A workflow is a collection of nodes connected together to automate a process. A workflow can be started manually (with the Start node) or by Trigger nodes. When a workflow is started, it executes all the active and connected nodes. The workflow execution ends when all the nodes have processed their data. You can view your workflow executions in the Execution log , which can be helpful for debugging. Activating a workflow # Workflows that start with a Trigger node or a Webhook node need to be activated in order to be executed. This is done via the Active toggle in the Editor UI. Active workflows enable the Trigger and Webhook nodes to receive data whenever a condition is met (e.g., Monday at 10:00, an update in a Trello board) and in turn trigger the workflow execution. All the newly created workflows are deactivated by default. Sharing a workflow # Workflows are saved in JSON format. You can export your workflows as JSON files or import JSON files into your n8n library. Feel free to share your workflows on the n8n page and contribute to the workflow library. You can export a workflow as a JSON file in two ways: Download : Click the Download button under the Workflow menu in the sidebar. This will download the workflow as a JSON file. Copy-Paste : Select all the workflow nodes in the Editor UI, copy them ( Ctrl + c or cmd +c ), then paste them ( Ctrl + v or cmd + v ) in your desired file. To select all nodes, or a group of nodes, click and drag: You can import JSON files as workflows in two ways: Import : Click Import from File or Import from URL under the Workflow menu in the sidebar and select the JSON file or paste the link to a workflow. Copy-Paste : Copy the JSON workflow to the clipboard ( Ctrl + c or cmd +c ) and paste it ( Ctrl + v or cmd + v ) into the Editor UI. Workflow settings # On each workflow, it is possible to set some custom settings and overwrite some of the global default settings from the Workflow > Settings menu. The following settings are available: Error Workflow : Select a workflow to trigger if the current workflow fails. See Error Workflow for more details. Timezone : Sets the timezone to be used in the workflow. The default timezone is EDT (New York). The Timezone setting is particularly important for the Cron Trigger node. Save Data Error Execution : If the execution data of the workflow should be saved when the workflow fails. Save Data Success Execution : If the execution data of the workflow should be saved when the workflow succeeds. Save Manual Executions : If executions started from the Editor UI should be saved. Save Execution Progress : If the execution data of each node should be saved. If set to \"Yes\", the workflow resumes from where it stopped in case of an error. However, this might increase latency. Timeout Workflow : Toggle to enable setting a duration after which the current workflow execution should be cancelled. Timeout After : Only available when Timeout Workflow is enabled. Set the time in hours, minutes, and seconds after which the workflow should timeout. For n8n.cloud users a maximum available timeout is enforced for each plan (e.g. 3 minutes for Start level). Failed workflows # If your workflow execution fails, you can retry the execution. To retry a failed workflow: Open the Executions list from the sidebar. For the workflow execution you want to retry, click on the refresh icon under the Status column. Select either of the following options to retry the execution: Retry with currently saved workflow : Once you make changes to your workflow, you can select this option to execute the workflow with the previous execution data. Retry with original workflow : If you want to retry the execution without making changes to your workflow, you can select this option to retry the execution with the previous execution data. You can also use the Error Trigger node , which triggers a workflow when another workflow has an error. Once a workflow fails, this node gets details about the failed workflow and the errors. Workflow templates # When creating a new workflow, you can choose whether to start with an empty workflow, or use an existing template. Templates provide: A way to get started quickly: we might already have a template that does what you need. Examples of what you can build Best practices for creating your own workflows Use a workflow template # In the sidebar, click Templates . Browse or search the workflow templates list. Click a workflow to view more information. n8n opens the workflow details page. On the workflow details page, click Use this workflow . n8n opens the workflow. Click Save to add the workflow to your workflows. Workflow templates are available in 0.165.0 and above Workflow templates are available on all flavors of n8n. If you can't access workflow templates in n8n, check that your n8n version is 0.165.0 or above, and check whether you are using a self-hosted or embedded version of n8n with templates disabled. Add your workflow to the library # You can submit your own workflows to n8n's template library. In n8n, download your workflow JSON: Open the workflow Click Workflows > Download . Log in to your n8n dashboard. Click Share New Workflow . Enter your workflow details: Name : this should be descriptive but simple. It will appear on the website and in app. Description : tell users what the workflow does. Include any configuration or setup steps. Workflow code : copy in the workflow JSON that you downloaded. Click Publish Workflow to Share . n8n reviews all workflows before publishing them.","title":"Workflows"},{"location":"workflows/workflows/#workflow","text":"A workflow is a collection of nodes connected together to automate a process. A workflow can be started manually (with the Start node) or by Trigger nodes. When a workflow is started, it executes all the active and connected nodes. The workflow execution ends when all the nodes have processed their data. You can view your workflow executions in the Execution log , which can be helpful for debugging.","title":"Workflow"},{"location":"workflows/workflows/#activating-a-workflow","text":"Workflows that start with a Trigger node or a Webhook node need to be activated in order to be executed. This is done via the Active toggle in the Editor UI. Active workflows enable the Trigger and Webhook nodes to receive data whenever a condition is met (e.g., Monday at 10:00, an update in a Trello board) and in turn trigger the workflow execution. All the newly created workflows are deactivated by default.","title":"Activating a workflow"},{"location":"workflows/workflows/#sharing-a-workflow","text":"Workflows are saved in JSON format. You can export your workflows as JSON files or import JSON files into your n8n library. Feel free to share your workflows on the n8n page and contribute to the workflow library. You can export a workflow as a JSON file in two ways: Download : Click the Download button under the Workflow menu in the sidebar. This will download the workflow as a JSON file. Copy-Paste : Select all the workflow nodes in the Editor UI, copy them ( Ctrl + c or cmd +c ), then paste them ( Ctrl + v or cmd + v ) in your desired file. To select all nodes, or a group of nodes, click and drag: You can import JSON files as workflows in two ways: Import : Click Import from File or Import from URL under the Workflow menu in the sidebar and select the JSON file or paste the link to a workflow. Copy-Paste : Copy the JSON workflow to the clipboard ( Ctrl + c or cmd +c ) and paste it ( Ctrl + v or cmd + v ) into the Editor UI.","title":"Sharing a workflow"},{"location":"workflows/workflows/#workflow-settings","text":"On each workflow, it is possible to set some custom settings and overwrite some of the global default settings from the Workflow > Settings menu. The following settings are available: Error Workflow : Select a workflow to trigger if the current workflow fails. See Error Workflow for more details. Timezone : Sets the timezone to be used in the workflow. The default timezone is EDT (New York). The Timezone setting is particularly important for the Cron Trigger node. Save Data Error Execution : If the execution data of the workflow should be saved when the workflow fails. Save Data Success Execution : If the execution data of the workflow should be saved when the workflow succeeds. Save Manual Executions : If executions started from the Editor UI should be saved. Save Execution Progress : If the execution data of each node should be saved. If set to \"Yes\", the workflow resumes from where it stopped in case of an error. However, this might increase latency. Timeout Workflow : Toggle to enable setting a duration after which the current workflow execution should be cancelled. Timeout After : Only available when Timeout Workflow is enabled. Set the time in hours, minutes, and seconds after which the workflow should timeout. For n8n.cloud users a maximum available timeout is enforced for each plan (e.g. 3 minutes for Start level).","title":"Workflow settings"},{"location":"workflows/workflows/#failed-workflows","text":"If your workflow execution fails, you can retry the execution. To retry a failed workflow: Open the Executions list from the sidebar. For the workflow execution you want to retry, click on the refresh icon under the Status column. Select either of the following options to retry the execution: Retry with currently saved workflow : Once you make changes to your workflow, you can select this option to execute the workflow with the previous execution data. Retry with original workflow : If you want to retry the execution without making changes to your workflow, you can select this option to retry the execution with the previous execution data. You can also use the Error Trigger node , which triggers a workflow when another workflow has an error. Once a workflow fails, this node gets details about the failed workflow and the errors.","title":"Failed workflows"},{"location":"workflows/workflows/#workflow-templates","text":"When creating a new workflow, you can choose whether to start with an empty workflow, or use an existing template. Templates provide: A way to get started quickly: we might already have a template that does what you need. Examples of what you can build Best practices for creating your own workflows","title":"Workflow templates"},{"location":"workflows/workflows/#use-a-workflow-template","text":"In the sidebar, click Templates . Browse or search the workflow templates list. Click a workflow to view more information. n8n opens the workflow details page. On the workflow details page, click Use this workflow . n8n opens the workflow. Click Save to add the workflow to your workflows. Workflow templates are available in 0.165.0 and above Workflow templates are available on all flavors of n8n. If you can't access workflow templates in n8n, check that your n8n version is 0.165.0 or above, and check whether you are using a self-hosted or embedded version of n8n with templates disabled.","title":"Use a workflow template"},{"location":"workflows/workflows/#add-your-workflow-to-the-library","text":"You can submit your own workflows to n8n's template library. In n8n, download your workflow JSON: Open the workflow Click Workflows > Download . Log in to your n8n dashboard. Click Share New Workflow . Enter your workflow details: Name : this should be descriptive but simple. It will appear on the website and in app. Description : tell users what the workflow does. Include any configuration or setup steps. Workflow code : copy in the workflow JSON that you downloaded. Click Publish Workflow to Share . n8n reviews all workflows before publishing them.","title":"Add your workflow to the library"}]}